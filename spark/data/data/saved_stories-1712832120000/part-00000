{"aid": "39998441", "title": "Crystal 1.12.0 Is Released", "url": "https://crystal-lang.org/2024/04/09/1.12.0-released/", "domain": "crystal-lang.org", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-11 04:41:00", "comments": 0, "source_title": "Crystal 1.12.0 is released!", "source_text": "Crystal 1.12.0 is released! - The Crystal Programming Language\n\nSkip to content\n\nGitHub Repository Forum RSS-Newsfeed\n\n# Crystal 1.12.0 is released!\n\n09 Apr 2024\n\nJohannes M\u00fcller\n\nAPI Docs Changelog Source\n\nWe are announcing a new Crystal release with several new features and bug\nfixes.\n\nPre-built packages are available on GitHub Releases and our official\ndistribution channels. See crystal-lang.org/install for instructions.\n\n## Stats\n\nThis release includes 142 changes since 1.11.2 by 14 contributors. We thank\nall the contributors for all the effort put into improving the language! \u2764\ufe0f\n\n## Changes\n\nBelow we list the most remarkable changes in the language, compiler and\nstdlib. For more details, visit the full changelog.\n\n### Breaking\n\nRespect alignments above alignof(Void*) inside union values. This is an ABI\nbreaking change. Crystal makes no guarantees about ABI stability. Most users\nwon\u2019t be affected by this. (#14279)\n\nThanks @HertzDevil\n\n### Process termination handler\n\nProcess.on_terminate replaces Process.on_interrupt as a more potable and\nportable API for responding to termination requests (#13694). All current uses\nof on_interrupt can be replaced by on_terminate with the effect of responding\nto more termination triggers.\n\nMethod| Unix| Windows  \n---|---|---  \non_terminate| SIGINT, SIGHUP and SIGTERM| Ctrl + C, Ctrl + Break, terminal\nclose, windows logoff and shutdown signals sent to a console application.  \non_interrupt| SIGINT| Ctrl + C and Ctrl + Break signals sent to a console\napplication  \n  \nThis removes the need for adding platform-specific handlers in your code base\nto handle terminations that were previously not covered by on_interrupt.\n\nIn addition, on_terminate also passes an instance of Process::ExitReason to\nthe handler block, allowing it to react differently to specific termination\nevents.\n\n    \n    \n    Process.on_terminate do |reason| case reason when .interrupted? puts \"terminating gracefully\" when .terminal_disconnected? puts \"reloading configuration\" else puts \"terminating forcefully\" Process.exit(1) end end puts \"Waiting for termination\" sleep\n\nThanks @stakach\n\n### Concurrency\n\nThere are a couple minor improvements for concurrency which are foreshadowing\nmore significant changes for the upcoming multi-threaded runtime enhancement.\n\n  * Backtraces for unhandled exceptions in spawn are printed at once in multi-threading mode to avoid unreadable interleaving lines (#14220).\n  * When opening a File, it\u2019s now possible to disable blocking mode which is useful for pipes and character devices (#14255).\n  * Some issues with atomics and locks got fixed and Atomic operations now receive an optional parameter to define the strength of ordering guarantees as Atomic::Ordering. New macro Atomic.fence adds explicit memory barriers (#14293).\n  * Thread got a name property to identify the thread. It can be set at initialization or for the current thread with Thread.name= (#14257).\n  * Init schedulers before we spawn fibers (#14339).\n  * Use per-scheduler stack pools, helping recycling stacks (#14100).\n\nThanks @ysbaddaden\n\n  * Add memory barrier to Mutex#unlock on aarch64 (#14272).\n\nThanks @jgaskins\n\n### Libraries\n\nWe enabled support for OpenSSL 3.2 by fixing a bug in error handling for the\nOpenSSL 3.x series (#14219).\n\nThanks @ysbaddaden\n\nOur own LLVM extension library libllvm_ext is no longer required when linking\nLLVM >= 18 (#14357) because all APIs are now directly exposed in libllvm\ndirectly. The Makefile automatically skips building libllvm_ext.o on LLVM 18\nand above.\n\nThanks @HertzDevil\n\n### Numeric\n\n  * Add BigRational#%, #tdiv, #remainder (#14306).\n\nThanks @HertzDevil\n\n### Operators with = suffix\n\nOperators ending with = can now receive multiple parameters and blocks\n(#14159) and they are properly forwarded by the delegate macro (#14282). The\noperator #[]= can be called with with a block using method syntax: x.[]=() { }\n(#14161)\n\nThanks @HertzDevil\n\n### Windows progress\n\n  * Handle invalid parameter error in MSVC calls to prevent an immediate process exit (#14313)\n  * Install system dependencies in the Windows GUI installer (#14328)\n  * Automatically detect MSVC tools on Windows interpreter (#14391)\n  * Support @[Link]\u2019s DLL search order in the interpreter on Windows (#14146)\n  * Reserve stack space on non-main threads for crash recovery on Windows (#14187).\n  * FileUtils.mv works across filesystems on Windows (#14320).\n\nThanks @HertzDevil\n\n### Misc\n\n  * The time zone identifier Etc/UTC was added as an implicit alias to UTC and works without requiring a copy of the time zone database (#14185)\n\nThanks @femto\n\n  * Crystal::System::FileDescriptor::Handle is a generic alias to the platform-specific type representing a file descriptor (#14390)\n\nThanks @straight-shoota\n\n  * Hash#update (#14417) and Hash#put_if_absent (#14427) no longer put duplicate keys if the block inserts the key.\n\nThanks @HertzDevil\n\n  * New method Signal#trap_handler? returns any existing handler for the signal (#14126)\n\nThanks @stakach\n\n  * Added macro methods to several AST node types, lib & co (#14218), Primitive (#14263), TypeOf (#14262), Alias (#14261), Asm and AsmOperand (#14268).\n\nThanks @HertzDevil\n\n### Compiler\n\n  * Add CRYSTAL_CONFIG_CC compiler config variable. This bakes in a reference to a specific compiler which is useful for 3rd party package managers such as Homebrew so that the compiler picks up the appropriate library paths (#14318).\n\nThanks @straight-shoota\n\n  * Support for NO_COLOR (#14260), --static on Windows (#14292), --single-module and --threads for eval and spec (#14341)\n\nThanks @HertzDevil\n\n  * Preliminary support for Solaris/illumos has landed in the compiler and stdlib.\n\nThanks @HertzDevil\n\n  * New CLI option --frame-pointers to control preservation of frame pointers (#13860)\n\nThanks @refi64\n\n  * short_reference for top-level macros was changed to ::foo instead of top-level foo (#14203)\n\nThanks @femto\n\n### Compiler dependencies\n\nThe compiler\u2019s own dependencies are now managed with shards (#14365). The\nsource code in lib/ stays vendored in the repository, so shards is not\nrequired in order to build the compiler. It\u2019s only used for updating the\ndependencies in a much easier way than than with the previous approach based\non git subtree.\n\nThanks @straight-shoota\n\n### crystal tool flags\n\nThis release brings a new compiler tool: crystal tool flags (#14234). It\nprints all values passed to calls to macro flag? so you can extract all\ncompile time flags that a program recognizes.\n\nThanks @straight-shoota\n\n### Formatter enhancements\n\nImproved the formatter for ProcLiterals (#14209), asm with comments (#14278),\nwhite space in a.[b] syntax (#14346), calls without parentheses followed by\ndoc comment (#14354), whitespace in foo () (#14439).\n\nThanks @HertzDevil, @straight-shoota\n\n### Shards 0.18.0\n\nThe bundled shards release was updated to 0.18.0.\n\nThis new shards release brings a couple of enhancements for Windows support,\nparticularly support for more cache directories (#612), detection of symlink\ncreation capability (#617) and a lot more improvements on internal tooling.\nStarting with this release, shards\u2019 output by default is only colored if\nstdout is a TTY instead of always (#620).\n\nThanks @HertzDevil, @straight-shoota\n\n### Experimental: ReferenceStorage\n\nOriginally introduced in 1.11.0, the ReferenceStorage type was removed again\nin 1.11.1 due to compatibility issues with older versions of the standard\nlibrary (#14207).\n\nWe now have an improved implementation that shows no compatibility issues.\nReferenceStorage represents a static buffer for a reference allocation.\n\nThese APIs are still experimental and might be subject to change. We expect\nmore features in this direction in future releases. Join the discussion about\ncustom reference allocation at #13481.\n\nThanks @HertzDevil\n\n### Deprecations\n\n  * Setter methods for timeouts with Number parameter (#14372).\n  * Compile time flag openbsd6.2 got removed (#14233).\n  * The spec runner\u2019s state moved into Spec::CLI. This is only relevant for code which monkey-patches into the spec library (#14170).\n\nThanks\n\nWe have been able to do all of this thanks to the continued support of 84codes\nand every other sponsor. To maintain and increase the development pace,\ndonations and sponsorships are essential. OpenCollective is available for\nthat.\n\nReach out to crystal@manas.tech if you\u2019d like to become a direct sponsor or\nfind other ways to support Crystal. We thank you in advance!\n\nContribute\n\nFound a typo, or want to help improve this page? Edit on GitHub or file an\nissue.\n\n### Help\n\nCrystal forum\n\nCrystal Discord\n\nr/crystal_programming\n\nIRC: #crystal-lang (web, logs)\n\nMatrix: #crystal-lang_crystal:gitter.im (web)\n\n### News feeds\n\nBlog posts and releases\n\nReleases\n\nNewsletter\n\nGitHub\n\nYouTube\n\nMastodon\n\nTwitter\n\nLicensed under the Apache License, Version 2.0\n\nCrystal language, born & raised at Manas\n\n", "frontpage": false}
