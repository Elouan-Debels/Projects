{"aid": "40000349", "title": "Browser Security Bugs That Aren't: JavaScript in PDF", "url": "https://textslashplain.com/2024/04/10/browser-security-bugs-that-arent-javascript-in-pdf/", "domain": "textslashplain.com", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-11 09:50:18", "comments": 0, "source_title": "Browser Security Bugs that Aren\u2019t: JavaScript in PDF", "source_text": "Browser Security Bugs that Aren\u2019t: JavaScript in PDF \u2013 text/plain\n\nSkip to content\n\ntext/plain\n\nericlaw talks about security, the web, and software in general\n\n# Browser Security Bugs that Aren\u2019t: JavaScript in PDF\n\nPosted byericlaw2024-04-102024-04-10Posted inbrowsers, securityTags:browsers,\nChrome, Edge, SecurityBugsThatArent\n\nA fairly common security bug report is of the form: \u201cI can put JavaScript\ninside a PDF file and it runs!\u201d\n\nFor example, open this PDF file with Chrome, and you can see the alert(1)\nmessage displayed:\n\nSupport for JavaScript within PDFs is by-design and expected by the developers\nof PDF rendering software, including common browsers like Chrome and Edge.\nMuch like HTML, PDF files are an active content type and may contain\nJavaScript.\n\nPeriodically, less experienced security researchers excitedly file this issue\nagainst browsers, and those reports are quickly resolved \u201cBy Design.\u201d\n\nPeriodically, more experienced security researchers excitedly file this issue\nagainst sites and applications that are willing to host or transfer untrusted\nPDF files, arguing that this represents a \u201cStored Cross-Site Scripting\nvulnerability.\u201d\n\nTheir confusion here is somewhat more understandable\u2013 if a website allows a\nuser to upload a HTML document containing script, and then serves that HTML\ndocument from their domain, any script within it will run in the security\ncontext of the serving domain. That describes a classic Stored XSS Attack, and\nit presents a security threat because the embedded script can steal or\nmanipulate cookies (by accessing the document.cookie property), manipulate web\nplatform storage (IndexedDB, localStorage, etc), conduct request forgery\nattacks from a 1st party origin, etc.\n\nThe story for PDF documents is very different.\n\nThe Chrome Security FAQ describes the limitation tersely, noting the set of\nbindings provided to the PDF are more limited than those provided by the DOM\nto HTML documents, nor do PDFs get any ambient authority based upon the domain\nfrom which they are served.\n\nWhat does that mean? It means that, while PDF\u2019s JavaScript does run, the\nuniverse the script runs in is limited: there\u2019s no access to cookies or\nstorage, very limited ability to make requests (e.g. you can navigate the\ndocument\u2019s window elsewhere, but that\u2019s about it), and no ability to make use\nof the Web Platform\u2019s powerful capabilities exposed by the HTML Document\nObject Model (DOM) objects like document, window, navigator, et cetera. While\nthe capabilities of JavaScript in PDF are extremely limited, they\u2019re not non-\nexistent, and PDF engine software must take care to avoid introducing new\ncapabilities that void the safety assumptions of PDF-handling code.\n\n#### Restricting JavaScript in PDF\n\nEngineers should take care that handling of JavaScript in PDF respects\napp/user settings. For example, if the user turns off JavaScript for a site,\nPDFs hosted on that site shouldn\u2019t allow script either. This works properly in\nChrome and Edge.\n\nSomewhat surprisingly, Firefox\u2019s global javascript.enabled toggle doesn\u2019t\nimpact script inside its PDF viewer:\n\nTheory: It could be that disabling script for their PDF viewer would be\nparticularly hard because they\u2019re using PDFJs for rendering.\n\nSimilarly, Chromium currently ignores Content-Security-Policy headers on PDF\nresponses because it renders PDF files using web technologies that could\notherwise be disallowed by the CSP, leading to user confusion and webdev\nannoyance.\n\n### Share this:\n\n  * Twitter\n  * Facebook\n\nLike Loading...\n\nPosted byericlaw2024-04-102024-04-10Posted inbrowsers, securityTags:browsers,\nChrome, Edge, SecurityBugsThatArent\n\n## Published by ericlaw\n\nImpatient optimist. Dad. Author/speaker. Created Fiddler & SlickRun. PM @\nMicrosoft 2001-2012, and 2018-, working on Office, IE, and Edge. Now a GPM for\nMicrosoft Defender. My words are my own, I do not speak for any other entity.\nView more posts\n\n### Leave a comment Cancel reply\n\n## Search Text/Plain\n\n## Pages\n\n  * About\n  * Browse All Posts\n  * Categories\n  * IEInternals Archive\n\n## RSS\n\nRSS - Posts\n\n## Blog Stats\n\n  * 2,200,044 hits\n\n## Categories\n\n#### ericlaw\n\nImpatient optimist. Dad. Author/speaker. Created Fiddler & SlickRun. PM @\nMicrosoft 2001-2012, and 2018-, working on Office, IE, and Edge. Now a GPM for\nMicrosoft Defender. My words are my own, I do not speak for any other entity.\n\n#### Personal Links\n\n  * Twitter\n  * GitHub\n  * Bayden Systems (Freeware)\n\nView Full Profile \u2192\n\ntext/plain, A WordPress.com Website.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * text/plain\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * text/plain\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
