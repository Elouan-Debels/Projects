{"aid": "40002798", "title": "S3 Emulators \u2013 A Comparative Analysis of S3Mock, MinIO, and LocalStack", "url": "https://blog.localstack.cloud/2024-04-08-exploring-s3-mocking-tools-a-comparative-analysis-of-s3mock-minio-and-localstack/", "domain": "localstack.cloud", "votes": 6, "user": "whummer", "posted_at": "2024-04-11 14:48:41", "comments": 0, "source_title": "Exploring S3 Mocking Tools \u2014 A Comparative Analysis of S3Mock, MinIO, and LocalStack", "source_text": "Exploring S3 Mocking Tools \u2014 A Comparative Analysis of S3Mock, MinIO, and\nLocalStack - LocalStack\n\n# Exploring S3 Mocking Tools \u2014 A Comparative Analysis of S3Mock, MinIO, and\nLocalStack\n\n8 MIN READ \u2014 posted April 8, 2024 by Cristopher Pinzon and Benjamin Simon and\nStefanie Plieschnegger\n\nIn this blog post, we conduct a comparison of S3Mock, MinIO, and LocalStack\nfor local development and testing. We evaluate how these tools stack up in\nterms of API parity with AWS S3 standards, aiming to identify the optimal\nchoice for local S3 development & testing.\n\n## Introduction\n\nAmazon S3 (Simple Storage Service) is a scalable and durable cloud object\nstorage service offered by AWS. It plays a crucial role in cloud computing by\nallowing developers to store and retrieve data anywhere on the web. For\ndevelopment and testing purposes, local alternatives to S3 are convenient to\navoid the time and cost of developing and debugging applications directly on\nthe cloud. This blog post delves into a comprehensive comparison of popular\ntools that emulate S3 locally, exploring their strengths, weaknesses, and\nperformance aspects.\n\nFor the comparison, we selected the following tools:\n\n  1. S3Mock: It provides a server that emulates the behavior of the S3 service, allowing developers to write and test code that interacts with S3 without actually using the live AWS service.\n  2. MinIO: An open-source object storage server designed to be cloud-native and highly scalable. It is a lightweight and high-performance alternative to proprietary object storage solutions like Amazon S3.\n  3. LocalStack: A versatile local development environment that emulates various AWS services, including S3, allowing developers to simulate an entire AWS cloud infrastructure locally.\n\nIn addition to its other features, LocalStack presents a unique offering in\nthe form of a dedicated S3 container image tag.\n\nThis Docker image offers a simple & lightweight choice designed for emulating\nthe S3 service. It makes things easier by removing extra functionality and\nconcentrating on the key aspects of S3. This makes it perfect for users\nneeding a lightweight, efficient, and successful S3 service emulation.\n\n## How to start mocking S3\n\n### MinIO\n\n  1. Pull the MinIO Docker image: docker pull minio/minio\n  2. Start the MinIO container docker run -p 9000:9000 -p 9001:9001 --name minio -d minio/minio server /data --console-address \":9001\"\n  3. Create a new access key and secret key:\n\n     * Access the MinIO web UI: http://localhost:9001\n     * Log in to the MinIO console using default credentials: minioadmin and minioadmin.\n     * Navigate to the Access Keys section and create a new access key and secret key.\n  4. Configure your AWS client to use the MinIO server:\n\n     * Set the endpoint URL: http://localhost:9000\n     * Set the access key and secret key you created in step 3.\n\n### S3Mock\n\n  1. Pull the S3Mock Docker image: docker pull adobe/s3mock\n  2. Start the S3Mock container: docker run -p 9090:9090 --name s3mock -d adobe/s3mock\n  3. Configure your AWS client to use the S3Mock server:\n\n     * Set the endpoint URL: http://localhost:9090\n     * Provide any access key and secret key. As per their example, you can use foo as the access key and bar as the secret key.\n\n### LocalStack\n\n  1. Pull the LocalStack Docker image: docker pull localstack/localstack:s3-latest\n  2. Start the LocalStack container: docker run -p 4566:4566 --name localstack -d localstack/localstack:s3-latest\n  3. Configure your AWS client to use the LocalStack server:\n\n     * Set the endpoint URL: http://localhost:4566\n     * Set the access key and secret key. LocalStack uses a default access key test and a default secret key test.\n\nYou can also use localstack/localstack:latest if you need other services or\nuse integrations with S3 like SNS or SQS.\n\n## Supported operations\n\nThis section presents a comparison of the S3 operations supported by the three\nselected local S3 mocking tools: LocalStack, MinIO, and S3Mock.\n\nThe table is sorted by functionality and reveals which operations are\nsupported.\n\nBy understanding the maturity of supported operations for each emulator,\ndevelopers can choose the tool that best meets the need for local development\nand testing.\n\nOperation| LocalStack| MinIO| S3Mock  \n---|---|---|---  \nCore operations  \nCreateBucket| \u2705| \u2705| \u2705  \nDeleteBucket| \u2705| \u2705| \u2705  \nHeadBucket| \u2705| \u2705| \u2705  \nListBuckets| \u2705| \u2705| \u2705  \nGetBucketLocation| \u2705| \u2705| \u2705  \nPutObject| \u2705| \u2705| \u2705  \nGetObject| \u2705| \u2705| \u2705  \nHeadObject| \u2705| \u2705| \u2705  \nCopyObject| \u2705| \u2705| \u2705  \nDeleteObject| \u2705| \u2705| \u2705  \nDeleteObjects| \u2705| \u2705| \u2705  \nGetObjectAttributes| \u2705| \u2705| \u2705  \nRestoreObject| \u2705| \u274c| \u274c  \nListObjects| \u2705| \u2705| \u2705  \nListObjectsV2| \u2705| \u2705| \u2705  \nListObjectVersions| \u2705| \u2705| \u2705  \nCreateMultipartUpload| \u2705| \u2705| \u2705  \nAbortMultipartUpload| \u2705| \u2705| \u2705  \nCompleteMultipartUpload| \u2705| \u2705| \u2705  \nListMultipartUploads| \u2705| \u2705| \u2705  \nUploadPart| \u2705| \u2705| \u2705  \nUploadPartCopy| \u2705| \u274c| \u2705  \nListParts| \u2705| \u274c| \u2705  \nSelectObjectContent| \u2705| \u2705| \u274c  \nWriteGetObjectResponse| \u274c| \u274c| \u274c  \nBucket features  \nBucket Accelerate| \u2705| \u274c| \u274c  \nBucket ACL| \u2705| \u274c| \u274c  \nBucket Analytics| \u2705| \u274c| \u274c  \nBucket Cors| \u2705| \u274c| \u274c  \nBucket Encryption| \u2705| \u2705| \u274c  \nBucket Intelligent Tiering| \u2705| \u274c| \u274c  \nBucket Inventory| \u2705| \u274c| \u274c  \nBucket Lifecycle| \u2705| \u2705| \u2705  \nBucket Logging| \u2705| \u274c| \u274c  \nBucket Metrics| \u274c| \u274c| \u274c  \nBucket Notification| \u2705| \u2705| \u274c  \nBucket Ownership Controls| \u2705| \u274c| \u274c  \nBucket Policy| \u2705| \u274c| \u274c  \nBucket Replication| \u2705| \u2705| \u274c  \nBucket Request Payment| \u2705| \u274c| \u274c  \nBucket Tagging| \u2705| \u2705| \u274c  \nBucket Versioning| \u2705| \u2705| \u274c  \nBucket Website| \u2705| \u274c| \u274c  \nBucket Public Access Block| \u2705| \u274c| \u274c  \nBucket Object Lock| \u2705| \u2705| \u2705  \nObject features  \nObject ACL| \u2705| \u2705| \u2705  \nObject Legal Hold| \u2705| \u2705| \u2705  \nObject Retention| \u2705| \u2705| \u2705  \nObject Tagging| \u2705| \u2705| \u2705  \nObject Torrent| \u274c| \u274c| \u274c  \n  \n## Test results\n\nFor comparable tests we went for the S3 integration test suite from the\nLocalStack repository. Those tests are verified and validated against AWS S3,\nallowing for a good set of representative use cases.\n\nThe tests first targeted MinIO and then S3Mock to evaluate how well these\nS3-compatible tools could handle the tests designed for the S3 service.\n\nIt\u2019s important to note that we purposely excluded any tests that validate the\nintegration with other services (like Lambda or SQS). We can assume that those\nintegrations are not (fully) working with the other tools.\n\nIn this testing phase, we encountered a significant number of tests that had\nfailed. Consequently, we took it upon ourselves to thoroughly analyze the\nresults of these tests.\n\nWe established a system to organize and categorize the results into four\ndistinct classes for a more streamlined analysis. These classes included:\n\n  * Passed: The test was successful.\n  * Missing Exception: The test failed because an expected exception was not encountered.\n  * Imparity: The test failed because the response did not contain specific attributes.\n  * Not Supported: The test could not be performed because required support or resources were not available.\n\nIt\u2019s important to note that for MinIO, we had to make several modifications to\nthe tests. These included forcing the signature version of the AWS SDK Python\nclient and setting up an access key and secret key previously created in the\ntool console.\n\n### LocalStack and AWS parity\n\nLocalStack strives for continuous improvement to align its services closely\nwith AWS. It maintains an extensive set of integration tests to thoroughly\nassess the features and capabilities of its simulated services, ensuring they\nmirror their AWS counterparts as accurately as possible. Given this\ndedication, it\u2019s understandable that other tools may not match LocalStack\u2019s\nparity with AWS services.\n\nHere are some illustrative examples where LocalStack outperforms other\ncomparable tools. The goal of these examples is to demonstrate the relative\nsuperiority of LocalStack in terms of the breadth and depth of AWS services it\nemulates, compared to the other tools:\n\n  * test_s3_list_objects_timestamp_precision: The reason for this failure is the lack of parity in the timestamp. The timestamp is a crucial aspect of data handling and, in this case, it\u2019s not returned in the correct format, which should be in ISO 8061.\n\n  * test_put_get_object_special_character: This parametrized test explores the potential for uploading objects that contain special characters within their keys. It is a critical feature to test as it ensures the systems' ability to handle a variety of object key inputs. Some examples of the keys rejected by MinIO and S3Mock:\n\n    * S3mock:\n\n      * file%2Fname\n      * a/%F0%9F%98%80/\n      * test+key\n      * test key//\n    * MinIO:\n\n      * test key//\n  * test_multipart_and_list_parts: This is a unique circumstance where other tools give the impression of supporting the feature. However, when the integrity of the object and its parts is verified, these tools fail.\n\n## Warp Benchmarking\n\nIn addition to our usual set of tools, we used benchmarking open-source\nsoftware developed by the MinIO team called Warp. Warp facilitated a\ncomparative analysis of the performance metrics associated with each tool and\noperation we utilized.\n\nEffectively, this allowed us to measure and understand the impact of each tool\nand operation on our overall workflow. Following this analysis, we have\ncompiled the results to provide a concise summary.\n\nThe benchmarks were executed on a MacBook Pro M3 Max.\n\nFor the comparison, we divided the tests into two categories:\n\n  * Small objects (e.g., 1000 bytes): Here, we presume there might be optimizations in place since smaller objects can be stored in memory.\n  * Medium-sized objects (e.g., 1 MiB).\n\nWe compared the PutObject and GetObject requests to get a bigger picture.\n\nFor small objects, we can see a similar throughput for PUT and GET for the\nLocalStack-S3 image. It\u2019s also the winner for PUT requests, while GETs are\nfaster on MinIO.\n\nFor the medium-sized benchmark test, we can observe a significant difference\nbetween the PUT and GET operations in general. While LocalStack-S3 outperforms\nfor PUT operations, MinIO and S3Mock are slightly faster for GETs.\n\nDuring our benchmarking, we ran into unknown issues with S3Mock, where we had\nto restart the server between test runs.\n\n## Conclusion\n\nIn conclusion, while S3Mock is a robust and performant option suitable for\ntesting environments, MinIO is a direct competitor to AWS S3, offering a\nproduction-grade object storage solution.\n\nLocalStack is the optimal choice for testing applications before deploying to\nAWS. Its dedication to closely mirroring AWS services, validated with an\nextensive integration testing suite, enables developers to accurately simulate\nthe AWS environment locally.\n\nIf your goal is to validate your application\u2019s behavior and compatibility with\nAWS before deployment, LocalStack is an ideal testing companion due to its\ndedicated emulation of AWS services. Utilizing LocalStack during development\nand testing allows you to confidently identify and resolve potential issues,\nensuring a smooth transition to the AWS production environment.\n\n## Stay in the loop\n\nWe'd love to get in touch with you. Please subscribe with your email to stay\ntuned for release notes and product updates. We promise never to send an\nexcessive amount of emails (we hate spam, too).\n\n  * Contact\n  * Careers\n  * Blog\n  * Docs\n\n  * Tutorials\n  * Applications\n  * LocalStack Academy\n\n  * Terms and Conditions\n  * Privacy Policy\n  * Data Processing Addendum\n\n  * Follow us\n\nCopyright \u00a9 LocalStack\n\n", "frontpage": false}
