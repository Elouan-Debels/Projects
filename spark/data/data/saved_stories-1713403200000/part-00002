{"aid": "40068989", "title": "Automatically create a form with a zod schema", "url": "https://github.com/vantezzen/auto-form", "domain": "github.com/vantezzen", "votes": 1, "user": "charlieirish", "posted_at": "2024-04-17 19:17:41", "comments": 0, "source_title": "GitHub - vantezzen/auto-form: \ud83c\udf1f A React component that automatically creates a @shadcn/ui form based on a zod schema.", "source_text": "GitHub - vantezzen/auto-form: \ud83c\udf1f A React component that automatically creates a\n@shadcn/ui form based on a zod schema.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nvantezzen / auto-form Public\n\n  * Notifications\n  * Fork 64\n  * Star 1.8k\n\n\ud83c\udf1f A React component that automatically creates a @shadcn/ui form based on a\nzod schema.\n\nvantezzen.github.io/auto-form/\n\n1.8k stars 64 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# vantezzen/auto-form\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nvantezzenMerge pull request #67 from mathisdev7/mainMar 25, 20240143f43 \u00b7 Mar\n25, 2024Mar 25, 2024\n\n## History\n\n76 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Deploy demo to GH Pages| Jul 22, 2023  \n  \n### cypress\n\n|\n\n### cypress\n\n| Add cypress| Oct 13, 2023  \n  \n### src\n\n|\n\n### src\n\n| Added disabled system on AutoFormSubmit.| Mar 25, 2024  \n  \n### .eslintignore\n\n|\n\n### .eslintignore\n\n| Add code formatter| Jul 28, 2023  \n  \n### .eslintrc.cjs\n\n|\n\n### .eslintrc.cjs\n\n| Add code formatter| Jul 28, 2023  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| Initial commit| Jul 21, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| chore: ignore gitpod| Jul 31, 2023  \n  \n### .prettierignore\n\n|\n\n### .prettierignore\n\n| Add code formatter| Jul 28, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| feat(autoform): add default value on array, set value 0 to show on fo...|\nMar 16, 2024  \n  \n### components.json\n\n|\n\n### components.json\n\n| Add code formatter| Jul 28, 2023  \n  \n### cypress.config.ts\n\n|\n\n### cypress.config.ts\n\n| Add cypress| Oct 13, 2023  \n  \n### demo.png\n\n|\n\n### demo.png\n\n| Initial commit| Jul 21, 2023  \n  \n### index.html\n\n|\n\n### index.html\n\n| Add code formatter| Jul 28, 2023  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| Merge updated fields and dependencies (#55)| Jan 31, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| Merge updated fields and dependencies (#55)| Jan 31, 2024  \n  \n### postcss.config.js\n\n|\n\n### postcss.config.js\n\n| Add code formatter| Jul 28, 2023  \n  \n### prettierrc.js\n\n|\n\n### prettierrc.js\n\n| Add code formatter| Jul 28, 2023  \n  \n### tailwind.config.js\n\n|\n\n### tailwind.config.js\n\n| Add code formatter| Jul 28, 2023  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| Add cypress| Oct 13, 2023  \n  \n### tsconfig.node.json\n\n|\n\n### tsconfig.node.json\n\n| Initial commit| Jul 21, 2023  \n  \n### vite.config.ts\n\n|\n\n### vite.config.ts\n\n| Deploy demo to GH Pages| Jul 22, 2023  \n  \n## Repository files navigation\n\n# <AutoForm /> for @shadcn/ui\n\nAutoForm is a React component that automatically creates a @shadcn/ui form\nbased on a zod schema.\n\nA live demo can be found at https://vantezzen.github.io/auto-form/.\n\n## When to use AutoForm?\n\nAutoForm is mostly meant as a drop-in form builder for your internal and low-\npriority forms with existing zod schemas. For example, if you already have zod\nschemas for your API and want to create a simple admin panel to edit user\nprofiles, simply pass the schema to AutoForm and you're done.\n\nAutoForm uses @shadcn/ui components as natively as possible with only minimal\nclass overrides. This way, if you have customized your @shadcn/ui components\nin your project, AutoForm should not interfere with your customizations.\n\nAs forms almost always grow more complex, AutoForm gives you options to\ncustomize how forms are rendered (e.g. using the fieldConfig options and\ndependency support) and gives you escape hatches to customize the form even\nfurther (e.g. rendering custom parents and adding custom field types).\n\nHowever, AutoForm does not aim to be a full-featured form builder. It does not\naim to support every edge case in your zod schema or allow building complex,\nmulti-page forms. If you need more customization, feel free to customize\nAutoForm's renderer in your project or use more powerful form builders like\nFormik - though those require more specialized configuration instead of simple\ndrop-in support for your zod schema. For an example on how AutoForm can be\nextended for more powerful, YAML-based, multi-page forms, see AutoForm YAML.\n\n## Installation\n\nThe component depends on the following components from shadcn/ui:\n\n  * accordion\n  * button\n  * calendar\n  * card\n  * checkbox\n  * form\n  * input\n  * label\n  * popover\n  * radio-group\n  * select\n  * separator\n  * switch\n  * textarea\n  * tooltip\n  * toggle\n\nYou can install them all at once with:\n\n    \n    \n    npx shadcn-ui@latest add accordion button calendar card checkbox form input label popover radio-group select separator switch textarea tooltip toggle\n\nTo install the component itself, copy the auto-form folder and date-picker.tsx\nfrom src/components/ui to your project's ui folder.\n\nYou can remove the tests folder in auto-form/tests.\n\n## Field types\n\nCurrently, these field types are supported out of the box:\n\n  * boolean (checkbox, switch)\n  * date (date picker)\n  * enum (select, radio group)\n  * number (input)\n  * string (input, textfield)\n\nYou can add support for other field types by adding them to the\nINPUT_COMPONENTS object in auto-form/config.tsx.\n\n## Usage\n\nBasic usage:\n\n    \n    \n    \"use client\"; import AutoForm, { AutoFormSubmit } from \"./components/ui/auto-form\"; import * as z from \"zod\"; // Define your form schema using zod const formSchema = z.object({ username: z .string({ required_error: \"Username is required.\", }) // You can use zod's built-in validation as normal .min(2, { message: \"Username must be at least 2 characters.\", }), password: z .string({ required_error: \"Password is required.\", }) // Use the \"describe\" method to set the label // If no label is set, the field name will be used // and un-camel-cased .describe(\"Your secure password\") .min(8, { message: \"Password must be at least 8 characters.\", }), favouriteNumber: z.coerce // When using numbers and dates, you must use coerce .number({ invalid_type_error: \"Favourite number must be a number.\", }) .min(1, { message: \"Favourite number must be at least 1.\", }) .max(10, { message: \"Favourite number must be at most 10.\", }) .default(5) // You can set a default value .optional(), acceptTerms: z .boolean() .describe(\"Accept terms and conditions.\") .refine((value) => value, { message: \"You must accept the terms and conditions.\", path: [\"acceptTerms\"], }), // Date will show a date picker birthday: z.coerce.date().optional(), sendMeMails: z.boolean().optional(), // Enum will show a select color: z.enum([\"red\", \"green\", \"blue\"]), // Create sub-objects to create accordion sections address: z.object({ street: z.string(), city: z.string(), zip: z.string(), }), }); function App() { return ( <AutoForm // Pass the schema to the form formSchema={formSchema} // You can add additional config for each field // to customize the UI fieldConfig={{ password: { // Use \"inputProps\" to pass props to the input component // You can use any props that the component accepts inputProps: { type: \"password\", placeholder: \"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\", }, }, favouriteNumber: { // Set a \"description\" that will be shown below the field description: \"Your favourite number between 1 and 10.\", }, acceptTerms: { inputProps: { required: true, }, // You can use JSX in the description description: ( <> I agree to the{\" \"} <a href=\"#\" className=\"text-primary underline\" onClick={(e) => { e.preventDefault(); alert(\"Terms and conditions clicked.\"); }} > terms and conditions </a> . </> ), }, birthday: { description: \"We need your birthday to send you a gift.\", }, sendMeMails: { // Booleans use a checkbox by default, you can use a switch instead fieldType: \"switch\", }, }} // Optionally, define dependencies between fields dependencies={[ { // Hide \"color\" when \"sendMeMails\" is not checked as we only need to // know the color when we send mails sourceField: \"sendMeMails\", type: DependencyType.HIDES, targetField: \"color\", when: (sendMeMails) => !sendMeMails, }, ]} > {/* Pass in a AutoFormSubmit or a button with type=\"submit\". Alternatively, you can not pass a submit button to create auto-saving forms etc. */} <AutoFormSubmit>Send now</AutoFormSubmit> {/* All children passed to the form will be rendered below the form. */} <p className=\"text-gray-500 text-sm\"> By submitting this form, you agree to our{\" \"} <a href=\"#\" className=\"text-primary underline\"> terms and conditions </a> . </p> </AutoForm> ); }\n\n### Next.js and RSC\n\nAutoForm can only be used inside a client-side React component due to\nserialization of the zod schema and values to your event listeners. If you\nwant to use it in a Next.js app, simply mark your component with \"use client\":\n\n    \n    \n    // MyPage.tsx export default function MyPage() { return ( <div> <MyForm /> </div> ); } // MyForm.tsx \"use client\"; import AutoForm from \"./components/ui/auto-form\"; export default function MyForm() { return <AutoForm onSubmit={...} ... />; }\n\n### Zod configuration\n\n#### Validations\n\nYour form schema can use any of zod's validation methods including refine.\n\nAutoform is able to automatically transform some of zod's validation elements\ninto HTML attributes. For example, if you use zod.string().min(8), the input\nwill automatically have a minlength=\"8\" attribute.\n\nValidation methods that are not supported by HTML will automatically be\nchecked when the form is submitted.\n\n#### Descriptions\n\nYou can use the describe method to set a label and description for each field.\nIf no label is set, the field name will be used and un-camel-cased.\n\n    \n    \n    const formSchema = z.object({ username: z.string().describe(\"Your username\"), someValue: z.string(), // Will be \"Some Value\" });\n\n#### Coercion\n\nWhen using numbers and dates, you should use coerce. This is because input\nelements may return a string that should automatically be converted.\n\n    \n    \n    const formSchema = z.object({ favouriteNumber: z.coerce.number(), birthday: z.coerce.date(), });\n\n#### Optional fields\n\nBy default, all fields are required. You can make a field optional by using\nthe optional method.\n\n    \n    \n    const formSchema = z.object({ username: z.string().optional(), });\n\n#### Default values\n\nYou can set a default value for a field using the default method.\n\n    \n    \n    const formSchema = z.object({ favouriteNumber: z.number().default(5), });\n\nIf you want to set default value of date, convert it to Date first using new\nDate(val).\n\n#### Sub-objects\n\nYou can nest objects to create accordion sections.\n\n    \n    \n    const formSchema = z.object({ address: z.object({ street: z.string(), city: z.string(), zip: z.string(), // You can nest objects as deep as you want nested: z.object({ foo: z.string(), bar: z.string(), nested: z.object({ foo: z.string(), bar: z.string(), }), }), }), });\n\nLike with normal objects, you can use the describe method to set a label and\ndescription for the section:\n\n    \n    \n    const formSchema = z.object({ address: z .object({ street: z.string(), city: z.string(), zip: z.string(), }) .describe(\"Your address\"), });\n\n#### Select/Enums\n\nAutoForm supports enum and nativeEnum to create select fields.\n\n    \n    \n    const formSchema = z.object({ color: z.enum([\"red\", \"green\", \"blue\"]), }); enum BreadTypes { // For native enums, you can alternatively define a backed enum to set a custom label White = \"White bread\", Brown = \"Brown bread\", Wholegrain = \"Wholegrain bread\", Other, } // Keep in mind that zod will validate and return the enum labels, not the enum values! const formSchema = z.object({ bread: z.nativeEnum(BreadTypes), });\n\n#### Arrays\n\nAutoForm supports arrays of objects. Because inferring things like field\nlabels from arrays of strings/numbers/etc. is difficult, only objects are\nsupported.\n\n    \n    \n    const formSchema = z.object({ guestListName: z.string(), invitedGuests: z .array( // Define the fields for each item z.object({ name: z.string(), age: z.coerce.number(), }) ) // Optionally set a custom label - otherwise this will be inferred from the field name .describe(\"Guests invited to the party\"), });\n\nArrays are not supported as the root element of the form schema.\n\nYou also can set default value of an array using .default(), but please\nmakesure the array element has same structure with the schema.\n\n    \n    \n    const formSchema = z.object({ guestListName: z.string(), invitedGuests: z .array( // Define the fields for each item z.object({ name: z.string(), age: z.coerce.number(), }) ) .describe(\"Guests invited to the party\") .default([ { name: \"John\", age: 24, }, { name: \"Jane\", age: 20, }, ]), });\n\n### Field configuration\n\nAs zod doesn't allow adding other properties to the schema, you can use the\nfieldConfig prop to add additional configuration for the UI of each field.\n\n    \n    \n    <AutoForm fieldConfig={{ // Add config for each field here - don't add the field name to keep all defaults username: { // Configuration here }, }} />\n\n#### Input props\n\nYou can use the inputProps property to pass props to the input component. You\ncan use any props that the HTML component accepts.\n\n    \n    \n    <AutoForm fieldConfig={{ username: { inputProps: { type: \"text\", placeholder: \"Username\", }, }, }} /> // This will be rendered as: <input type=\"text\" placeholder=\"Username\" /* ... */ />\n\nDisabling the label of an input can be done by using the showLabel property in\ninputProps.\n\n    \n    \n    <AutoForm fieldConfig={{ username: { inputProps: { type: \"text\", placeholder: \"Username\", showLabel: false, }, }, }} />\n\n#### Field type\n\nBy default, AutoForm will use the Zod type to determine which input component\nto use. You can override this by using the fieldType property.\n\n    \n    \n    <AutoForm fieldConfig={{ sendMeMails: { // Booleans use a checkbox by default, use a switch instead fieldType: \"switch\", }, }} />\n\nThe complete list of supported field types is typed. Current supported types\nare:\n\n  * \"checkbox\" (default for booleans)\n  * \"switch\"\n  * \"date\" (default for dates)\n  * \"select\" (default for enums)\n  * \"radio\"\n  * \"textarea\"\n  * \"fallback\" (default for everything else, simple input field)\n\nAlternatively, you can pass a React component to the fieldType property to use\na custom component.\n\n    \n    \n    <AutoForm fieldConfig={{ sendMeMails: { fieldType: ({ label, isRequired, field, fieldConfigItem, fieldProps, }: AutoFormInputComponentProps) => ( <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\"> <FormControl> <Switch checked={field.value} onCheckedChange={field.onChange} {...fieldProps} /> </FormControl> <div className=\"space-y-1 leading-none\"> <FormLabel> {label} {isRequired && <span className=\"text-destructive\"> *</span>} </FormLabel> {fieldConfigItem.description && ( <FormDescription>{fieldConfigItem.description}</FormDescription> )} </div> </FormItem> ), }, }} />\n\n#### Description\n\nYou can use the description property to add a description below the field.\n\n    \n    \n    <AutoForm fieldConfig={{ username: { description: \"Enter a unique username. This will be shown to other users.\", }, }} />\n\nYou can use JSX in the description.\n\n#### Custom parent component\n\nYou can use the renderParent property to customize the parent element of the\ninput to add adornments etc. By default, this is a React fragment.\n\n    \n    \n    <AutoForm fieldConfig={{ username: { renderParent: ({ children }) => ( <div className=\"flex items-end gap-3\"> <div className=\"flex-1\"> {children} // This is the input with label etc. </div> <div> <Button type=\"button\">Check</Button> </div> </div> ), }, }} />\n\n### Accessing the form data\n\nThere are two ways to access the form data:\n\n#### onSubmit\n\nThe preferred way is to use the onSubmit prop. This will be called when the\nform is submitted and the data is valid.\n\n    \n    \n    <AutoForm onSubmit={(data) => { // Do something with the data // Data is validated and coerced with zod automatically }} />\n\n#### Controlled form\n\nYou can also use the values and onValuesChange props to control the form data\nyourself.\n\n    \n    \n    const [values, setValues] = useState<Partial<z.infer<typeof formSchema>>>({}); <AutoForm values={values} onValuesChange={setValues} />;\n\nPlease note that the data is not validated or coerced when using this method\nas they update immediately.\n\nAlternatively, you can use onParsedValuesChange to get updated values only\nwhen the values can be validated and parsed with zod:\n\n    \n    \n    const [values, setValues] = useState<z.infer<typeof formSchema>>({}); <AutoForm values={values} onParsedValuesChange={setValues} />;\n\n### Submitting the form\n\nYou can use the AutoFormSubmit component to create a submit button.\n\n    \n    \n    <AutoForm> <AutoFormSubmit>Send now</AutoFormSubmit> </AutoForm> // or <AutoForm> <button type=\"submit\">Send now</button> </AutoForm>\n\n### Adding other elements\n\nAll children passed to the AutoForm component will be rendered below the form.\n\n    \n    \n    <AutoForm> <AutoFormSubmit>Send now</AutoFormSubmit> <p className=\"text-gray-500 text-sm\"> By submitting this form, you agree to our{\" \"} <a href=\"#\" className=\"text-primary underline\"> terms and conditions </a> . </p> </AutoForm>\n\n### Dependencies\n\nAutoForm allows you to add dependencies between fields to control fields based\non the value of other fields. For this, a dependencies array can be passed to\nthe AutoForm component.\n\n    \n    \n    <AutoForm dependencies={[ { // \"age\" hides \"parentsAllowed\" when the age is 18 or older sourceField: \"age\", type: DependencyType.HIDES, targetField: \"parentsAllowed\", when: (age) => age >= 18, }, { // \"vegetarian\" checkbox hides the \"Beef Wellington\" option from \"mealOptions\" // if its not already selected sourceField: \"vegetarian\", type: DependencyType.SETS_OPTIONS, targetField: \"mealOptions\", when: (vegetarian, mealOption) => vegetarian && mealOption !== \"Beef Wellington\", options: [\"Pasta\", \"Salad\"], }, ]} />\n\nThe following dependency types are supported:\n\n  * DependencyType.HIDES: Hides the target field when the when function returns true\n  * DependencyType.DISABLES: Disables the target field when the when function returns true\n  * DependencyType.REQUIRES: Sets the target field to required when the when function returns true\n  * DependencyType.SETS_OPTIONS: Sets the options of the target field to the options array when the when function returns true\n\nThe when function is called with the value of the source field and the value\nof the target field and should return a boolean to indicate if the dependency\nshould be applied.\n\nPlease note that dependencies will not cause the inverse action when returning\nfalse - for example, if you mark a field as required in your zod schema (i.e.\nby not explicitly setting optional), returning false in your REQURIES\ndependency will not mark it as optional. You should instead use zod's optional\nmethod to mark as optional by default and use the REQURIES dependency to mark\nit as required when the dependency is met.\n\nPlease note that dependencies do not have any effect on the validation of the\nform. You should use zod's refine method to validate the form based on the\nvalue of other fields.\n\nYou can create multiple dependencies for the same field and dependency type -\nfor example to hide a field based on multiple other fields. This will then\nhide the field when any of the dependencies are met.\n\n# Contributing\n\nContributions are welcome! Please open an issue or submit a pull request.\n\n  1. Fork the repository\n  2. Clone your fork and install dependencies with npm install\n  3. Run npm run dev to start the development server and make your changes\n  4. Run npm run fix to run the formatter and linter\n  5. Run npm test to run the tests\n  6. Commit your changes and open a pull request\n\n## Adding new components\n\nIf you want to add a new component, please make sure to add it to the\nINPUT_COMPONENTS object in auto-form/config.tsx.\n\n  1. Create a new component in src/components/ui/auto-form/fields. You can copy an existing component (like input.tsx) as a starting point.\n  2. Add the component to the INPUT_COMPONENTS object in auto-form/config.tsx to give it a name.\n  3. Optionally, add the component name as a default handler for a zod type in auto-form/config.tsx under DEFAULT_ZOD_HANDLERS.\n\n# License\n\nMIT\n\n## About\n\n\ud83c\udf1f A React component that automatically creates a @shadcn/ui form based on a\nzod schema.\n\nvantezzen.github.io/auto-form/\n\n### Topics\n\nreact react-component form-validation shadcn-ui\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n1.8k stars\n\n### Watchers\n\n15 watching\n\n### Forks\n\n64 forks\n\nReport repository\n\n## Contributors 10\n\n## Languages\n\n  * TypeScript 93.6%\n  * JavaScript 4.2%\n  * CSS 1.6%\n  * HTML 0.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
