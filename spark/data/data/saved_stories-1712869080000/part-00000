{"aid": "40002882", "title": "How we built our product docs with Next.js and Sanity CMS", "url": "https://causal.app/blog/how-we-built-our-documentation-nextjs-sanity-cms", "domain": "causal.app", "votes": 3, "user": "refrigerator", "posted_at": "2024-04-11 14:56:37", "comments": 0, "source_title": "How we built our product documentation with Next.js and Sanity CMS - The Causal Blog", "source_text": "How we built our product documentation with Next.js and Sanity CMS - The\nCausal Blog\n\n\u2728 New: We've just launched 1-click ARR reporting from Stripe \u2014 learn more and\ntry it out!\n\nEngineering\n\n## How we built our product documentation with Next.js and Sanity CMS\n\nWe migrated our docs from GitBook to a custom Next.js site. Here's how we did\nit.\n\nApr 11, 2024\n\nAndrew Churchill\n\nSoftware Engineer\n\nContents\n\n  1. Backend: Sanity CMS\n    1. Migrating our content to Sanity\n    2. Search\n  2. Frontend: Next.js\n    1. Server Components\n  3. Optimization & Hosting: Vercel\n  4. Conclusion\n\nAt Causal, documentation really matters:\n\nOur product is a new kind of financial planning tool with a low floor and a\nhigh ceiling \u2014 it\u2019s easy to get started but there\u2019s a lot of deep\nfunctionality that unlocks Causal\u2019s full potential. To help users learn this,\nour documentation needs to be first-class.\n\nUntil recently, we hosted our docs on GitBook. This was a great place to get\nstarted, but had some key drawbacks:\n\n  * Limited control over look-and-feel: GitBook sites aren\u2019t very customisable, and they all feel like developer documentation (our users aren\u2019t devs!)\n  * Limited support for video: we\u2019ve invested in professionally produced video content, and we wanted the viewing experience to feel \u201cnative\u201d to our docs\n  * Limited control over page layout: we have lots of different resources, and wanted our docs landing page to be the best starting point to access them\n\nTo solve these problems, we spent 1 engineer-month building a custom home for\nour documentation: https://docs.causal.app.\n\nOur content lives in Sanity CMS, and the site is built in React + Next.js,\nhosted on Vercel. The site now looks and feels like an extension of our\nproduct and we\u2019ve received lots of positive feedback \u2014 we wish we\u2019d done it a\nlot sooner!\n\nIn this post, we\u2019ll take you behind the scenes of this project:\n\n  * Modelling our content on Sanity and migrating our existing GitBook content over\n  * Implementing search using Sanity\u2019s built-in query language, GROQ\n  * Using the latest React and Next.js features in the custom React frontend\n  * Optimizations in our Next.js and Vercel configuration to make our site load as fast as possible.\n\n## Backend: Sanity CMS\n\nOur first decision when we started planning our new docs site was where to\nhost our content. There were a few key considerations:\n\n  * It had to be easy to update for non-engineers\n  * It had to be flexible - we wanted to host different types of content (video series, concepts, and guides alongside traditional documentation pages)\n  * It had to be fast to query\n  * We needed to be able to migrate our existing ~100 pages of content from GitBook\n\nWe settled on Sanity, in part because we knew Linear (whose excellent\ndocumentation site was an inspiration to us!) was using them, and in part\nbecause some of our team had positive experiences with it in past projects.\n\nSanity\u2019s strength is its flexibility. Its content model, along with its custom\nquery language, GROQ, easily supported everything we wanted to do. One of our\nmain concerns was supporting custom content inline, such as callouts,\ncollapsible blocks, embedded videos, and more; Sanity handles custom blocks\nlike this without breaking a sweat. It\u2019s also quite fast: our basic queries\nalways resolve in under 100ms, and even our most complex queries never take\nmore than a few hundred milliseconds.\n\nThe default editing experience is not as good as GitBook\u2019s, but it was\nsufficient. There\u2019s a lot more you can do to build custom editing experiences\nin Sanity, but we didn\u2019t spend any time on that because it wasn\u2019t worth the\ninvestment for us.\n\nHowever, the migration experience left a lot to be desired.\n\n### Migrating our content to Sanity\n\nAs discussed above, our existing documentation content was all in GitBook.\nIt\u2019s quite easy to export GitBook\u2019s content into Markdown files. There is some\ncustom syntax to represent callouts and embeds, but it is pretty easy to\nparse.\n\nHowever, we were shocked to find that Sanity has almost zero guidance on\nimporting Markdown content. The best I could find was this blog post from\n2018! So we spent about a week writing and iterating on a script to migrate\nour existing content. Some of the challenges we ran into along the way:\n\n  * Using images. We had to first upload all the images in our GitBook account to Sanity, then query Sanity to get a mapping from filename to image ID to use when creating an image block in Sanity.\n  * Extracting the title, description, and other metadata from GitBook files.\n  * Special block types. We had to support GitBook\u2019s code blocks, embed blocks, callout blocks, collapsible (summary/detail) blocks, and table blocks - parsing GitBook\u2019s custom format (some combination of HTML and their own syntax), and converting it to the format used by our custom Sanity blocks\n  * Internal links. We wanted links between doc pages to be proper references, as opposed to plain text links that could easily break as pages are moved around or renamed. This isn\u2019t too hard to model in Sanity, but figuring out how to import it into Sanity was another matter! We had to dive deep into the source Sanity source code (which, thankfully, is open source) to figure this one out.\n\nYou can check out the full script we used for our migration here. It took a\nlot of iterations to get that script right, but once we ran it, our content\nhardly needed any manual clean-up\n\n### Search\n\nNo good documentation site would be complete without a robust search feature.\nOnce we had all our existing content in Sanity (and we\u2019d added some new\ncontent too!), we had to figure out how to build just that.\n\nWhile third party solutions exist - for example, Linear uses Algolia - we\nwanted to first try to build search directly in Sanity. We figured the\ncomplexity and cost savings made it at least worth a shot. And as it turns\nout, Sanity is flexible and performant enough to support it! While the fuzzy\nmatches are certainly not as good as they would be for a purpose-built tool\nlike Algolia, we\u2019ve found the search to be more than good enough for what we\nneed. Search queries typically take a couple hundred milliseconds, and with\ncaching optimizations (more on that later!) common searches normally feel\ninstant.\n\nYou can see a sample of our GROQ query here.\n\n## Frontend: Next.js\n\nOnce we had our content migrated to Sanity, we started working on the\nfrontend. Causal\u2019s main app uses React and Next.js, so it was a natural choice\nto use the same for our documentation site. And we were able to take advantage\nof some of the latest new features in React and Next.js to help our\ndocumentation site be blazing fast!\n\nAside from familiarity, why use React? One of the biggest reasons we wanted to\nmove to our own docs site was to support custom interactive content. Just as\nSanity supported this on the backend, React made it easy to implement on the\nfrontend.\n\nThe most prominent example is our new video series pages, such as the Causal\n101 series. The videos themselves are hosted on YouTube, but we built a custom\ncomponent to allow observing and controlling the embedded video externally. We\nreused the same component for inline embedded videos on content pages. And\nthere\u2019s lots more interactivity throughout the site that was easiest to build\nwith React.\n\nAnother huge benefit of using React is the massive ecosystem. For interactive\nelements like collapsible blocks, we used Radix UI\u2019s excellent primitives. For\nour search UI, we used the popular cmdk library. And for styling, we used\nTailwind CSS (which is not React specific, but does integrate effortlessly\nwith Next.js). Altogether, this combination made it very quick and easy to\nwhip up all the pages and components we wanted.\n\n### Server Components\n\nThe most recent evolution of React\u2019s component architecture was server\ncomponents: components with code that never runs on the client, but which can\nstill pass props to child components, even if those child components only run\non the client. Server components were offered in a stable form in Next.js\nv13.4 in May 2023. While there has been some controversy around their adoption\nand usage, we found them to be very useful for this project.\n\nIn particular, React\u2019s server components allowed us to keep 100% of our data\nfetching on the server side. This has a couple of key benefits:\n\n  * Pages are almost entirely rendered on the server side, so the client never renders a blank page while waiting for the client-side React code to hydrate the initial content\n  * Sanity client code never reaches the browser, keeping bundle sizes down\n\nServer-side rendering is not new, and it\u2019s been available in Next.js for\nyears. What is new with React Server Components is where the data fetching can\nhappen. In the old way of doing things, you would implement this data fetching\nin getServerSideProps then drill it down to all the components that needed it.\nBut using RSC, each component just fetches the data it needs to render itself,\nusing async/ await. This lets us easily compose different components together,\nwithout any top-level data fetching orchestration. For example, the\ndocumentation page component and the sidebar component can each fetch their\nown data, then Next.js handles rendering the content on the server, returning\nwhat it can, and streaming everything else as it becomes ready.\n\n## Optimization & Hosting: Vercel\n\nSince we were using Next.js, it was a natural choice to host our documentation\nsite on Vercel. And because we were already using Vercel for preview\ndeployments in our main repo, hosting our docs site there had 0 additional\ncost!\n\nAs discussed above, we used React Server Components extensively. And while\nSanity\u2019s API already resolves queries reasonably quickly, we were able to get\neven better by using Vercel\u2019s Data Cache. This cache essentially acts like a\nCDN for anything you fetch during server-side rendering, which was perfect for\nour use case. Without too much trouble, we were able to set it up so most\nrequests are served almost instantly from a cache, never even hitting Sanity\u2019s\nAPI. And with a bit of additional configuration, we cached the pages\nthemselves in Vercel\u2019s CDN, so the server didn\u2019t even have to do any work to\nrender most requests.\n\nIn fact, we were even able to cache search request responses in Vercel\u2019s CDN.\nThis means, for common searches, the response will be served from the edge\nalmost instantly.\n\n## Conclusion\n\nOverall, our effort to migrate to a custom documentation site was a big\nsuccess. Customers coming to the site get a premium, snappy experience; we\nhave an easy way to surface many different types of content; and all told, the\nproject only took about one engineer-month start to finish.\n\nGoing forward, we\u2019ll continue to invest in high-quality, custom content to\nhelp all our users learn and grow with Causal. And we have all the flexibility\nwe need to host it on our own docs site!\n\nThis project was a little different from the type of project we typically work\non at Causal. But if you\u2019re interested in performance (frontend or backend!),\nand you care deeply about crafting beautiful user experiences, we\u2019re hiring!\nDrop us a line here or reach out to lukas@causal.app to learn more.\n\nThank you! Your submission has been received!\n\nOops! Something went wrong while submitting the form.\n\nget started\n\nView all templates \u279e\n\nPERSONAL FINANCE\n\n###### Buy vs Rent\n\n###### Should you buy a house or rent?\n\nStartuP\n\n###### B2B SaaS Revenue\n\n###### Forecast your inbound and outbound leads to determine revenue, and\nunderstand what kind of sales funnel you need to hit your revenue targets.\n\nFinance\n\n###### Detailed Headcount Model\n\n###### Understand the breakdown of your headcount and payroll costs by\nDepartment (Sales, Engineering, etc.) and plan your future hires.\n\nPlatform\n\nFeaturesIntegrationsTrust and SecurityPricingBook a Demo\n\nCustomers\n\nCustomer StoriesCase study: HumaansCase study: ClassDojoCase study:\nPrefectCase study: BranchCase study: Marley Spoon\n\nIntegrations\n\nQuickbooksXeroNetSuiteSalesforceHubspotSnowflakeStripe\n\nResources\n\nBlogDocumentationProduct UpdatesStartup Finance JobsWebinarsCareersPrivacy\nPolicyTerms of Service\n\n\u00a9 2024 Causal, Inc. All rights reserved.\n\n# How we built our product documentation with Next.js and Sanity CMS\n\nApr 11, 2024\n\nBy\n\nAndrew Churchill\n\nTable of Contents\n\nBackend: Sanity CMS\n\nMigrating our content to Sanity\n\nSearch\n\nFrontend: Next.js\n\nServer Components\n\nOptimization & Hosting: Vercel\n\nConclusion\n\nAt Causal, documentation really matters:\n\nOur product is a new kind of financial planning tool with a low floor and a\nhigh ceiling \u2014 it\u2019s easy to get started but there\u2019s a lot of deep\nfunctionality that unlocks Causal\u2019s full potential. To help users learn this,\nour documentation needs to be first-class.\n\nUntil recently, we hosted our docs on GitBook. This was a great place to get\nstarted, but had some key drawbacks:\n\n  * Limited control over look-and-feel: GitBook sites aren\u2019t very customisable, and they all feel like developer documentation (our users aren\u2019t devs!)\n  * Limited support for video: we\u2019ve invested in professionally produced video content, and we wanted the viewing experience to feel \u201cnative\u201d to our docs\n  * Limited control over page layout: we have lots of different resources, and wanted our docs landing page to be the best starting point to access them\n\nTo solve these problems, we spent 1 engineer-month building a custom home for\nour documentation: https://docs.causal.app.\n\nOur content lives in Sanity CMS, and the site is built in React + Next.js,\nhosted on Vercel. The site now looks and feels like an extension of our\nproduct and we\u2019ve received lots of positive feedback \u2014 we wish we\u2019d done it a\nlot sooner!\n\nIn this post, we\u2019ll take you behind the scenes of this project:\n\n  * Modelling our content on Sanity and migrating our existing GitBook content over\n  * Implementing search using Sanity\u2019s built-in query language, GROQ\n  * Using the latest React and Next.js features in the custom React frontend\n  * Optimizations in our Next.js and Vercel configuration to make our site load as fast as possible.\n\n## Backend: Sanity CMS\n\nOur first decision when we started planning our new docs site was where to\nhost our content. There were a few key considerations:\n\n  * It had to be easy to update for non-engineers\n  * It had to be flexible - we wanted to host different types of content (video series, concepts, and guides alongside traditional documentation pages)\n  * It had to be fast to query\n  * We needed to be able to migrate our existing ~100 pages of content from GitBook\n\nWe settled on Sanity, in part because we knew Linear (whose excellent\ndocumentation site was an inspiration to us!) was using them, and in part\nbecause some of our team had positive experiences with it in past projects.\n\nSanity\u2019s strength is its flexibility. Its content model, along with its custom\nquery language, GROQ, easily supported everything we wanted to do. One of our\nmain concerns was supporting custom content inline, such as callouts,\ncollapsible blocks, embedded videos, and more; Sanity handles custom blocks\nlike this without breaking a sweat. It\u2019s also quite fast: our basic queries\nalways resolve in under 100ms, and even our most complex queries never take\nmore than a few hundred milliseconds.\n\nThe default editing experience is not as good as GitBook\u2019s, but it was\nsufficient. There\u2019s a lot more you can do to build custom editing experiences\nin Sanity, but we didn\u2019t spend any time on that because it wasn\u2019t worth the\ninvestment for us.\n\nHowever, the migration experience left a lot to be desired.\n\n### Migrating our content to Sanity\n\nAs discussed above, our existing documentation content was all in GitBook.\nIt\u2019s quite easy to export GitBook\u2019s content into Markdown files. There is some\ncustom syntax to represent callouts and embeds, but it is pretty easy to\nparse.\n\nHowever, we were shocked to find that Sanity has almost zero guidance on\nimporting Markdown content. The best I could find was this blog post from\n2018! So we spent about a week writing and iterating on a script to migrate\nour existing content. Some of the challenges we ran into along the way:\n\n  * Using images. We had to first upload all the images in our GitBook account to Sanity, then query Sanity to get a mapping from filename to image ID to use when creating an image block in Sanity.\n  * Extracting the title, description, and other metadata from GitBook files.\n  * Special block types. We had to support GitBook\u2019s code blocks, embed blocks, callout blocks, collapsible (summary/detail) blocks, and table blocks - parsing GitBook\u2019s custom format (some combination of HTML and their own syntax), and converting it to the format used by our custom Sanity blocks\n  * Internal links. We wanted links between doc pages to be proper references, as opposed to plain text links that could easily break as pages are moved around or renamed. This isn\u2019t too hard to model in Sanity, but figuring out how to import it into Sanity was another matter! We had to dive deep into the source Sanity source code (which, thankfully, is open source) to figure this one out.\n\nYou can check out the full script we used for our migration here. It took a\nlot of iterations to get that script right, but once we ran it, our content\nhardly needed any manual clean-up\n\n### Search\n\nNo good documentation site would be complete without a robust search feature.\nOnce we had all our existing content in Sanity (and we\u2019d added some new\ncontent too!), we had to figure out how to build just that.\n\nWhile third party solutions exist - for example, Linear uses Algolia - we\nwanted to first try to build search directly in Sanity. We figured the\ncomplexity and cost savings made it at least worth a shot. And as it turns\nout, Sanity is flexible and performant enough to support it! While the fuzzy\nmatches are certainly not as good as they would be for a purpose-built tool\nlike Algolia, we\u2019ve found the search to be more than good enough for what we\nneed. Search queries typically take a couple hundred milliseconds, and with\ncaching optimizations (more on that later!) common searches normally feel\ninstant.\n\nYou can see a sample of our GROQ query here.\n\n## Frontend: Next.js\n\nOnce we had our content migrated to Sanity, we started working on the\nfrontend. Causal\u2019s main app uses React and Next.js, so it was a natural choice\nto use the same for our documentation site. And we were able to take advantage\nof some of the latest new features in React and Next.js to help our\ndocumentation site be blazing fast!\n\nAside from familiarity, why use React? One of the biggest reasons we wanted to\nmove to our own docs site was to support custom interactive content. Just as\nSanity supported this on the backend, React made it easy to implement on the\nfrontend.\n\nThe most prominent example is our new video series pages, such as the Causal\n101 series. The videos themselves are hosted on YouTube, but we built a custom\ncomponent to allow observing and controlling the embedded video externally. We\nreused the same component for inline embedded videos on content pages. And\nthere\u2019s lots more interactivity throughout the site that was easiest to build\nwith React.\n\nAnother huge benefit of using React is the massive ecosystem. For interactive\nelements like collapsible blocks, we used Radix UI\u2019s excellent primitives. For\nour search UI, we used the popular cmdk library. And for styling, we used\nTailwind CSS (which is not React specific, but does integrate effortlessly\nwith Next.js). Altogether, this combination made it very quick and easy to\nwhip up all the pages and components we wanted.\n\n### Server Components\n\nThe most recent evolution of React\u2019s component architecture was server\ncomponents: components with code that never runs on the client, but which can\nstill pass props to child components, even if those child components only run\non the client. Server components were offered in a stable form in Next.js\nv13.4 in May 2023. While there has been some controversy around their adoption\nand usage, we found them to be very useful for this project.\n\nIn particular, React\u2019s server components allowed us to keep 100% of our data\nfetching on the server side. This has a couple of key benefits:\n\n  * Pages are almost entirely rendered on the server side, so the client never renders a blank page while waiting for the client-side React code to hydrate the initial content\n  * Sanity client code never reaches the browser, keeping bundle sizes down\n\nServer-side rendering is not new, and it\u2019s been available in Next.js for\nyears. What is new with React Server Components is where the data fetching can\nhappen. In the old way of doing things, you would implement this data fetching\nin getServerSideProps then drill it down to all the components that needed it.\nBut using RSC, each component just fetches the data it needs to render itself,\nusing async/ await. This lets us easily compose different components together,\nwithout any top-level data fetching orchestration. For example, the\ndocumentation page component and the sidebar component can each fetch their\nown data, then Next.js handles rendering the content on the server, returning\nwhat it can, and streaming everything else as it becomes ready.\n\n## Optimization & Hosting: Vercel\n\nSince we were using Next.js, it was a natural choice to host our documentation\nsite on Vercel. And because we were already using Vercel for preview\ndeployments in our main repo, hosting our docs site there had 0 additional\ncost!\n\nAs discussed above, we used React Server Components extensively. And while\nSanity\u2019s API already resolves queries reasonably quickly, we were able to get\neven better by using Vercel\u2019s Data Cache. This cache essentially acts like a\nCDN for anything you fetch during server-side rendering, which was perfect for\nour use case. Without too much trouble, we were able to set it up so most\nrequests are served almost instantly from a cache, never even hitting Sanity\u2019s\nAPI. And with a bit of additional configuration, we cached the pages\nthemselves in Vercel\u2019s CDN, so the server didn\u2019t even have to do any work to\nrender most requests.\n\nIn fact, we were even able to cache search request responses in Vercel\u2019s CDN.\nThis means, for common searches, the response will be served from the edge\nalmost instantly.\n\n## Conclusion\n\nOverall, our effort to migrate to a custom documentation site was a big\nsuccess. Customers coming to the site get a premium, snappy experience; we\nhave an easy way to surface many different types of content; and all told, the\nproject only took about one engineer-month start to finish.\n\nGoing forward, we\u2019ll continue to invest in high-quality, custom content to\nhelp all our users learn and grow with Causal. And we have all the flexibility\nwe need to host it on our own docs site!\n\nThis project was a little different from the type of project we typically work\non at Causal. But if you\u2019re interested in performance (frontend or backend!),\nand you care deeply about crafting beautiful user experiences, we\u2019re hiring!\nDrop us a line here or reach out to lukas@causal.app to learn more.\n\nThank you! Your submission has been received!\n\nOops! Something went wrong while submitting the form.\n\n### You might also like\n\nFinance\n\nApr 4, 2023\n\nTaimur Abdaal\n\nWhat's the problem with false certainty?\n\nJan 19, 2021\n\nAlex Oppenheimer\n\nUnit Economics Fundamentals\n\nStart with the Unit, then figure out the Economics (and then Grow)\n\nFinance\n\nDec 7, 2021\n\nBrandi Johnson\n\nReal-Time Financial Planning, Explained\n\nBuild value with real-time financial planning\n\nPlatform\n\nFeaturesIntegrationsTrust and SecurityPricingBook a Demo\n\nCustomers\n\nCustomer StoriesCase study: HumaansCase study: ClassDojoCase study:\nPrefectCase study: BranchCase study: Marley Spoon\n\nIntegrations\n\nQuickbooksXeroNetSuiteSalesforceHubspotSnowflakeStripe\n\nResources\n\nBlogDocumentationProduct UpdatesStartup Finance JobsWebinarsCareersPrivacy\nPolicyTerms of Service\n\n\u00a9 2024 Causal, Inc. All rights reserved.\n\n", "frontpage": false}
