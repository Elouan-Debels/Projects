{"aid": "39982260", "title": "Introduction to Atproto 1: What Is PDS? What Features Does It Have?", "url": "https://whtwnd.com/whtwnd.com/3kppjro6k6z27", "domain": "whtwnd.com", "votes": 2, "user": "Wasserpuncher", "posted_at": "2024-04-09 18:05:40", "comments": 0, "source_title": "Introduction to atproto 1: What is PDS\uff1f What Features Does It Have\uff1f | whtwnd.com", "source_text": "Introduction to atproto 1: What is PDS? What Features Does It Have? | whtwnd.com | WhiteWind blog\n\n# Introduction to atproto 1: What is PDS? What Features Does It Have?\n-WhiteWind TechTalk-\n\nLast updated on 2024-04-05\n\nHello, I'm K-NKSM, a developer at WhiteWind who created this blog system!\nRecently, the microblogging site Bluesky has been getting a lot of attention.\nIt's well-known that Bluesky uses the Authenticated Transfer Protocol (AT\nProtocol, atproto) behind the scenes. However,\n\n  * The standards page is too abstract and doesn't give a clear picture\n  * It's hard to grasp the novelty of atproto\n  * There's a desire to create something with atproto but moving forward is difficult without concise sample code or a Getting Started guide\n\nMany people might feel this way. This series aims to demystify atproto,\nstarting with its basic mechanisms understandable even to non-engineers,\nthrough to setting up a development environment for atproto, designing\nAppView, and using WhiteWind as an example to help resolve the above\nquestions.\n\nIn this first part, we will discuss the characters and features of atproto.\n\nBelow is a simplified overview of Bluesky's operation, focusing on the\nessential components for a basic understanding of atproto.\n\nLet's look at the roles of each component.\n\n## Bluesky client\n\nThis refers to apps that users can operate from smartphones or computer\nbrowsers. It sends data like posts or likes to the server based on user\noperations.\n\n## PDS\n\n### PDS is cloud storage with an API\n\nPDS stands for Personal Data Server, which saves data like posts or likes\nbased on commands from the client. PDS has a dedicated space for storing each\nuser's data. This space is called a repository (repo).\n\nPDS receives atproto data from the client and saves it to the repository, but\nPDS itself fundamentally does not understand what data it's being asked to\nstore. Following a certain format, it's possible to store data unrelated to\nBluesky that the user has created on their own. This is permissible because\nPDS is not Bluesky. I often describe PDS as \"cloud storage with API\nfunctionality.\" Like cloud storage, you can store anything you want, whether\nit's created with Google products or not, and whether it's images or PDFs.\nJust as there are various cloud storage options like Google Drive or OneDrive,\nPDS can be operated by people completely unrelated to Bluesky, hence it allows\nfor the storage of any data one likes. However, as of April 2024, Bluesky, the\ndeveloper of atproto, operates most of the PDS.\n\n### All data is public\n\nAll data stored on PDS is publicly available worldwide. PDS implementations\nthat require authentication for reading specific data are not prohibited by\nthe standard, but no such PDS implementations exist at the moment.\n\n### Relays requests from clients to AppView\n\nPDS also has the role of relaying requests from clients to AppView.\n\n### PDS can be switched\n\natproto provides a mechanism for users to switch their PDS, allowing users to\ncontinue using the same account even after switching PDS. This means the\naccount is managed separately from the repository on PDS. This is\nfundamentally different from, for example, downloading all posts from\nX/Twitter, deleting the account, and starting over with a new account to\nrepost or refollow. The mechanism for atproto accounts will be explained next\ntime.\n\n### A more detailed overview of PDS\n\n  * What does a PDS implementation entail? \u00b7 bluesky-social/atproto \u00b7 Discussion #2350\n\n## Relay (firehose, BGS)\n\nRelay is constantly connected to all PDS worldwide. If a repository on PDS\nundergoes any changes, it notifies Relay of what changed. Relay receives that\ndata and streams it to those connected to it. Like existing internet\nmechanisms, Relay resembles entities that crawl all kinds of websites, like\nGoogle or Bing, absorbing data.\n\n### There can be many Relays worldwide\n\nJust as there are various search services like Google or Bing, there can be\nmany Relays. However, due to their role of connecting to all PDS and\ndistributing data to numerous downstream systems, it's expected that they\nrequire significantly powerful infrastructure. It's likely that only\norganizations with a certain scale of financial resources can operate them.\n\n### Anyone can connect to Relay\n\nRelay is a public infrastructure that anyone can freely connect to, allowing\naccess to all atproto data without having to crawl each PDS individually.\n\n## AppView\n\nAppView is connected to Relay and watches all atproto data flowing from around\nthe world. AppView understands the content of the data streaming in,\nprocessing it to create timelines or notifications among other data handling\ntasks. For example, the Bluesky AppView filters out data related to Bluesky,\nlists posts from specific users, and creates timelines for users being\nfollowed, providing features that require knowledge of global atproto data,\nsuch as user interactions and the actions of other users. This component is\nwhat is referred to as \"atproto service.\"\n\n### There can be many AppViews worldwide\n\nSimilar to Relay, there can be many AppViews worldwide. If an AppView decides\nto shadow-ban a specific user or forcefully push unnecessary information, it's\npossible to switch to a different AppView.\n\n## What happens with this setup?\n\nI've explained the basic roles of each component. So, what happens with such a\ncomponent setup?\n\n### Data accumulates on the user's server\n\nAs mentioned before, users' data is stored on PDS. PDS is akin to cloud\nstorage, allowing users to freely manipulate their data, essentially acting as\n\"the user's server.\" Thus, the data of atproto services is placed on the\nuser's server. It won't be arbitrarily deleted or altered by the service\noperator, nor will it become invisible to the world.\n\n### AppView does not manage users' data\n\nAlthough this is essentially repeating the previous point with different\nwording, the perspective changes significantly. As a trade-off for users\nowning and managing their data, service operators do not manage the data for\nthem. In centralized service configurations, user-generated data accumulates\non the service's server, so the service operator would pay for:\n\n  * Data storage costs\n  * Network bandwidth costs associated with data delivery\n  * Backups\n  * Availability maintenance\n\nWith atproto, because users control their data, PDS pays these costs instead.\nThis is a significant advantage from the perspective of service operators.\n\n### Competing services can be easily created\n\nSince all AppViews have access to the same data, it's impossible to gain a\ncompetitive advantage by monopolizing data. Therefore, anyone (given they have\nthe money and time) can create a social networking service to compete with\nBluesky.\n\n## Business Model\n\nFor the ecosystem to develop sustainably over the long term, a profitable\nbusiness model for everyone involved is necessary. How will each component\nmake money? The following are my personal speculations (from a business\nnovice).\n\n### PDS\n\nThinking of PDS as \"cloud storage with an API\" that hosts data and responds to\nqueries from Relay and others, maybe a model where a certain amount of data\nstorage is free, and exceeding that limit requires a subscription to a\nprofessional plan could work. Additionally, a system where those who wish to\ndistribute content to a large audience or benefit from wide visibility, like\n\"influencer plans,\" pay for infrastructure costs according to bandwidth and\navailability might be interesting. Although it's conceivable to have PDS that\nunderstand specific records and insert ads into responses to clients,\nconsidering the variety of records beyond Bluesky and WhiteWind that could\nexist in the future, this might not scale well.\n\n### Relay\n\nIt's unclear how Relay would make money. Maybe it could contract with\ndownstream systems to charge beyond a certain traffic volume.\n\n### AppView\n\nSince AppViews often develop clients as a set, inserting ads on the client\nside or mixing ads into the delivery data is possible. The structure of record\ndata inevitably becomes public, so anyone can easily develop a client with ad-\nblocking features. However, since the operational and infrastructure costs\ntraditionally borne by the service side are paid by PDS, the necessary amount\nof advertising could be less.\n\n## Summary\n\n  * In atproto, there are three main components: PDS, Relay, and AppView.\n  * PDS serves as the user's server, where data can be freely placed.\n  * Relay constantly absorbs data from all PDS.\n  * AppView receives data from Relay, processes and interprets it, performing indexing, data transformation, and user interaction, among other tasks.\n\nNext time, we plan to explain the account system in atproto.\n\n###### Comments\n\n###### Comment\n\n##### WhiteWind\n\n@whtwnd.com\n\nAccount of WhiteWind blog AppView https://whtwnd.com/ Usage:\nhttps://whtwnd.com/knksm5.final-\ntechblog.com/entries/Basic%20Usage%20of%20WhiteWind About:\nhttps://whtwnd.com/knksm5.final-techblog.com/entries/About%20WhiteWind\n\n", "frontpage": false}
