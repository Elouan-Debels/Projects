{"aid": "39991648", "title": "Interactive visualization and analytics on ADS-B data with ClickHouse", "url": "https://github.com/ClickHouse/adsb.exposed", "domain": "github.com/clickhouse", "votes": 2, "user": "todsacerdoti", "posted_at": "2024-04-10 15:14:33", "comments": 0, "source_title": "GitHub - ClickHouse/adsb.exposed: Interactive visualization and analytics on ADS-B data with ClickHouse", "source_text": "GitHub - ClickHouse/adsb.exposed: Interactive visualization and analytics on\nADS-B data with ClickHouse\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nClickHouse / adsb.exposed Public\n\n  * Notifications\n  * Fork 0\n  * Star 22\n\nInteractive visualization and analytics on ADS-B data with ClickHouse\n\nadsb.exposed/\n\n### License\n\nView license\n\n22 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# ClickHouse/adsb.exposed\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nalexey-milovidovUpdate README.md, Fix #95a9c9a3 \u00b7\n\n## History\n\n94 Commits  \n  \n### pictures\n\n|\n\n### pictures\n\n| Add README  \n  \n### CNAME\n\n|\n\n### CNAME\n\n| Planes: development  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Add LICENSE  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md, Fix #9  \n  \n### examples.js\n\n|\n\n### examples.js\n\n| Better colors  \n  \n### favicon.png\n\n|\n\n### favicon.png\n\n| Another favicon  \n  \n### index.html\n\n|\n\n### index.html\n\n| Safari  \n  \n### pointer.svg\n\n|\n\n### pointer.svg\n\n| More visible rectangular selection tool  \n  \n### prepare-data.txt\n\n|\n\n### prepare-data.txt\n\n| Add setup scripts  \n  \n### process-file.sh\n\n|\n\n### process-file.sh\n\n| Interactive links in the report  \n  \n### setup.sql\n\n|\n\n### setup.sql\n\n| Do not complicate index analysis  \n  \n## Repository files navigation\n\n# ADS-B Massive Visualizer\n\nThis website (technology demo) allows you to aggregate and visualize massive\namounts of air traffic data. The data is hosted in a ClickHouse database and\nqueried on the fly. You can tune the visualizations with custom SQL queries\nand drill-down from 50 billion records to individual data records.\n\n## Examples\n\nThe visualization is insanely beautiful.\n\n### Helicopters over Manhattan:\n\n### Denver airport:\n\nIf we zoom into a single airport, we can see where the planes are parked and\neven color them by a manufacturer or an airline:\n\n### Denver airport:\n\n### Amsterdam Schiphol\n\n### Denver by airlines\n\n### Schiphol by airlines\n\nYou can select only military airplanes and find military bases and airfields.\n\n### Military training in Texas:\n\n### Military training in Langley:\n\nYou can select only Helicopters and find hospitals and police stations.\n\n### VUMC in Amsterdam:\n\n### In London, helicopters fly over the river:\n\n### In Las Vegas there is no river:\n\nGliders are also interesting.\n\n### Gliders in Netherlands near Utrecht:\n\n### Gliders near Denver:\n\nSmall airports are beautiful.\n\n### Bay Area small airports:\n\n### Dallas small airports:\n\nF-16 military training:\n\n### F-16 air bases in the US:\n\n### F-16 training in Langley:\n\n### F-16 training in Belgium:\n\nIt is interesting to explore strange gaps in the map.\n\n### Guess what it is?\n\n### Polish air base\n\n### Maroc air base\n\n### A strange hole near Mexico City:\n\n### A volcano:\n\nBalloons and dirigibles are nice.\n\n### Indianapolis Balloons:\n\n### Project Loon:\n\n### Balloons over Alps:\n\n### Zeppelin:\n\n### Zeppelin in LA:\n\n### Emirates Engineering:\n\nIn Dubai Airport, the green hairball is a hangar of Emirates Engineering where\nAirbuses are maintained:\n\n### Patroling in Israel:\n\nIn Israel, there are strange patterns made by patrolling drones:\n\n### Namibia air club:\n\nIn Namibia, there is a nice air club:\n\nNear Toulouse, France, Airbus A-380 does its test flights:\n\n### A-380 in Toulouse:\n\n### Cognac Air Base:\n\n### Area 51:\n\n### CFB Suffield:\n\n### Airlines all over Europe:\n\nBy editing the SQL query you can color every airline with its own color.\n\n### Airlines in Denver airport:\n\n### War:\n\nAnalyzing a single airline we can see how the war affected the air traffic.\n\n### Police:\n\nThere are interesting examples of single aircrafts:\n\n### An-124:\n\nAn-124 is a beautiful cargo plane, and you can find many of them in Leipzig:\n\nBut DC-3 is unanimously the best:\n\n### DC-3:\n\n## Data Source\n\nADS-B (Automatic Dependent Surveillance\u2013Broadcast) is a radio protocol that is\nused to broadcast the data such as coordinates, altitude and velocity, and\nplenty of other interesting data. It is broadcast by \"transponders\" installed\non airplanes (and not only planes). This protocol is unencrypted and there are\nno restrictions for collecting, using, or redistributing this data. Most\npassenger airplanes are obligated to broadcast this data, and in certain\ncountries, even gliders, drones, and airport ground vehicles. Military and\nprivate light aircrafts might broadcast or not broadcast the data.\n\nIt is possible to collect this data out of thin air using your own radio\nreceiver (e.g., in the form of SDR), although your receiver will see the data\nonly in a certain range of your location. There are platforms for sharing and\nexchange of this data. Some of these platforms invite participants to share\nthe data but restrict its redistribution by providing commercial access to it.\nWhile the source data, broadcast by airplanes, is essentially public domain,\nthe companies may produce and license derivative works from this data.\n\nWe use the data from two sources: ADSB.lol (full historical data is provided\nwithout restrictions: 30..50 million records per day, available since 2023)\nand ADSB-Exchange (only provides samples of data from first day of each month:\naround 1.2 billion records per day with better coverage).\n\n## Implementation Details\n\nThe website is implemented as a single HTML page. It does not use JavaScript\nframeworks and the source code is not minified, so you can easily read it.\n\n### Rendering the Map\n\nIt uses a Leaflet library to display the map. It adds two layers to the map.\nThe background layer uses tiles from OpenStreetMap for a usual geographic map.\nThe main layer overlays the visualization on top of the background map.\n\nThe visualization layer uses a GridLayer with a custom callback function\ncreateTile which generates Canvas elements on the fly:\n\n    \n    \n    L.GridLayer.ClickHouse = L.GridLayer.extend({ createTile: function(coords, done) { let tile = L.DomUtil.create('canvas', 'leaflet-tile'); tile.width = 1024; tile.height = 1024; render(this.options.table, this.options.priority, coords, tile).then(err => done(err, tile)); return tile; } }); const layer_options = { tileSize: 1024, minZoom: 2, maxZoom: 19, minNativeZoom: 2, maxNativeZoom: 16, attribution: '\u00a9 Alexey Milovidov, ClickHouse, Inc. (data: adsb.lol, adsbexchange.com)' };\n\nIt uses tiles of 1024x1024 size for high resolution and to lower the number of\nrequests to the database.\n\nThe rendering function performs a request to ClickHouse using its HTTP API\nwith the JavaScript's fetch function:\n\n    \n    \n    const query_id = `${uuid}-${query_sequence_num}-${table}-${coords.z - 2}-${coords.x}-${coords.y}`; const hosts = getHosts(key); const url = host => `${host}/?user=website&default_format=RowBinary` + `&query_id=${query_id}&replace_running_query=1` + `&param_table=${table}&param_sampling=${[0, 100, 10, 1][priority]}` + `&param_z=${coords.z - 2}&param_x=${coords.x}&param_y=${coords.y}`; progress_update_period = 1; const response = await Promise.race(hosts.map(host => fetch(url(host), { method: 'POST', body: sql })));\n\nThe SQL query can be edited by a user on the fly using a form on the page to\nadjust the visualization. It is a parameterized query, accepting tile\ncoordinates (x, y) and zoom level as parameters.\n\nThe query returns RGBA values of each pixel of the image in the RowBinary\nformat (1024x1024 pixels, 1048576 rows, 4 bytes each, 4 MiB in total for each\ntile). It uses zstd compression in HTTP response as long as the browser\nsupports it. It was a nice observation that zstd compression over raw pixels\nbitmap works better than PNG! (not surprising, though).\n\nMost of the time the image data compresses several times. But anyway, hundreds\nof megabytes have to be transferred over the network. That's why the service\ncan feel slow on bad Internet connections.\n\n    \n    \n    let ctx = tile.getContext('2d'); let image = ctx.createImageData(1024, 1024, {colorSpace: 'display-p3'}); let arr = new Uint8ClampedArray(buf); for (let i = 0; i < 1024 * 1024 * 4; ++i) { image.data[i] = arr[i]; } ctx.putImageData(image, 0, 0, 0, 0, 1024, 1024);\n\nThe data is put on the canvas and returned. We use the \"Display P3\" color\nspace to have a wider gamut in supporting browsers.\n\nWe use three different tables with different levels of detail: planes_mercator\ncontains 100% of the data, planes_mercator_sample10 contains 10% of the data,\nand planes_mercator_sample100 contains 1% of the data. The loading starts with\na 1% sample to provide instant response even while rendering the whole world.\nAfter loading the first level of detail, it continues to the next level of\n10%, and then it continues with 100% of the data. This gives a nice effect of\nprogressive loading.\n\nThe image data is also cached on the client simply in a JavaScript object:\n\n    \n    \n    if (!cached_tiles[key]) cached_tiles[key] = []; /// If there is a higer-detail tile, skip rendering of this level of detal. if (cached_tiles[key][priority + 1]) return; buf = cached_tiles[key][priority];\n\nThe downside is that after browsing for a certain time, the page will eat too\nmuch memory.\n\n### Database and Queries\n\nThe database is pretty small by ClickHouse standards. It has 44.47 billion\nrows in the planes_mercator table as of Mar 29th, 2024, and is continuously\nupdated with new records. It takes 1.6 TB of disk space.\n\nThe table schema is as follows (you can read it in the setup.sql source):\n\n    \n    \n    CREATE TABLE planes_mercator ( mercator_x UInt32 MATERIALIZED 0xFFFFFFFF * ((lon + 180) / 360), mercator_y UInt32 MATERIALIZED 0xFFFFFFFF * (1/2 - log(tan((lat + 90) / 360 * pi())) / 2 / pi()), INDEX idx_x (mercator_x) TYPE minmax, INDEX idx_y (mercator_y) TYPE minmax, time DateTime64(3), date Date, icao String, r String, t LowCardinality(String), dbFlags Int32, noRegData Bool, ownOp LowCardinality(String), year UInt16, desc LowCardinality(String), lat Float64, lon Float64, altitude Int32, ground_speed Float32, track_degrees Float32, flags UInt32, vertical_rate Int32, aircraft_alert Int64, aircraft_alt_geom Int64, aircraft_gva Int64, aircraft_nac_p Int64, aircraft_nac_v Int64, aircraft_nic Int64, aircraft_nic_baro Int64, aircraft_rc Int64, aircraft_sda Int64, aircraft_sil Int64, aircraft_sil_type LowCardinality(String), aircraft_spi Int64, aircraft_track Float64, aircraft_type LowCardinality(String), aircraft_version Int64, aircraft_category Enum8( 'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'D0', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', ''), aircraft_emergency Enum8('', 'none', 'general', 'downed', 'lifeguard', 'minfuel', 'nordo', 'unlawful', 'reserved'), aircraft_flight LowCardinality(String), aircraft_squawk String, aircraft_baro_rate Int64, aircraft_nav_altitude_fms Int64, aircraft_nav_altitude_mcp Int64, aircraft_nav_modes Array(Enum8('althold', 'approach', 'autopilot', 'lnav', 'tcas', 'vnav')), aircraft_nav_qnh Float64, aircraft_geom_rate Int64, aircraft_ias Int64, aircraft_mach Float64, aircraft_mag_heading Float64, aircraft_oat Int64, aircraft_roll Float64, aircraft_tas Int64, aircraft_tat Int64, aircraft_true_heading Float64, aircraft_wd Int64, aircraft_ws Int64, aircraft_track_rate Float64, aircraft_nav_heading Float64, source LowCardinality(String), geometric_altitude Int32, geometric_vertical_rate Int32, indicated_airspeed Int32, roll_angle Float32 ) ENGINE = MergeTree ORDER BY (mortonEncode(mercator_x, mercator_y), time);\n\nIt contains lat and lon columns with coordinates, and we use MATERIALIZED\ncolumns to automatically convert them to coordinates in the Web-Mercator\nprojection, which is used by the Leaflet software and most of the maps on the\nInternet. The Mercator coordinates are stored in UInt32 which makes it easy to\ndo arithmetics with tile coordinates and zoom levels in a SQL query.\n\nThe table is sorted by a Morton Curve of Web Mercator coordinates, and we\ndefined a minmax index on them - this is how queries for certain tiles will\nread only the requested data.\n\nWe create level-of-detail tables with Materialized Views, so they are\ncalculated automatically:\n\n    \n    \n    CREATE TABLE planes_mercator_sample10 AS planes_mercator; CREATE TABLE planes_mercator_sample100 AS planes_mercator; CREATE MATERIALIZED VIEW view_sample10 TO planes_mercator_sample10 AS SELECT * FROM planes_mercator WHERE rand() % 10 = 0; CREATE MATERIALIZED VIEW view_sample100 TO planes_mercator_sample100 AS SELECT * FROM planes_mercator WHERE rand() % 100 = 0;\n\nWe use a service on our staging environment in ClickHouse Cloud. The staging\nenvironment is used to test new ClickHouse versions and new types of\ninfrastructure that we implement. For example, we can try different types of\nmachines, and different scales of the service, or we can test new features,\nsuch as distributed cache, that are in development. Also, the staging\nenvironment uses fault injection: we interrupt network connections with a\ncertain probability to ensure that the service operates normally. It uses\nchaos engineering: we terminate various machines of clickhouse-server and\nclickhouse-keeper at random, and also randomly scale the service back and\nforth to a different number of machines. This is how this project facilitates\nthe development and testing of our service.\n\nWe also created a backup service and we are making requests to both of them\nconcurrently. Whichever service returns first, will be used. This is how we\ncan avoid downtime while still using our staging environment.\n\nLet's take a look at an SQL query for the \"Boeing vs. Airbus\" visualization:\n\n    \n    \n    WITH bitShiftLeft(1::UInt64, {z:UInt8}) AS zoom_factor, bitShiftLeft(1::UInt64, 32 - {z:UInt8}) AS tile_size, tile_size * {x:UInt16} AS tile_x_begin, tile_size * ({x:UInt16} + 1) AS tile_x_end, tile_size * {y:UInt16} AS tile_y_begin, tile_size * ({y:UInt16} + 1) AS tile_y_end, mercator_x >= tile_x_begin AND mercator_x < tile_x_end AND mercator_y >= tile_y_begin AND mercator_y < tile_y_end AS in_tile, bitShiftRight(mercator_x - tile_x_begin, 32 - 10 - {z:UInt8}) AS x, bitShiftRight(mercator_y - tile_y_begin, 32 - 10 - {z:UInt8}) AS y, y * 1024 + x AS pos, count() AS total, sum(desc LIKE 'BOEING%') AS boeing, sum(desc LIKE 'AIRBUS%') AS airbus, sum(NOT (desc LIKE 'BOEING%' OR desc LIKE 'AIRBUS%')) AS other, greatest(1000000 DIV {sampling:UInt32} DIV zoom_factor, total) AS max_total, greatest(1000000 DIV {sampling:UInt32} DIV zoom_factor, boeing) AS max_boeing, greatest(1000000 DIV {sampling:UInt32} DIV zoom_factor, airbus) AS max_airbus, greatest(1000000 DIV {sampling:UInt32} DIV zoom_factor, other) AS max_other, pow(total / max_total, 1/5) AS transparency, 255 * (1 + transparency) / 2 AS alpha, pow(boeing, 1/5) * 256 DIV (1 + pow(max_boeing, 1/5)) AS red, pow(airbus, 1/5) * 256 DIV (1 + pow(max_airbus, 1/5)) AS green, pow(other, 1/5) * 256 DIV (1 + pow(max_other, 1/5)) AS blue SELECT round(red)::UInt8, round(green)::UInt8, round(blue)::UInt8, round(alpha)::UInt8 FROM {table:Identifier} WHERE in_tile GROUP BY pos ORDER BY pos WITH FILL FROM 0 TO 1024*1024\n\nIt uses the WITH clause to define aliases for various expressions. It uses\ntype-safe parameters (x, y, z, sampling, table) for parameterized queries.\n\nThe first part of the query calculates the condition in_tile which is used in\nthe WHERE section to filter the data in the requested tile. Then it calculates\nthe colors: alpha, red, green, and blue. They are adjusted by the pow function\nfor better uniformity, clamped to the 0..255 range, and converted to UInt8.\nThe sampling parameter is used for adjustment in a way so that queries with a\nlower level of detail will return pictures with mostly the same relative\ncolors. We group by the pixel coordinate pos and also use the WITH FILL\nmodifier in the ORDER BY to fill zeros in the pixel positions that have no\ndata. As a result, we will get an RGBA bitmap with the exact 1024x1024 size.\n\n### Reports\n\nIf you select an area with the right mouse button or use a selection tool, it\nwill generate a report from the database for the selection area. This is\nentirely straightforward. For example, here is a query for the top aircraft\ntypes:\n\n    \n    \n    const sql_types = ` WITH mercator_x >= {left:UInt32} AND mercator_x < {right:UInt32} AND mercator_y >= {top:UInt32} AND mercator_y < {bottom:UInt32} AS in_tile SELECT t, anyIf(desc, desc != '') AS desc, count() AS c FROM {table:Identifier} WHERE t != '' AND ${condition} GROUP BY t ORDER BY c DESC LIMIT 100`;\n\nThe report is calculated for flight numbers, aircraft types, registration\n(tail numbers), and owners. You can click on any item and it will apply a\nfilter to the main SQL query. For example, click on A388 and it will show you\na visualization for Airbus 380-800.\n\nAs a bonus, if you move the cursor over an aircraft type, it will go to\nWikipedia API and try to find a picture of this aircraft. It often finds\nsomething else on Wikipedia, though.\n\n### Saved Queries\n\nYou can edit a query and then share a link. The query is converted to a\n128-bit hash and saved in the same ClickHouse database:\n\n    \n    \n    async function saveQuery(text) { const sql = `INSERT INTO saved_queries (text) FORMAT RawBLOB`; const hosts = getHosts(null); const url = host => `${host}/?user=website_saved_queries&query=${encodeURIComponent(sql)}`; const response = await Promise.all(hosts.map(host => fetch(url(host), { method: 'POST', body: text }))); } async function loadQuery(hash) { const sql = `SELECT text FROM saved_queries WHERE hash = unhex({hash:String}) LIMIT 1`; const hosts = getHosts(null); const url = host => `${host}/?user=website_saved_queries&default_format=JSON&param_hash=${hash}`; const response = await Promise.race(hosts.map(host => fetch(url(host), { method: 'POST', body: sql }))); const data = await response.json(); return data.data[0].text; }\n\nWe use a different user website_saved_queries with different access control\nand quotas for these queries.\n\n### Progress Bar\n\nIt is nice to display a progress bar with the amount of data processed in rows\nand bytes.\n\n    \n    \n    const sql = `SELECT sum(read_rows) AS r, sum(total_rows_approx) AS t, sum(read_bytes) AS b, r / max(elapsed) AS rps, b / max(elapsed) AS bps, formatReadableQuantity(r) AS formatted_rows, formatReadableSize(b) AS formatted_bytes, formatReadableQuantity(rps) AS formatted_rps, formatReadableSize(bps) AS formatted_bps FROM clusterAllReplicas(default, system.processes) WHERE user = 'website' AND startsWith(query_id, {uuid:String})`; const hosts = getHosts(uuid); const url = host => `${host}/?user=website_progress&default_format=JSON&param_uuid=${uuid}`; let responses = await Promise.all(hosts.map(host => fetch(url(host), { method: 'POST', body: sql }))); let datas = await Promise.all(responses.map(response => response.json()));\n\nWe just select from system.processes across all servers of the cluster.\nActually, it displays not the precise progress, because there are many tiles\nrequested in parallel and many queries, with some of them finished and some in\nprogress. The query will see only in-progress queries, so the number of total\nprocessed records will be lower than the actual.\n\nWe also color the progress bar differently when we are loading the first level\nof detail, the second level of detail, etc.\n\n### Cache Locality\n\nThe service in ClickHouse Cloud can use multiple replicas and by default, the\nrequests are routed to an arbitrary healthy replica. If a query is going to\nprocess a large amount of data, it will be parallelized across many replicas,\nbut if it is a small query it can use just a single replica. The data is\nstored in AWS S3 and each replica pod also has a locally attached SSD which is\nused for the cache, and consequently, the page cache in memory also makes an\neffect.\n\nTo achieve better performance, we use a \"sticky connections\" feature of\nClickHouse Cloud:\n\n    \n    \n    let prefix = ''; if (stick) { const hash = sipHash128(JSON.stringify(stick)).substr(0, 3); prefix = `${hash}.sticky.`; } const cloud_host = `https://${prefix}kvzqttvc2n.eu-west-1.aws.clickhouse-staging.com`;\n\nIt maps a query to a pseudorandom hostname, e.g. xyz.sticky.kvzqttvc2n.eu-\nwest-1.aws.clickhouse-staging.com so that the same query will be mapped to the\nsame hostname. The load balancer maps this hostname to a replica using a\nconsistent hashing algorithm.\n\n## References\n\n### Similar Projects\n\nSimilar projects track back to 2007. Analysis and visualization of the air\ntraffic and geospatial data are easy and accessible (assuming you use\nClickHouse).\n\n#### Flight Patterns by Aaron Koblin (2007)\n\n#### Airspace Rebooted by ItoWorld and Hal Bertram (2010)\n\n#### Europe 24 \u2013 an air traffic data visualisation by nats.aero (2014)\n\n#### Strava Global Heatmap (2014)\n\nAlso, read the blog post about rebuilding this heatmap (2017).\n\n#### Connected World: Untangling the Air Traffic Network by Martin Grandjean\n(2016)\n\n#### Highways In The Skies by Topi Tjukanov (2018)\n\n#### Flight Data Visualization by Stephen (2018)\n\n#### Carto.com: BigQuery Tiler (2021)\n\nDue to the limitations of the underlying technology (BigQuery instead of\nClickHouse), the service works slowly and each query comes with a big cost.\n\n#### One Day of Global Air Traffic by Carlos Bergillos (2022)\n\nThis project is very similar to mine, but I found it late. It uses pre-\ngenerated tiles instead of generating them on the fly. The author probably\ndidn't know about ClickHouse. This limits it to just a single visualization.\n\n#### Heavy.AI: Ships Tracking (2022)\n\nThis is a demo from another database vendor. They use a smaller dataset (AIS\ndata for ship tracking) but the demo is slow.\n\n#### Mapping the World\u2019s Flight Paths with Python by Adam Symington (2023)\n\n#### Global Flight Tracking by Mark Litwintschik (2023)\n\nThis blog post shows how to analyze a single day of data using a Python\nscript. The technology stack used in the article is not powerful enough to\nanalyze the full dataset on the fly, which is only possible with ClickHouse.\n\n### List Of Exchanges\n\n  * https://adsb.lol/ - the best resource, provides historical data for download with no strings attached;\n  * https://adsb.fi/ - advertises open and unfiltered access, but does not provide batch data access;\n  * https://adsb.one/ - advertises being dedicated to public interest, but does not provide batch data access;\n  * https://www.adsbhub.org/\n  * https://adsbexchange.com/ - a large data archive, but no longer provides the full data publicly after the acquisition;\n  * https://flightaware.com/\n  * https://flightradar24.com/ - a popular website, good coverage, but no public data access;\n  * https://opensky-network.org/ - supposed to be open for research purposes, but they didn't answer to email;\n  * https://openflights.org/\n\n### I want to help you with your database infrastructure. Please contact me\nhere.\n\n## About\n\nInteractive visualization and analytics on ADS-B data with ClickHouse\n\nadsb.exposed/\n\n### Topics\n\nclickhouse geospatial ads-b flightradar\n\n### Resources\n\nReadme\n\n### License\n\nView license\n\nActivity\n\nCustom properties\n\n### Stars\n\n22 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Languages\n\n  * HTML 55.8%\n  * JavaScript 38.7%\n  * Shell 5.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
