{"aid": "40053147", "title": "Over 120 Skills I Use in an SRE / Platform / DevOps Developer Position", "url": "https://nickjanetakis.com/blog/120-skills-i-use-in-an-sre-platform-devops-developer-position", "domain": "nickjanetakis.com", "votes": 1, "user": "nickjj", "posted_at": "2024-04-16 15:20:41", "comments": 0, "source_title": "120+ Skills I Use in an SRE / Platform / DevOps Developer Position", "source_text": "120+ Skills I Use in an SRE / Platform / DevOps Developer Position \u2014 Nick\nJanetakis\n\n### Learn Docker With My Newest Course\n\nDive into Docker takes you from \"What is Docker?\" to confidently applying\nDocker to your own projects. It's packed with best practices and examples.\nStart Learning Docker \u2192\n\nUpdated on April 16th, 2024 in #dev-mindset\n\n# 120+ Skills I Use in an SRE / Platform / DevOps Developer Position\n\n## These are technical topics I've actively used or thought about for the last\n2 years while working in 1 role.\n\nQuick Jump: The 'DevOps' Elephant in the Room | How Do You Describe This Role? | The Skills | Video Explanation\n\nPrefer video? Here is it on YouTube. It includes more detail about each skill.\n\nI mentioned 2 years but that doesn\u2019t mean it\u2019s expected to know about\neverything that\u2019s listed with 2 years of experience. I\u2019ve been building and\ndeploying web apps for over 20+ years. These are some skills I exercised in 1\nrole for ~2 years.\n\nI rarely think about skills like this but thought it could be interesting to\nwrite out because:\n\n  * If you want to get into this field, these are a few topics to explore\n  * If you\u2019re a company hiring someone, you can use this to help write a job description\n\nIn this post, we\u2019ll be focusing mostly on technical skills and not soft\nskills. Soft skills can be covered in a future post because there\u2019s a lot to\nthink about there too. Examples of soft skills are managing up, big picture\nthinking, emotional intelligence and more.\n\n### The \u2018DevOps\u2019 Elephant in the Room\n\nYes, I also don\u2019t like the term \u201cDevOps developer\u201d or \u201cDevOps engineer\u201d as a\nrole type because in my mind DevOps is a business wide philosophy but I do\nthink folks use this term to describe a very real combination of technical\nskills.\n\nIt boils down to someone who likes infrastructure and most things related to\nan SRE (Site Reliability Engineer) or platform role but also has a lot of\nexperience building web apps.\n\nTopics like web servers, databases, caching, background workers, keeping app\npackage dependencies up to date and other stuff come into play. This unlocks a\nwhole category of ways you can provide business value. Suddenly you know how\nto scale background workers and have no problem jumping into app code to make\nchanges \u2013 even if you don\u2019t fully know the programming language!\n\nHopefully there\u2019s only minor code changes, like replacing hard coded config\nvalues with environment variables, setting up health check end points and\nthings of that nature.\n\nYou can talk shop with developers and understand their perspective on things.\nFor bigger code changes such as uploading files to S3 instead of a local file\nsystem when moving into Kubernetes, you can write tickets in enough detail to\nhelp developers think about edge cases and other concerns.\n\nAlso, I\u2019ve found in practice a lot of developers don\u2019t think about or more\ncommonly aren\u2019t interested in what happens to their code after it\u2019s running in\nproduction but if you have experience building and deploying web apps you can\nhelp level up everyone (yourself included) by sharing knowledge and applying\nexamples directly to your org\u2019s apps.\n\nThis can really move the ball forward on building more resilient, stable and\nscalable applications. I think there\u2019s a lot of value in having this combo of\nexperience.\n\n### How Do You Describe This Role?\n\nBesides the 120+ skills listed below, there\u2019s also things like being an on\ndemand consultant for a dev team to solve general problems, maximizing\ndeveloper happiness with tools that make things easier, keeping an eye on\ntechnical debt while advocating and promoting engineering principles to help\nguide a team on delivering maintainable code at a sustainable pace \u2013 all while\nattempting to avoid stepping on anyone\u2019s toes.\n\nYou may also occasionally dabble in risk level topics like ensuring the\ncompany\u2019s SAAS app is compliant with US tax sales liabilities or is\nresponsible for helping a business line move from Slack to Teams because the\nCTO determined that\u2019s the best move for the business.\n\nYou also participate outside of your team to help shape system and technology\nchoices for your whole organization. You can be counted on by the org to be an\n\u201caction taker\u201d and \u201cproblem solver\u201d for almost anything.\n\nYou\u2019re comfortable chatting with vendors and providing demos or presentations\nto anyone in the org, including non-technical topics such as helping non-\ntechnical folks from tool A to B.\n\nYou\u2019re also trusted to come up with a system to run technical interviews for\nengineering positions along with participating in those interviews.\n\nThe above list can go on and on. That\u2019s a tiny handful of ancillary topics\nthat came up in the last 2 years. I wanted to include them because besides\nsolving pure technical problems like writing a script, there\u2019s things like\nthat which come up in your day to day.\n\nIt\u2019s kind of like a jack of all trades tech focused role but instead of being\na master of none, you have enough knowledge in enough related things that you\ncan cross a bunch wires internally to provide solutions to a wide range of\nproblems.\n\nIn one role, the title was \u201cLORE\u201d which is Lead Operations and Reliability\nEngineer. It was picked solely due to the acronym sounding cool and it has a\nfun easter egg related to Star Trek: The Next Generation.\n\nFor anyone who knows who Lore is from TNG, no I don\u2019t really think of myself\nin that way.\n\nI like keeping notes and it provided me personal joy in naming my work notes\ndirectory \u201clore\u201d because the definition of the word is related to storing\nknowledge about a subject.\n\nNow onto the skills...\n\n### The Skills\n\nI time boxed myself to about an hour to come up with this list (minus the\ndescriptions) so it\u2019s likely I\u2019m missing quite a few things. This should be\ngood enough to begin with and I\u2019ll add to it if I think of something later.\n\nI also tried to keep it high level. For example the first item in the list has\nabout 100 sub-topics based on what you\u2019re doing. I didn\u2019t bother putting \u201cS3\u201d\nor \u201cobject storage\u201d as part of the top level list.\n\n  1. AWS\n\n     * IAM, EC2, EKS, ALB, S3, RDS, ElastiCache and other resources to host web apps\n  2. AWS SAM\n\n     * Used to build and deploy Serverless Lambda functions\n  3. Access control\n\n     * Who can access what across multiple apps, resources, services, and tools\n  4. Ansible\n\n     * Configure your servers in an automated way\n  5. Apache\n\n     * A web server (perhaps the org you\u2019re with is already using it)\n  6. Architectural patterns\n\n     * How can we develop technical systems that work for our business requirements?\n  7. Argo CD\n\n     * Helps deploy Kubernetes apps by converging the state of a git repo to your cluster\n  8. Automation\n\n     * Taking any manual task and automating it with tools, services, etc.\n  9. Back-end development\n\n     * Creating the server side component of a web app\n  10. Background job processing\n\n     * Executing tasks outside of the request / response cycle\n  11. Bash / Shell scripting\n\n     * Writing scripts to solve ADHOC business tasks\n  12. Batch processing\n\n     * Purposely breaking up tasks in batches of N to prevent performance issues\n  13. Benchmarking and profiling\n\n     * How does a site perform when under varied load? How can it be measured?\n  14. Bitbucket\n\n     * A service to host source code using git\n  15. Building CLI tools\n\n     * Internal tools to help automate workflows or make processes easier\n  16. CI pipelines\n\n     * Automate things like linting, testing and building images / deployable artifacts\n  17. Cache busting\n\n     * Digest static assets so web servers or a CDN can use long lived cache headers\n  18. Caching\n\n     * Prevent expensive operations like DB queries or API calls if nothing has changed\n  19. CloudFormation\n\n     * An AWS tool to help automate creating and configuring resources\n  20. Code formatting\n\n     * Using and configuring tools to assist in formatting code (Black in Python, etc.)\n  21. Code linting\n\n     * Using and configuring tools to find issues in your code (Flake8 in Python, etc.)\n  22. Command line\n\n     * Using tools like grep, sed, cut and friends to solve ADHOC business problems\n  23. Concurrency and parallelism\n\n     * Something that can be done to help reduce how long tasks take to complete\n  24. Configuration management\n\n     * Using tools like Ansible or AWS SAM are an example of this\n  25. Confluence\n\n     * Store knowledge in a way that\u2019s digestible and searchable by a business\n  26. Container runtimes\n\n     * Knowing the difference between containerd and things like dockershim (K8s 1.24)\n  27. Cost optimization and analysis\n\n     * How can we keep an eye on cloud costs and what can we do to reduce costs?\n  28. Cron jobs\n\n     * Run tasks on a recurring schedule, such as making an API call at 2am every day\n  29. DDoS prevention\n\n     * What can we do to prevent our site from going down if under a large scale attack?\n  30. DKIM\n\n     * Typically combined with DMARC and SPF to verify emails are sent by a domain\n  31. DMARC\n\n     * Typically combined with DKIM and SPF to verify emails are sent by a domain\n  32. DNS\n\n     * Ultimately map hostnames to an IP address, weighted DNS, etc.\n  33. Database backups and restoring\n\n     * Backup and restore your data in a resilient way (disaster recovery, etc.)\n  34. Databases\n\n     * Which DB works well for this use case? What size do we need? Writing queries\n  35. Datadog\n\n     * A service to help collect, view and alert on logs and metrics\n  36. Debugging\n\n     * Something isn\u2019t working as expected, how do we find the root cause?\n  37. Docker\n\n     * Run a process in isolation and gain cross-OS portability\n  38. Docker Compose\n\n     * Run 1 or more containers together, such as everything related to 1 project\n  39. Documentation\n\n     * Explaining how to use something and hopefully also cover the \u201cwhy\u201d\n  40. Dotfiles\n\n     * Configure various shell related tools to create a personalized experience\n  41. Email delivery validation\n\n     * Help ensure emails can be trusted and don\u2019t get marked as spam\n  42. Encryption\n\n     * Protecting user data at rest and in transit\n  43. Environment variables\n\n     * Tweak settings that change in dev vs prod and help protect secrets\n  44. Event driven architectures\n\n     * For example, triggering a function after an S3 file is uploaded, etc.\n  45. Excel\n\n     * Sometimes a spreadsheet is really what you need to solve something quickly\n  46. Feature flags\n\n     * Enabling or disabling features for a subset of users until it\u2019s fully rolled out\n  47. File systems\n\n     * At least knowing what\u2019s different between Linux and macOS, performance, etc.\n  48. Firewalls\n\n     * Monitor and potentially block traffic within a network\n  49. Flask\n\n     * Python based micro-web framework for building web apps and APIs\n  50. Front-end development\n\n     * Tools to help manage CSS and JS but you can also think of user experience too\n  51. Full text search\n\n     * A method to effectively search for strings and phrases within a database\n  52. General hardware knowledge\n\n     * AMD64 vs ARM64, SSD / IOPS and knowing how to measure / pick hardware\n  53. Git\n\n     * Make commits, merge branches, resolve conflicts, hooks, create workflows, etc.\n  54. GitLab\n\n     * A service to host source code using git\n  55. HTTP or generally how the web works\n\n     * Generally knowing how everything works together, HTTP verbs, etc.\n  56. Health checks\n\n     * Continuous monitoring to ensure your app is available\n  57. Helm\n\n     * A template based approach to help manage Kubernetes configs and apps\n  58. Horizontal scaling\n\n     * Adding more servers or containers to help handle more traffic\n  59. Infrastructure as code\n\n     * The idea of provisioning resources and config files with code\n  60. Jira\n\n     * A service to help manage working on tickets\n  61. Kubernetes\n\n     * A tool to automate deploying and scaling containerized applications\n  62. Kustomize\n\n     * A patch based approach to help manage Kubernetes configs and apps\n  63. Linux\n\n     * Being proficient in using a Linux distro of your choice (Debian, Ubuntu, etc.)\n  64. Load balancing\n\n     * A way to distribute traffic across resources (random, round robin, etc.)\n  65. Load testing\n\n     * Using tools like wrk to see how a site performs under load\n  66. Logging\n\n     * What to log? What not to log? How to parse logs and controlling costs\n  67. Markdown\n\n     * A light weight text format to help write documentation and notes\n  68. MFA / 2FA\n\n     * An added level of protection around securing access to an account\n  69. Memcached\n\n     * A tool to help cache information\n  70. Microservices\n\n     * A strategy to help organize and break up an application (it\u2019s not a silver bullet)\n  71. Monitoring and alerting\n\n     * If something goes wrong, how can you get notified?\n  72. Multiple deployment environments\n\n     * Pull request environments, shared staging environment, production, demo, etc.\n  73. NGiNX\n\n     * Web server, reverse proxy, load balancer, TLS termination, redirects and more\n  74. Networking\n\n     * General knowledge around protocols (TCP, HTTP) and types (LAN, WAN, etc.)\n  75. OpenAPI spec\n\n     * A specification for documenting APIs\n  76. Operating systems\n\n     * Knowing your way around Windows, macOS and Linux\n  77. POSIX compliance\n\n     * Do your shell scripts need maximum compatibility? How can you achieve this?\n  78. Package managers\n\n     * Knowing how to use and configure tools like apt, brew, etc.\n  79. Patch management\n\n     * Keeping your servers and app dependencies up to date\n  80. Payment gateways\n\n     * Accepting multiple types of payments (Credit card, PayPal, Apple pay, etc.)\n  81. Penetration testing\n\n     * Evaluating the results of pen tests and knowing which reports apply to your app\n  82. Performance monitoring\n\n     * Actively understand how your app is performing and how to improve things\n  83. Pingdom\n\n     * A service to monitor and track uptime as well as notify you of downtime\n  84. Port forwarding\n\n     * Knowing when you want to make a port available within a network\n  85. Privacy\n\n     * Protecting the privacy of your customers\n  86. Process management\n\n     * Understanding systemd and how Docker / Kubernetes keep processes up\n  87. Proxies\n\n     * Passing traffic through a server, this includes reverse proxies such as NGiNX\n  88. Python\n\n     * A programming language, it\u2019s oftentimes a nice choice for scripting and web apps\n  89. Quality assurance\n\n     * Thinking about the happy and unhappy cases, edge cases, etc.\n  90. RESTful APIs\n\n     * A way to organize APIs to keep them predictable and maintainable\n  91. Redis\n\n     * A swiss army knife for caching, queue back-end, pub / sub and more\n  92. Release management\n\n     * Creating tools and workflows for efficient and dependable releases\n  93. Reverse engineering\n\n     * Figuring out how something works by breaking it down\n  94. SMTP\n\n     * A protocol for sending email\n  95. SOC 2 Type II compliance\n\n     * A framework to help ensure service providers process client data securely\n  96. SPF\n\n     * Typically combined with DKIM and DMARC to verify emails are sent by a domain\n  97. SSH / SCP\n\n     * Configuring secure access to a server and transferring files\n  98. SSO (Single Sign-On)\n\n     * This includes setting up social logins but also org wide SSO such as Okta\n  99. Sanitizing PII (Personal Identifiable Information)\n\n     * Protect customer data by redacting it in non-production environments\n  100. Scaling web apps\n\n     * Knowing where the bottlenecks are and how to address them\n  101. SealedSecrets\n\n     * A GitOps friendly way to manage secrets within Kubernetes\n  102. Security\n\n     * Hashing, encryption, access, social engineering, avoiding malware, etc.\n  103. Signal processing\n\n     * Graceful shutdowns, SIGKILL vs SIGTERM, etc.\n  104. Snyk\n\n     * A service to scan your apps and infrastructure for security vulnerabilities\n  105. Static code analysis\n\n     * Anything you can run against your source code (formatting, linting, vuln. scanning)\n  106. Stripe\n\n     * A payment gateway to accept credit cards and offer money related services\n  107. Swagger\n\n     * A way to view API docs that\u2019s compatible with the OpenAPI specification\n  108. System design\n\n     * Creating a solution after understanding the input and output requirements\n  109. TLS / SSL certificates\n\n     * Understanding the moving parts around this and what\u2019s secure vs what\u2019s not\n  110. Task queues\n\n     * A way to run tasks that are executed by a background worker\n  111. Terraform\n\n     * Configure your infrastructure (servers, DNS, etc.) in an automated way\n  112. Testing\n\n     * Knowing what and when to test and how to verify those tests\n  113. Tool comparisons\n\n     * Evaluate different tools and arrive at a good solution\n  114. Troubleshooting\n\n     * Systematic steps you can take to resolve both known and unknown problems\n  115. Vertical scaling\n\n     * Adding more compute resources (CPU, memory, etc.) to a single server / container\n  116. VPN\n\n     * Create a secure connection between networks and provide a static IP address\n  117. VPS\n\n     * Virtual private servers are isolated environments to run an OS\n  118. VSCode\n\n     * A popular code editor, I don\u2019t use it but your dev team might so it\u2019s worth knowing\n  119. Virtual Machines\n\n     * Spin up virtualized operating systems for testing or usage\n  120. Vulnerability scanning\n\n     * Knowing how to identify, document, assess, triage and / or fix vulnerabilities\n  121. Web development\n\n     * Building web apps, such as internal tools to help folks get things done\n  122. Websockets\n\n     * A protocol for handling bi-directional web traffic such as chat, etc.\n  123. Webhooks\n\n     * Sending a web request to another service after an event triggers\n  124. WordPress\n\n     * Maybe your company\u2019s blog is run this, knowing how plugins / updates work, etc.\n  125. Zero downtime app deployments\n\n     * When deploying new versions of your app, its service isn\u2019t disrupted\n\nThe video below goes into more detail about each of these skills.\n\nBy the way, if anyone is hiring I am available for hire.\n\n### Video Explanation\n\n#### Timestamps\n\n  * 1:15 \u2013 The DevOps elephant in the room\n  * 3:25 \u2013 How do you describe this role?\n  * 7:10 \u2013 The skills\n  * 8:03 \u2013 Skills 1-25\n  * 20:47 \u2013 Skills 26-50\n  * 29:43 \u2013 Skills 51-75\n  * 39:25 \u2013 Skills 76-100\n  * 47:57 \u2013 Skills 101-124\n\nWhich skills do you commonly use in this type of role? Let us know below.\n\n#### Never Miss a Tip, Trick or Tutorial\n\nLike you, I'm super protective of my inbox, so don't worry about getting\nspammed. You can expect a few emails per month (at most), and you can 1-click\nunsubscribe at any time. See what else you'll get too.\n\nTweet Share Share\n\n## Comments\n\n\u00a9 2024 Nick Janetakis\n\n", "frontpage": false}
