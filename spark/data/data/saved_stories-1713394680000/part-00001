{"aid": "40067309", "title": "Observable Systems with Wide Events", "url": "https://www.honeybadger.io/blog/observable-systems-wide-events/", "domain": "honeybadger.io", "votes": 2, "user": "rabidpraxis", "posted_at": "2024-04-17 16:56:19", "comments": 0, "source_title": "Observable systems with wide events", "source_text": "Observable systems with wide events - Honeybadger Developer Blog\n\n\ud83c\udf89 Introducing Honeybadger Insights \u2014 logging and observability from\nHoneybadger! Check it out \u2192\n\n# Observable systems with wide events\n\nWe designed Honeybadger Insights around wide events. What are wide events, and\nhow can you use them to gain insight into your applications?\n\n  * By Kevin Webster\n  * #honeybadger #logging #observability\n  * Apr 16, 2024\n\nOh, I didn't see you there. Hi, I'm Kevin, a developer here at Honeybadger.\nI've worked for the last year or so developing Honeybadger Insights, our new\nlogging and observability platform. Let's peek into some of the design\ndecisions and philosophy behind the product.\n\nIn modern software development, the hunt for observable systems has\ntraditionally revolved around the holy trinity of logs, metrics, and traces.\nEach plays a critical role in understanding system behavior, yet they often\nexist in isolation, each providing a view through a different lens, not to\nmention a different UI.\n\nAt Honeybadger, we're challenging this segmented approach within Insights by\nfocusing on a strategy centered around events.\n\n## Your logs are events\u2014and they should be structured\n\nI get it\u2014you're probably thinking, \"Can't I just stick to grepping through my\nstringy logs?\" Shifting to thinking in terms of structured events can require\npractical (and philosophical) changes in how we gather telemetry data from our\napplications. We believe this transition can lead to more opportunities for\nanalyzing and extracting valuable information about our systems' behavior.\n\nTake this string log, for example:\n\n    \n    \n    [INFO 2023-03-10 14:00:00][location: Seattle, USA] -- : UserLoginAttempt: User JohnDoe (standard_user) Login successful after 2 attempts from 192.168.1.1\n\nEgads, the implicit structure! While this format can be easy on the eyes when\ntailing from your local server, it's also a nightmare if you want to extract\nuseful data points. Here is what that same log could look like as a structured\nevent in JSON format:\n\n    \n    \n    { \"event_type\": \"UserLoginAttempt\", \"ts\": \"2023-03-10T14:00:00Z\", \"user\": { \"name\": \"JohnDoe\", \"role\": \"standard_user\" }, \"source_ip\": \"192.168.1.1\", \"location\": { \"city\": \"Seattle\", \"country\": \"USA\" }, \"successful\": true, \"attempts\": 2 }\n\nThink of a structured event as a bag of correlated properties called \"fields.\"\nThese two events are technically the same\u2014but can you see how breaking up the\nfields creates possibilities for extracting insights?\n\nMoving to structured events enables you to query them with BadgerQL, the\npowerful query language at the heart of Honeybadger Insights. It's far beyond\nanything you could do with grep or other text-based search tools.\n\nSay you want to find users with the most login attempts:\n\n    \n    \n    fields user.name::str | sort attempts::int desc\n\nOr login attempt counts per city:\n\n    \n    \n    stats count() as ct by location.city::str\n\nWhat about finding which users often require multiple attempts:\n\n    \n    \n    filter successful::bool | stats avg(attempts::int) as avgAttempts by user.name::str | filter avgAttempts > 2\n\nOr which users connect from multiple IP addresses:\n\n    \n    \n    stats unique(source_ip::str) as ipCount by user.name::str | filter ipCount >= 2\n\nThere is critical data juice located even within the simplest of events, and\nwe aim to give you tools to squeeze it all out.\n\n## The power of wide events\n\nYou may have heard us mention \"wide\" events. Wide events are helpful because\nthey often contain comprehensive contextual data about an execution. Instead\nof blasting thousands of small logs per request, a wide event gathers\nimportant contextual data into a single event.\n\nThese events support \"observability\" by providing the details necessary during\nthose critical moments of \"unknown unknowns\"\u2014where elusive bugs lurk in the\nshadows, ready to disrupt your system with the slightest trigger. Sometimes, a\ndetail that seems insignificant can be crucial to finding the cause of an\nissue. Wide events serve as your diagnostic beacon, offering clues and context\nthat traditional observability methods might miss.\n\nOne tenet of observability is relying on externals (the events) to paint a\npicture of your system's state without needing to update your code to produce\nmore data. Since we store events in their raw form without pre-aggregating or\nperforming other lossy shenanigans, you can ask any question about your system\nin real time.\n\n\u201cEveryone is in love with Honeybadger ... the UI is spot on.\u201d\n\nMolly Struve, Sr. Site Reliability Engineer, Netflix\n\nStart free trial\n\n## Errors are wide events\n\nIf you are a Honeybadger user, you already have a great example of a wide\nevent: the error notice. You might be familiar with adding context to an\nerror:\n\n    \n    \n    Honeybadger.context(color: \"red\")\n\nThis context is built up during execution, and if something goes wrong, the\nclient sends the error to Honeybadger with all context data attached. While\ndebugging, this context can be essential to finding the cause of the error.\n\nWe treat errors as first-class entities so you can coordinate and communicate\nwhile resolving issues, but error notices are also events. In fact, all error\nnotices you send to Honeybadger are automatically added to Insights. You can\nuse BadgerQL to query, slice, and visualize just as you would with any\nstructured event. To get a list of all notices, all that's required is to\nfilter on the event type:\n\nAnd you can start gathering insights about your errors.\n\n## What about metrics and traces?\n\nMetrics and traces are structured events, too, and we believe they should live\nalongside your \"log\" events, where you can use the same tools for querying and\nvisualization. That's one reason we started with application logs\u2014you get the\nother two for free.\n\nWhile you can send metrics and traces to Honeybadger Insights today, we plan\nto add more tools to collect and visualize these special types of events in\nthe future. There are many exciting possibilities!\n\n## Events create observability\n\nTransforming your logs into structured events is a crucial first step toward\ngaining observability into your system. When you do, Honeybadger is here to\nhelp you dig in, cut through the noise, and squeeze out the insights. Give it\na try!\n\nWhat to do next:\n\n  1. Try Honeybadger for FREE\n\nHoneybadger helps you find and fix errors before your users can even report\nthem. Get set up in minutes and check monitoring off your to-do list.\n\nStart free trial\n\nEasy 5-minute setup \u2014 No credit card required\n\n  2. Get the Honeybadger newsletter\n\nEach month we share news, best practices, and stories from the DevOps &\nmonitoring community\u2014exclusively for developers like you.\n\n#### Kevin Webster\n\nKevin is the freshest Honeybadger (both in time and breakdancing abilities).\nKevin has been building things with software since his dad brought home the\nfamily IBM 386. He fancies himself a bit of a programming polyglot. When he's\nnot compromising his ability to write Ruby by learning new languages, he\nenjoys hiking through the Oregon wilderness, hanging with his family, or\nwatching cringeworthy b-list movies.\n\n  * @rabidpraxis Author Twitter\n  * GitHub Author GitHub\n  * LinkedIn Author LinkedIn\n\nMore articles by Kevin Webster\n\n## More Honeybadger articles\n\n  * Mar 07, 2024 Introducing Honeybadger Insights\n  * Feb 12, 2024 Visualizing Ahoy analytics in Rails\n  * Nov 08, 2023 Declaring check-ins in PHP/Laravel config\n  * Jun 08, 2023 Top 10 error monitoring companies in 2023\n  * Apr 04, 2023 Rollup and Vite plugin for JavaScript\n  * Mar 28, 2023 Collecting user feedback in JavaScript\n  * Feb 28, 2023 Honeybadger is hiring a software developer\n  * Jun 15, 2022 Incident Management for Status Pages\n  * Apr 01, 2022 Enterprise features for Public Status Pages!\n  * Mar 01, 2022 Public Status Pages for Uptime Monitoring\n\nStop wasting time manually checking logs for errors!\n\nTry the only application health monitoring tool that allows you to track\napplication errors, uptime, and cron jobs in one simple platform.\n\n  * Know when critical errors occur, and which customers are affected.\n  * Respond instantly when your systems go down.\n  * Improve the health of your systems over time.\n  * Fix problems before your customers can report them!\n\nAs developers ourselves, we hated wasting time tracking down errors\u2014so we\nbuilt the system we always wanted.\n\nHoneybadger tracks everything you need and nothing you don't, creating one\nsimple solution to keep your application running and error free so you can do\nwhat you do best\u2014release new code. Try it free and see for yourself.\n\nStart free trial\n\nSimple 5-minute setup \u2014 No credit card required\n\nLearn more\n\n\"We've looked at a lot of error management systems. Honeybadger is head and\nshoulders above the rest and somehow gets better with every new release.\" \u2014\nMichael Smith, Cofounder & CTO of YvesBlue\n\nHoneybadger is trusted by top companies like:\n\n\u201cEveryone is in love with Honeybadger ... the UI is spot on.\u201d\n\nMolly Struve, Sr. Site Reliability Engineer, Netflix\n\nStart free trial\n\nProduct\n\nStacks\n\nCompany\n\nResources\n\n", "frontpage": false}
