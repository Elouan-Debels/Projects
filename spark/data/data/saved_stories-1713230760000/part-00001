{"aid": "40044665", "title": "PuTTY vulnerability vuln-p521-bias", "url": "https://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/vuln-p521-bias.html", "domain": "greenend.org.uk", "votes": 26, "user": "aardvark179", "posted_at": "2024-04-15 19:24:52", "comments": 0, "source_title": "PuTTY vulnerability vuln-p521-bias", "source_text": "PuTTY vulnerability vuln-p521-bias\n\n# PuTTY vulnerability vuln-p521-bias\n\nHome | FAQ | Feedback | Licence | Updates | Mirrors | Keys | Links | Team Download: Stable \u00b7 Snapshot | Docs | Changes | Wishlist\n\nsummary: NIST P521 private keys are exposed by biased signature generation\nclass: vulnerability: This is a security vulnerability. priority: high: This\nshould be fixed in the next release. absent-in: 0.67 present-in: 0.68 0.69\n0.70 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.80 fixed-in:\nc193fe9848f50a88a4089aac647fecc31ae96d27 (0.81)\n\nEvery version of the PuTTY tools from 0.68 to 0.80 inclusive has a critical\nvulnerability in the code that generates signatures from ECDSA private keys\nwhich use the NIST P521 curve. (PuTTY, or Pageant, generates a signature from\na key when using it to authenticate you to an SSH server.)\n\nThis vulnerability has been assigned CVE-2024-31497. It was discovered by\nFabian B\u00e4umer and Marcus Brinkmann of the Ruhr University Bochum; see their\nwrite-up on the oss-security mailing list.\n\nThe bad news: the effect of the vulnerability is to compromise the private\nkey. An attacker in possession of a few dozen signed messages and the public\nkey has enough information to recover the private key, and then forge\nsignatures as if they were from you, allowing them to (for instance) log in to\nany servers you use that key for. To obtain these signatures, an attacker need\nonly briefly compromise any server you use the key to authenticate to, or\nmomentarily gain access to a copy of Pageant holding the key. (However, these\nsignatures are not exposed to passive eavesdroppers of SSH connections.)\n\nTherefore, if you have a key of this type, we recommend you revoke it\nimmediately: remove the old public key from all OpenSSH authorized_keys files,\nand the equivalent in other SSH servers, so that a signature from the\ncompromised key has no value any more. Then generate a new key pair to replace\nit.\n\n(The problem is not with how the key was originally generated; it doesn't\nmatter whether it came from PuTTYgen or somewhere else. What matters is\nwhether it was ever used with PuTTY or Pageant.)\n\nThe good news: the only affected key type is 521-bit ECDSA. That is, a key\nthat appears in Windows PuTTYgen with ecdsa-sha2-nistp521 at the start of the\n'Key fingerprint' box, or is described as 'NIST p521' when loaded into Windows\nPageant, or has an id starting ecdsa-sha2-nistp521 in the SSH protocol or the\nkey file. Other sizes of ECDSA, and other key algorithms, are unaffected. In\nparticular, Ed25519 is not affected.\n\nDetails of the error:\n\nAll DSA signature schemes require a random value to be invented during\nsigning, known as the 'nonce' (cryptography jargon for a value used only\nonce), or sometimes by the letter k. It's well known that if an attacker can\nguess the value of k you used, or find any two signatures you generated with\nthe same k, then they can immediately recover your private key.\n\nThis means that it's dangerous to generate DSA signatures on systems with no\nhigh-quality source of randomness. Significantly more dangerous than\ngenerating the encryption keys for a single session: a leak of the private key\ncompromises far more than one SSH session.\n\nFor this reason, since PuTTY was developed on Windows before it had any\ncryptographic random number generator at all, PuTTY has always generated its k\nusing a deterministic method, avoiding the need for random numbers at all. The\nclever trick is to compute a secure hash whose input includes the message to\nbe signed and also the private key. Secure hash output is indistinguishable\nfrom random data (or else the hash function isn't doing its job), and this\ngeneration method can't be repeated by an attacker who's trying to find out\nthe private key \u2013 if they could generate the same hash input as you, they'd\nalready have the private key.\n\nThis technique is now mainstream, and RFC 6979 documents a specific well-known\nway of doing it. But PuTTY didn't follow that specification, because we\nstarted doing the same thing in 2001, and the RFC wasn't published until 2013.\n\nPuTTY's technique worked by making a SHA-512 hash, and then reducing it mod q,\nwhere q is the order of the group used in the DSA system. For integer DSA (for\nwhich PuTTY's technique was originally developed), q is about 160 bits; for\nelliptic-curve DSA (which came later) it has about the same number of bits as\nthe curve modulus, so 256 or 384 or 521 bits for the NIST curves.\n\nIn all of those cases except P521, the bias introduced by reducing a 512-bit\nnumber mod q is negligible. But in the case of P521, where q has 521 bits\n(i.e. more than 512), reducing a 512-bit number mod q has no effect at all \u2013\nyou get a value of k whose top 9 bits are always zero.\n\nThis bias is sufficient to allow a key recovery attack. It's less immediate\nthan if an attacker knows all of k, but it turns out that if k has a biased\ndistribution in this way, it's possible to aggregate information from multiple\nsignatures and recover the private key eventually. Apparently the number of\nsignatures required is around 60.\n\nTo fix this vulnerability, we've completely abandoned PuTTY's old system for\ngenerating k, and switched to the RFC 6979 technique, for all DSA and ECDSA\nkey types. (EdDSA keys such as Ed25519 already used a different system, which\nhas not changed.) However, this doesn't affect the fact that information about\nexisting P521 private keys has already been leaked whenever a signature was\ngenerated using the old k generator.\n\nIf you want to comment on this web site, see the Feedback page.\n\nAudit trail for this vulnerability.\n\n(last revision of this bug record was at 2024-04-15 20:49:32 +0100)\n\n", "frontpage": true}
