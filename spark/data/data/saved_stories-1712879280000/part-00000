{"aid": "40004809", "title": "Sammy: Making video traffic a friendlier internet neighbor", "url": "https://sammy.brucespang.com/", "domain": "brucespang.com", "votes": 2, "user": "flapjack", "posted_at": "2024-04-11 17:45:40", "comments": 0, "source_title": "Sammy | Example implementation", "source_text": "Sammy | Example implementation\n\n# Sammy\n\n## Making video traffic a friendlier internet neighbor\n\n## About\n\nVideo streaming traffic today takes up 60-75% of all bytes sent on the\ninternet. Sammy is a joint project between Netflix and Stanford researchers to\nmake video traffic friendlier to neighboring applications sharing the same\nnetworks.\n\nVideo traffic today is bursty. Every few seconds, video traffic switches\nbetween a period of sending data as fast as possible and a period of silence.\nThis burstiness has consequences on internet congestion\u2014causing queueing delay\nand packet loss as congestion control algorithms try to send as fast as\npossible into the network without causing packet loss.\n\nSammy aims to smooth out video traffic and reduce video throughput below the\ncapacity of typical home networks. By reducing video throughput, Sammy can\navoid congestion completely\u2014eliminating queueing delay and packet loss, and\nmaking more bandwidth available for neighboring traffic. In experiments run at\nNetflix, Sammy reduces chunk throughput (how fast Netflix sends data, when it\nis sending data) by more than 60%, without reducing video quality of\nexperience.\n\nFor more information, see the research paper published at SIGCOMM 2023:\nResearch Paper\n\n## Dash.js Demo\n\nView on Github\n\nThe following is a demo of Sammy running with an unmodified version of\ndash.js. Sammy works by using information about the video to pick a pace rate,\nor upper limit on how fast the server will send.\n\nFor the first few requests, the video buffer is empty and Sammy picks a high\npace rate and downloads video quickly in order to build up a buffer. As the\nbuffer fills up, Sammy picks lower and lower pace rates, down to close to the\nhighest bitrate of the video. Note how the throughput the video client\nmeasures from the network decreases to match the pace rate as more and more\nchunks are downloaded.\n\nSetup: We use Fastly as a CDN, which has built-in support for pacing. We pick\na pace rate 3x higher than the maximum of all encoding bitrates when the\nbuffer is empty, and 1.5x higher when the buffer is full. We make no\ndistinction between playing and not playing states, so you can see pacing take\neffect without watching the video.\n\nNote on QoE for dash.js: One of Sammy's main contributions is that it reduces\nchunk throughputs by 60%, while maintaining the QoE as Netflix's existing\nproduction algorithm. In this demo, we are only showing how the ABR algorithm\ncan pick pace rates, and that the end-to-end pacing functionality works. We\nmake no claims about QoE parity to dash.js today\u2014achieving QoE parity is left\nas an exercise to the reader (but interested readers should reach out to the\nfirst author, who would be happy to give advice).\n\n", "frontpage": false}
