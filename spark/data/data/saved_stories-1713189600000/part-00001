{"aid": "40037956", "title": "Cronex.nvim: A Neovim plugin to show inline human-readable cron expressions", "url": "https://github.com/fabridamicelli/cronex.nvim", "domain": "github.com/fabridamicelli", "votes": 1, "user": "fbrdm", "posted_at": "2024-04-15 07:59:02", "comments": 0, "source_title": "GitHub - fabridamicelli/cronex.nvim: Human-readable cron expressions in Neovim", "source_text": "GitHub - fabridamicelli/cronex.nvim: Human-readable cron expressions in Neovim\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nfabridamicelli / cronex.nvim Public\n\n  * Notifications\n  * Fork 0\n  * Star 16\n\nHuman-readable cron expressions in Neovim\n\n### License\n\nMIT license\n\n16 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# fabridamicelli/cronex.nvim\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nfabridamicellifix readme5994356 \u00b7\n\n## History\n\n18 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| use cache@v4  \n  \n### images\n\n|\n\n### images\n\n| improve screencast  \n  \n### lua/cronex\n\n|\n\n### lua/cronex\n\n| remove todos  \n  \n### scripts/tests\n\n|\n\n### scripts/tests\n\n| set up ci tests  \n  \n### tests\n\n|\n\n### tests\n\n| clean up test  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| set up ci tests  \n  \n### README.md\n\n|\n\n### README.md\n\n| fix readme  \n  \n## Repository files navigation\n\nIf you find this work useful, don't forget to give it a GitHub \u2b50 to help\nothers find and trust it!\n\n# cronex.nvim\n\nHuman-readable cron expressions in Neovim\n\n## What is Cronex\n\nCronex is a Neovim plugin to render in-line, human-readable explanations of\ncron expressions:\n\nThis plugin is not a cron expression parser/checker by itself. Cronex is\nrather the \"client\" that allows the Neovim user to integrate and customize\n\"servers\" (cron expression \"explainers\") in a flexible fashion. There are\nseveral implementations of those out there (see below). You can use any of\nthose with Cronex.\n\n## Getting Started\n\n### Dependencies\n\nYou will need a cron expression explainer installed. The default is cronstrue,\nwhich is the one used by the vscode package cron-explained.\n\nInstall the cronstrue library and make sure that the command cronstrue is\navailable in the environment where your buffer is being shown.\n\nThat will use the cronstrue library under the hood to generate the\nexplanations.\n\n### Installation\n\nUsing lazy.nvim\n\n    \n    \n    -- init.lua: { 'fabridamicelli/cronex.nvim', opts = {}, } -- Or -- plugins/cronex.lua: return { 'fabridamicelli/cronex.nvim', opts = {}, }\n\n## Usage\n\nCalling setup makes the explainer available and set explanations when leaving\ninsert mode. Entering insert mode clears the explanations. Cronex can be also\ndisabled/enabled on any file (see Commands).\n\n### Commands\n\nThe setup will make the following commands available:\n\nCommand| Description  \n---|---  \nCronExplainedDisable| Turn off the explanations permanently  \nCronExplainedEnable| Turn on the explanations again (regardless of filetype)  \n  \n## Customization\n\n### Cronex setup structure\n\nThe plugin consists of three building blocks:\n\nModule| Description  \n---|---  \nextractor| Logic to extract cron expressions from current buffer  \nexplainer| Program that will parse and explain the cron expressions  \nformat| Postprocess the output string produced by the explainer for final\ndisplay  \n  \nDefault configuration:\n\n    \n    \n    require(\"cronex\").setup({ -- The plugin will automatically start (with autocommand) for these types of files. -- User can manually on any filetype turn explanations on(off) with the commands CronExplainedEnable(CronExplainedDisable) file_patterns = { \"*.yaml\", \"*.yml\", \"*.tf\", \"*.cfg\", \"*.config\", \"*.conf\" }, extractor = { -- Configuration on how to extract cron expressions goes here: -- cron_from_line: Function to search cron expression in line cron_from_line = require(\"cronex.cron_from_line\").cron_from_line, -- extract: Function returning a table with pairs (line_number, cron) extract = require(\"cronex.extract\").extract, }, explainer = { -- Configuration on how to explain one cron expression goes here -- Command to call an external program that will translate the cron expression -- eg: \"* * * * *\" -> Every minute -- Any command that is available in your command line can be used here. -- examples: -- \"/path/to/miniconda3/envs/neovim/bin/cronstrue\" (point to a conda virtualenv) -- \"python explainer.py\" (assuming you have such a python script available) cmd = \"cronstrue\", -- Optional arguments to pass to the command -- eg: \"/path/to/a/go/binary\" (assuming you have a go binary) -- args = { \"-print-all\" } (assuming the program understands the flag 'print-all') args = {} }, -- Configure the post-processing of the explanation string. -- eg: transform \"* * * * *\": Every minute --to--> Every minute -- using require(\"cronex.format\").all_after_colon, format = function(s) return s end })\n\n### Extractor\n\nLogic of the default extractor can be found here in\n/cronex/cron_from_line.lua. Default extractor searches for at most 1\nexpression per line of length 7, 6 or 5 (in that order). But Cronex allows the\nuser to hook in and swap this by any arbitrary logic.\n\nThe extractor has 2 parts: cron_from_line and extract, both are functions. You\ncan swap any or both of the two with custom functions, provided you respect\nthe following interfaces:\n\ncron_from_line: Function with signature string -> string|nil. Returns the cron\nexpression if found (else nil)\n\nextract: Function with signature function -> table The input function\nprocesses each buffer line (may be identity, i.e. just return line as is).\nOutput table of pairs (line_number, cron_expression), empty if no cron\nexpressions found.\n\nHere's a toy example on how to customize the functions, that will set \"line\n<LINE_NUMBER> says --> hello world\" on every line of the buffer:\n\n    \n    \n    require(\"cronex\").setup({ extractor = { cron_from_line = function(_) -- This commented block is what you would actually do in a real scenario -- local cron = do_something_to_extract_cron(buffer_line) -- if cron then -- return cron -- end -- return nil return \"hello world\" -- let's hard-code something :) end, extract = function(cron_from_line) local t = {} for i, line in ipairs(vim.api.nvim_buf_get_lines(0, 0, -1, false)) do t[i - 1] = string.format(\"line %s says --> %s \", i - 1, cron_from_line(line)) end return t end }, explainer = { cmd = \"echo\" -- just echo the what extract produces }, })\n\nUnder the hood, cron_from_line will be passed to extract like so:\n\n    \n    \n    extract(cron_from_line)\n\nThis allows you to plug a custom function to extract cron from line and still\nuse the default extract function\n\nYou may even just set cron_from_line to nil and use the extract function to\nsend the whole buffer to another program from which you capture the output.\nAll that matters is that extract returns the table with pairs (line_number,\ncron_expression). For example:\n\n    \n    \n    { require(\"cronex\").setup({ extractor = { cron_from_line = nil, extract = function(_) local t = {} local out = send_buffer_to_external_program_and_collect_crons() for lnum, cron in out do t[lnum] = cron end return t end } }) }\n\n### Explainer\n\nAs already mentioned above, Cronex is the integrates the functionality of\nexternal cron expression explainers into Neovim. There are several\nimplementations of those out there.\n\nMore generally, it's up to the user which explainer program to use in the\nbackground. Cronex will call such program via the command (cmd), collect the\noutput and pass it along to Neovim. This is the default:\n\n    \n    \n    require(\"cronex\").setup({ explainer = { cmd = \"cronstrue\", args = {} } })\n\nFor example, you can have cronstrue installed in a conda virtualenv. If the\nvirtualenv is active, everything should work out of the box. But you may not\nwant to install cronstrue in every virtualenv, so you can have only one\ncentral environment with cronstrue installed and point to that binary\nexplicitly in the config:\n\n    \n    \n    { require(\"cronex\").setup({ explainer = { cmd = \"/home/username/miniconda3/envs/neovim/bin/cronstrue\" }) }\n\nIn fact cmd can call anything that knows how to deal with the cron expression.\nFor example, calling a go program:\n\n    \n    \n    { require(\"cronex\").setup({ explainer = { cmd = { \"go\", \"run\", \"/path/to/go/app/cmd/module/main.go\" }, -- or if you pre-compiled it (recommended): -- cmd = { \"/path/to/go/app/cmd/module/binary\" }, args = { \"-arg1\", \"-arg2\" } } }) }\n\nHere are a few of those third-party libraries as well as the Cronex command to\nuse them:\n\ncronstrue: This is the default explainer by Cronex and the very same library\nused by the vscode package cron-explained. You need first install the\ncronstrue library and make sure that the command cronstrue is available in the\nenvironment where your buffer is being shown. For example, you can use it\ninside of a Python virtual environment (in this case managed by conda to\ninstall nodejs):\n\n    \n    \n    conda create -n venv conda activate venv conda install nodejs -c conda-forge npm install cronstrue\n\nAfter that cronstrue will only be installed inside venv (thus only available\nthere).\n\nhcron: This explainer is written in Go and much considerably faster than the\ndefault. But it is not as widely used and the project does not seem to be that\nwell maintained. Recommendation: Compile the binary\n\nHere's a (non-exhaustive) overview cron explainers out there:\n\nLanguage| Link  \n---|---  \nJavaScript| https://github.com/bradymholt/cronstrue  \nGo| https://github.com/lnquy/cron  \nPython| https://github.com/Salamek/cron-descriptor  \n.NET| https://github.com/bradymholt/cron-expression-descriptor  \nJava| https://github.com/grahamar/cron-parser  \nRust| https://github.com/zslayton/cron  \n  \n### format\n\nWe might want to modify the output from the third-party explainer libraries.\nFor example, some explainers show the input as well in the output like so:\n\n    \n    \n    \"* * * * *\": Every minute\n\nIn that case, you could use the function\nrequire(\"cronex.format\").all_after_colon) to transform the output to just show\n\"Every minute\". But the user can do any other transformation by defining a lua\nfunction, for example:\n\n    \n    \n    { require(\"cronex\").setup({ format = function(explanation) local colon = string.find(explanation, \": \") if colon then return \"Human-readable:\" .. string.sub(explanation, colon + 2) end return explanation end }) }\n\nThat will transform it like this:\n\n    \n    \n    \"* * * * *\": Every minute --> Human-readable: Every minute\n\n## Limitations\n\nThe current extract logic is a bit rudimentary (partly because regex in lua\nare a bit trickier than normal (at least for me). Any improvement along those\nlines is more than welcome.\n\nThe call to the explainer is a blocking operation. While testing I found that\nto be a problem only if there are unrealistically many cron expressions in the\nbuffer. Also, the Go implementation of the explainer is so fast that even\nhaving hundreds of expressions in a buffer everything runs decently fast. In\nshort, my guess is that almost no user (if any at all) will notice this.\nHaving said that, a few potential ideas to improve performance:\n\n  * Accelerating extraction, for example, by using ripgrep to extract all crons in one shot (instead of iterating over lines)\n  * Implementing the explainer in pure lua to avoid external calls\n\n## Troubleshooting\n\n  * Default behaviour considers only 1 cron expression is per line. So having repeated expressions in one line will result in no explanation at all. I haven't seen use-cases where it makes sense to have more than one, but I'd be open to consider it if that makes sense.\n  * If encountering problems with an expression, disable the format in order to see the exact output coming from the explainer\n\n## About\n\nHuman-readable cron expressions in Neovim\n\n### Topics\n\ncron neovim cron-expression human-readable cron-explained cron-described\nhuman-readable-cron-expression\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n16 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 1\n\n0.1.0 Latest\n\nApr 13, 2024\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Lua 98.4%\n  * Makefile 1.1%\n  * Vim Script 0.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
