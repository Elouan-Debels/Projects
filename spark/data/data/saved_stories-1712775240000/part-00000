{"aid": "39990145", "title": "Cloud-Init and AlmaLinux OS", "url": "https://blog.while-true-do.io/cloud-init-raspberry-pi-and-almalinux-os/", "domain": "while-true-do.io", "votes": 3, "user": "meysamazad", "posted_at": "2024-04-10 12:52:15", "comments": 0, "source_title": "Cloud-Init - Raspberry Pi and AlmaLinux OS", "source_text": "Cloud-Init - Raspberry Pi and AlmaLinux OS\n\nAlmaLinux\n\n# Cloud-Init - Raspberry Pi and AlmaLinux OS\n\nI am in the middle of setting up my home lab, but also working on a project,\nnamed beby.cloud. In both cases, I want to do the initial setup automatically\non a Raspberry Pi system. Fortunately, AlmaLinux OS supports Cloud-Init, so we\ncan handle this easily.\n\n#### Daniel Schier\n\nMar 27, 2024 \u2014 9 min read\n\n\u00a92024, Daniel Schier, CC BY-SA 4.0\n\nI am in the middle of setting up my home lab, but also working on a project,\nnamed beby.cloud. In both cases, I want to do the initial setup automatically\non a Raspberry Pi system. Fortunately, AlmaLinux OS supports Cloud-Init, so we\ncan handle this easily.\n\nLet's dive into AlmaLinux OS on Raspberry Pi.\n\n## Introduction\n\nBefore going into too much detail, let me give you a quick rundown of the\ntechnologies. Since we want to deploy AlmaLinux OS on a Raspberry Pi, and\nautomate the initial setup with Cloud-Init, I have collected some information\nabout these below.\n\n### Raspberry Pi\n\nThe Raspberry Pi is the most popular consumer System on a Chip (SoC) in the\nmarket. You can get your hands on a Raspberry Pi 4 for just $35 (in reality\nmore like $45). You will get a chip-card sized and fanless little computer,\nwhich can be used for all kinds of tinkering and small projects.\n\nRaspberry Pi - \u00a92024, Daniel Schier, CC BY-SA 4.0\n\nThe small board provides everything you need to run some small applications\nand integrate it in your home/lab environment. You can run a Nextcloud\ninstance, deploy some containers, or use the GPIO ports to connect your own\ncircuits to it.\n\n### AlmaLinux OS\n\nAlmaLinux OS is my preferred Red Hat family Linux for personal and private\nuse. Today, it is a direct downstream of CentOS Stream, but features API/ABI\ncompatibility to Red Hat Enterprise Linux (RHEL).\n\nTherefore, you can expect all the features you can find in CentOS Stream or\nRHEL, including Firewalld, Podman, SELinux, TuneD, Cockpit and many more.\nAlso, the community is stunning, the developers very motivated and overall it\nis just a pleasure to work with the folks working on AlmaLinux OS.\n\n### Cloud-Init\n\nFinally, we have Cloud-Init on the agenda. Cloud-Init is a quite simple, but\npowerful way to configure machines. Let's assume, you want to set up a\nmachine, that requires some settings pre-configured or packages installed. You\ncan think of \"create a user\" or \"install updates\", but also \"configure\nnetwork\" or \"put a file there\".\n\nIn another article, I gave a brief overview of the underlying magic and a\nfirst \"Getting Started\".\n\n## Setup\n\nIntroduction done, let's get to work. We want to deploy AlmaLinux OS (9) on a\nRaspberry Pi and also use Cloud-Init for some automation. In my case, I also\nwant to use a USB drive, instead of the SD card. The procedure is exactly the\nsame, though.\n\n\ud83d\udca1\n\nThe below tutorial was tested on a Raspberry Pi 3B+/4B with AlmaLinux OS 9 and\nCloud-Init 23.1.1. Also, I used an external SSD via USB, but the below\ncommands also work for SD cards.\n\n### Preparing the image\n\nFirst, you need to download the image from the AlmaLinux website. This can be\ndone graphical via the download page or on the command line.\n\nScreenshot - AlmaLinux OS Website\n\n    \n    \n    wget https://repo.almalinux.org/rpi/9/images/AlmaLinux-9-RaspberryPi-latest.aarch64.raw.xz\n\nNext, you need to put the image on an SD card or another USB device. I tested\nthis with the Raspberry Pi Imager and command line, again.\n\n#### Raspberry Pi Imager\n\nLet's start with the graphical way. You need the Raspberry Pi imager. This one\ncan be downloaded from Flathub, for example.\n\n    \n    \n    flatpak install flathub org.raspberrypi.rpi-imager\n\nAfter opening it, you will be greeted by a menu, where you need to choose your\nRaspberry Pi device model, the image you want to put on it and your desired\ndevice to write the image to.\n\nScreenshot - Raspberry Pi ImagerScreenshot - Raspberry Pi Imager\n\nAfterward, hit the \"NEXT\" button, ignore further customizations and write the\nimage to your desired device. You will get a hint when the process is done.\n\n#### Command Line\n\nIf you don't want to install an additional package, or you simply love the\ncommand line, you can achieve the same. The tools required should be present\non all major Linux distributions.\n\nAfter plugging in your device, you need to find the device name and path.\nAssuming that the device might have data on it or not, might have a partition\nor not, the best tool to find new devices is dmesg. It basically reports all\nkernel activity, including devices plugged in and out.\n\n    \n    \n    $ sudo dmesg ... [182635.351557] sd 0:0:0:0: Attached scsi generic sg0 type 0 [182635.572077] sd 0:0:0:0: [sda] 62521344 512-byte logical blocks: (32.0 GB/29.8 GiB) ...\n\nIn my case, the device was mounted to sda. Therefore, the address is /dev/sda.\nNow that we know the device name, we can write the downloaded image file to\nthe SD card or USB device. This can be done with xzcat and dd.\n\n\u26a0\ufe0f\n\nPlease don't blindly copy-paste the following commands. You might destroy your\nrunning operating system.\n\n    \n    \n    # Write image to a device $ xzcat path/to/downloaded/AlmaLinux-9-RaspberryPi-latest.aarch64.raw.xz | sudo dd status=progress bs=4M of=/dev/DEVICENAME_FROM_ABOVE\n\nDepending on the write speed of your device, this might take a moment. And\nthat's already it. The image is on your desired device. For now, this is 100%\ndefault and we need to customize it a bit.\n\n### Adding Cloud-Init\n\nNow that we have a prepared device (SD card or USB device) with the AlmaLinux\nOS image on it, can start with simple automations. AlmaLinux OS for the\nRaspberry Pi ships with Cloud-Init by default. In the past, I addressed Cloud-\nInit in the article \"Cloud Init - Getting Started\". Let's apply this knowledge\nto the Raspberry Pi.\n\n#### Creating the files\n\nFirst, we need to create a simple user-data file. This file can be used to\ninstall additional packages, configure the default user, or provide your SSH\nkey. Let's take an example:\n\n    \n    \n    # #cloud-config hostname: \"myhost.local\" ssh_pwauth: false package_upgrade: true packages: - \"bash-completion\" users: - name: \"node-admin\" groups: [ \"wheel\" ] lock_passwd: false passwd: \"$6$aX65oOK...\" ssh_authorized_keys: - \"sk-ssh-ed25519@openssh.com AAAAGnNrLXNzaC1lZDI1NTE5QG9wZW5z...\"\n\nuser-data\n\nIn this example, we will set the hostname to myhost.local, we will also forbid\nthe login with passwords via SSH. Console logins with a password are still\npossible. We will also ensure that packages will be updated on first boot\n(this may take some time), and install bash-completion as an additional\npackage. Lastly, we create a user with some useful options. Said user will\nhave sudo permissions via the wheel group. It might also be beneficial to add\nour SSH key. Lastly, we configure a password, which needs to be provided as a\nhashed value.\n\nTo hash your password, you can use the mkpasswd command or the openssl\ncommand. The openssl command should be available on all major distributions\nand not considerably different. I am using the SHA512 method here, which\nshould work on all modern Linux installations.\n\n    \n    \n    # use openssl $ openssl passwd -6 YourPassWord # use mkpasswd (mostly RedHat family) $ mkpasswd --method=sha512crypt password\n\nYou might also want to configure your network. You can do this with an\nadditional file, named network-config. Here, you can configure your Ethernet\nport and Wi-Fi.\n\n    \n    \n    version: 2 ethernets: eth0: dhcp4: false optional: true addresses: - \"192.168.178.51/24\" gateway4: \"192.168.178.1\" nameservers: addresses: - \"9.9.9.9\" - \"149.112.112.112\" wifis: wlan0: dhcp4: true optional: true access-points: \"YOUR_WIFI_SSID\": password: \"YOUR_WIFI_PRESHARED_KEY\"\n\nnetwork-config\n\nIf you don't know which DNS server to choose, you might like my \"Spotlight -\nAlternatives for Google DNS\" article. But, back to topic.\n\nAs you can see, it is pretty simple to configure the user-data and network-\nconfig files. Now, we need to copy them over to our SD card or USB device.\n\nAfter writing the image to the device, two partitions were created on it. One\nof them is named CIDATA. To find the partitions, you can use any file manager\nor the command line again.\n\n    \n    \n    # Show mounted devices $ mount ... /dev/sda1 on /run/media/dschier/CIDATA type vfat (rw,nosuid,nodev,relatime,uid=1000,gid=1000,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,showexec,utf8,flush,errors=remount-ro,uhelper=udisks2) /dev/sda2 on /run/media/dschier/__ type ext4 (rw,nosuid,nodev,relatime,seclabel,errors=remount-ro,uhelper=udisks2)\n\nYou only need to copy the user-data and network-config file to the CIDATA\npartition.\n\n    \n    \n    # Copy the files $ cp user-data network-config /run/media/dschier/CIDATA/ cp: overwrite '/run/media/dschier/CIDATA/user-data'? y\n\nAs you can see, there was a user-data file already, which needs to be\noverwritten. Now, safely remove the SD card or USB device from your machine.\n\n### First Boot-Up\n\nAfter lots of preparation (basically writing an image and copying two files),\nyou can plug the SD card into your Raspberry Pi. If you used a USB drive, like\nme, ensure that there is no SD-Card connected and connect your USB drive.\nStarting with the Raspberry Pi 4, you should use one of the blue USB 3 ports.\n\nFinally, turn on your Raspberry Pi. It's time to boot up.\n\nIf you connected a display, you will see lots of boot-up magic happening. If\nnot, you can connect to the Pi after a short while via SSH. This does not\nmean, that your Pi is done already. Instead, Cloud-Init might still be working\nin the background for you. You can monitor the progress by checking the log\nfile.\n\n    \n    \n    # Follow the log from Cloud-Init $ tail -f /var/log/cloud-init-output.log\n\nScreenshot - AlmaLinux OS with Cloud-Init\n\nIf everything is done, Cloud-Init will report that it is finished, and you are\nready to use your Raspberry Pi with a fresh AlmaLinux OS 9 on it. Now, you\nhave an automated setup, and maybe you are interested in one of my automation\narticles, for even more automation with Ansible, Cloud-Init or one of my\ncontainer articles. By the way, Podman is already pre-installed.\n\n## Docs & Links\n\nThere may not be a lot of documentation, but let me give you the sources I\nused. Also, I am working on my home server repository, where you can find the\nabove applied for my Lab.\n\nCloud-Init - Getting Started\n\nIf you read my blog carefully, you may know that I really like Ansible. You\ncan manage and configure machines and APIs very easily with Ansible\nautomation. But what if the machine is offline or needs a configuration to\nboot up? This is where Cloud-Init can help.\n\nblog.while-true-do.ioDaniel Schier\n\nSpotlight - AlmaLinux\n\nThe first AlmaLinux OS release was published on 30.03.2021. Since CentOS\nshifted the focus to CentOS Stream, the community was waiting for a new open\nsource downstream fork of Red Hat Enterprise Linux (RHEL). In this article, I\nwill have a look at AlmaLinux OS and explain what you might expect.\n\nblog.while-true-do.ioDaniel Schier\n\nDaniel Schier / home \u00b7 GitLab\n\nGitLab.com\n\nGitLab\n\nGet AlmaLinux\n\nget-almalinux content\n\nAlmaLinux OS\n\nRaspberry Pi | AlmaLinux Wiki\n\nAlmaLinux OS Documentation\n\nAlmaLinux Wiki\n\ncloud-init 24.1.1 documentation\n\ncloud-init 24.1.1 documentation\n\n## Conclusion\n\nPhew, I wasn't aware that this article might become a 2000 words-long guide.\nBut hey, I hope it is good enough for you. I am also interested in your\nopinions. Do you consider using AlmaLinux OS on the Raspberry Pi? Which OS are\nyou running on it, today?\n\nLet me know, please. I am curious why you do so and what you miss in\nRaspbian/Raspberry Pi OS alternatives.\n\n## Read more\n\n### Ansible - AWX (1/2)\n\nSo, you wrote your first playbooks, played with collections and command line\ntools, and you consider to have a UI for Ansible?\n\nBy Daniel Schier Apr 10, 2024\n\n### Podman - Portainer\n\nPortainer is an application, providing a web UI for management of Docker and\nKubernetes. It is simple, yet powerful, and easy to use. But, what about\nPortainer on Podman? In this article, I will give a quick guide, how you can\nget it running and start your first containers.\n\nBy Daniel Schier Apr 2, 2024\n\n### Linux - Red Hat family in 2024\n\nLot's has changed since my last articles about Red Hat, CentOS, Rocky Linux\nand AlmaLinux. This is not your typical \"Rocky vs. Alma\" article. Instead, I\nwant to give my take on how the \"family tree\" looks like today and how things\nare going.\n\nBy Daniel Schier Mar 21, 2024\n\n### Spotlight - Alternatives to Google DNS\n\nThe name server addresses 8.8.8.8 and 8.8.4.4 are widely known and used. But,\nis it a good idea to send basically every web request to google first? What\nare proper alternatives for public DNS servers? Preferably, with some security\nand privacy in mind?\n\nBy Daniel Schier Mar 13, 2024\n\nPowered by Ghost\n\n", "frontpage": false}
