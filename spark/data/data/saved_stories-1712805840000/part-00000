{"aid": "39995854", "title": "Porting an open-source reactive Python notebook to Pyodide", "url": "https://blog.pyodide.org/posts/marimo/", "domain": "pyodide.org", "votes": 2, "user": "akshayka", "posted_at": "2024-04-10 21:21:19", "comments": 0, "source_title": "marimo: a reactive Python notebook that runs in the browser", "source_text": "marimo: a reactive Python notebook that runs in the browser | Pyodide blog\n\nHome \u00bb Posts\n\n# marimo: a reactive Python notebook that runs in the browser\n\nBringing a whole new meaning to \"serverless\".\n\nApril 8, 2024 \u00b7 7 min \u00b7 Akshay Agrawal, Myles Scolnick | Suggest Changes\n\nWe\u2019re Akshay Agrawal and Myles Scolnick, and we\u2019re the developers of marimo,\nan open-source reactive notebook for Python. In this post, we\u2019ll describe how\nwe ported marimo to work via Pyodide, and why we\u2019re incredibly excited about\nthe potential of Pyodide to make computing more accessible.\n\n## What is marimo?#\n\nmarimo is an open-source reactive notebook for Python built from the ground up\nto solve well-known problems with traditional notebooks, including\nreproducibility, interactivity, maintainability, and shareability.\n\nA reactive notebook with no hidden state. In marimo, a notebook\u2019s code,\noutputs, and program state are always consistent. Run a cell and marimo reacts\nby automatically running the cells that reference its declared variables.\nDelete a cell and marimo scrubs its variables from program memory, eliminating\nhidden state. Try this for yourself!\n\nOur reactive runtime is based on static analysis, so it\u2019s performant. If\nyou\u2019re worried about accidentally triggering expensive computations, you can\ndisable specific cells from auto-running.\n\nUI elements are automatically synchronized with Python. marimo comes with UI\nelements like sliders, a dataframe transformer, and interactive plots.\nInteract with an element and the cells that use it are automatically re-run\nwith its latest value. Reactivity makes these UI elements more useful and\nergonomic than Jupyter\u2019s IPyWidgets.\n\nDeploy as an app, run as a script. Every marimo notebook can be served as an\ninteractive read-only web app (with outputs concatenated and code hidden).\nAdditionally, marimo notebooks can be run as scripts from the command line,\nwith cells executed in a topologically sorted order. For example, here\u2019s a\nsimple educational app:\n\nUse cases. marimo can be used in many ways. It can be used as a next-gen\nreplacement for Jupyter notebooks, allowing you to explore data rapidly \u2014\nchange code or interact with a UI element, and see outputs change instantly \u2014\nand run experiments in an environment that prevents bugs before they happen.\nIt can also be used to make powerful apps, dashboards, and internal tools.\n\nA Pyodide-powered playground. All the embedded marimo notebooks you\u2019ve seen in\nthis blog post are powered by our Pyodide-marimo playground: you can try\nmarimo in your browser by navigating to https://marimo.new.\n\nIf you want to use marimo locally, get started with\n\n    \n    \n    pip install marimo && marimo tutorial intro\n\nat your command line.\n\n## Using Pyodide to make marimo accessible to everyone#\n\nWe decided to port marimo to Pyodide for three main reasons:\n\n  * to make scientific computing accessible to everyone by eliminating the need to install and manage Python;\n  * to make it easy to share executable notebooks via a url by eliminating the financial and technical burden of deploying backend infrastructure; and\n  * to provide a snappy development experience by eliminating network requests to a remote Python runner.\n\nOur motivation for combining marimo with Pyodide echoes the vision articulated\nby the developers of Iodide, the experimental in-browser notebook for which\nPyodide was originally created. While Iodide is no longer developed, we\u2019re\nextremely grateful that it ushered Pyodide into existence.\n\nThe Pyodide-marimo playground. We have developed a Pyodide-powered marimo\nplayground that makes it extremely easy for anyone in the world to tinker with\nmarimo notebooks. With just one click, playground notebooks can be shared with\nothers, and conversely every local notebook can be shared via our playground.\n\nHere are some use cases that our Pyodide-powered notebooks enable:\n\n  * Rapidly experiment with code and models.\n  * Author blog posts, tutorials, and educational materials.\n  * Embed interactive notebooks in library documentation or other static web pages.\n  * Build and share tools like data labelers, embedding visualizers, model comparison tools, or anything else you can imagine.\n  * Create and share bug reproductions.\n\nYou can learn more about the playground, including how to embed marimo\nnotebooks in static HTML pages, at our docs.\n\nWe\u2019ve created a few example notebooks to jump-start your imagination. There\u2019s\none that trains a tiny neural network, another that visualizes Bayes\u2019 Theorem,\nand another that plots attractors of dynamical systems. One of our community\nmembers even created a QR code generator.\n\nWhen you take a moment to think about all this, it\u2019s really quite magical \u2728.\nThanks to Pyodide, you can use any pure Python package, as well as a number of\npackages for scientific computing, including Pandas, NumPy, SciPy, matplotlib,\nand scikit-learn, entirely in the sandbox of your web browser \u2014 without\ninstalling Python on your machine and without paying for infrastructure.\n\n## Implementation: Porting marimo to Pyodide#\n\nPorting marimo to work with Pyodide was relatively straightforward, a\ntestament to the latter\u2019s robustness and thorough documentation.\n\nmarimo\u2019s original implementation has three main parts:\n\n  1. a Python codebase implementing a kernel that runs Python code;\n  2. a TypeScript codebase that issues control commands for the Python kernel;\n  3. a server that connects the TypeScript and Python codebases.\n\nAll that was required were minimal changes to our TypeScript and Python\ncodebases, and replacing the server with a lightweight bridge.\n\n### TypeScript#\n\nmarimo uses the same TypeScript build when running with Pyodide or native\nPython. This helps maintain consistency between the two experiences and avoid\nfeature drift. The code path splits based on feature flags; when running under\nPyodide, we download the marimo wheel from PyPI and initialize a single-\nthreaded, Pyodide-compatible marimo kernel. Passing only a filename and a\nmessage callback function, we initialize the kernel as an async, never-ending\nPython process.\n\nWe interact with this kernel through a lightweight RPC bridge that sends\nrequests to the kernel and receives responses through the callback passed.\nThis allows for an asynchronous-like feel to the execution. To support\ninterruption of Python code, we simply followed the Pyodide documentation on\nusing its SharedArrayBuffer-based mechanism.\n\nFor performance, we cache our assets and run Pyodide in a web worker to avoid\nblocking the main browser thread. This creates some extra complexity with\ntype-safety and mimicking blocking RPCs.\n\nWe heavily leverage the Emscripten filesystem. Code is passed from the URL\nhash (for ease of sharing), to the main frame, to the worker, and finally to\nthe Emscripten filesystem. Emscripten supports many filesystem implementations\nsuch as IndexDB which we use to persist the user\u2019s files. We are working on\nour own implementation of the Emscripten filesystem built on top of any\nS3-compatible bucket. This means you\u2019ll be able to list, read, and write files\nfrom your S3 bucket just by interacting with \u201dos\u201d filesystem all in Python.\n\nIn order to make the experience smooth in any browser environment, we do our\nbest to auto-install packages. Whenever a cell is run, we try to install it\nthrough Pyodide or otherwise fallback to micropip.\n\n### Python#\n\nSimilar to our TypeScript codebase, our Python codebase uses the same\nimplementation for Pyodide and native Python. We introduced just a few\nbranches based on whether the kernel is running under Pyodide, since some\nPython features, such as shared memory, threading, and multiprocessing, are\nnot yet available in Pyodide. As one example, we replaced multiprocessing\nqueues with asyncio queues.\n\nWe added a new entrypoint for creating the marimo kernel when running under\nPyodide, which receives messages from the RPC bridge in an asynchronous\ncontrol loop. This entrypoint also sets up stream objects (e.g., for standard\noutput) to use the message callback provided to it by the frontend.\n\nIn order to support package installation with micropip, we had to modify the\nkernel implementation to support top-level await. Typically, it is a syntax\nerror to use await outside a function, but micropip.install is an async\nfunction and must be awaited. So we configured code compilation to allow top-\nlevel await, and wrapped the marimo kernel in an asyncio event loop. As a\nbonus, this change made it possible to use top-level await when running via\nnative Python, a feature that had been requested by our users for some time.\n\n## What\u2019s next?#\n\nWe believe that marimo used with Pyodide holds enormous potential for making\ncomputing more accessible:\n\n  * Anyone can create and share live notebooks, without having to pay for infrastructure.\n  * Students can get started with Python instantly, without having to set up a development environment.\n  * Library developers can embed reactive coding environments and demos in documentation \u2014 we\u2019ve done this throughout our own API docs.\n  * Authors can publish interactive blog posts and computational tools as part of static web pages.\n\nWe have ideas on how to make Pyodide-powered marimo notebooks more useful \u2014\ne.g., we\u2019d like to make it easier to work with auxiliary code and data files,\nand to save multiple notebooks at our playground. We\u2019re also interested in\nhelping the Pyodide team support more packages.\n\nMost of all, though, we\u2019d like to learn what you want: come chat with us in\nour Discord or Github, or send us an email at contact@marimo.io.\n\n  * announcement\n  * guest post\n\n\u00a9 2024 Pyodide blog Powered by Hugo & PaperMod\n\n", "frontpage": false}
