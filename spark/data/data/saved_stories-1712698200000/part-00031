{"aid": "39980023", "title": "Using Jupyter Notebooks with Flox", "url": "https://flox.dev/blog/jupyter-remote-env", "domain": "flox.dev", "votes": 2, "user": "tomberek", "posted_at": "2024-04-09 14:46:40", "comments": 0, "source_title": "flox | Using Jupyter Notebooks with Flox", "source_text": "flox | Using Jupyter Notebooks with Flox\n\n1.9k\n\nLinux (deb)x86\n\nLinux (deb)ARM\n\nLinux (rpm)x86\n\nLinux (rpm)ARM\n\nmacOSM1/M2/M3\n\nmacOSIntel\n\nLogin\n\n  * Docs\n\n  * Features\n\n  * Blog\n\nConnect\n\n#### Blog\n\n# Using Jupyter Notebooks with Flox\n\n##### Ross Turk | 5 April 2024\n\nSometimes you just need to use a tool for a moment. You don\u2019t want to install\nit, you don\u2019t want to deploy it, you don\u2019t want to maintain it. You really\nwould rather not configure it, and you certainly don\u2019t want to ship it to the\nworld alongside your project.\n\nYou just need to use it for a second, and then you want it to go away.\n\nMaybe you need to read an ancient data format, but just long enough to extract\nwhat you need. Or maybe you want to lint some code you wrote in a language you\nalmost never use, and only has a place in a small corner of your life. Or\nmaybe it\u2019s a tool that is intensely useful while you\u2019re in one phase of your\ndevelopment process, but not another.\n\nSince the release of Flox 1.0 and FloxHub, there\u2019s a new way to use tools\nephemerally: Flox remote environments.\n\n## When you need a notebook...\n\nFrequently while in the research phase of a project I encounter an intriguing\nipynb file that seems likely to contain something I am looking for. In those\ntimes, I want to be able to open that notebook and run what is inside...but I\ndon't necessarily need to include a notebook server in my everyday stack.\n\nEnvironments can be activated from FloxHub directly, overlaying new tools into\nthe context you\u2019re already in. We can use this to start a notebook server\nwithout installing anything globally.\n\nLet\u2019s say we are in a directory with a few interesting notebooks:\n\n    \n    \n    ~ % cd notebooks notebooks % ls barcode_demo.ipynb tricontour_demo.ipynb notebooks %\n\nUsing a FloxHub remote environment called flox/nb, we can add Jupyter tools\ninto our current shell session. By passing -r to flox activate, we can specify\nthe name of a remote environment that Flox will enable ephemerally.\n\n    \n    \n    notebooks % flox activate -r flox/nb \u2705 You are now using the environment 'flox/nb' (remote). To stop using this environment, type 'exit' Jupyter environment ready - start notebook with 'nb'. flox [flox/nb] notebooks %\n\nWe are now using a Flox environment whose definition lives on FloxHub.\n\nThis Flox environment contains all of the necessary Python components to\nsupport a Jupyter notebook server, which have now been downloaded from the\nFlox Catalog and made available in our path. It also sets an alias that can\nhelp us start the notebook server. We didn't have to install anything, which\nmeans we won't have to uninstall anything later.\n\nLet's start it now:\n\n    \n    \n    flox [flox/nb] notebooks % nb [...] To access the server, open this file in a browser: file:///Users/me/Library/Jupyter/runtime/jpserver-64073-open.html Or copy and paste one of these URLs: http://mylaptop.local:8888/tree?token=b5df059c9d323bbca1chb9407049a4695aa64081afbb632aa http://127.0.0.1:8888/tree?token=b5df059c9d323bbca1cb9407049a4695aab64081afbb632aa [...]\n\nWhen we open our browser window by clicking on either of those links, we can\nsee our notebook server running with the contents of our directory.\n\nHere I want to point out a few important things:\n\n  * We didn't have to mount any volumes in order to access our local files from this notebook server because it is running in the same user space where we are already working\n  * We also didn't have to forward any ports to gain access to this new service because it's running on the same host - again, where we are already working.\n  * This isn't running inside a container or a virtual machine. Even though it's ephemeral, it's still running on bare metal on your machine.\n\nWhen we are done, we can exit the Flox environment the same way we\u2019d exit any\nother subshell. Outside of the remote environment, our notebook server is\nunavailable and hasn\u2019t left anything behind.\n\n    \n    \n    flox [flox/nb] notebooks % exit notebooks % nb zsh: command not found: nb notebooks % ls barcode_demo.ipynb tricontour_demo.ipynb notebooks %\n\n## How does it work?\n\nSo what's inside this environment? If you read part 2 of our Intro to Flox\nseries, you know that you can use the flox list command with -c to print an\nenvironment\u2019s manifest. This also works with remote environments if you add -r\n(for \"remote\") followed by the environment name.\n\nLet\u2019s run flox list -c -r flox/nb and look at this environment's manifest one\nsection at a time.\n\n    \n    \n    [install] jupyter.pkg-path = \"jupyter-all\" pandas.pkg-path = \"python311Packages.pandas\" matplotlib.pkg-path = \"python311Packages.matplotlib\" numpy.pkg-path = \"python311Packages.numpy\" pyarrow.pkg-path = \"python311Packages.pyarrow\" sympy.pkg-path = \"python311Packages.sympy\" pydot.pkg-path = \"python311Packages.pydot\" plotly.pkg-path = \"python311Packages.plotly\"\n\nThis section defines packages to be included in our environment. The first\none, jupyter-all, is a special package that contains a core set of Jupyter\nNotebook components. By adding it, we get the ability to start Jupyter servers\nand connect them with kernels.\n\nThat is a good baseline for running notebooks, but we have found that most\nnotebooks we run also need a few other things. That\u2019s why this environment\nalso contains a collection of other tools:\n\n  * pandas, numpy, and pyarrow for working with special data types,\n  * matplotlib and plotly for charting output, and\n  * sympy for algebraic functions.\n\nIn the next two sections, we see a variable and profile script that automates\na few useful tasks whenever it encounters a requirements.txt:\n\n    \n    \n    [vars] virtualEnv='./nb-venv/' [profile] common = \"\"\" if [[ -d $virtualEnv ]]; then echo; echo -n \"\u26a1\ufe0f Activating existing venv in $virtualEnv...\" . $virtualEnv/bin/activate echo \"done.\" fi if [[ -f requirements.txt ]]; then echo -n \"\ud83d\udc0d Processing requirements.txt...\" [ ! -d $virtualEnv ] && python -m venv $virtualEnv . $virtualEnv/bin/activate pip3 -qq install -r requirements.txt echo \"done.\" fi alias nb=\"jupyter notebook --ip 0.0.0.0\" echo; echo \"Jupyter environment ready - start notebook with 'nb'.\" \"\"\"\n\nIn the [vars] section, we find a variable containing the location for a Python\nvirtual environment, which is currently set to ./nb-venv. This will make sure\nthat a virtual environment is created (if needed) in the directory where the\nenvironment is remotely activated.\n\nThe [profile] contains a script that looks for the existence of that virtual\nenvirionment and, if it finds it, activates it. If it sees a requirements.txt,\nit will create a new virtual environment and install the packages listed\nwithin it.\n\nThis is useful in the case where a notebook requires more than the set of\npackages provided by this environment. It allows you to create a\nrequirements.txt before remotely activating flox/nb. When the environment\nactivates, it will create a virtual environment. This is the only thing that\nthis Flox environment leaves behind, and only if you ask for it.\n\nThe last two lines of the shell profile script create the nb alias we used\nearlier, which starts the server across all available network interfaces.\n\nThe final section of the manifest contains information about the supported\nplatforms.\n\n    \n    \n    [options] systems = [\"x86_64-linux\", \"aarch64-darwin\", \"aarch64-linux\", \"x86_64-darwin\"]\n\nThis environment been validated for use across Linux and Mac, ARM and x86.\n\nFlox is easy to try. Install it and run flox search to find your new favorite\nstuff.\n\n  * Features\n  * About Us\n  * Careers\n\nhiring\n\n  * Blog\n\n  * Privacy Policy\n  * Terms & Conditions\n\n\u00a9 2024 flox. All rights reserved.\n\n", "frontpage": false}
