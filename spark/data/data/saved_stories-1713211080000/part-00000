{"aid": "40040593", "title": "Neon Is Generally Available: Serverless Postgres", "url": "https://neon.tech/blog/neon-ga", "domain": "neon.tech", "votes": 153, "user": "refset", "posted_at": "2024-04-15 13:55:53", "comments": 67, "source_title": "Neon: A New Approach to Database Development - Neon", "source_text": "Neon: A New Approach to Database Development - Neon\n\nNeon is Generally Available! Serverless Postgres with branching to boost your\ndevelopment velocity.Read more\n\nNeon\n\n...Log InSign Up\n\nCompanyApr 15, 2024\n\n# Neon: A New Approach to Database Development\n\nNeon is Generally Available\n\n\u26a1 We just launched Neon in Product Hunt. Give us a review \u26a1\n\nPostgres continues to hold its position as one of the most popular developer\ndatabases ever created. While MySQL lost some of its luster after acquisition\nby Oracle, Postgres continues to win more developer trust. In 2023, it topped\nthe poll in the StackOverflow Developers Survey and in the same year, was\nvoted the DBMS of the Year by DBEngines. The current internet meme is \u201cJust\nUse Postgres\u201d for everything.\n\nDespite popularity Postgres suffers from the two problems that beset nearly\nall relational databases. It is difficult to scale up and down without\ninterruption. Worse, it takes a long time to restore production operations\nwhen software bugs affect the data.\n\nThis happens because with Postgres it\u2019s hard to create a high-fidelity\ndeveloper environment as it requires copying the full state of the database.\nWith that, maintaining multiple copies of data and schema for every developer\nis a major pain in the neck. The database becomes the nexus of development for\nmost teams and invariably is the bottleneck constricting developer velocity.\n\n## What developers need\n\nWhen the Neon engineering team approached these issues they knew they had to\nsolve several problems with today\u2019s database development lifecycle:\n\n  1. They wanted Postgres cluster creation to be fast (sub-second)\n  2. They wanted Postgres clusters to be able to scale up and down automatically as the load changed. You don\u2019t need to worry about over or under provisioning.\n  3. They wanted to be able to create branches with full data copied instantly so developers could work independently while still being able to collaborate effectively\n  4. They wanted to restore to a point in time in seconds instead of hours or days\n\nAlmost every app needs a database, and while developer tools and workflows\nevolved with platforms like GitHub and Vercel, databases did not evolve to\nmatch the developer experience of these systems. Evolving developer experience\naround the database requires a fundamental rethinking of the database\narchitecture. But this is not a \u201clook at our cool new database\u201d engine. We\nknow developers love and want to use authentic open-source Postgres. So, at\nNeon, we looked at how we could change the experience of developing on\nPostgres without losing everything that makes Postgres great.\n\nWe borrowed an idea from Amazon Aurora, the separation of storage and compute;\nand we aren\u2019t talking about simply using a network-attached disk like EBS.\nTrue separation of storage and compute opened up the possibility to scale both\nparts of the service independently. Unlike AWS Aurora we decided to open\nsource all the changes in Postgres and also send them upstream as well as\nfully open source our cloud native storage.\n\nWe made architectural decisions that ensured that our users have the complete\nPostgres experience, including Extensions, internals, command line and\nmanagement tools. Everything that worked on-premise should work in our cloud\nservice.\n\nAn additional benefit from separating storage and compute is \u2013 well we have a\nbrand new cloud native storage implementation and we can \u201cdo things\u201d in it.\nControlling storage allows us to implement branching \u2013 a flagship feature that\nunlocks a better developer experience for building database apps.\n\n## What does this mean for the user?\n\nThis means we can create branches at any point in time and start a compute\ninstance pointing to that database version. So, every developer can work on a\ndifferent branch without colliding with their colleague\u2019s work.\n\nCompute can now scale independently of storage so the CPU size and count can\naccurately match the load. Even large database loads have peaks and troughs.\nWe wanted to avoid developers having to size for the largest expected load.\n\nA database branch is copy-on-write, so it only points to a set of already\ncreated and stored pages. So, branches take less than a second to create.\nBecause they are copied on write branches incur no space overhead until data\nis written to them.\n\nSuppose a developer fat fingers a table or a database out of existence? No\nproblem, move the branch to the second before that event happened. Starting a\nnew database or recovering from a production failure happens in seconds\nbecause the Neon architecture doesn\u2019t require you to ship hundreds of\ngigabytes of data to create new instances of databases and servers.\n\nUsers don\u2019t want databases, they want data. Neon is designed to take the\noverhead of starting, stopping, creating, and cloning databases from hours to\nseconds. The major velocity inhibitor of modern development is the relational\ndatabase. Imagine if data was easy, what would it do to your developer\nproductivity?\n\nWith Neon database branching is integrated directly into the developer\nworkflow and without interruption. When database data and/or schema changes\ntake hours to propagate across the development team everyone suffers.\n\nNeon is the next big pivot for Postgres, and all of these changes have been\noffered upstream to the Postgres community. They are available in our public\nrepo today. Our mission is to provide everything Postgres developers need and\nless. Less waiting for clusters to start, less waiting for databases to\nrestore, less waiting for colleagues changes to deploy, less waiting for the\nDBA team to schedule their updates.\n\n## How did we get here?\n\nDuring our Preview we\u2019ve been focused on building a solid technical foundation\nfor Neon. Some of our favorite milestones:\n\n  * In December 2022, we removed the invite-only gate to Neon. Today, thousands of new Neon databases are created weekly. Neon includes a generous free tier that is here to stay: the Neon architecture makes it efficient for us to support it.\n  * We made database branching available to everyone. Today, tens of thousands of branches are created weekly by Neon users. Neon branches include data and schema, allowing developers to create isolated copies of their data in 1 second.\n  * Neon also included API support right from the start. The Neon API has now matured into a robust tool that enables Neon partners to easily manage fleets of hundreds of thousands of databases. They automate all database operations via the API, removing the need for dedicated DevOps for managing Postgres fleets.\n  * We also released a serverless driver. Today, the Neon serverless driver has +100,000 weekly downloads. Developers use it to speed up their JavaScript and Typescript deployments.\n  * On the topic of speeding up deployments, we launched our Vercel integration, which creates one database branch for every preview. Today, thousands of Neon database branches have been created via the Vercel integration.\n  * A few months into our Preview, we released the first version of autoscaling, a foundational feature that expands the Neon serverless experience. Today, thousands of autoscaling events are happening every week, saving developers the work of resizing manually.\n  * We also made the Neon CLI available to all users, so developers could simplify their integrations and automations by managing Neon directly from their terminal. Today, our CLI has hundreds of weekly active users (and counting).\n  * During the months of Preview, we put a special focus on improving our scale to zero and cold start behavior. Today, tens of thousands of Neon databases scale to zero every day, saving developers money. And we keep working hard on our cold start metrics: we are now at a P50 of 500 ms to start a database, and we\u2019re working to reduce it further.\n\n## Try Neon\n\nNeon Postgres is Generally Available. Serverless autoscaling and instant\nbranching are built for modern developers who have to iterate fast. Go faster\nwith Neon, it\u2019s ready, give it a spin.\n\n### Posted by\n\nNikita ShamgunovCEO at Neon\n\n### More articles\n\n  * # How we scale an open source, multi-tenant storage engine for Postgres written Rust\n\nJohn Spray\n\n  * # Authenticating users in Astro using Neon Postgres and Lucia Auth\n\nRishi Raj Jain\n\n  * # Build a Dynamic E-Commerce Store UI with Astro, Neon Postgres, and AWS Amplify\n\nRishi Raj Jain\n\nShare:\n\nShare:\n\n## Subscribe to receive our latest updates\n\n## More from Neon\n\n  * Engineering\n\n# How we scale an open source, multi-tenant storage engine for Postgres\nwritten Rust\n\nJohn SprayApr 15, 2024\n\n  * Community\n\n# Authenticating users in Astro using Neon Postgres and Lucia Auth\n\nRishi Raj JainApr 12, 2024\n\n  * Community\n\n# Build a Dynamic E-Commerce Store UI with Astro, Neon Postgres, and AWS\nAmplify\n\nRishi Raj JainApr 09, 2024\n\nNeonAll systems operational\n\nMade in SF and the World\n\nCopyright C 2022 \u2013 2024 Neon, Inc.\n\nCompany\n\n  * About us\n  * Careers\n  * Partners\n  * Case studies\n  * Trust\n  * Pricing\n  * Contact Sales\n\nResources\n\n  * AI\n  * Blog\n  * Docs\n  * Changelog\n  * Demos\n  * Support\n  * Security\n\nCommunity\n\n  * X\n  * LinkedIn\n  * GitHub\n  * Discord\n  * Discourse\n  * YouTube\n\nLegal\n\n  * Privacy Policy\n  * Terms of Service\n  * DPA\n  * Subprocessors List\n  * Privacy Guide\n  * Cookie Policy\n  * Business Information\n\n", "frontpage": true}
