{"aid": "39984512", "title": "The xz-utils backdoor has been removed", "url": "https://github.com/tukaani-project/xz/commit/e93e13c8b3bec925c56e0c0b675d8000a0f7f754", "domain": "github.com/tukaani-project", "votes": 3, "user": "EveryPizza", "posted_at": "2024-04-09 21:32:28", "comments": 2, "source_title": "Remove the backdoor found in 5.6.0 and 5.6.1 (CVE-2024-3094). \u00b7 tukaani-project/xz@e93e13c", "source_text": "Remove the backdoor found in 5.6.0 and 5.6.1 (CVE-2024-3094). \u00b7 tukaani-\nproject/xz@e93e13c \u00b7 GitHub\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ntukaani-project / xz Public\n\n  * Notifications\n  * Fork 0\n  * Star 7\n\n## Commit\n\nPermalink\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\nRemove the backdoor found in 5.6.0 and 5.6.1 (CVE-2024-3094).\n\nBrowse files Browse the repository at this point in the history\n\n    \n    \n    While the backdoor was inactive (and thus harmless) without inserting a small trigger code into the build system when the source package was created, it's good to remove this anyway: - The executable payloads were embedded as binary blobs in the test files. This was a blatant violation of the Debian Free Software Guidelines. - On machines that see lots bots poking at the SSH port, the backdoor noticeably increased CPU load, resulting in degraded user experience and thus overwhelmingly negative user feedback. - The maintainer who added the backdoor has disappeared. - Backdoors are bad for security. This reverts the following without making any other changes: 6e63681 Tests: Update two test files. a3a29bb Tests: Test --single-stream can decompress bad-3-corrupt_lzma2.xz. 0b4ccc9 Tests: Update RISC-V test files. 8c9b8b2 liblzma: Fix typos in crc32_fast.c and crc64_fast.c. 82ecc53 liblzma: Fix false Valgrind error report with GCC. cf44e4b Tests: Add a few test files. 3060e10 Tests: Use smaller dictionary size in RISC-V test files. e2870db Tests: Add two RISC-V Filter test files. The RISC-V test files also have real content that tests the filter but the real content would fit into much smaller files. A generator program would need to be available as well. Thanks to Andres Freund for finding and reporting it and making it public quickly so others could act without a delay. See: https://www.openwall.com/lists/oss-security/2024/03/29/4\n\n  * master\n\nLarhzu committed Apr 9, 2024\n\n1 parent f9cf4c0 commit e93e13c\n\nShow file tree\n\nHide file tree\n\nShowing 12 changed files with 8 additions and 66 deletions.\n\n## There are no files selected for viewing\n\n7 changes: 5 additions & 2 deletions 7 src/liblzma/check/crc32_fast.c\n\nOriginal file line number| Diff line number| Diff line change  \n---|---|---  \nExpand Up| @@ -135,8 +135,11 @@ typedef uint32_t (*crc32_func_type)(  \n// This resolver is shared between all three dispatch methods. It serves as  \n// the ifunc resolver if ifunc is supported, otherwise it is called as a  \n// regular function by the constructor or first call resolution methods.  \n// The function attributes are needed for safe IFUNC resolver usage with GCC.  \nlzma_resolver_attributes  \n// The __no_profile_instrument_function__ attribute support is checked when  \n// determining if ifunc can be used, so it is safe to use here.  \n#ifdef CRC_USE_IFUNC  \n__attribute__((__no_profile_instrument_function__))  \n#endif  \nstatic crc32_func_type  \ncrc32_resolve(void)  \n{  \nExpand Down  \n  \n4 changes: 3 additions & 1 deletion 4 src/liblzma/check/crc64_fast.c\n\nOriginal file line number| Diff line number| Diff line change  \n---|---|---  \nExpand Up| @@ -98,7 +98,9 @@ typedef uint64_t (*crc64_func_type)(  \n# pragma GCC diagnostic ignored \"-Wunused-function\"  \n#endif  \nlzma_resolver_attributes  \n#ifdef CRC_USE_IFUNC  \n__attribute__((__no_profile_instrument_function__))  \n#endif  \nstatic crc64_func_type  \ncrc64_resolve(void)  \n{  \nExpand Down  \n  \n25 changes: 0 additions & 25 deletions 25 src/liblzma/check/crc_common.h\n\nOriginal file line number| Diff line number| Diff line change  \n---|---|---  \nExpand Up| @@ -128,31 +128,6 @@  \n# endif  \n#endif  \n#ifdef CRC_USE_IFUNC  \n// Two function attributes are needed to make IFUNC safe with GCC.  \n//  \n// no-omit-frame-pointer prevents false Valgrind issues when combined with  \n// a few other compiler flags. The optimize attribute is supported on  \n// GCC >= 4.4 and is not supported with Clang.  \n# if TUKLIB_GNUC_REQ(4,4) && !defined(__clang__)  \n# define no_omit_frame_pointer \\  \n__attribute__((optimize(\"no-omit-frame-pointer\")))  \n# else  \n# define no_omit_frame_pointer  \n# endif  \n// The __no_profile_instrument_function__ attribute support is checked when  \n// determining if ifunc can be used, so it is safe to use unconditionally.  \n// This attribute is needed because GCC can add profiling to the IFUNC  \n// resolver, which calls functions that have not yet been relocated leading  \n// to a crash on liblzma start up.  \n# define lzma_resolver_attributes \\  \n__attribute__((__no_profile_instrument_function__)) \\  \nno_omit_frame_pointer  \n#else  \n# define lzma_resolver_attributes  \n#endif  \n// For CRC32 use the generic slice-by-eight implementation if no optimized  \n// version is available.  \n#if !defined(CRC32_ARCH_OPTIMIZED) && !defined(CRC32_GENERIC)  \nExpand Down  \n  \n27 changes: 0 additions & 27 deletions 27 tests/files/README\n\nOriginal file line number| Diff line number| Diff line change  \n---|---|---  \nExpand Up| @@ -41,8 +41,6 @@  \ngood-0catpad-empty.xz has two zero-Block Streams concatenated with  \nfour-byte Stream Padding between the Streams.  \ngood-2cat.xz has two Streams with one Block each.  \ngood-1-check-none.xz has one Stream with one Block with two  \nuncompressed LZMA2 chunks and no integrity check.  \nExpand Down Expand Up| @@ -83,14 +81,6 @@  \ngood-1-arm64-lzma2-2.xz is like good-1-arm64-lzma2-1.xz but with  \nnon-zero start offset. XZ Embedded doesn't support this file.  \ngood-1-riscv-lzma2-1.xz uses the RISC-V filter and LZMA2. The  \nuncompressed data is constructed so it tests all of the instructions  \nthat should be encoded and a few that should not. Additionally, the  \nfile contains random bytes to help test unforeseen corner cases.  \ngood-1-riscv-lzma2-2.xz is like good-1-riscv-lzma2-1.xz but with  \nnon-zero start offset. XZ Embedded doesn't support this file.  \ngood-1-lzma2-1.xz has two LZMA2 chunks, of which the second sets  \nnew properties.  \nExpand Down Expand Up| @@ -294,11 +284,6 @@  \nUncompressed Size bytes of output will have been produced but  \nthe LZMA2 decoder doesn't indicate end of stream.  \nbad-3-corrupt_lzma2.xz has three Streams in it. The first and third  \nstreams are valid xz Streams. The middle Stream has a correct Stream  \nHeader, Block Header, Index and Stream Footer. Only the LZMA2 data  \nis corrupt. This file should decompress if --single-stream is used.  \n3\\. Descriptions of Individual .lzma Files  \nExpand All| @@ -315,14 +300,6 @@  \nwill give an error at the end of the file after producing the  \ncorrect uncompressed output.  \ngood-small_compressed.lzma was created with a small dictionary (2^16).  \nIt contains the string \"Hello World\" repeated 100,000 times. This tests  \nmatch decoding and wrapping the dictionary.  \ngood-large_compressed.lzma was created with a mix of repeated  \ncharacters and random data to test a data stream containing many  \nmatches and many literals.  \n3.2. Bad Files  \nExpand All| @@ -344,10 +321,6 @@  \nbad-too_small_size-without_eopm-3.lzma is like -1 above but instead  \nof a literal the problem occurs in the middle of a match.  \nbad-dict_size.lzma has a valid dictionary size according to the .lzma  \nFile Format, but will be rejected by XZ Utils because it is not 2^n or  \n2^n + 2^(n-1).  \n4\\. Descriptions of Individual .lz (lzip) Files  \nExpand Down  \n  \nBinary file removed BIN -512 Bytes tests/files/bad-3-corrupt_lzma2.xz\n\nBinary file not shown.\n\nBinary file removed BIN -41 Bytes tests/files/bad-dict_size.lzma\n\nBinary file not shown.\n\nBinary file removed BIN -7.25 KB tests/files/good-1-riscv-lzma2-1.xz\n\nBinary file not shown.\n\nBinary file removed BIN -7.26 KB tests/files/good-1-riscv-lzma2-2.xz\n\nBinary file not shown.\n\nBinary file removed BIN -136 Bytes tests/files/good-2cat.xz\n\nBinary file not shown.\n\nBinary file removed BIN -34.6 KB tests/files/good-large_compressed.lzma\n\nBinary file not shown.\n\nBinary file removed BIN -258 Bytes tests/files/good-small_compressed.lzma\n\nBinary file not shown.\n\n11 changes: 0 additions & 11 deletions 11 tests/test_files.sh\n\nOriginal file line number| Diff line number| Diff line change  \n---|---|---  \nExpand Up| @@ -149,17 +149,6 @@ else  \nexit 1  \nfi  \n# Test that --single-stream can decompress bad-3-corrupt_lzma2.xz.  \n# The first Stream in this file should decompress without errors.  \n# This file cannot be decompressed with xzdec.  \nI=\"$srcdir/files/bad-3-corrupt_lzma2.xz\"  \nif test -z \"$XZ\" || \"$XZ\" -dc --single-stream $NO_WARN \"$I\" > /dev/null; then  \n:  \nelse  \necho \"Good first Stream failed xz with --single-stream: $I\"  \nexit 1  \nfi  \n#########  \n# .lzma #  \nExpand Down  \n  \n### 1 comment on commit e93e13c\n\nPlease sign in to comment.\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
