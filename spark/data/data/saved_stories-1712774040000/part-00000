{"aid": "39989957", "title": "Show HN: Tsynamo \u2013 Type-friendly DynamoDB query builder for TypeScript", "url": "https://github.com/woltsu/tsynamo", "domain": "github.com/woltsu", "votes": 1, "user": "woltsuu", "posted_at": "2024-04-10 12:31:36", "comments": 0, "source_title": "GitHub - woltsu/tsynamo: Type-friendly TypeScript DynamoDB query builder!", "source_text": "GitHub - woltsu/tsynamo: Type-friendly TypeScript DynamoDB query builder!\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nwoltsu / tsynamo Public\n\n  * Notifications\n  * Fork 5\n  * Star 5\n\nType-friendly TypeScript DynamoDB query builder!\n\n### License\n\nMIT license\n\n5 stars 5 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# woltsu/tsynamo\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n7 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nwoltsuMerge pull request #27 from mindler-olli/maindc22939 \u00b7\n\n## History\n\n143 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| add pr action  \n  \n### assets\n\n|\n\n### assets\n\n| made readme prettier  \n  \n### src\n\n|\n\n### src\n\n| update tests  \n  \n### test\n\n|\n\n### test\n\n| added support for DELETE statements in update item query  \n  \n### www\n\n|\n\n### www\n\n| Cleanup  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| add build step  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| add license  \n  \n### README.md\n\n|\n\n### README.md\n\n| make assets to permalinks  \n  \n### package.json\n\n|\n\n### package.json\n\n| update version  \n  \n### pnpm-lock.yaml\n\n|\n\n### pnpm-lock.yaml\n\n| integration test setup  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| exclude www from tsconfig  \n  \n### tsup.config.ts\n\n|\n\n### tsup.config.ts\n\n| add build step  \n  \n### vitest.config.mts\n\n|\n\n### vitest.config.mts\n\n| type tests  \n  \n### vitest.integration.config.mts\n\n|\n\n### vitest.integration.config.mts\n\n| type tests  \n  \n## Repository files navigation\n\n# Tsynamo\n\n\u2728 Type-friendly DynamoDB query builder! \u2728 Inspired by Kysely\n\nTsynamo simplifies the DynamoDB API so that you don't have to write commands\nwith raw expressions and hassle with the attribute names and values. Moreover,\nTsynamo makes sure you use correct types in your DynamoDB expressions, and the\nqueries are nicer to write with autocompletion!\n\nWarning\n\nTsynamo is still an early stage project, please post issues if you notice\nsomething missing from the API!\n\n## Table of contents\n\n  * Table of contents\n  * Requirements\n  * Installation\n  * Usage\n\n    * Creating a Tsynamo client\n    * Get item\n    * Query item\n    * Put item\n    * Delete item\n    * Update item\n  * Contributors\n\n## Requirements\n\n  * @aws-sdk/client-dynamodb\n  * @aws-sdk/lib-dynamodb\n\n## Installation\n\nAvailable in NPM.\n\n    \n    \n    npm i tsynamo pnpm install tsynamo yarn add tsynamo\n\nNote\n\nYou can also try it out at Tsynamo Playground\n\n## Usage\n\n### Creating a Tsynamo client\n\n  1. Define the types for your DynamoDB (DDB) tables:\n\n    \n    \n    import { PartitionKey, SortKey } from \"tsynamo\"; export interface DDB { UserEvents: { userId: PartitionKey<string>; eventId: SortKey<number>; eventType: string; userAuthenticated: boolean; }; }\n\nTip\n\nNotice that you can have multiple tables in the DDB schema. Nested attributes\nare supported too.\n\n  2. Create a DynamoDB document client:\n\n    \n    \n    import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\"; import { DynamoDBDocumentClient } from \"@aws-sdk/lib-dynamodb\"; const ddbClient = DynamoDBDocumentClient.from( new DynamoDBClient({ /* Configure client... */ }) );\n\nImportant\n\nThe document client must come from @aws-sdk/lib-dynamodb!\n\n  3. Create a Tsynamo client with the defined DynamoDB types and client:\n\n    \n    \n    const tsynamoClient = new Tsynamo<DDB>({ ddbClient: dynamoDbDocumentClient, });\n\n## Get item\n\n    \n    \n    await tsynamoClient .getItem(\"UserEvents\") .keys({ userId: \"123\", eventId: 222, }) .attributes([\"userId\"]) .execute();\n\n### Query item\n\n#### Partition key condition\n\n    \n    \n    await tsynamoClient .query(\"UserEvents\") .keyCondition(\"userId\", \"=\", \"123\") .execute();\n\n#### Partition and sort key conditions\n\n    \n    \n    await tsynamoClient .query(\"UserEvents\") .keyCondition(\"userId\", \"=\", \"123\") .keyCondition(\"eventId\", \"<\", 1000) .execute();\n\n#### Simple filter expression\n\n    \n    \n    await tsynamoClient .query(\"UserEvents\") .keyCondition(\"userId\", \"=\", \"123\") .filterExpression(\"eventType\", \"=\", \"LOG_IN_EVENT\") .execute();\n\n#### Filter expression with a function\n\n    \n    \n    await tsynamoClient .query(\"UserEvents\") .keyCondition(\"userId\", \"=\", \"123\") .filterExpression(\"eventType\", \"begins_with\", \"LOG\") .execute();\n\n#### Multiple filter expressions\n\n    \n    \n    await tsynamoClient .query(\"UserEvents\") .keyCondition(\"userId\", \"=\", \"123\") .filterExpression(\"eventType\", \"begins_with\", \"LOG_IN\") .orFilterExpression(\"eventType\", \"begins_with\", \"SIGN_IN\") .execute();\n\n#### Nested filter expressions\n\n    \n    \n    await tsynamoClient .query(\"UserEvents\") .keyCondition(\"userId\", \"=\", \"123\") .filterExpression(\"eventType\", \"=\", \"LOG_IN\") .orFilterExpression((qb) => qb .filterExpression(\"eventType\", \"=\", \"UNAUTHORIZED_ACCESS\") .filterExpression(\"userAuthenticated\", \"=\", true) ) .orFilterExpression(\"eventType\", \"begins_with\", \"SIGN_IN\") .execute();\n\nNote\n\nThis would compile as the following FilterExpression: eventType = \"LOG_IN\" OR\n(eventType = \"UNAUTHORIZED_ACCESS\" AND userAuthenticated = true)\n\n#### NOT filter expression\n\n    \n    \n    await tsynamoClient .query(\"UserEvents\") .keyCondition(\"userId\", \"=\", \"123\") .filterExpression(\"NOT\", (qb) => qb.filterExpression(\"eventType\", \"=\", \"LOG_IN\") ) .execute();\n\n> This would compile as the following FilterExpression: NOT eventType =\n> \"LOG_IN\", i.e. return all events whose types is not \"LOG_IN\"\n\n### Put item\n\n#### Simple put item\n\n    \n    \n    await tsynamoClient .putItem(\"myTable\") .item({ userId: \"123\", eventId: 313, }) .execute();\n\n#### Put item with ConditionExpression\n\n    \n    \n    await tsynamoClient .putItem(\"myTable\") .item({ userId: \"123\", eventId: 313, }) .conditionExpression(\"userId\", \"attribute_not_exists\") .execute();\n\n#### Put item with multiple ConditionExpressions\n\n    \n    \n    await tsynamoClient .putItem(\"myTable\") .item({ userId: \"123\", eventId: 313, }) .conditionExpression(\"userId\", \"attribute_not_exists\") .orConditionExpression(\"eventType\", \"begins_with\", \"LOG_\") .execute();\n\n### Delete item\n\n#### Simple delete item\n\n    \n    \n    await tsynamoClient .deleteItem(\"myTable\") .keys({ userId: \"123\", eventId: 313, }) .execute();\n\n#### Simple delete item with ConditionExpression\n\n    \n    \n    await tsynamoClient .deleteItem(\"myTable\") .keys({ userId: \"123\", eventId: 313, }) .conditionExpression(\"eventType\", \"attribute_not_exists\") .execute();\n\n### Update item\n\n    \n    \n    await tsynamoClient .updateItem(\"myTable\") .keys({ userId: \"1\", dataTimestamp: 2 }) .set(\"nested.nestedBoolean\", \"=\", true) .remove(\"nested.nestedString\") .add(\"somethingElse\", 10) .add(\"someSet\", new Set([\"4\", \"5\"])) .delete(\"nested.nestedSet\", new Set([\"4\", \"5\"])) .conditionExpression(\"somethingElse\", \">\", 0) .execute();\n\n## Contributors\n\n## About\n\nType-friendly TypeScript DynamoDB query builder!\n\n### Topics\n\nnodejs aws typescript dynamodb query-builder aws-sdk-v3\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n5 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n5 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 6\n\n## Languages\n\n  * TypeScript 82.4%\n  * SCSS 13.3%\n  * MDX 4.2%\n  * JavaScript 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
