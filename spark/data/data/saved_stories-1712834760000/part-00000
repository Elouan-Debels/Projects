{"aid": "39998651", "title": "Use an LLM to automagically generate meaningful Git commit messages", "url": "https://harper.blog/2024/03/11/use-an-llm-to-automagically-generate-meaningful-git-commit-messages/", "domain": "harper.blog", "votes": 1, "user": "goranmoomin", "posted_at": "2024-04-11 05:23:29", "comments": 0, "source_title": "Use an llm to automagically generate meaningful git commit messages", "source_text": "Use an llm to automagically generate meaningful git commit messages | Harper Reed's Blog\n\n## Harper Reed's Blog\n\nMusing from a normal person doing normal things\n\n11 Mar 2024\n\n# Use an llm to automagically generate meaningful git commit messages\n\nTL;DR: You can set a pre-commit-msg git hook to call the llm cli and get a\nsummary of your recent code changes as your commit message.\n\nI love hacking on projects, but often I am super bad at making commits that\nmake sense.\n\nFor instance:\n\nMy terrible commit messages\n\nTrash commit messages. I am lazy!\n\n## Never fear, LLMs are here.\n\nOriginally my buddy Kanno sent me a snippet that would allow you to have a\nsimple git alias that would generate a commit message from the git diff. It\nwas pretty robust.\n\n    \n    \n    # generate comment gpt = \"!f() { git diff $1 | sgpt 'Write concise, informative commit messages: Start with a summary in imperative mood, explain the 'why' behind changes, keep the summary under 50 characters, use bullet points for multiple changes, and reference related issues or tickets. What you write will be passed to git commit -m \\\"[message]\\\"'; }; f\"\n\nHowever, I wanted to use Simon\u2019s LLM cli instead of shell gpt. LLM has way\nmore model support, and can use local models, MLX, etc.\n\nI also wanted the prompt to be stored externally so I could iterate on it\nwithout having to fuck with the .gitconfig over and over again.\n\nI went ahead and put my prompt in ~/.config/prompts/git-commit-message.txt.\nHere is the prompt:\n\n    \n    \n    Write short commit messages: - The first line should be a short summary of the changes - Remember to mention the files that were changed, and what was changed - Explain the 'why' behind changes - Use bullet points for multiple changes - Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive - If there are no changes, or the input is blank - then return a blank string Think carefully before you write your commit message. The output format should be: Summary of changes - changes - changes What you write will be passed directly to git commit -m \"[message]\"\n\nAnd here is the updated gpt alias:\n\n    \n    \n    gpt = \"!f() { git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\" }; f\"\n\nThis did everything I wanted it to do. However, I am lazy, so I wanted to add\na bit more magic.\n\nI asked claude to make it more interactive and allow me to abort the commit\nmessage if it sucked.\n\n    \n    \n    llm = \"!f() { \\ if git diff --quiet $1; then \\ echo \\\"No changes to commit. Aborting.\\\"; \\ else \\ commit_msg=$(git diff $1 | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\ echo \\\"Commit message:\\n$commit_msg\\\"; \\ read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\ if [[ $confirm =~ ^[Yy]$ ]]; then \\ git commit -m \\\"$commit_msg\\\"; \\ else \\ echo \\\"Commit aborted.\\\"; \\ fi; \\ fi; \\ }; f\"\n\nThis was so so close. I asked claude again, and we got to this:\n\n    \n    \n    llm-staged = \"!f() { \\ git add -p; \\ if ! git diff --cached --quiet; then \\ commit_msg=$(git diff --cached | llm -s \\\"$(cat ~/.config/prompts/commit-system-prompt.txt)\\\"); \\ echo \\\"Commit message:\\n$commit_msg\\\"; \\ read -p \\\"Do you want to commit with this message? [y/N] \\\" confirm; \\ if [[ $confirm =~ ^[Yy]$ ]]; then \\ git commit -m \\\"$commit_msg\\\"; \\ else \\ git reset HEAD .; \\ echo \\\"Commit aborted.\\\"; \\ fi; \\ else \\ echo \\\"No changes staged for commit. Aborting.\\\"; \\ fi; \\ }; f\"\n\nI was satisfied, but this was still too much work, and too kludgy.\n\n## Git Hooked\n\nThen I remembered! Git hooks! Lol. Why would I have that in my brain - who\nknows!\n\nI asked claude again, and they whipped up a simple script that would act as a\nhook that triggers with the prepare-commit-msg event.\n\nThis is awesome, cuz if you want to add a git message, you can skip the hook.\nBut if you are lazy, you exclude the message and it will call the LLM.\n\nThe commit hook is super simple:\n\n    \n    \n    #!/bin/sh # Exit if the `SKIP_LLM_GITHOOK` environment variable is set if [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then exit 0 fi # ANSI color codes for styling the output RED='\\033[0;31m' # Sets text to red GREEN='\\033[0;32m' # Sets text to green YELLOW='\\033[0;33m' # Sets text to yellow BLUE='\\033[0;34m' # Sets text to blue NC='\\033[0m' # Resets the text color to default, no color # Function to display a spinning animation during the LLM processing spin_animation() { # Array of spinner characters for the animation spinner=(\"\u280b\" \"\u2819\" \"\u2839\" \"\u2838\" \"\u283c\" \"\u2834\" \"\u2826\" \"\u2827\" \"\u2807\" \"\u280f\") # Infinite loop to keep the animation running while true; do for i in \"${spinner[@]}\"; do tput civis # Hide the cursor to enhance the animation appearance tput el1 # Clear the line from the cursor to the beginning to display the spinner printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\" # Print the spinner and message sleep 0.1 # Delay to control the speed of the animation tput cub 32 # Move the cursor back 32 columns to reset the spinner position done done } # Check if the commit is a merge commit based on the presence of a second argument if [ -n \"$2\" ]; then exit 0 # Exit script if it's a merge commit, no custom message needed fi # Check if the `llm` command is installed if ! command -v llm &> /dev/null; then echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\" exit 1 fi # Start the spinning animation in the background spin_animation & spin_pid=$! # Capture the process ID of the spinning animation # Generate the commit message using `git diff` piped into `llm` command # The LLM command takes a system prompt from a file as input if ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then # Stop the spinning animation by killing its process kill $spin_pid wait $spin_pid 2>/dev/null # Wait for the process to terminate and suppress error messages # Finalizing output tput cnorm # Show the cursor again printf \"\\\\n\" # Move the cursor to the next line printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\" exit 1 fi # Stop the spinning animation by killing its process kill $spin_pid wait $spin_pid 2>/dev/null # Wait for the process to terminate and suppress error messages # Finalizing output tput cnorm # Show the cursor again echo # Move the cursor to the next line # Display the generated commit message with color-coded headings echo \"${BLUE}=== Generated Commit Message ===${NC}\" echo \"${GREEN}$commit_msg${NC}\" echo \"${BLUE}=================================${NC}\" echo # Write the generated commit message to the specified file (usually the commit message file in .git) echo \"$commit_msg\" > \"$1\"\n\n(ChatGPT added the documentation)\n\nIt works! And has a spinner! And catches errors! And is pretty!\n\nNow, whenever I commit without a message, the commit hook executes and sends\nthe diff of the changes to the llm cli with the system prompt previously\ndefined. The output is really nice!\n\n    \n    \n    \ud83e\udd16\ud83d\udcac AI-powered git commit messages FTW! \ud83d\ude80\ud83c\udf89 - Updated content/post/2024-03-11-ai-git-commit-messages.md - Added links to my actual git hook and prompt in dotfiles repo \ud83d\udd17 - Removed unnecessary code block formatting for the output example \ud83d\uddd1\ufe0f - AI is making us lazy devs, but who cares when commit messages are this awesome! \ud83d\ude02\ud83d\udc4c\n\nYay. Much better! You can see my hook and my prompt in my dotfiles.\n\nYou can even disable it by setting the SKIP_LLM_GITHOOK environment variable.\n\n## How to set this up!\n\n### 1\\. Install llm.\n\nVisit llm.datasette.io for instructions. I used pipx to install it:\n\n    \n    \n    pipx install llm\n\nRemember to set your key and default model.\n\nSet your Openai key:\n\n    \n    \n    llm keys set openai\n\nSet which model is default:\n\n    \n    \n    llm models default gpt-4-turbo\n\n(The llm cli is awesome. It supports lots of different models (including local\nmodels), and contexts. Worth digging in for sure)\n\n### 2\\. Create a new directory for your prompts:\n\n    \n    \n    mkdir -p ~/.config/prompts\n\n### 3\\. Add your system prompt:\n\nThe hook will look in ~/.config/prompts/commit-system-prompt.txt for the\nsystem prompt. You can create a file with the following content:\n\n    \n    \n    Write short commit messages: - The first line should be a short summary of the changes - Remember to mention the files that were changed, and what was changed - Explain the 'why' behind changes - Use bullet points for multiple changes - Tone: Use a LOT of emojis, be funny, and expressive. Feel free to be profane, but don't be offensive - If there are no changes, or the input is blank - then return a blank string Think carefully before you write your commit message. The output format should be: Summary of changes - changes - changes What you write will be passed directly to git commit -m \"[message]\"\n\nThis prompt worked great for me - but let me know if you have changes. I\nconsider this prompt v0.\n\n### 4\\. Create a new directory for your global Git hooks.\n\nFor example, you can create a directory named git_hooks in your home\ndirectory:\n\n    \n    \n    mkdir -p ~/.git_hooks\n\n### 5\\. Touch the prepare-commit-msg\n\nCreate a new file named prepare-commit-msg (without any extension) in the\n~/.git_hooks directory.\n\n### 6\\. Open the prepare-commit-msg file in a text editor (vi or death) and\nadd the same content as before:\n\n    \n    \n    #!/bin/sh # Exit if the `SKIP_LLM_GITHOOK` environment variable is set if [ ! -z \"$SKIP_LLM_GITHOOK\" ]; then exit 0 fi # ANSI color codes for styling the output RED='\\033[0;31m' # Sets text to red GREEN='\\033[0;32m' # Sets text to green YELLOW='\\033[0;33m' # Sets text to yellow BLUE='\\033[0;34m' # Sets text to blue NC='\\033[0m' # Resets the text color to default, no color # Function to display a spinning animation during the LLM processing spin_animation() { # Array of spinner characters for the animation spinner=(\"\u280b\" \"\u2819\" \"\u2839\" \"\u2838\" \"\u283c\" \"\u2834\" \"\u2826\" \"\u2827\" \"\u2807\" \"\u280f\") # Infinite loop to keep the animation running while true; do for i in \"${spinner[@]}\"; do tput civis # Hide the cursor to enhance the animation appearance tput el1 # Clear the line from the cursor to the beginning to display the spinner printf \"\\\\r${YELLOW}%s${NC} Generating LLM commit message...\" \"$i\" # Print the spinner and message sleep 0.1 # Delay to control the speed of the animation tput cub 32 # Move the cursor back 32 columns to reset the spinner position done done } # Check if the commit is a merge commit based on the presence of a second argument if [ -n \"$2\" ]; then exit 0 # Exit script if it's a merge commit, no custom message needed fi # Check if the `llm` command is installed if ! command -v llm &> /dev/null; then echo \"${RED}Error: 'llm' command is not installed. Please install it and try again.${NC}\" exit 1 fi # Start the spinning animation in the background spin_animation & spin_pid=$! # Capture the process ID of the spinning animation # Generate the commit message using `git diff` piped into `llm` command # The LLM command takes a system prompt from a file as input if ! commit_msg=$(git diff --cached | llm -s \"$(cat ~/.config/prompts/commit-system-prompt.txt)\" 2>&1); then # Stop the spinning animation by killing its process kill $spin_pid wait $spin_pid 2>/dev/null # Wait for the process to terminate and suppress error messages # Finalizing output tput cnorm # Show the cursor again printf \"\\\\n\" # Move the cursor to the next line printf \"${RED}Error: 'llm' command failed to generate the commit message:\\\\n${commit_msg}${NC}\\\\n\\\\nManually set the commit message\" exit 1 fi # Stop the spinning animation by killing its process kill $spin_pid wait $spin_pid 2>/dev/null # Wait for the process to terminate and suppress error messages # Finalizing output tput cnorm # Show the cursor again echo # Move the cursor to the next line # Display the generated commit message with color-coded headings echo \"${BLUE}=== Generated Commit Message ===${NC}\" echo \"${GREEN}$commit_msg${NC}\" echo \"${BLUE}=================================${NC}\" echo # Write the generated commit message to the specified file (usually the commit message file in .git) echo \"$commit_msg\" > \"$1\"\n\nYou can see mine in my dotfiles.\n\n### 7\\. Make the prepare-commit-msg file executable\n\nRun the following command in your terminal:\n\n    \n    \n    chmod +x ~/.git_hooks/prepare-commit-msg\n\n### 8\\. Configure Git to use your global hooks directory\n\nRun the following command to set your global hooks directory\n\n    \n    \n    git config --global core.hooksPath ~/.git_hooks\n\n### 9\\. Code, build things and then commit something\n\n## Explanation on how it works\n\nThis command sets the core.hooksPath configuration option to your global hooks\ndirectory (~/.git_hooks).\n\nNow, whenever you run git commit in any of your repositories, Git will execute\nthe global prepare-commit-msg hook located in ~/.git_hooks/prepare-commit-msg.\nThe hook will generate the commit message based on the staged changes using\nthe llm command and the system prompt from ~/.config/prompts/commit-system-\nprompt.txt.\n\nBy setting up a global prepare-commit-msg hook, you can have the commit\nmessage generation functionality available in all your repositories without\nthe need to set it up individually for each repository.\n\nRemember to have the llm command and the ~/.config/prompts/commit-system-\nprompt.txt file set up correctly for the global hook to work as expected.\n\nWith this global hook in place, you can simply stage your changes normally\nusing git add or git add -p, and then run git commit.\n\nThe global prepare-commit-msg hook will automatically generate the commit\nmessage for you, ready for review and editing before finalizing the commit.\n\nIf you want to skip the LLM commit message generation, just commit with a\nmessage: git commit -m \u201cfixed issue #420\u201d. This seems to bypass the pre commit\nhook.\n\n## This is just a hack. AI will hallucinate.\n\nI had fun building this, and it is hilarious.\n\nI have had it hallucinate hilarious things. Never making up changes (thus\nfar), but doing weird shit like adding \u201cFixed issue #54\u201d at the end.\n\nLike everything in life, YMMV.\n\nIf this is helpful, send me an email and let me know! My email is\nharper@modest.com.\n\nCopyright \u00a9 Harper Reed \u00b7 Contact Harper Reed \u00b7 Generated @ Apr 7, 2024\n\n", "frontpage": false}
