{"aid": "40055123", "title": "Speeding up Docker builds in GitHub Actions has so much low hanging fruit", "url": "https://blacksmith.sh/blog/push-cache-repeat-amazon-ecr-as-a-remote-docker-cache-for-github-actions", "domain": "blacksmith.sh", "votes": 4, "user": "adityajp", "posted_at": "2024-04-16 17:57:39", "comments": 0, "source_title": "Push, Cache, Repeat: Amazon ECR as a remote Docker cache for GitHub Actions - Blacksmith", "source_text": "Push, Cache, Repeat: Amazon ECR as a remote Docker cache for GitHub Actions -\nBlacksmith\n\nBlacksmith\n\n# Push, Cache, Repeat: Amazon ECR as a remote Docker cache for GitHub Actions\n\nApr 15, 2024\n\nAditya Jayaprakash\n\nThis is a follow-up to our previous blog post on Docker layer caching for\nGitHub Actions. In the previous post, we used a registry cache to store cached\nartifacts in a docker registry. We recently had a call with a customer where\nwe helped them set up a remote cache with AWS ECR, and we decided to share our\nlearnings.\n\nA Docker image is composed of various layers. During a Docker build, each\nlayer is built one after the other. If a layer doesn\u2019t change between builds,\nhaving a cache helps retrieve an already built and unchanged layer - this can\ndrastically speed up your build.\n\nIdeally, you want to store these cached layers in your runner building the\nDocker image. However, due to the ephemeral nature of these runners, this is\nnot always possible when you\u2019re using GitHub-hosted runners.\n\nA way to overcome this limitation is to store these cached layers in AWS ECR,\nseparate from the built and pushed image.\n\nFirst, let\u2019s look at how to do it plain and simple without the remote cache.\n\n    \n    \n    name: Docker Build and Push to ECR Private on: push: branches: [ \"main\" ] pull_request: branches: [ \"main\" ] env: AWS_REGION: us-east-1 ECR_REPOSITORY: bs-blog-code jobs: build-and-push: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Login to ECR uses: docker/login-action@v3 with: registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com username: ${{ secrets.AWS_ACCESS_KEY_ID }} password: ${{ secrets.AWS_SECRET_ACCESS_KEY }} - name: Build and push uses: docker/build-push-action@v5 with: context: . file: ./Dockerfile push: true tags\n\nWe are doing the usual steps of logging in to ECR and building and pushing the\nimage to ECR using the docker/build-push-action@v5 action.\n\nThe remote cache feature is not supported by default in Docker and requires\nyou to use Docker Buildx, an advanced Docker build tool. You must set it up\nusing docker/setup-buildx-action@v3 and create a builder instance.\n\nOnce you\u2019ve set it up, you need to populate the cache-to and cache-from\nparameters to the build command like this, as showcased in the official\ndocumentation from AWS on this feature.\n\n    \n    \n    docker build -t <account-id>.dkr.ecr.<my-region>.amazonaws.com/buildkit-test:image \\ --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=<account-id>.dkr.ecr.<my-region>.amazonaws.com/buildkit-test:cache \\ --cache-from type=registry,ref=<account-id>.dkr.ecr.<my-region>\n\nThe cache-from specifies the source to use as a cache when building your\nDocker image, and the cache-to specifies the destination for storing the build\ncache once a Docker image has been built.\n\nThis is the final workflow file for building and pushing with a remote cache\nin ECR once we convert it to the format that docker/build-push-action@v5\nexpects.\n\n    \n    \n    name: Docker Build and Push to ECR Private with remote cache on: push: branches: [ \"main\" ] pull_request: branches: [ \"main\" ] env: AWS_REGION: us-east-1 ECR_REPOSITORY: bs-blog-code jobs: build-and-push: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Login to ECR uses: docker/login-action@v3 with: registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com username: ${{ secrets.AWS_ACCESS_KEY_ID }} password: ${{ secrets.AWS_SECRET_ACCESS_KEY }} - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 - name: Create and use a new builder instance run: | docker buildx create --name mybuilder --use - name: Build and push uses: docker/build-push-action@v5 with: context: . file: ./Dockerfile push: true tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }} builder: mybuilder cache-from: type=registry,ref=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:cache cache-to\n\n## Performance Improvements\n\nWorkflow without the remote cache\n\nWorkflow with the remote cache rebuilding the same Docker file\n\nAt Blacksmith, we\u2019re always trying to optimize customer interactions with\nDocker - be it through local Docker registry mirrors or out-of-the-box Docker\nlayer caching (coming soon!). You should give us a shot if you\u2019re not already\na customer. We can run your GitHub Actions twice as fast while reducing your\nspending by 50-75%.\n\n## Notes\n\n  * The above code block was for pushing to a private ECR. If you wish to push to a public registry, you should change the ref in the cache-to and cache-from to public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ env.ECR_REPOSITORY }}:cache instead of ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:cache\n\n  * If you\u2019re getting a 403 forbidden, it might be that your IAM does not have permissions for these ECR operations. You can solve this by attaching these policies to your IAM user.\n\n    * ecr:GetAuthorizationToken\n\n    * ecr:BatchCheckLayerAvailability\n\n    * ecr:GetDownloadUrlForLayer\n\n    * ecr:BatchGetImage\n\n    * ecr:PutImage\n\n    * ecr:InitiateLayerUpload\n\n    * ecr: UploadLayerPart\n\n    * ecr:CompleteLayerUpload\n\nBlacksmith\n\nTerms of Service\n\n", "frontpage": false}
