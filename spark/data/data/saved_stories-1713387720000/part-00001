{"aid": "40065663", "title": "Agile in the Age of AI", "url": "https://hups.com/blog/agile-in-the-age-of-ai", "domain": "hups.com", "votes": 2, "user": "danielovichdk", "posted_at": "2024-04-17 15:01:46", "comments": 0, "source_title": "Agile in the Age of AI", "source_text": "Agile in the Age of AI\n\nThis website stores cookies on your computer. These cookies are used to\ncollect information about how you interact with our website and allow us to\nremember you. We use this information in order to improve and customize your\nbrowsing experience and for analytics and metrics about our visitors both on\nthis website and other media. To find out more about the cookies we use, see\nour Privacy Policy\n\nIf you decline, your information won\u2019t be tracked when you visit this website.\nA single cookie will be used in your browser to remember your preference not\nto be tracked.\n\nSkip to content\n\nSoftware\n\n# Agile in the Age of AI\n\nMar 28, 2024\n\nScrum is over 30 years old, the Agile principles are over 20 years old, and we\nare now entering the Age of AI, a strange new world where intelligence is\navailable as a service. How does AI impact Agile, and popular methods and\nframeworks like Scrum?\n\nMost Agile practices and principles are based on assumptions about human\nbehavior and team productivity. Some of these assumptions still hold true, but\nsome need to be challenged and reevaluated, and this will impact the\npractices.\n\nThis article is a mix of observation and prediction - what I've seen happen\nalready, and some speculation about what I think is going to happen in the\nnear future.\n\nAs a reader, the main takeaway is this: be ready for change. I don't know\nexactly how things will change (this article is just some of my guesses), but\nI'm pretty confident that Agile in the Age of AI looks different from before.\nSo take a step back, look carefully at how you work today, and start\nquestioning everything.\n\n## Cross-functional teams\n\nAgile development is normally done by small, self-organizing, cross-functional\nteams. Cross-functional means the team members have different skills that\ncomplement each other. The drawing below uses circles to symbolize the\noverlapping knowledge and skills of each team member.\n\nBut why do we actually need cross-functional teams?\n\nThe underlying assumption here is that the team needs a mix of complementary\nskills, otherwise they can't build whatever they are supposed to build. A\ncross-functional team has all the skills they need to autonomously build a\nshippable product incremement, with minimum dependencies on other teams. The\noverlapping complementary skills are necessary for this.\n\nBut with generative AI, every person effectively has an AI colleague who is\nblazingly fast and knows every programming language, every popular framework,\nevery design pattern, and possesses vastly more knowledge than any person.\nUsing the same visual metaphor, adding an AI team member means adding a\nknowledge circle that is vastly bigger than any of the human circles (although\nthere is still some human knowledge that the AI model doesn\u2019t have).\n\nThe AI models are not perfect yet, they do need human oversight, but one or\ntwo people with strong prompt engineering skills and access to a top-notch\nGenAI model will outperform a traditional agile cross-functional team - in\nboth speed and quality. I experience this on a regular basis myself - with an\nAI colleague I can build things in hours that would have take days, and build\nthings in days that would have taken weeks.\n\nSo cross-functional teams are great, but not as important as in the past,\nsince knowledge isn't really the bottleneck any more. A team of 1-2 people +\nAI has access to most of the knowledge they need.\n\nWhy 2 people? Why not 1? Because it's nice to have another human to talk to,\nand easier to deal with things like vacations and sick leave.\n\nSo what actually happens when team size shrinks to 2 people? Do we fire\neveryone else on the team? No, I think smart companies will AI-empower\neveryone, instead of AI-empowering a few and firing the rest. Firing a bunch\nof people for this reason risks creating a culture of fear and a lack of\ninnovation - people will be not be incentivized to explore this technology\nfurther, since improved effectiveness means more people getting fired.\n\nSo let's say we originally had 2 cross-functional teams of 5 people each. This\nmight now be split into 5 teams of 2 people + AI.\n\nWhat do these smaller teams work on? Depends on the context. It's a luxury\nproblem: \"we now have increased development capacity, what shall we do with\nit?\".\n\nLet's say the two larger teams were working on one product together, focusing\non different feature areas. Now we have 5 smaller teams, each one more\nproductive than a previous larger team. We could have all 5 teams work on the\nsame product, focusing on different feature areas just like before. The result\nis that we'll get more stuff done on that product. Or maybe we let 3 teams\nfocus on the existing product, and 2 teams work on a new product, thus\namplifying the overall company's productivity.\n\n## Smaller teams = More teams\n\nOne consequence of AI-empowered teams is that we'll likely have smaller teams,\nand more of them.\n\nSmaller teams means less need for meetings and other internal coordination\nrituals. If they sit next to each other (physically or digitally) and talk\ninformally whenever needed, then they hardly need any formal meetings within\nthe team - for example there is less need for a daily standup meeting when\nthey can just talk whenever. Although they might do it anyway for social\nreasons.\n\nOn the other hand, we have more teams than before. So we'll have an increased\nneed for cross-team coordination, at least if the teams are working on the\nsame product and have dependencies. In fact, if they are working on the same\nproduct, maybe each team can be seen as a single team-member in a larger\n\"super team\" or something, and then we do rituals like retrospectives and\nsprint planning meetings at a team-of-teams level?\n\nRegardless, I suspect most companies will end up with some kind of daily sync\nmeeting, and some kind of planning session every few weeks. But the structure\nof the meetings will be different from traditional agile practices, for\nexample they will likely be cross-team meetings rather than team-internal, and\nthe planning sessions will likely focus more on the big picture rather then\nspecific backlog items.\n\nTo be clear: I don't know where we will land. But I'm pretty sure that things\nwill change, as the underlying assumptions behind many of the agile practices\nare overturned by the advent of Generative AI.\n\n## Software engineers (mostly) don't write code\n\nA clear trend is that AI models are getting really good at writing code. Not\nperfect yet, but good enough that it makes sense to have your AI colleague\nwrite most of the code. This fundamentally changes the role. As a software\nengineer you still need to be in charge, think about the architecture, write\nthe prompts, review the results, and take responsibility for code quality. But\nthe actual craft of writing the code - AI will for the most part do that\nfaster and better than you. This is partly true already today, and within a\nyear it will likely be true 90% of the time. A software developer who insists\non manually writing all code in the Age of AI is likely to become a bottleneck\nand source of bugs.\n\nSo developers essentially become mini-product owners, if I use Scrum\nterminology. Their job is to decide what code needs to be written, not to\nwrite it. This is comparable to when you write high level code using a modern\nprogramming language, and the compiler turns it into machine code - except now\nwe raise it one level and the AI model writes the high level code as well.\n\nYour AI colleague can even work in the background. Imagine this conversation\nbetween Bob, Lisa, and their AI colleague MrFixit over morning coffee:\n\n  * MrFixit: \"Good morning folks! A couple of bug reports came in last night, two of them were pretty straight forward so I fixed them and put up PRs (pull requests)\"\n  * Lisa: \"A great, I'll review it in a moment. Any risky stuff there?\"\n  * MrFixit: \"Well, I needed to change the login a bit. I added more tests so it's probably fine, but that part might be worth some extra reviewing.\"\n  * Lisa: \u201cOK, will do\u201d.\n  * Bob: \"Hey MrFixit, did you see that slack discussion on security holes?\"\n  * MrFixit: \"Yeah, want me to look into it? I have some ideas.\"\n  * Bob: \"Yes please.\"\n  * MrFixit: \"OK, hold on....... Done! I put up three PRs, with three different approaches for how to solve it. See the PR description for details. Have a look and ping me if you want to discuss any of these.\"\n  * Bob: \"Awesome!\".\n\nThis may sound rather exotic now, but within a year I think this will be the\nnorm for many teams.\n\nThe result: coding is no longer the bottleneck. So what does this mean for\nconcepts like Scrum Sprints, a timeboxed period (usually 2-3 weeks) to allow\nthe team focus on development? Well, if work that normally took a week now\ntakes a day, and work that normally took a day now takes an hour, do we need\nsprints?\n\n## 1 day sprints?\n\nMy guess is sprints will gradually become a lot shorter, or disappear\nentirely. Maybe 1 day sprints. Start the day with a quick sync with your human\nan AI colleague, decide what to focus on today, then finish it up and release\nby the end of the day, and do a quick review before going home. Daily Standup\nand Sprint Planning become essentially the same thing.\n\nWith multiple teams working together, there will still be a need for a higher\nlevel sync meeting, maybe once per week, to make sure they are aligned. This\nis true with or without AI, but the need for it increases as we move towards\nmore smaller teams rather than few larger teams.\n\nAs I mentioned, I think there is still a human need for some kind of sync and\nplanning meeting every few weeks. But the purpose and structure of that\nmeeting will change when we move to faster and shorter development cycles,\nwhen there is no longer a need to batch work in multiple weeks of work just\nbecause coding takes time.\n\n## Roaming or shared specialists?\n\nWhat about specialists? Let's say our teams need to deal with databases and\npersistency, and need specialist knowledge for that.\n\nTraditionally, we would make sure each cross-functional team had at least one\nperson with DB skills. In a 2-person AI-empowered team, the humans will lack\nsome skills and will need to rely on their AI colleague. Will that be enough?\nFor routine tasks, probably yes. But sometimes for more advanced tasks, a\nhuman specialist will be needed, for example to formulate the prompt or\nevaluate the result, or maybe to build tools. The human specialist can also\nhelp determine which AI models and tools are suitable for the task at hand, or\neven fine-tune the models to make them better at that specialized knowledge.\n\nMy guess is that we'll have either roaming or shared specialists. This is not\na new approach, some agile teams do that anyway. But I think it will become\nmore common.\n\nFor example with the 5 teams above, let's say all of them use databases. Maybe\none or two of the teams actually have a DB specialist, because they are the\nteams that do most DB stuff. But they are shared specialists that sometimes\nhelp other teams as well.\n\nAn alternative is to have roaming specialists that don't belong to any\nspecific team, instead they go to whatever team needs them the most. To be\nclear, the AI models should have most of the specialist knowledge needed, but\nthe human specialist is there as a complement for when we hit the limits of\nthe AI, or need an extra pair of human specialist eyes to evaluate the result.\n\n## The job of the Scrum Master or Agile Coach\n\nIf you have a role like Scrum Master or Agile Coach or similar, then that\ntraditionally includes teaching and mentoring the team on things like how to\neffectively split a user story, how to effectively run a retrospective, and\nhow to work effectively as a team.\n\nAn AI-empowered team has all this knowledge already, if the team chooses to\nseek it. So your role becomes more of a coach and less of a mentor/teacher. If\nthe team wants to know how to split a story, sit with them and write a prompt\nto chatGPT (or other model). You know how that popular edict: \u201cGive a man a\nfish, and you feed him for a day. Teach a man to fish, and you feed him for a\nlifetime\u201d. Now that teams are catching their own fish you have time to coach\nand assist more teams, and help them figure out how to use those fishing rods.\n\n## User feedback loop\n\nUser feedback remains a critical part of agile development, even in the Age of\nAI. However the practicalities change. We will be able to release more often,\nso our customers and users should be ready to receive small updates often,\ninstead of large updates seldom. As a result, the users can take a more active\npart in development. Some will appreciate that, some might not.\n\nIf the user isn't available as often as needed, we can create mock users by\nasking an AI model to role-play a particular type of user. We could do mock\nuser research and interviews using this, and soon we will probably also be\nable to ask the mock user to try out our system directly, and give us\nfeedback. The mock user won't be quite as useful as real feedback from real\nusers, but on the other hand we can get the feedback faster and more\nfrequently so it could be a good complement. That could help the team discover\nthe most obvious and important design issues.\n\n## Additional points to consider\n\nJust for fun, I gave the entire article above to Claude Opus (the latest GenAI\nmodel from Anthropic) and asked it to suggest any additonal points to add.\nHere is the unedited response, which I think was quite good:\n\n  * Impact on product backlog and prioritization: With AI-empowered teams delivering faster, the product backlog may need to be updated more frequently. The role of the Product Owner might evolve to focus more on strategic prioritization and stakeholder management.\n  * Changes in estimation and planning: Traditional estimation techniques, such as story points or ideal days, may become less relevant when AI can significantly accelerate development. Teams might need to adopt new approaches to planning and forecasting.\n  * Adaptations in Agile frameworks: Popular Agile frameworks like Scrum, Kanban, or SAFe might need to be adapted to accommodate the changes brought by AI. For example, the duration and frequency of events like Sprint Planning, Daily Scrum, and Sprint Review may need to be adjusted.\n  * Impact on team dynamics and collaboration: While AI can enhance productivity, it's essential to consider its impact on team dynamics and collaboration. Teams may need to find new ways to foster human connection, creativity, and innovation in an AI-driven environment.\n  * Continuous learning and skill development: As AI takes over certain tasks, team members may need to focus on developing new skills, such as prompt engineering, AI model selection, and result evaluation. Continuous learning and upskilling will become even more crucial in the Age of AI.\n  * Ethical considerations and transparency: Teams will need to navigate ethical considerations surrounding AI, such as bias, fairness, and transparency. Agile practices may need to evolve to ensure responsible AI development and deployment.\n\n## Recalibrate\n\n(OK this is me the human writing again)\n\nMy friend Kent Beck tweeted this:\n\nI think Kent captures the essence of the what we are facing now, in all roles\nand professions. We need to recalibrate what we spend our time on. What does\nit mean to be an Engineer, a Scrum Master, a Product Owner, an Engineering\nManager, etc?\n\nSame goes with Agile: we need to recalibrate our agile practices. That starts\nwith self-reflection. What do we spend time on? What are our rituals, roles,\nartifacts? What needs to be challenged, changed, or reevaluated as we enter\nthe Age of AI?\n\nShare the post with your thoughts!\n\n###### Category\n\n  * Operational Excellence\n  * Software\n  * News\n\n### Similar Blogs\n\n#### Pantamera-Returpack Teams Up with Hups to Boost Recycling Efficiency\n\nBy Rachel Graham 16 April 2024\n\nREAD MORE\n\n#### Are developers needed in the age of AI?\n\nBy Henrik Kniberg 15 November 2023\n\nREAD MORE\n\n#### Apotekstj\u00e4nst: Celebrating 1000 Improvements\n\nBy Rachel Graham 28 September 2023\n\nREAD MORE\n\nHuman Upskilling. Human Upscaling.\n\n###### Quick Links\n\n###### Offices\n\nLuntmakargatan 26, 111 37 Stockholm, Sweden\n\nUlvenveien 82E, 0581 Oslo, Norway\n\nCopyright \u00a9 2024 Hups All Rights Reserved.\n\nPrivacy Policy | Contact\n\n", "frontpage": false}
