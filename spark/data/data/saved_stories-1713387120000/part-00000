{"aid": "40065470", "title": "Bringing psql's \\d to your web browser", "url": "https://neon.tech/blog/bringing-psqls-d-to-your-web-browser", "domain": "neon.tech", "votes": 8, "user": "gmac", "posted_at": "2024-04-17 14:49:25", "comments": 2, "source_title": "Bringing psql's \\d to your web browser - Neon", "source_text": "Bringing psql's \\d to your web browser - Neon\n\nNeon is Generally Available! Serverless Postgres with branching to boost your\ndevelopment velocity.Read more\n\nNeon\n\n...Log InSign Up\n\nPostgresApr 17, 2024\n\n# Bringing psql\u2019s \\d to your web browser\n\nNeon\u2019s SQL Editor now supports Postgres\u2019s introspection commands\n\nDifferent database systems provide different ways to list or describe the\nthings they hold. For instance, to find a particular table and column in\nMySQL, you run SHOW TABLES followed by SHOW COLUMNS FROM my_table. In SQLite,\nyou do .tables and then .schema my_table. And in Postgres, the commands are\\d\n(for describe) followed by \\d mytable.\n\n# \\d wasn\u2019t working\n\nWhen I got access to my first Neon Postgres database, almost the first thing I\ndid was go to the web-based SQL Editor and type \\d. I was a little sad when\nthe response I got back was: ERROR: syntax error at or near \"\\\" (SQLSTATE\n42601).\n\nIt turns out that \\d, \\l, and their relatives are a psql feature. That is,\nthese introspection commands are found in the C code that implements the psql\nclient, not the C code that implements the Postgres server. Each time you\nissue one of these commands in psql, you\u2019re running a little local routine\nthat constructs one or more SQL queries, sends them to execute on the server\none by one, and stitches the results together into a nice little table.\n\n> You may already know that you can see those underlying SQL queries by\n> running psql with the -E or --echo-hidden option. \\d issues only one query,\n> but try \\d pg_a* and you\u2019ll see dozens. This is a useful way to explore some\n> of Postgres\u2019 internals. It was helpful, for example, in putting together the\n> queries Zapatos uses to fetch type information from your database.\n\nOf course, it\u2019s not just \\d and \\l: there are lots of other useful backslash\ncommands. You can get a brief cheat-sheet with \\?, or look up more details in\nthe Postgres docs. Some personal favourites are \\dconfig, which lists\nconfiguration parameter values; \\du and \\dx, which list users and installed\nextensions; \\sf and \\sv, which display the source of functions and views; and\n\\h, which provides a syntax reference for SQL commands.\n\n# \\d works now\n\nFast-forward a year or two. Having put together Neon\u2019s serverless driver \u2014\nwhich runs in environments that don\u2019t offer raw TCP connections, such as web\nbrowsers \u2014 I was tasked to upgrade our web-based SQL Editor to make use of it.\nThis enables interactive sessions and transactions in the SQL Editor, and\nreduces memory usage on our back-end, amongst other things.\n\n> Easter egg alert! As a as result of this work, if you open your browser\u2019s\n> dev tools in the SQL Editor, you can also run queries there using the\n> currently-connected serverless driver client. The client is a property of\n> the window, named rawClient. It\u2019s so named because all parsing has been\n> turned off: it returns the raw Postgres text format for each data type. Try\n> pasting in rawClient.query('SELECT now()').then(console.log), for instance.\n\nWhile moving the SQL Editor to the serverless driver, I took the opportunity\nto make a few other tweaks along the way. Probably the one I was most excited\nto get to work on was supporting the psql backslash commands.\n\nAs I mentioned above, these commands are implemented in C. An obvious place to\nstart might thus have been to use emscripten to compile that C to WASM, and I\ndid begin by looking at that approach. But I also noticed that much of the\ncode was pretty repetitive: lots of basic string manipulation to assemble SQL\nqueries, and some simple logic to interpret what came back. So I wondered if\nwe needed to actually compile the C, or whether we couldn\u2019t instead directly\ntranslate the C to JavaScript.\n\nThat second approach \u2014 translating C to JavaScript \u2014 was the approach I ended\nup taking:\n\n  * I turned C syntax into JS syntax using a bunch of RegExp search-and-replace. For example, I replaced int x with let x; concatenated consecutive strings (\"a\" \"b\" becomes \"ab\u201d); turned the -> arrow operator into .; and so on. (I felt a little bit dirty doing this with RegExps, and I did briefly look at using a C parser and transforming the AST instead ... but RegExps were so much quicker).\n  * I reimplemented some C and Postgres functions. That includes dead simple ones like function atoi(str) { return parseInt(str, 10); } or function pg_tolower(ch) { return ch.toLowerCase(); }, and also some slightly more complex ones, like a minimal sprintf function, or the psql code to pretty-print a table.\n  * Last, I wrote down examples of all the different psql introspection commands, and a test script that compares their results in psql to the results generated by my code. I then went through these, one by one, until every last one matched. Almost all the required fixes were in places the original C code was doing something with pointers \u2014 pointer arithmetic, pointer dereferencing, and so on \u2014 without any direct JavaScript equivalent. It didn\u2019t take too long this way to get a JavaScript implementation up and running. You can use it right now in the SQL Editor in the Neon console. You can also see the code on GitHub, and do whatever you like with it (within the Postgres license terms) from there.\n\n> Easter egg alert! When running backslash-commands in the SQL Editor on a\n> machine with a keyboard, hold the Shift key as you click \u2018Run\u2019 to see the\n> underlying SQL commands interleaved with the output, just like you\u2019d get\n> when running psql with the -E or --echo-hidden option.\n\nI can\u2019t promise that this is the only or necessarily even the best approach to\nthe problem, and it would of course be nice in the long run to have an\nautomated process to bring updates across from the psql C code. But it works,\nand I think it\u2019s a good start.\n\n# Significant semicolons\n\nOnce I had the introspection commands working from JavaScript, the other\nchallenge in bringing them to the SQL Editor was to pick them out of a line-up\nof SQL queries.\n\nNeon\u2019s SQL Editor can run several queries at a time, and shows one result tab\nfor each. Previously, we could just send one big opaque SQL string to a server\nAPI, and let the server handle splitting it into individual queries. But now,\ninstead, we need to do that splitting client-side, because the introspection\ncommands have to be handled separately.\n\nIt\u2019s hopefully obvious why a simple sql.split(';') doesn\u2019t work here. It will\nfail on the following string, for example, which is a single query followed by\na comment:\n\n    \n    \n    SELECT ';' /* select a ';' literal */\n\nThere\u2019s an emscipten build of the Postgres query parser. But it currently only\nsupports up to Postgres version 10. And it would kind of be using a\nsledgehammer to crack a nut, since we don\u2019t need to fully parse each query: we\nonly need to figure out which semicolons we care about and which ones we\ndon\u2019t.\n\nTo figure out which semicolons are the significant ones, there are three\nsyntax elements we need to understand: identifiers, comments, and string\nliterals.\n\n  * Identifiers are the simplest: they\u2019re always double-quoted, and any (unlikely) double-quotes within them are doubled up.\n  * Comments are only a little trickier. Single-line comments extend from a double-dash to the end of a line. C-style /* ... */ block comments also exist, and can be nested.\n  * Strings are the most complex. They can be plain single-quoted, in which case the character-escape behaviour inside them depends on the Postgres server\u2019s standard_conforming_strings configuration parameter. Or they can be \u2018escape strings\u2019, which have an e or E before the opening quote. Both these sorts of strings can combine across whitespace (but only if it includes a newline). Or, of course, they can be dollar-quoted strings.\n\nIn any case, the upshot is that I wrote another little open-source package to\ndo only this much parsing. It makes heavy use of sticky RegExps \u2014 a JS parser-\nwriter\u2019s best friend, as I\u2019ve mentioned elsewhere \u2014 to efficiently locate both\ncomments and statement-terminating semicolons in SQL string.\n\nWe also allow backslash commands to be newline-terminated, which is just a\nsmall extra step on top of the work done by the package.\n\nThis enables us to quickly split your SQL Editor selection into an array of\nSQL queries and backslash commands. As you may have already noticed, that\nmeans we can also now tell you ahead of time how many separate result tabs are\ngoing to be presented when you hit the Run button.\n\nIf you have any feedback on any of these new features, please let us know on\nDiscord.\n\n### Posted by\n\nGeorge MacKerronTypescript Developer\n\n### More articles\n\n  * # Time Travel in the SQL Editor\n\nEvan Shortiss\n\n  * # Neon Serverless Driver on JSR\n\nRaouf Chebri\n\n  * # Announcing Monitoring and Organizations\n\nEvan Shortiss\n\nShare:\n\nShare:\n\n## Subscribe to receive our latest updates\n\n## More from Neon\n\n  * Community\n\n# Time Travel in the SQL Editor\n\nEvan ShortissApr 17, 2024\n\n  * Community\n\n# Neon Serverless Driver on JSR\n\nRaouf ChebriApr 17, 2024\n\n  * Community\n\n# Announcing Monitoring and Organizations\n\nEvan ShortissApr 16, 2024\n\nNeonAll systems operational\n\nMade in SF and the World\n\nCopyright C 2022 \u2013 2024 Neon, Inc.\n\nCompany\n\n  * About us\n  * Careers\n  * Partners\n  * Case Studies\n  * Trust\n  * Pricing\n  * Contact Sales\n  * Early Access\n\nResources\n\n  * AI\n  * Blog\n  * Docs\n  * Changelog\n  * Demos\n  * Support\n  * Security\n\nCommunity\n\n  * X.com\n  * LinkedIn\n  * GitHub\n  * Discord\n  * Discourse\n  * YouTube\n\nLegal\n\n  * Privacy Policy\n  * Terms of Service\n  * DPA\n  * Subprocessors List\n  * Privacy Guide\n  * Cookie Policy\n  * Business Information\n\n", "frontpage": false}
