{"aid": "40039240", "title": "Servo and SpiderMonkey", "url": "https://servo.org/blog/2024/04/15/spidermonkey/", "domain": "servo.org", "votes": 1, "user": "TangerineDream", "posted_at": "2024-04-15 11:47:34", "comments": 0, "source_title": "Servo and SpiderMonkey", "source_text": "Servo and SpiderMonkey - Servo, the embeddable, independent, memory-safe,\nmodular, parallel web rendering engine\n\nServo and SpiderMonkey\n\n# Servo and SpiderMonkey\n\n2024-04-15 A new report on Servo\u2019s integration with SpiderMonkey, and our\nproposal for improving its modularity.\n\nAs a web engine, Servo embeds another engine for its script execution\ncapabilities, including both JavaScript and Wasm: SpiderMonkey. One of the\ngoals of Servo is modularity, and the question of how modular it really was\nwith regards to those capabilities came up. For example, how easy would it be\nfor Servo to use Chrome\u2019s V8 engine, or the next big script engine? To answer\nthat question, we\u2019ve written a short report analysing the relationship between\nServo and SpiderMonkey.\n\n## The problem\n\nRunning a webpage happens inside the script component of Servo; the loading\nprocess starts there, and the page continues to run its HTML event loop there.\nBy its very nature, executing a script from within a webpage requires an\nintegration between the script engine and the web engine that surrounds it.\nAnything shared between the two, including the DOM itself and any other\nconstruct calling from one into the other, needs to be integrated somehow, and\nmuch but not all of that is done via WebIDL. For example, an integration area\nthat is left for web and script engines to implement as they see fit is that\nwith a garbage collector (see example in Rust for SpiderMonkey).\n\nThe need to integrate can result in tight coupling, but the classic ways of\nincreasing modularity \u2014 abstractions and interfaces \u2014 can be applied here as\nwell, and that is where we found Servo lacking in some ways, but also on the\nright path. Servo already comes with abstractions and interfaces for a large\nsurface area of its integration with SpiderMonkey, providing ease of use and\nclarity while preserving boundaries between the two. Other parts of that\nintegration rely on direct, and unsafe, calls into the low-level SpiderMonkey\nAPIs.\n\n## The solution\n\nThe low-hanging fruit consists of removing these direct calls into low-level\nSpiderMonkey APIs, replacing them with safe and higher-level constructs. Work\non this has started, through a combination of efforts from maintainers and the\nenthusiasm of community members: eri, tannal, and Taym Haddadi. These efforts\nhave already resulted in the closing of several issues:\n\n  * WedIDL: bring dom/bindings/typedarray further in line with spec\n  * WebIDL: use TypedArray\n  * Remove create_typed_array from dom/bindings\n  * WebIDL: use Float32Array in GamePad\n  * WebIDL: use Float32Array in XRRay\n  * WebIDL: use Float32Array in XRRigidTransform\n  * WebIDL: use Float32Array in XRView\n  * WebIDL impl: remove unsafe JSObject from return value of Document::NamedGetter\n\nNote that the safer higher-level constructs that replace low-level\nSpiderMonkey API calls are still internally tightly coupled to SpiderMonkey.\nBy centralizing these calls, and hiding them from the rest of the codebase, it\nbecomes possible to enumerate what exactly Servo is doing with SpiderMonkey,\nand to start thinking about a second layer of abstraction: one that would hide\nthe underlying script engine. An existing, and encouraging, example of such a\nlayer comes from React Native in the form of its JavaScript Interface (JSI).\n\n## Call to action\n\nIf you are interested in contributing to these efforts, the issues below are\ngood places to start:\n\n  * Modular JS/execution engine\n  * WebIDL impl: remove unsafe JSObject when returning a ReadableStream\n  * WebIDL impl: remove unsafe JSObject from WebGLExtensionWrapper\n  * Support FinalizationRegistry\n  * WebIDL impl: Replace use of NonNull\n\nFor more details, read the full report on our wiki.\n\nBack\n\nCode of Conduct | Contact: info@servo.org, Zulip Chat, GitHub Discussions, Mastodon, Twitter\n\n\u00a9 2024 The Servo Project Developers\n\nCopyright \u00a9 Servo is a project of Linux Foundation Europe.\n\nFor website terms of use, trademark policy and other project policies please\nsee https://lfprojects.org.\n\n", "frontpage": false}
