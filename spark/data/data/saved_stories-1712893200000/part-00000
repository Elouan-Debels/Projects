{"aid": "40007082", "title": "Code Bloat", "url": "https://en.wikipedia.org/wiki/Code_bloat", "domain": "wikipedia.org", "votes": 2, "user": "gebt", "posted_at": "2024-04-11 21:37:37", "comments": 0, "source_title": "Code bloat", "source_text": "Code bloat - Wikipedia\n\nJump to content\n\nSearch\n\n# Code bloat\n\n  * Espa\u00f1ol\n  * \u0641\u0627\u0631\u0633\u06cc\n  * \u4e2d\u6587\n\nEdit links\n\nFrom Wikipedia, the free encyclopedia\n\nProduction of unnecessarily long, slow or wasteful program code\n\nThis article needs additional citations for verification. Please help improve\nthis article by adding citations to reliable sources. Unsourced material may\nbe challenged and removed. Find sources: \"Code bloat\" \u2013 news \u00b7 newspapers \u00b7\nbooks \u00b7 scholar \u00b7 JSTOR (June 2014) (Learn how and when to remove this\ntemplate message)  \n---  \n  \nIn computer programming, code bloat is the production of program code (source\ncode or machine code) that is perceived as unnecessarily long, slow, or\notherwise wasteful of resources. Code bloat can be caused by inadequacies in\nthe programming language in which the code is written, the compiler used to\ncompile it, or the programmer writing it. Thus, while code bloat generally\nrefers to source code size (as produced by the programmer), it can be used to\nrefer instead to the generated code size or even the binary file size.\n\n## Examples[edit]\n\nThe following JavaScript algorithm has a large number of redundant variables,\nunnecessary logic and inefficient string concatenation.\n\n    \n    \n    // Complex function TK2getImageHTML(size, zoom, sensor, markers) { var strFinalImage = \"\"; var strHTMLStart = '<img src=\"'; var strHTMLEnd = '\" alt=\"The map\"/>'; var strURL = \"http://maps.google.com/maps/api/staticmap?center=\"; var strSize = '&size='+ size; var strZoom = '&zoom='+ zoom; var strSensor = '&sensor='+ sensor; strURL += markers[0].latitude; strURL += \",\"; strURL += markers[0].longitude; strURL += strSize; strURL += strZoom; strURL += strSensor; for (var i = 0; i < markers.length; i++) { strURL += markers[i].addMarker(); } strFinalImage = strHTMLStart + strURL + strHTMLEnd; return strFinalImage; };\n\nThe same logic can be stated more efficiently as follows:\n\n    \n    \n    // Simplified const TK2getImageHTML = (size, zoom, sensor, markers) => { const [ { latitude, longitude } ] = markers; let url = `http://maps.google.com/maps/api/staticmap?center=${ latitude },${ longitude }&size=${ size }&zoom=${ zoom }&sensor=${ sensor }`; markers.forEach(marker => url += marker.addMarker()); return `<img src=\"${ url }\" alt=\"The map\" />`; };\n\n## Code density of different languages[edit]\n\nThis section does not cite any sources. Please help improve this section by\nadding citations to reliable sources. Unsourced material may be challenged and\nremoved. (August 2013) (Learn how and when to remove this template message)  \n---  \n  \nThe difference in code density between various computer languages is so great\nthat often less memory is needed to hold both a program written in a \"compact\"\nlanguage (such as a domain-specific programming language, Microsoft P-Code, or\nthreaded code), plus an interpreter for that compact language (written in\nnative code), than to hold that program written directly in native code.\n\n## Reducing bloat[edit]\n\nSome techniques for reducing code bloat include:^[1]\n\n  * Code refactoring a commonly used code sequence into a subroutine, and calling that subroutine from several locations, rather than copy and pasting the code at each of those locations (copy-and-paste programming).\n  * Re-using subroutines that have already been written (perhaps with additional parameters), rather than re-writing them again from scratch as a new routine.\n  * Combine Program analysis to detect bloated code, with Program transformation to remove bloated code.\n\n## See also[edit]\n\n  * Dead code elimination\n  * Minimalism (computing)\n  * Muntzing\n  * Polymorphism (computer science)\n  * Software optimization\n  * Software bloat\n  * Lightweight software\n\n## References[edit]\n\n  1. ^ \"Code bloat\". DocForge. Archived from the original on 5 March 2016. Retrieved 30 December 2009.\n\nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Code_bloat&oldid=1190012173\"\n\nCategories:\n\n  * Software optimization\n  * Software engineering folklore\n\nHidden categories:\n\n  * Articles with short description\n  * Short description matches Wikidata\n  * Articles needing additional references from June 2014\n  * All articles needing additional references\n  * Articles needing additional references from August 2013\n\n  * This page was last edited on 15 December 2023, at 11:25 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Code of Conduct\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n  * Edit preview settings\n\n", "frontpage": false}
