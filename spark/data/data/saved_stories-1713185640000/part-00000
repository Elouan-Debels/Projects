{"aid": "40037676", "title": "1.0 Launch Retrospective \u2013 Last Epoch Forums", "url": "https://forum.lastepoch.com/t/1-0-launch-retrospective/69374", "domain": "lastepoch.com", "votes": 2, "user": "kiyanwang", "posted_at": "2024-04-15 06:51:16", "comments": 0, "source_title": "1.0 Launch Retrospective", "source_text": "1.0 Launch Retrospective - Developer Blog - Last Epoch Forums\n\nMy Account\n\n  * News\n\n    * Announcements\n    * Patch Notes\n    * Developer Blogs\n    * Careers\n  * Game\n\n    * Classes\n    * Skills\n    * Items\n    * End Game Systems\n    * World & Story\n  * Forum\n  * Ladder\n  * Buy Now\n\n\u00d7 My Account\n\nAnnouncements Patch Notes Developers Blog\n\nClasses Skill System Items World & Story End Game Systems\n\nForum Buy Now\n\n\u2630\n\nSkip to main content\n\n# Forum Home\n\n#\n\n1.0 Launch Retrospective\n\nDeveloper Blog\n\nYou have selected 0 posts.\n\nselect all\n\ncancel selecting\n\n  * Ardent Gladiator\n\nEHG_KainEleventh Hour Games\n\n25d\n\nHello Travelers!\n\nToday\u2019s blog is a little different from our usual fare. As most of you know,\nLast Epoch launched on February 21, and the reception has been amazing. In the\nfirst week after launch, over 1.4 million of you logged in to play Last Epoch.\nAt our peak, we had just under 265,000 players all roaming Eterra\nsimultaneously. That\u2019s good enough for the 39th highest all-time concurrent\nplayer count recorded on Steam, and we\u2019re humbled by your support and\nenthusiasm for the game.\n\nThere\u2019s plenty of cause for celebration, but let\u2019s not ignore the obvious:\nLast Epoch\u2019s launch was pretty rough for the majority of you who play online.\nYour patience and positivity have been amazing, but it was obviously not the\nlaunch experience that you or we had hoped for.\n\nNow that the initial launch woes are behind us, it\u2019s time to reflect on the\nexperience. What happened? We put a strong emphasis on testing our servers and\ninfrastructure ahead of time, so what did we get wrong? Last Epoch\u2019s backend\nteam is here to give you a bit of a recap of what went on during the launch.\n\n# How Our Game Works\n\nLet\u2019s begin with a quick explanation of how our game works when played online.\nWhen you boot up Last Epoch and enter the game, what you see as a player is\nrelatively straightforward; first you log in, then you select your character,\nand then you join a game server. Behind the scenes, though, what you\u2019ve just\ndone is communicate with and move through half a dozen online services. These\nservices log you in, provide you with game data, and give you a server to\nconnect to so you can play the game. You connect to this game server, but then\nthe server itself goes out and talks to even more services to authenticate\nyou, load your character data, and check things like your party membership.\n\nThese supporting services are the \u201cbackend\u201d of our game, and without them our\ngame doesn\u2019t work. Some services are more important than others, but as a\ngeneral rule, most services are required for the game to function. The good\nnews is these services are all pretty resilient. Behind the scenes, each\nservice is not one program but many copies of the same program. If one of the\ncopies breaks down, the other copies keep working. Crucially, if a service is\noverloaded, we can fix that by just deploying more copies of the program. If\nour services are designed properly, we can handle any number of players; all\nwe need to do is throw more copies at the problem.\n\n(This design applies to our game servers, too; Last Epoch has never once \u201crun\nout\u201d of game servers for players because they\u2019re all interchangeable, and we\ncan create as many new ones as we need. The closest we ever come to running\nout of servers is when we get a spike in players and need to wait a short\namount of time for extra ones to boot up).\n\n# Preparing For Launch\n\nThe \u201cdesigning our services properly\u201d bit is the hard part. For some of our\nservices, it\u2019s very challenging to design them in a way that actually lets us\nscale just by throwing more copies at the problem. If you were around for the\nlaunch of patch 0.9.0, our first multiplayer release, you saw our game go down\nas soon as we crossed 40,000 players. Why? The service that matches players to\nservers had a design flaw where it started slowing down when there were many\nservers available. Once about 40,000 players joined servers, the performance\nof the matcher got so bad that it didn\u2019t matter how many copies we threw at\nthe problem - every copy would crash under the strain.\n\nThe backend team spent much of the time between 0.9.0 and 1.0.0 hunting down\nand fixing these sorts of design flaws. Some flaws could be fixed easily,\nothers required entirely new services to handle our players\u2019 data in a way\nthat could actually scale. We were given a blank check to do whatever was\nneeded to support our launch, so the only obstacle was time.\n\nBy the week before launch, we seemed to be in a reasonably comfortable spot.\nEverything was built, and we\u2019d performed multiple rounds of load testing on\nour entire backend to ensure it could handle the volume of requests we\nexpected at launch. The results were promising, and we hadn\u2019t pulled any\npunches on the testing either. We were as ready as we were ever going to be\nfor launch.\n\n# The Morning Of Launch\n\nFor something like a game launch, \u201creadiness\u201d is mostly about having a plan.\nYou can have confidence that you\u2019ve tested and prepared, you can have\nconfidence that you know how your services work, but you can\u2019t have confidence\nthat nothing will go wrong. Instead, you plan for what to do if something\nunanticipated happens.\n\nOn the morning of launch day, we went to scale up our server matching service\nto the numbers we used in our tests, and to our great surprise, it refused to\nspin up more than half the copies we asked for. Server matching is a critical\nservice, and in our testing, it needed a high number of copies to handle all\nthe players we expected, so getting stuck at half capacity was a serious\nproblem.\n\nThis wasn\u2019t even the only pre-launch hiccup. In a case of unfortunate timing,\nour service host had an incident the night before - still ongoing at launch\ntime - that affected us in a way that prevented us from deploying changes to\nany of our backend services using the tools we had relied on for months. Our\nability to fix our services was killed at the same time one of our services\nneeded fixing.\n\nWe had workarounds for these problems, but they were not quick fixes. We were\ngoing to need to break apart our deployment tools and move our services around\nmanually, but this was not something we could sneak in before the doors opened\nto all our players. Minutes before launch, we estimated that we could handle\nmaybe 120,000 - 150,000 players before things started to fail, and we crossed\nour fingers that we\u2019d be able to resolve our issues before the player count\ncrept too high.\n\nWell, you know how that went.\n\n# The Next 5 Days\n\nWhat unfolded over the next five days was a blur of emergency fixes and risk\nmanagement. As it so happened, our first two pre-launch problems were only the\ntip of the iceberg.\n\nIn software, you sometimes run into a problem called \u201ccascading failure.\u201d When\ndifferent parts of a software system rely on each other, an error in one part\ncan cause errors in all the other parts as well. This can make it look like\nthe entire system is failing even though only one part actually is. Finding\nthe root cause of the failure is very difficult when everything is failing all\nat once.\n\nThe server matcher problem had caused a cascading failure in our systems. When\nplayers fail to connect to a server, they usually just try again, meaning our\nstruggling server matcher had to deal with 2-5x the number of requests it\nwould normally need to deal with. In many cases, players would get through the\nfirst half of server matching but would fail the second half, meaning servers\nwould bring themselves online and then shut down again because a player never\nconnected. Servers booting up and shutting down put pressure on our other\nservices, and so some of those also started to fail.\n\nWhen we fixed the server matcher, some other services continued to fail\nbecause they had trouble recovering from the chaos. Our deployment tools still\nrequired attention, so fixing these other services was a slow and manual\nprocess. To clear up the backlog, we needed to scale some of our services way\npast what would have been needed had the game been working smoothly. This\nbrought with it new challenges since cloud services have some built-in soft\ncaps that we would never have hit under normal circumstances, and working\naround those caps took time and, in some cases, code changes. We identified\nand cleared away many of these caps before launch, but we hit new ones as we\nscrambled to rearrange our backend.\n\nYou may be wondering, if the problem was recovering from too many players, why\ndid we not simply have some downtime, or at least turn on player queues, to\nalleviate the pressure? The answer is that we did, but the problems ran deeper\nthan the server matcher. At various points during the launch, we brought down\nour services, and many of you found yourselves in long queues as we struggled\nto keep up. Inevitably, once we started letting you all back in, we would run\ninto problems again, and we could not clearly see what those problems were\nuntil we scaled everything up so high that the services stayed online and\noperational even though they were strained from other failures in other areas.\n\nSprinkled in with our deployment woes, we had a couple of genuine code\nproblems in our services. One of them - one of the few examples where we\nstraight up overestimated our ability to scale - was a bottleneck in how\nquickly we could process requests for a single town in a single region of the\nworld. In Last Epoch, once you reach the \u201cEnd of Time\u201d town, you will always\nload into that town when you enter the game from character select. We knew\nahead of time that this bottleneck existed, but we underestimated what would\nhappen when we suddenly fixed a broken game and hundreds of thousands of\nplayers all tried to access the same town at the same time, in the same part\nof the world. We thought that the server matcher would be a little slow at\nfirst, and then it would start to fix itself as more and more people got into\nthe game. What happened instead was that it took so long to get into the game\nthat almost no one actually succeeded, so they quit and tried again, over and\nover, and the problem never tapered off. This was not the kind of problem we\ncould fix just by adding more copies of the service, so it took some emergency\nproblem solving.\n\nEach time we found a problem and fixed it, we immediately saw improvement, but\nthis allowed even more players to enter the game and play, which would uncover\nthe next problem, and so on.\n\n# The Final Fix\n\nBy Sunday, we had managed to fix, deploy, and scale our services to the point\nthat most of our backend was handling over 200,000 players just fine, even\nthrough flurries of retries and errors. Yet amidst all the chaos, there was\nstill some strange behavior happening on the game servers that was causing\nproblems. During our periods of stability, when the game was up, players were\nable to connect to game servers, but their connections would often time-out\nonce they got there.\n\nEvery time a player joins a game server, the game server checks to see if the\nplayer is in a party. This is a simple operation, and in all of our testing,\nwe saw that this check completed very quickly, even under heavy load. Yet our\nlogs were telling us that checks for a player\u2019s party were taking up to a\nminute, sometimes even longer.\n\nOver the first four days, we made a number of changes to the party service to\nalleviate pressure. Each fix helped for a while, but inevitably, it always\nslowed down again until players could no longer join servers. On day five,\nwith all the other backend problems solved, we were able to get a more precise\nlook at the party errors, and the culprit was a single, innocent-looking line\nof code. A single line of code that was supposed to be the most efficient\nrequest in our entire party service but instead ended up consuming all of the\nservice\u2019s resources under heavy load, slowing the entire service to a crawl.\n\nIt took about an hour on Sunday afternoon to rearrange the party data so we\ncould check over 200,000 players\u2019 party memberships without bringing down the\nservice. We deployed the fix, the game came back up, and it\u2019s been online ever\nsince.\n\n# Lessons Learned\n\nThis blog post is 2,000 words long, and there is still a whole lot more we\ncould say. Internally, we have been cataloging and planning for ways we can\nimprove, and we want to ensure that our processes moving forward include the\nlessons we have learned from the launch.\n\nFirst, we learned the hard way that our internal tooling for deploying our\nservices was not robust enough on launch day. Our tools were too brittle\n(breaking when certain services went down) and too inflexible (too many manual\nadjustments needed in an emergency). When the system came under strain, we\ncouldn\u2019t deploy our fixes quickly, and we usually had to cause additional\ndowntime to do it. Had our deploy tooling been stronger, we could have gotten\nto a stable state much more quickly. Our top priority on the team right now is\nimproving our tooling so we can effectively respond to situations like these.\n\nSecond, our services themselves could be more flexible. We had to make many\nchanges over the course of the launch that should have been simple\nconfiguration changes but instead required a full redeploy, which turned\nsimple fixes into long, risky operations. This weakness was identified ahead\nof time and has now become a top priority to improve.\n\nThird, we need to do a better job of anticipating how player behavior affects\nour backend. Our testing was designed to simulate how and when our services\nwould break, but we needed to spend more time considering how the conditions\nwould continue to change once things started failing. Now that we\u2019ve seen what\nhappens during a fraught launch - how players put pressure on services\ndifferently than when everything is working - we\u2019ll be able to incorporate\nthat data into future tests.\n\n(As an aside, our testing effort, in general, was a huge success. Despite how\nit may look from our launch struggles, our testing identified many other\ncritical issues leading all the way up to the week before launch, and without\nthose efforts, we might still be trying to fix the game to this day. Even\nthough we\u2019re post-launch, we plan to continue incorporating load testing into\nour regular development cadence going forward.)\n\n# Thank You\n\nWith the launch behind us, we\u2019re all very thankful to you players for showing\nso much passion for the game, despite the rocky start.\n\nEHG started from a group of gamers hoping to make the ARPG they wanted to\nplay, and now EHG is a group of gamers hoping to make the game YOU want to\nplay. Your passion, enthusiasm and, when deserved, criticism have continued to\nencourage our teams to deliver that game and push the definition of what an\nARPG can be, should be, and will be. Our team could not have made Last Epoch\nwhat it is today without you, and we will endeavor to keep making the game you\nall deserve.\n\nHere\u2019s to a bright future, Travelers.\n\n  * Another 'heres my opinion' thread and why im leaving106\n\n  * #### created\n\n25d\n\n  * #### last reply\n\n19d\n\n  * 89\n\n#### replies\n\n  * 20.9k\n\n#### views\n\n  * 88\n\n#### users\n\n  * 347\n\n#### likes\n\n  * 1\n\n#### link\n\n### Frequent Posters\n\n2\n\n2\n\n### Popular Links\n\n106| Another 'heres my opinion' thread and why im leaving lastepoch.com  \n---|---  \n  \nThere are 89 replies with an estimated read time of 14 minutes.\n\nGaryOak\n\n25d\n\nThanks very much for this postmortem!\n\nMakkii\n\n25d\n\nThx for all We waiting for next content update love the game\n\nsoul02\n\n25d\n\nI look forward to the next season and the new mechanics that may arrive =D\n\nYunicorn\n\n25d\n\nFascinating insight. Thank you very much for this write-up.\n\n  * Ardent Commander\n  * Eternal Templar\n\nBurb\n\n25d\n\nThank you. <3\n\n> For something like a game launch, \u201creadiness\u201d is mostly about having a plan.\n> You can have confidence that you\u2019ve tested and prepared, you can have\n> confidence that you know how your services work, but you can\u2019t have\n> confidence that nothing will go wrong. Instead, you plan for what to do if\n> something unanticipated happens.\n\nThis is how you do it. Failure is awesome because it shows you where the edges\nare. The important thing isn\u2019t that you had a failure, it\u2019s how you respond to\nit. These folks get it.\n\n  * Ardent Centurion\n\nVieniSu\n\n25d\n\nThank you <3\n\n  * Eternal Legend\n  * Eternal Vanquisher\n  * Ardent Gladiator\n\nNevieth\n\n25d\n\nI\u2019m so excited for the future of Last Epoch.\n\nDoxington\n\n25d\n\nI love this level of communication, transparency, and just honesty. Thank you\nEHG\n\nHilio\n\n25d\n\nI cannot express how much I appreciate this communication. Thank you all for\nthe hard work and especially the backend team.\n\n  * Ardent Champion\n  * Ancient Champion\n  * Eternal Traveler\n  * Eternal Templar\n  * Eternal Legend\n  * Eternal Vanquisher\n\nCaiusMartius\n\n25d\n\nYou guys are rockstars. From your continued unabashed love of the game, your\ndirect, frank and open communication with the community to your downright\ntenacious and, at times seemingly, unending work ethic.\n\nJust keep on doing your thing. A hell of a lot of us aren\u2019t going anywhere.\n\nEHG_Kain:\n\n> You can have confidence that you\u2019ve tested and prepared, you can have\n> confidence that you know how your services work, but you can\u2019t have\n> confidence that nothing will go wrong. Instead, you plan for what to do if\n> something unanticipated happens.\n\nThis is something so crucial and so overlooked by 98% of the armchair\ndevelopers. In the film business 95% of our work is done PREPARING, because as\nthe old adage goes, no plan ever survived contact with the \u201cenemy.\u201d Or in this\ncase, \u2018launch.\u2019\n\nPendragon925\n\n25d\n\ncan\u2019t wait for the future!\n\nTizianOwO\n\n25d\n\nAppreciate the transparency in spite of the fact almost all of the people\ncomplaining (and saying you\u2019re fools for not psychically predicting every\npossible thing that can go wrong), will almost certainly never read this.\n\n  * Ardent Gladiator\n\nbing_crosby\n\n25d\n\nSuper interesting, thanks for taking the time to write all this up.\n\nPhantomOfVoid\n\n25d\n\nThanks <3\n\n  * Ardent Gladiator\n  * Eternal Traveler\n  * Eternal Templar\n  * Eternal Vanquisher\n\nGavryn\n\n25d\n\nHere\u2019s to a bright future EHG! Thanks for the continued communication and\ntransparency, it should be a gold standard in the gaming space.\n\nulruc2525\n\n25d\n\nWhat does not kill you only makes you stronger.\n\nI guess now the H in EHG stands for Hercules\n\n  * Eternal Templar\n  * Eternal Legend\n\npsychodrive\n\n25d\n\nTrying to fit a square peg into a kube hole sure does go this way sometimes.\n\nKeep on keeping on folks\n\n  * Ardent Gladiator\n\nbeserkjay\n\n25d\n\nThank you for posting this. I am really enjoying the game. Keep up the great\nwork!\n\n  * Epoch\n  * Ancient Creator\n  * Ardent Creator\n  * Eternal Traveler\n  * Eternal Templar\n  * Eternal Legend\n  * Eternal Vanquisher\n\nJerle\n\n25d\n\nI really enjoy reading posts like these. Keep it up, EHG!\n\n", "frontpage": false}
