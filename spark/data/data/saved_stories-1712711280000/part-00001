{"aid": "39982985", "title": "How I recovered the password of an encrypted Mac disk image", "url": "https://lapcatsoftware.com/articles/2024/4/3.html", "domain": "lapcatsoftware.com", "votes": 3, "user": "ingve", "posted_at": "2024-04-09 19:06:15", "comments": 0, "source_title": "Funny story of how I recovered the password of an encrypted Mac disk image", "source_text": "Funny story of how I recovered the password of an encrypted Mac disk image\n\nJeff Johnson (My apps, PayPal.Me, Mastodon)\n\nFeedback Assistant Boycott\n\n# Funny story of how I recovered the password of an encrypted Mac disk image\n\n### April 9 2024\n\nThis is a story about so-called \"secure\" password entry that doesn't allow you\nto see the password you're typing. Back in 2009 I filed a report with Apple\u2014a\n\"Radar\" as it was called at the time, now called a \"Feedback\"\u2014 requesting a\nstandard way to show typing in secure text fields. My report, my Feedback\n(FB5392624), is still open 15 years later, and the problem that inspired the\nreport still haunts me 15 years later.\n\nI keep redundant backups of the data from my main computer, a MacBook Pro.\nHourly automated backups are run by Apple's Time Machine, built into macOS.\nOnce a day, I create a manual encrypted backup of my home folder and upload it\nto a remote server. Once a week, I create a manual encrypted backup of the\nentire Data volume on my MacBook Pro. Recent versions of macOS are divided on\ndisk into a read-write Data volume and a read-only System volume. There's not\nmuch point in making a backup of the System volume, because it's exactly the\nsame on every Mac. My Data volume backup is saved on an external hard drive\nthat is subsequently taken by me to a secure offsite location. To make the\nbackup, I boot the MacBook Pro into the macOS recovery volume, mount the Data\nvolume, attach an external hard drive (with a dongle, of course), and run the\nfollowing command from Terminal:\n\n> caffeinate -im hdiutil create -encryption -format UDSB -srcfolder\n> /Volumes/Data -noatomic -noscrub -verbose -puppetstrings -volname [volume\n> name] [output file path]\n\nThe caffeinate invocation is from hard experience: without it, my Mac can fall\nasleep during the backup! (FB11120333 \"hdiutil should prevent sleep\".) The -im\narguments prevent the system and the external hard disk from idle sleeping\n(man caffeinate). The rest of my backup format is explained in a previous blog\npost.\n\nMy Mac mini, a secondary computer for testing, has a plain text copy of the\nabove command-line snippet so that I can read it while typing into Terminal on\nmy MacBook Pro, visually comparing the output. The hdiutil password, though,\nuses secure text entry. To avoid invisible typos that would make it impossible\nfor me to decrypt the backup, I enter a very short and simple password while\nbooted into recovery, and then when the backup is complete, I boot back into\nmacOS and use hdiutil chpass to change the disk image password to something\nmuch longer and more secure.\n\nOne little snag in the plan is that my MacBook Pro runs macOS Ventura, which\nhas a bug that breaks hdiutil chpass for encrypted sparse bundles, my disk\nimage format (-format UDSB) of choice! This bug has been well documented by\nHoward Oakley. Fortunately, my Mac mini has four different macOS\ninstallations, from Big Sur, in which the bug never existed, to Sonoma, in\nwhich the bug is fixed, so I can (have to) run hdiutil chpass from there.\n\nHere's where things get funny. Yesterday after a weekly backup, I ran hdiutil\nchpass on the disk image, switched the external hard drive from my Mac mini to\nmy MacBook Pro, and ran hdiutil attach on the disk image to verify it. When\nhdiutil attach authentication failed, I was annoyed but not concerned, because\nI assumed that I made a typo manually entering the unseen password. However,\nafter a half dozen failures, each typed slower than the previous attempt, I\nstarted to worry. As a last resort, normally unnecessary just for hdiutil\nattach, I copied my disk image password from keychain and pasted it. Yet that\ndidn't work either!\n\nIt became painfully clear that I accidentally used the wrong password with\nhdiutil chpass. Thus, I didn't know the new disk image password. Desperate not\nto lose the backup, I switched to my Mac mini, praying that whatever I had\npasted into hdiutil chpass was still on the system pasteboard. To see for\nmyself, I pasted into TextEdit and got this:\n\n> 2024-4-8.sparsebundle\n\nThe TextEdit document contained the file name of the backup, momentarily\nconfusing me. I guessed that the file name likely came from Finder. I had\ncopied that file in Finder and pasted into Terminal as the (plaintext)\nargument to hdiutil chpass. I must have messed up and copied things in the\nwrong order, or failed to copy the password entirely.\n\nSwitching back to the MacBook Pro with the external drive, I tried\n2024-4-8.sparsebundle as the disk image password, but that failed too,\nrepeatedly. And I experienced no better luck with full file path\n/Volumes/backup/2024-4-8.sparsebundle as the password. Nothing I tried would\nwork!\n\nAt this point, I was about to give up, call the backup an unrecoverable loss,\nand run another backup from scratch the next day. What gave me pause, though,\nwas that the pasted output in Terminal, the full file path, was different than\nin TextEdit, just the file name. I remembered that copying an item on macOS\ncan add multiple formats to the pasteboard. There's actually an app for that:\nthe Clipboard Viewer developer utility, part of the Additional Tools for\nXcode. Looking through the many pasteboard types shown by Clipboard Viewer, I\nsaw a file URL file:///Volumes/backup/2024-4-8.sparsebundle/ (with a slash at\nthe end because sparse bundles, like all bundles, are directories).\nUnfortunately, the file URL didn't work as the password either. Finally, with\nnothing else to try, I copied the disk image again in Finder, but now I pasted\nthat, whatever that is, directly into the hdiutil attach password request.\nThen like magic, open sesame, the disk image mounted.\n\nMy immediate problem was solved. It was possible to do hdiutil chpass again on\nmy Mac mini, because I \"knew\" the old password, i.e., whatever you get by\ncopying the backup file from Finder and pasting. This time I was extremely\ncareful about setting the correct new password. As pleased as I was to rescue\nmy encrypted backup, I nonetheless remained perplexed about what had happened.\nI'm not the kind of person who easily walks away from a mystery.\n\nAs an experiment, I created a new (smaller) encrypted disk image, copying a\nfile in Finder and pasting into the hdiutil create password prompt. When I\nthen copied and pasted the file path of the new disk image into Terminal as\nthe (plaintext) argument for hdiutil attach, I suddenly noticed that the file\npath wasn't the only thing copied. There was a space character after the file\npath. Terminal adds a space character after pasted file paths as a convenience\nfor constructing command-line invocations. That was the answer! In retrospect,\nit was simple and embarrassingly obvious. The password of the encrypted disk\nimage was not the full file path; rather, the password was the full file path\nplus a space character. LOL. Of course it's impossible to see this, or\nanything, with secure password entry, which is a recipe for data loss.\n\nFeedback Assistant Boycott\n\nJeff Johnson (My apps, PayPal.Me, Mastodon)\n\n", "frontpage": false}
