{"aid": "40042866", "title": "Show HN: Sackmesser \u2013 JSON/YAML mutation tool", "url": "https://github.com/can3p/sackmesser", "domain": "github.com/can3p", "votes": 2, "user": "can3p", "posted_at": "2024-04-15 16:43:34", "comments": 0, "source_title": "GitHub - can3p/sackmesser", "source_text": "GitHub - can3p/sackmesser\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ncan3p / sackmesser Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\n### License\n\nApache-2.0 license\n\n0 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# can3p/sackmesser\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n8 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ncan3pmention array notation in the docse8c60a4 \u00b7\n\n## History\n\n28 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| fix builds (#2)  \n  \n### cmd\n\n|\n\n### cmd\n\n| implement array notation and add tests for all operations to cover ar...  \n  \n### generated\n\n|\n\n### generated\n\n| regenerate scaffolding  \n  \n### pkg\n\n|\n\n### pkg\n\n| add push operation  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| regenerate scaffolding  \n  \n### .golangci.yml\n\n|\n\n### .golangci.yml\n\n| fix builds (#2)  \n  \n### .goreleaser.yaml\n\n|\n\n### .goreleaser.yaml\n\n| initial commit  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Create LICENSE  \n  \n### README.md\n\n|\n\n### README.md\n\n| mention array notation in the docs  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| fix builds (#2)  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Revamp operations syntax in favor of op_name(path, args*) (#1)  \n  \n### main.go\n\n|\n\n### main.go\n\n| initial commit  \n  \n## Repository files navigation\n\n# Sackmesser - your cli to modify JSON/yaml on the fly\n\nWarning: sackmesser is a prototype at the moment, do not expect the api to be\nstable\n\nRemember all those times when you had to save JSON in order to find and update\na single field? Or worse, where you had to count spaces in yaml? Fear no more,\nsackmesser will take care of that.\n\n## Capabilities\n\n  * Supports mutation only, you cannot query JSON with sackmesser\n  * Input and output formats are disconnected, both yaml and JSON are supported\n  * Operations: set field, delete field\n  * Supports multiple operations in one go\n\n## Operations\n\nOperations have a signature like op_name(path, args*) where\n\n  * path is dot delimited, you could use quotes in case field names contain spaces, dots, commas, etc. For array access you can use array notation:\n    \n        echo '{ \"a\" : { \"test prop\": 1 } }' | sackmesser mod 'set(a.\"test prop\", \"test\")' { \"a\": { \"test prop\": \"test\" } }\n    \n        echo '{ \"a\" : { \"test prop\": [ 1 , true ] } }' | sackmesser mod 'set(a.\"test prop\"[1], \"test\")' \"a\": { \"test prop\": [ 1, \"test\" ] }\n\n  * Zero or more arguments are required for an operation. An argument could be one of\n\n    * a number\n    * null\n    * A string, you could use single, double quotes and backticks as quotes to minimize escaping\n    * A JSON value\n\nAvailable operations:\n\nOperation| Description  \n---|---  \nset(path, value)| assign field to a particular value  \ndel(path)| delete a key  \nmerge(path, value)| merge json value into the path. Only JSON values are\nallowed  \npop(path)| remove last element from an array  \npush(path, value)| add new element to an array  \n  \n## Examples:\n\n### If you just want to convert JSON to yaml or back\n\n    \n    \n    $ echo '{ \"a\":1, \"prop\": { \"b\": [1,2,3] } }' | sackmesser mod --output-format yaml a: 1 prop: b: - 1 - 2 - 3\n\n### Set a field with a value\n\n    \n    \n    $ echo '{ \"a\":1 }' | sackmesser mod 'set(prop, `{ \"test\": 123 }`' { \"a\": 1, \"prop\": \"{ \\\"test\\\": 123 }\" }\n\nPlease note that you can use three types of quotes for strings - double\nquotes, single quotes, and backticks\n\n    \n    \n    $ echo '{ \"a\":1 }' | sackmesser mod \"set(prop, 'value')\" { \"a\": 1, \"prop\": \"value\" }\n    \n    \n    $ echo '{ \"a\":1 }' | sackmesser mod \"set(prop, `value`)\" { \"a\": 1, \"prop\": \"value\" }\n\n### Set a field with a value that will be parsed as a JSON first\n\n    \n    \n    $ echo '{ \"a\":1 }' | sackmesser mod 'set(prop, { \"test\": 123 }' { \"a\": 1, \"prop\": { \"test\": 123 } }\n\nYou can always spit out a different format if you want!\n\n    \n    \n    $ echo '{ \"a\":1 }' | sackmesser mod --output-format yaml 'set(prop, { \"test\": 123 }' { a: 1 prop: test: 123\n\n### Merge path with an object\n\nThis may come in handy in case you want to apply some specific values to a\njson template\n\n    \n    \n    echo '{ \"a\" : { \"test prop\": { \"abc\": true } } }' | sackmesser mod 'merge(a.\"test prop\", { \"testme\": true })' { \"a\": { \"test prop\": { \"abc\": true, \"testme\": true } } }\n\n### Delete a field\n\n    \n    \n    echo '{ \"a\":1, \"deleteme\": \"please\" }' | sackmesser mod 'del(deleteme)' { \"a\": 1 }\n\n### Chain commands\n\nYou can supply as many commands as you like if needed\n\n    \n    \n    echo '{ \"a\":1, \"deleteme\": \"please\" }' | sackmesser mod 'set(b, \"test\")' 'del(deleteme)' { \"a\": 1, \"b \"test\", }\n\nSee TODO section for possible changes\n\n## Installation\n\n### Install Script\n\nDownload sackmesser and install it into a local bin directory.\n\n#### MacOS, Linux, WSL\n\nLatest version:\n\n    \n    \n    curl -L https://raw.githubusercontent.com/can3p/sackmesser/master/generated/install.sh | sh\n\nSpecific version:\n\n    \n    \n    curl -L https://raw.githubusercontent.com/can3p/sackmesser/master/generated/install.sh | sh -s 0.0.4\n\nThe script will install the binary into the $HOME/bin folder by default, you\ncan override this by setting $CUSTOM_INSTALL environment variable\n\n### Manual Download\n\nGet the archive that fits your system from the Releases page and extract the\nbinary into a folder that is mentioned in your $PATH variable.\n\n## Notes\n\nThe project has been scaffolded with the help of kleiner\n\n## TODO\n\n  * More operations\n  * Some tests will be helpful\n\nOr something like this, suggestions are welcome!\n\n## Prior art\n\nThere are awesome alternatives to sackmesser, which should be considered as\nwell!\n\n  * jq - legendary json processor. Compared to sackmesser has infinite capabilities heavily skewed towards reading the data, however, mutation is also possible, jq works with JSON only\n  * jj - this tool is optimized for speed and supports JSON lines. Compared to sackmesser it only supports one operation at a time and is optimized for speed\n\n## License\n\nSee the License\n\n## About\n\nNo description, website, or topics provided.\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n0 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 8\n\nv0.0.8 Latest\n\nApr 15, 2024\n\n\\+ 7 releases\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Go 97.7%\n  * Shell 2.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
