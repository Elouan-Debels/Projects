{"aid": "40067135", "title": "Drawing Diagrams for TeX with MetaPost", "url": "https://habr.com/en/articles/454376/", "domain": "habr.com", "votes": 1, "user": "fanf2", "posted_at": "2024-04-17 16:42:04", "comments": 0, "source_title": "Various things in MetaPost", "source_text": "Various things in MetaPost / Habr\n\n\u03b2How to become an author\n\nChange theme settings\n\n\u0420\u0435\u043a\u043b\u0430\u043c\u0430 \u2022 dark.habr.io\n\njemmybutton Jun 3 2019 at 23:51\n\n# Various things in MetaPost\n\n8 min\n\n12K\n\nLaTeX*\n\nTranslation\n\nOriginal author: Sergey Slyusarev\n\nWhat is the best tool to use for drawing vector pictures? For me and probably\nfor many others, the answer is pretty obvious: Illustrator, or, maybe,\nInkscape. At least that's what I thought when I was asked to draw about eight\nhundred diagrams for a physics textbook. Nothing exceptional, just a bunch of\nblack and white illustrations with spheres, springs, pulleys, lenses and so\non. By that time it was already known that the book was going to be made in\nLaTeX and I was given a number of MS Word documents with embedded images. Some\nof them were scanned pictures from other books, some were pencil drawings.\nPicturing days and nights of inkscaping this stuff made me feel dizzy, so soon\nI found myself fantasizing about a more automated solution. For some reason\nMetaPost became the focus of these fantasies.\n\nThe main advantage of using MetaPost (or similar) solution is that every\npicture can be a sort of function of several variables. Such a picture can be\nquickly adjusted for any unforeseen circumstances of the layout, without\ndisrupting important internal relationships of the illustration (something I\nwas really concerned about), which is not easily achieved with more\ntraditional tools. Also, recurring elements, all these spheres and springs,\ncan be made more visually interesting than conventional tools would allow with\nthe same time constraints.\n\nI wanted to make pictures with some kind of hatching, not unlike what you\nencounter in old books.\n\nFirst, I needed to be able to produce some curves of varying thickness. The\nmain complication here is to construct a curve that follows the original curve\nat a varying distance. I used probably the most primitive working method,\nwhich boils down to simply shifting the line segments connecting Bezier curve\ncontrol points by a given distance, except this distance varies along the\ncurve.\n\nIn most cases, it worked OK.\n\nExample code\n\nFrom here on it is assumed that the library is downloaded and input fiziko.mp;\nis present in the MetaPost code. The fastest method is to use ConTeXt (then\nyou don't need beginfig and endfig):\n\n\\starttext \\startMPcode input fiziko.mp; % the code goes here \\stopMPcode\n\\stoptext\n\nor LuaLaTeX:\n\n\\documentclass{article} \\usepackage{luamplib} \\begin{document}\n\\begin{mplibcode} input fiziko.mp; % the code goes here \\end{mplibcode}\n\\end{document}\n\nbeginfig(3); path p, q; % MetaPost's syntax is reasonably readable, so I'll\ncomment mostly on my stuff p := (0,-1/4cm){dir(30)}..(5cm, 0)..{dir(30)}(10cm,\n1/4cm); q := offsetPath(p)(1cm*sin(offsetPathLength*pi)); % first argument is\nthe path itself, second is a function of the position along this path\n(offsetPathLength changes from 0 to 1), which determines how far the outline\nis from the original line draw p; draw q dashed evenly; endfig;\n\nTwo outlines can be combined to make a contour line for a variable-thickness\nstroke.\n\nExample code\n\nbeginfig(4); path p, q[]; p := (0,-1/4cm){dir(30)}..(5cm, 0)..{dir(30)}(10cm,\n1/4cm); q1 := offsetPath(p)(1/2pt*(sin(offsetPathLength*pi)**2)); % outline on\none side q2 := offsetPath(p)(-1/2pt*(sin(offsetPathLength*pi)**2)); % and on\nthe other fill q1--reverse(q2)--cycle; endfig;\n\nThe line thickness should have some lower bound, otherwise, some lines are\ngoing to be too thin to be properly printed and this doesn't look great. One\nof the options (the one I chose) is to make the lines which are too thin\ndashed, so that the total amount of ink per unit length remains approximately\nthe same as in the intended thinner line. In other words, instead of reducing\nthe amount of ink on the sides of the line, the algorithm takes some ink from\nthe line itself.\n\nExample code\n\nbeginfig(5); path p; p := (0,-1/4cm){dir(30)}..(5cm, 0)..{dir(30)}(10cm,\n1/4cm); draw brush(p)(1pt*(sin(offsetPathLength*pi)**2)); % the arguments are\nthe same as for the outline endfig;\n\nOnce you have working variable-thickness lines, you can draw spheres. A sphere\ncan be depicted as a series of concentric circles with the line thicknesses\nvarying according to the output of a function that calculates the lightness of\na particular point on the sphere.\n\nExample code\n\nbeginfig(6); draw sphere.c(1.2cm); draw sphere.c(2.4cm) shifted (2cm, 0);\nendfig;\n\nAnother convenient construction block is a \u201ctube.\u201d Roughly speaking it is a\ncylinder which you can bend. So long as the diameter is constant, it's pretty\nstraightforward.\n\nExample code\n\nbeginfig(7); path p; p := subpath (1,8) of fullcircle scaled 3cm; draw\ntube.l(p)(1/2cm); % arguments are the path itself and the tube radius endfig;\n\nIf the diameter isn't constant, things become more complicated: the number of\nstrokes should change according to the tube thickness in order to keep the\namount of ink per unit area constant before taking the lights into account.\n\nExample code\n\nbeginfig(8); path p; p := pathSubdivide(fullcircle, 2) scaled 3cm; % this\nthing splits every segment between the points of a path (here\u2014fullcircle) into\nseveral parts (here\u20142) draw tube.l(p)(1/2cm +\n1/6cm*sin(offsetPathLength*10pi)); endfig;\n\nThere are also tubes with transverse hatching. The problem of keeping the\namount of ink constant turned out to be even trickier in this case, so\nofttimes such tubes look a tad shaggy.\n\nExample code\n\nbeginfig(9); path p; p := pathSubdivide(fullcircle, 2) scaled 3cm; draw\ntube.t(p)(1/2cm + 1/6cm*sin(offsetPathLength*10pi)); endfig;\n\nTubes can be used to construct a wide range of objects: from cones and\ncylinders to balusters.\n\nExample code\n\nbeginfig(10); draw tube.l ((0, 0) -- (0, 3cm))((1-offsetPathLength)*1cm)\nshifted (-3cm, 0); % a very simple cone path p; p := (-1/2cm, 0) {dir(175)} ..\n{dir(5)} (-1/2cm, 1/8cm) {dir(120)} .. (-2/5cm, 1/3cm) .. (-1/2cm, 3/4cm)\n{dir(90)} .. {dir(90)}(-1/4cm, 9/4cm){dir(175)} .. {dir(5)}(-1/4cm, 9/4cm +\n1/5cm){dir(90)} .. (-2/5cm, 3cm); % baluster's envelope p := pathSubdivide(p,\n6); draw p -- reverse(p xscaled -1) -- cycle; tubeGenerateAlt(p, p xscaled -1,\np rotated -90); % a more low-level stuff than tube.t, first two arguments are\ntube's sides and the third is the envelope. The envelope is basically a\nflattened out version of the outline, with line length along the x axis and\nthe distance to line at the y. In the case of this baluster, it's simply its\nside rotated 90 degrees. endfig;\n\nSome constructions which can be made from these primitives are included in the\nlibrary. For example, the globe is basically a sphere.\n\nExample code\n\nbeginfig(11); draw globe(1cm, -15, 0) shifted (-6/2cm, 0); % radius, west\nlongitude, north latitude, both decimal draw globe(3/2cm, -30.280577,\n59.939461); draw globe(4/3cm, -140, -30) shifted (10/3cm, 0); endfig;\n\nHowever, the hatching here is latitudinal and controlling line density is much\nmore difficult than on the regular spheres with \u201cconcentric\u201d hatching, so it's\na different kind of sphere.\n\nExample code\n\nbeginfig(12); draw sphere.l(2cm, -60); % diameter and latitude draw\nsphere.l(3cm, 45) shifted (3cm, 0); endfig;\n\nA weight is a simple construction made from tubes of two types.\n\nExample code\n\nbeginfig(13); draw weight.s(1cm); % weight height draw weight.s(2cm) shifted\n(2cm, 0); endfig;\n\nThere's also a tool to knot the tubes.\n\nExample code. For brevity's sake only one knot.\n\nbeginfig(14); path p; p := (dir(90)*4/3cm) {dir(0)} .. tension 3/2 ..(dir(90 +\n120)*4/3cm){dir(90 + 30)} .. tension 3/2 ..(dir(90 - 120)*4/3cm){dir(-90 -\n30)} .. tension 3/2 .. cycle; p := p scaled 6/5; addStrandToKnot (primeOne)\n(p, 1/4cm, \"l\", \"1, -1, 1\"); % first, we add a strand of width 1/4cm going\nalong the path p to the knot named primeOne. its intersections along the path\ngo to layers \"1, -1, 1\" and the type of tube is going to be \"l\". draw\nknotFromStrands (primeOne); % then the knot is drawn. you can add more than\none strand. endfig;\n\nTubes in knots drop shadows on each other as they should. In theory, this\nfeature can be used in other contexts, but since I had no plans to go deep\ninto the third dimension, the user interface is somewhat lacking and shadows\nwork properly only for some objects.\n\nExample code\n\nbeginfig(15); path shadowPath[]; boolean shadowsEnabled; numeric\nnumberOfShadows; shadowsEnabled := true; % shadows need to be turned on\nnumberOfShadows := 1; % number of shadows should be specified shadowPath0 :=\n(-1cm, -2cm) -- (-1cm, 2cm) -- (-1cm +1/6cm, 2cm) -- (-1cm + 1/8cm, -2cm) --\ncycle; % shadow-dropping object should be a closed path shadowDepth0 := 4/3cm;\n% it's just this high above the object on which the shadow falls shadowPath1\n:= shadowPath0 rotated -60; shadowDepth1 := 4/3cm; draw sphere.c(2.4cm); %\nshadows work ok only with sphere.c and tube.l with constant diameter fill\nshadowPath0 withcolor white; draw shadowPath0; fill shadowPath1 withcolor\nwhite; draw shadowPath1; endfig;\n\nCertainly, you will need a wood texture (update: since the Russian version of\nthis article was published, the first case of this library being used in a\nreal project which I'm aware of has occurred, and it was the wood texture\nwhich came in handy, so this ended up not being a joke after all). How twigs\nand their growth affect the pattern of year rings is a topic for some serious\nstudy. The simplest working model I could come up with is as follows: year\nrings are parallel flat surfaces, distorted by growing twigs; thus the surface\nis modified by a series of not overly complex \u201ctwig functions\u201d in different\nplaces and the surface's isolines are taken as the year ring pattern.\n\nExample code\n\nbeginfig(16); numeric w, b; pair A, B, C, D, A', B', C', D'; w := 4cm; b :=\n1/2cm; A := (0, 0); A' := (b, b); B := (0, w); B' := (b, w-b); C := (w, w); C'\n:= (w-b, w-b); D := (w, 0); D' := (w-b, b); draw woodenThing(A--A'--B'--B--\ncycle, 0); % a piece of wood inside the A--A'--B'--B--cycle path, with wood\ngrain at 0 degrees draw woodenThing(B--B'--C'--C--cycle, 90); draw\nwoodenThing(C--C'--D'--D--cycle, 0); draw woodenThing(A--A'--D'--D--cycle,\n90); eyescale := 2/3cm; % scale for the eye draw eye(150) shifted 1/2[A,C]; %\nthe eye looks in 150 degree direction endfig;\n\nThe eye from the picture above opens wide or squints a bit and its pupil\nchanges its size too. It may not make any practical sense, but mechanically\nsimilar eyes just look boring.\n\nExample code\n\nbeginfig(17); eyescale := 2/3cm; % 1/2cm by default draw eye(0) shifted (0cm,\n0); draw eye(0) shifted (1cm, 0); draw eye(0) shifted (2cm, 0); draw eye(0)\nshifted (3cm, 0); draw eye(0) shifted (4cm, 0); endfig;\n\nMost of the time the illustrations weren't all that complex, but a more\nrigorous approach would require solving many of the problems in the textbook\nto illustrate them correctly. Say, L'H\u00f4pital's pulley problem (it wasn't in\nthat textbook, but anyway): on the rope with the length , suspended at the\npoint a pulley is hanging; it's hooked to another rope, suspended at the point\nwith the weight on its end. The question is: where does the weight go if both\nthe pulley and the ropes weigh nothing? Surprisingly, the solution and the\nconstruction for this problem are not that simple. But by playing with several\nvariables you can make the picture look just right for the page while\nmaintaining accuracy.\n\nExample code\n\nvardef lHopitalPulley (expr AB, l, m) = % distance AB between the suspension\npoints of the ropes and their lengths l and m. \u201cWhy no units of length?\u201d, you\nmay ask. It's because some calculations inside can cause arithmetic overflow\nin MetaPost. save A, B, C, D, E, o, a, x, y, d, w, h, support; image( pair A,\nB, C, D, E, o[]; path support; numeric a, x[], y[], d[], w, h; x1 := (l**2 +\nabs(l)*((sqrt(8)*AB)++l))/4AB; % the solution y1 := l+-+x1; % second\ncoordinate is trivial y2 := m - ((AB-x1)++y1); % as well as the weight's\nposition A := (0, 0); B := (AB*cm, 0); D := (x1*cm, -y1*cm); C := D shifted\n(0, -y2*cm); d1 := 2/3cm; d2 := 1cm; d3 := 5/6d1; % diameters of the pulley,\nweight and the pulley wheel w := 2/3cm; h := 1/3cm; % parameters of the wood\nblock o1 := (unitvector(C-D) rotated 90 scaled 1/2d3); o2 := (unitvector(D-B)\nrotated 90 scaled 1/2d3); E := whatever [D shifted o1, C shifted o1] =\nwhatever [D shifted o2, B shifted o2]; % pulley's center a := angle(A-D);\nsupport := A shifted (-w, 0) -- B shifted (w, 0) -- B shifted (w, h) -- A\nshifted (-w, h) -- cycle; draw woodenThing(support, 0); % wood block\neverything is suspended from draw pulley (d1, a - 90) shifted E; % the pulley\ndraw image( draw A -- D -- B withpen thickpen; draw D -- C withpen thickpen; )\nmaskedWith (pulleyOutline shifted E); % ropes should be covered with the\npulley draw sphere.c(d2) shifted C shifted (0, -1/2d2); % sphere as a weight\ndotlabel.llft(btex $A$ etex, A); dotlabel.lrt(btex $B$ etex, B);\ndotlabel.ulft(btex $C$ etex, C); label.llft(btex $l$ etex, 1/2[A, D]); )\nenddef; beginfig(18); draw lHopitalPulley (6, 2, 11/2); % now you can choose\nthe right parameters draw lHopitalPulley (3, 5/2, 3) shifted (8cm, 0); endfig;\n\nAnd what about the textbook? Alas, when almost all the illustrations and the\nlayout were ready, something happened and the textbook was canceled. Maybe\nbecause of that, I decided to rewrite most of the functions of the original\nlibrary from scratch (I chose not to use any of the original code, which,\nalthough indirectly, I was paid for) and put it on GitHub. Some things,\npresent in the original library, such as functions for drawing cars and\ntractors, I didn't include there, some new features, e.g. knots, were added.\n\nIt doesn't run quickly: it takes about a minute to produce all the pictures\nfor this article with LuaLaTeX on my laptop with i5-4200U 1.6 GHz. A\npseudorandom number generator is used here and there, so no two similar\npictures are absolutely identical (that's a feature) and every run produces\nslightly different pictures. To avoid surprises you can simply set randomseed\n:= some number and enjoy the same results every run.\n\nMany thanks to dr ord and Mikael Sundqvist for their help with the English\nversion of this text.\n\nTags:\n\n  * metapost\n  * tex\n  * illustrations\n\nHubs:\n\n  * LaTeX\n\nIf this publication inspired you and you want to support the author, do not\nhesitate to click on the button\n\n+14\n\n0\n\n### Editorial Digest\n\nWe email you the best articles monthly\n\n85\n\nKarma\n\n0\n\nRating\n\n@jemmybutton\n\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\n\nLeave a comment\n\n## Articles\n\nShow the best of all time\n\nCourses\n\n  * Java-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 \u043d\u0443\u043b\u044f\n\nApril 21, 2024Merion Academy\n\n  * DevOps - \u0438\u043d\u0436\u0435\u043d\u0435\u0440 \u0441 \u043d\u0443\u043b\u044f\n\nApril 21, 2024Merion Academy\n\n  * \u041a\u0443\u0440\u0441 \u043f\u043e MS Windows Server\n\nApril 21, 2024Merion Academy\n\n  * \u041e\u0441\u043d\u043e\u0432\u044b BGP\n\nApril 21, 2024Merion Academy\n\n  * \u041e\u043d\u043b\u0430\u0439\u043d \u043a\u0443\u0440\u0441 \u043f\u043e \u043a\u0438\u0431\u0435\u0440\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438\n\nApril 21, 2024Merion Academy\n\nMore courses on Habr Career\n\nSupport\n\n\u00a9 2006\u20132024, Habr\n\n", "frontpage": false}
