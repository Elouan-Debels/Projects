{"aid": "39988580", "title": "Client libraries are better when they have no API", "url": "https://csvbase.com/blog/7", "domain": "csvbase.com", "votes": 7, "user": "todsacerdoti", "posted_at": "2024-04-10 09:10:24", "comments": 0, "source_title": "Client libraries are better when they have no API", "source_text": "Client libraries are better when they have no API\n\ncsvbase is a simple web database. Learn more on the about page.\n\n# Client libraries are better when they have no API\n\nfsspec is secretly everywhere, and boss\n\n2024-04-10\n\nby Cal Paterson\n\nWhen I met a friend in a pub recently and I told him I was writing a client\nlibrary for csvbase, he did laugh a bit. \"Can't people just use curl?\"\n\nIt's true. On csvbase, you can just curl any table url and get a csv file.\nThrough the magic of HTTP, this web-page:\n\nbecomes this csv file inside curl:\n\n[For details of how that trick works, see an older blog post]\n\nThat barely qualifies as an API, it's just HTTP. So what possible use could a\nclient library be?\n\nAnd of course client libraries add mental overhead of their own. You have to\nread some docs, learn some methods and then and the end you still have to add\nsome code to use whatever library it is.\n\nWouldn't you rather just not?\n\nI would certainly rather not. With that in mind, I've written a client library\nthat has no API.\n\n## No API\n\nWait, no API?:\n\n    \n    \n    >>> import pandas as pd >>> df = pd.read_csv(\"csvbase://calpaterson/onion-vox-pops\") >>> df.quote[0] \"\"\"I realize passengers are concerned, but speaking as a pilot, there's no better place to drop acid than 40,000 feet in the air.\"\"\"\n\n(A man after my own heart.)\n\nBut yes, no API. I resent writing data APIs anyway (that's why I wrote csvbase\n- to do it once, generically). So if you want, just pull dataframes down from\ncsvbase with Pandas itself. pip install csvbase-client and Pandas will\nsuddenly learn the csvbase:// url scheme.\n\nAnd what if you want to write a dataframe to csvbase? Is there an API for\nthat? Again: no. You call the usual method: DataFrame.to_csv:\n\n    \n    \n    >>> import string # from the stdlib >>> alphabet_df = pd.DataFrame(zip(range(1, 27), string.ascii_lowercase),\\ columns=(\"number\", \"letter\")).set_index(\"number\") >>> alphabet_df.to_csv(\"csvbase://calpaterson/alphabet\")\n\nYou do admittedly need to put your csvbase username and API key into ~/.netrc\nfirst. Here's mine:\n\n    \n    \n    machine csvbase.com login calpaterson password hunter42\n\nYou can check up on calpaterson/alphabet: it's a real table on csvbase.com\nnow.\n\nBut perhaps you don't like Pandas. You prefer Polars, that other dataframe\nlibrary. Again: I refuse to write an API. You can just use Polars itself:\n\n    \n    \n    >>> import polars as pl >>> pl.read_csv(\"csvbase://calpaterson/alphabet\") shape: (26, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 csvbase_row_id \u2506 number \u2506 letter \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 i64 \u2506 i64 \u2506 str \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 1 \u2506 1 \u2506 a \u2502 \u2502 2 \u2506 2 \u2506 b \u2502 \u2502 3 \u2506 3 \u2506 c \u2502 \u2502 4 \u2506 4 \u2506 d \u2502 \u2502 5 \u2506 5 \u2506 e \u2502 \u2502 ... \u2506 ... \u2506 ... \u2502 \u2502 22 \u2506 22 \u2506 v \u2502 \u2502 23 \u2506 23 \u2506 w \u2502 \u2502 24 \u2506 24 \u2506 x \u2502 \u2502 25 \u2506 25 \u2506 y \u2502 \u2502 26 \u2506 26 \u2506 z \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nWhat about Dask? Same thing:\n\n    \n    \n    >>> import dask.dataframe as dd >>> dd.read_csv(\"csvbase://calpaterson/alphabet\") Dask DataFrame Structure: csvbase_row_id number letter npartitions=1 int64 int64 string ... ... ... Dask Name: read_csv, 1 expression Expr=ReadCSV(16ad101)\n\nI imported pandas as pd, I imported polars as pl and I imported dask.dataframe\nas dd. But I didn't import csvbase_client. Unnecessary - there is no API.\n\n## Enter fsspec\n\nHow is this all working? Have I perpetrated a kind of grand, Jia Tan-style\njedi mind trick on the maintainers of these dataframe libraries, secretly\nsneaking csvbase-specific code into their repos?\n\nI haven't. All of these dataframe libraries (and probably others I haven't\nthought of) use a standard filesystem interface library, called fsspec.\ncsvbase-client just implements an adaptor for fsspec:\n\n    \n    \n    from fsspec.spec import AbstractFileSystem, AbstractBufferedFile class CSVBaseFileSystem(AbstractFileSystem): def _open(self, path, mode=\"rb\"): return CSVBaseFile(self, path, mode) class CSVBaseFile(AbstractBufferedFile): def _fetch_range(self, start: int, end: int) -> bytes: ...\n\nfsspec already comes with built-in adaptors for object stores, webdav, Github,\nDropbox and lots more. It's a pretty nice abstraction layer. csvbase's client\nis just one more adaptor.\n\nFor whatever reason, fsspec is not that well known. It has less than 800 stars\non github. But it is well used: it's downloaded more than 8 million times a\nday, usually as an automatically installed dependency of other libraries. That\nactually makes it the 20th most popular Python package - bigger in fact than\nPandas.\n\nAt any rate, after my classes are written it just takes a short setuptools\nincantation to wire my classes into place upon package install:\n\n    \n    \n    from setuptools import setup setup( name=\"csvbase-client\", ..., # [snip] entry_points={ \"fsspec.specs\": [ \"csvbase=csvbase_client.fsspec.CSVBaseFileSystem\", ], }, )\n\nOr in pyproject.toml:\n\n    \n    \n    [project.entry-points.\"fsspec.specs\"] csvbase = \"csvbase_client.fsspec.CSVBaseFileSystem\"\n\nWith all this working, the csvbase:// url scheme becomes real and you can use\nit inside anything which relies on fsspec, which is a surprisingly large\nnumber of things.\n\n## How to use fsspec in your own programs\n\nfsspec is pretty nice. It's very useful when you want, for example, to write a\ncli program that can write both to a file, and then later an S3 object.\n\nInstead of calling the Python built-in open, you call fsspec.open. It is a\nmostly drop-in replacement.\n\n    \n    \n    import fsspec with fsspec.open(\"csvbase://calpaterson/onion-vox-pops\") as vox_pops_f: print(vox_pops_f.read(100))\n\nThat's it. It is extremely simple to integrate against.\n\nThere isn't just open, either, but touch, rm, cp, mv - the whole gang.\ncsvbase-client's support doesn't cover all of these yet, but that is planned.\n\n## And there's a cli tool\n\nI can't get out of writing a cli tool for csvbase. There is no way to avoid\nthat - but I did make it a thin veneer over fsspec.\n\n    \n    \n    $ csvbase-client table get calpaterson/alphabet csvbase_row_id,number,letter 1,1,a 2,2,b 3,3,c [you know the rest]\n\nBut other examples are more fun:\n\n    \n    \n    $ csvbase-client table get calpaterson/eurofxref-hist | \\ grep USD | \\ cut -d, -f 2,4 | \\ gnuplot -e \"set datafile separator ','; set term dumb; \\ plot '-' using 1:2 with lines title 'usd'\"\n\n## The bytes on the internet are free and you can take them home with you\n\nAs with csvbase proper, csvbase-client is open source, so you can just take my\ncode as a starting point and write your own fsspec APIs.\n\nI'm looking forward to expanding on it in future. I'm particularly keen to use\nfsspec to mount csvbase.com as a filesystem via FUSE. That sounds fun.\n\nHelp me out:\n\n  * try csvbase-client\n  * do me a solid by starring csvbase-client on github\n\n    * star the main project as well if you're feeling extra generous\n  * email me your thoughts\n  * or file bugs on github\n\n  * Source code\n  * Privacy policy\n  * Terms\n\n", "frontpage": true}
