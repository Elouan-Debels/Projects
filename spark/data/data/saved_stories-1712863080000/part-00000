{"aid": "40001759", "title": "Hands-On Software Architecture", "url": "https://jacquiread.com/posts/2024-03-26-hands-on-software-architecture/", "domain": "jacquiread.com", "votes": 1, "user": "mooreds", "posted_at": "2024-04-11 13:16:04", "comments": 0, "source_title": "Hands-on software architecture", "source_text": "Hands-on software architecture - Jacqui Read\n\nThis website uses Cookies to improve your experience. Learn more\n\nGot it!\n\nJacqui Read\n\nJacqui Read\n\n## Contents\n\n# Hands-on software architecture\n\nSteve Read included in Tech\n\n2024-03-26 2024-03-26 About 500 words 3 minutes\n\nContents\n\nMany times I\u2019ve heard it said that software architects should be hands-on -\nthey shouldn\u2019t be in an ivory tower. They should still be coding, one foot in\nthe game. There is so much to unwrap from this!\n\n## Hands-on\n\nFirst of all, yes, architects should be hands-on. To me this means engaged,\nreactive to and even in front of the challenges that the business is\nconfronted with. They should also be helping the business evade those\nchallenges. Not asking much, eh? \ud83e\udd14\n\nHands-on is often referred to as being a synonym for coding. This couldn\u2019t be\nfurther from the truth, as actually when you have a multi-disciplinary team,\nor are working across different levels of abstraction, the scope is much\nbroader. If you use the term engaged instead, you are considering who the\narchitect is working with, rather than what they are doing. The broader the\nscope, the better your awareness of context, and the better the influence of\neverybody in the organisation and product decision-making processes.\n\nExamples of strong engagement include: \ud83d\udd0d Finding problems in the captured\nrequirements \ud83e\uddea Uncovering test strategy limitations or challenges \ud83d\udea8 Reviewing\nand assessing operational tickets \ud83c\udfd7\ufe0f Understanding team CICD pipeline\nworkflows \ud83d\udea9 Pioneering and educating around the team\u2019s use of platforms\n\nExamples of engagement vary up and down the architectural stack, as the\nartefacts, business processes and stakeholders will change, but the same\nprinciples of linking people, perspectives, and most importantly experiences\nremains.\n\n## Ivory Towers\n\nLet\u2019s now address the aspect of ivory tower architecture. To me this brings\nabout imagery of an architect in a rapunzel-like tower, absorbed in their\nideas for what could be eternity. It also suggests altitude, suggesting that\nthere is a long distance and barriers to accessibility for those around them\nin the business - the architect\u2019s ideas are never tested, and do not fit with\na broader business strategy.\n\nA software architect coding in his ivory tower\n\nDoes being a coding architect resolve these problems? Not at all, if the\narchitect were to stay within their bubble! Furthermore, if the architect\nspends too much time coding, rather than providing and understanding\nperspectives, then the development teams and business are without an advocate.\nExperiences and perspectives remain unshared; they will code quite happily\nfrom their ivory tower uninterrupted.\n\nThe analogy I would use instead is to have your architects visiting and\ninvolved at the construction site, not laying bricks.\n\n## Caveat\n\nIt\u2019s worth saying I do code, work on IaC, data, pipelines, etc as an\narchitect, and the amount of insight you gain from an hour or two in new\ncontexts is remarkable, but that degree of insight gained is exactly the same\nfrom the same time spent across all of the other activities I outlined\npreviously.\n\nCoding isn\u2019t the cure - it is one of many sources of vitamin D.\n\nUpdated on 2024-03-26\n\nCodingMyth_BustingFrom_The_TrenchesBack | Home\n\nUsing large language models in software architecture\n\n2022 - 2024 Read the Architecture Ltd.\n\n0%\n\n", "frontpage": false}
