{"aid": "40044788", "title": "Leveling Up Clojure Data Wrangling: Unveiling Tablecloth Columns", "url": "https://humanscode.com/columns-for-tablecloth-launch", "domain": "humanscode.com", "votes": 1, "user": "ethanmiller", "posted_at": "2024-04-15 19:40:34", "comments": 0, "source_title": "Launching Columns for Tablecloth", "source_text": "Launching Columns for Tablecloth\n\n# Launching Columns for Tablecloth\n\nby Ethan Miller / April 13, 2024\n\n## The New Column API\n\nToday we at scicloj deployed a new Column API (tablecloth.column.api) into the\ndata processing library Tablecloth (available as of version 7.029.1). This new\nAPI adds a new primitive to the Tablecloth system: the column. Here\u2019s how we\nuse it:\n\n    \n    \n    (require '[tablecloth.column.api :as tcc]) (tcc/column [1 2 3 4 5]) ;; => #tech.v3.dataset.column<int64>[5] null [1, 2, 3, 4, 5]\n\nThe new column is the same as the columns that comprise a dataset. It is a\none-dimensional typed sequence of values. Underneath the hood, the column is\njust the column defined in tech.ml.dataset, the library that backs Tablecloth.\n\nThe difference is that now when you are using Tablecloth you have the option\nof interacting directly with a column using an API that provides a set of\noperations that always take and return a column.\n\n## Basic Usage\n\nLet\u2019s go through a simple example. Let\u2019s say we have some test scores that we\nneed to analyze:\n\n    \n    \n    (def test-scores (tcc/column [85 92 78 88 95 83 80 90])) test-scores ;; => #tech.v3.dataset.column<int64>[8] null [85, 92, 78, 88, 95, 83, 80, 90]\n\nNow that we have these values in a column, we can easily perform operations on\nthem:\n\n    \n    \n    (tcc/mean test-scores) ;; => 86.375 (tcc/standard-deviation test-scores) ;; => 5.926634795564849\n\nThere are a many operations that one can perform. At the moment, the available\noperations are those that you would have previously accessed by importing the\ntech.v3.datatype.functional namespace from dtype-next.\n\nTo get a fuller picture of the Column API and how it works, please consult the\nColumn API section in the Tablecloth documentation.\n\n## Easier Column Operations on the Dataset\n\nThe changes we\u2019ve deployed also improve the expressive power of Tablecloth\u2019s\nstandard Dataset API. Previously, if you needed to do something simple like a\ngroup by and aggregation on a column in a dataset, the code could become\nunnecessarily verbose:\n\n    \n    \n    (defonce stocks (tc/dataset \"https://raw.githubusercontent.com/techascent/tech.ml.dataset/master/test/data/stocks.csv\" {:key-fn keyword})) (tc/column-names stocks) (-> stocks (tc/group-by [:symbol]) (tc/aggregate (fn [ds] (-> ds :price tech.v3.datatype.functional/mean)))) ;; => _unnamed [5 2]: | :symbol | summary | |---------|-------------:| | MSFT | 24.73674797 | | AMZN | 47.98707317 | | IBM | 91.26121951 | | GOOG | 415.87044118 | | AAPL | 64.73048780 |\n\nWith the new column operations within for datasets, you can now simply write:\n\n    \n    \n    (-> stocks (tc/group-by [:symbol]) (tc/mean [:price]))\n\nThe same set operations available to be run on the column can be called on\ncolumns in the datasest. However, when operating a dataset, functions that\nwould return a scalar value act as aggregator functions, as seen above.\n\nFunctions that would return a new column allow the user to specify a target\ncolumn to be added to the dataset, as in this example where we first use the\nmethod above to add a column with the mean back to stocks:\n\n    \n    \n    (def stocks-with-mean (-> stocks (tc/group-by [:symbol]) (tc/mean [:price]) (tc/rename-columns {\"summary\" :mean-price}) (tc/inner-join stocks :symbol))) stocks-with-mean ;; => inner-join [560 4]: ;; | :symbol | :mean-price | :date | :price | ;; |---------|------------:|------------|-------:| ;; | MSFT | 24.73674797 | 2000-01-01 | 39.81 | ;; | MSFT | 24.73674797 | 2000-02-01 | 36.35 | ;; | MSFT | 24.73674797 | 2000-03-01 | 43.22 | ;; | MSFT | 24.73674797 | 2000-04-01 | 28.37 |\n\nThen we use a dataset column operation that returns a column \u2013 column\ndivision, in this case \u2013 to add a new column holding the relative daily price\nof the stock:\n\n    \n    \n    (-> stocks-with-mean (tc// :relative-daily-price [:price :mean-price])) ;; => inner-join [560 5]: ;; | :symbol | :mean-price | :date | :price | :relative-daily-price | ;; |---------|------------:|------------|-------:|----------------------:| ;; | MSFT | 24.73674797 | 2000-01-01 | 39.81 | 1.60934655 | ;; | MSFT | 24.73674797 | 2000-02-01 | 36.35 | 1.46947368 | ;; | MSFT | 24.73674797 | 2000-03-01 | 43.22 | 1.74719814 | ;; | MSFT | 24.73674797 | 2000-04-01 | 28.37 | 1.14687670 |\n\nFor more information, on these operations, please consult the documentation\nhere.\n\n## Thanks to Clojurist Together\n\nThis contribution to Tablecloth was supported by Clojurists Together through\ntheir Quarterly Fellowships for open source development.\n\nI welcome feedback, so please write to me via email or twitter with any\ncomments and/or questions.\n\nCopyright \u00a9 2018. All information placed here is in public domain.\n\n", "frontpage": false}
