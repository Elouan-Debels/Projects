{"aid": "40066560", "title": "Supabase Auth supports anonymous sign-ins", "url": "https://supabase.com/blog/anonymous-sign-ins", "domain": "supabase.com", "votes": 9, "user": "xytofs", "posted_at": "2024-04-17 16:02:56", "comments": 0, "source_title": "Supabase Auth now supports Anonymous Sign-ins", "source_text": "Supabase Auth now supports Anonymous Sign-ins\n\nGeneral Availability Week: Day 3\n\nLearn more\n\nBack\n\nBlog\n\n# Supabase Auth now supports Anonymous Sign-ins\n\n2024-04-17\n\n\u2022\n\n7 minute read\n\nKang Ming TayEngineering\n\nSupabase Auth now supports anonymous sign-ins, one of our most-requested\nfeatures by the community.\n\nAnonymous sign-ins can be used to create temporary users who haven\u2019t signed up\nfor your application yet. This lowers the friction for new users to try out\nyour product since they don\u2019t have to provide any signup credentials.\n\n## Enabling Anonymous sign-ins#\n\nYou can enable anonymous sign-ins for your project today from the dashboard:\n\nFor local development, upgrade your Supabase CLI and add the config to the\nconfig.toml file:\n\n1\n\n[auth]\n\n2\n\nenable_anonymous_sign_ins = true\n\nYou can create an anonymous user through the Javascript, Flutter or Swift SDKs\ntoday. Here\u2019s how you can create an anonymous user using supabase-js .\n\n1\n\nconst { data, error } = await supabase\n\n2\n\n.auth\n\n3\n\n.signInAnonymously()\n\n## Terminology#\n\nProfiles created with anonymous sign-ins are also authenticated!\n\nOnce you call .signInAnonymously() you have moved the user into an\nauthentication flow, and we treat them like a signed in user:\n\n## Restricting access for anonymous users#\n\nLike a permanent user, anonymous users are persisted in the auth.users table:\n\nid| role| email| is_anonymous  \n---|---|---|---  \ne053e470-afa1-4625-8963-37adb862fd11| authenticated| NULL| true  \n5563108e-ac81-4063-9288-4f3db068efa1| authenticated| luke@starwars.com| false  \n  \nAn anonymous user can be identified by the is_anonymous claim returned in the\nuser\u2019s JWT, which is accessible from your Row Level Security policies (RLS).\nThis is helpful if you want to limit access to certain features in your\napplication.\n\nFor example, let\u2019s say that we have an online forum where users can create and\nread posts.\n\nGiven this table to store the posts:\n\n1\n\ncreate table public.posts (\n\n2\n\nid serial primary key,\n\n3\n\nname text not null,\n\n4\n\ndescription text\n\n5\n\n);\n\nIf we only want to allow permanent users to create posts, we can check if the\nuser is anonymous by inspecting the JWT select auth.jwt() ->> 'is_anonymous'.\n\nUsing this function in an RLS policy:\n\n1\n\ncreate policy \"Only permanent users can create posts\"\n\n2\n\non public.posts\n\n3\n\nfor insert\n\n4\n\nto authenticated -- Note: user is still authenticated\n\n5\n\nwith check (\n\n6\n\n(select auth.jwt() ->> 'is_anonymous')::boolean is false\n\n7\n\n);\n\nRLS gives us full flexibility to create a variety of rules.\n\nFor example, to allow read access for permanent users for all posts and limit\nanonymous users to posts created today:\n\n1\n\ncreate policy \"Limit access to anonymous users\"\n\n2\n\non public.posts\n\n3\n\nfor select\n\n4\n\nto authenticated -- Note: user is still authenticated\n\n5\n\nusing (\n\n6\n\ncase\n\n7\n\nwhen (select (auth.jwt() ->> 'is_anonymous'))::boolean is true\n\n8\n\nthen (created_at >= current_date)\n\n9\n\nelse\n\n10\n\ntrue\n\n11\n\nend\n\n12\n\n);\n\n## Convert an anonymous user to a permanent user#\n\nAt some point, an anonymous user may decide they want to create a post. This\nis where we prompt them to sign up for an account which converts them to a\npermanent user.\n\n##### An anonymous user is considered a permanent user when they have an\nidentity associated to them.\n\nAfter they have been converted, the user id remains the same, which means that\nany data associated with the user\u2019s id would be carried over.\n\nSupabase Auth provides 2 ways to achieve this:\n\n  1. Link an email or phone identity\n  2. Link an OAuth identity\n\n### Link an email or phone identity#\n\nTo link an email or phone identity:\n\n1\n\nconst { data, error } = await supabase\n\n2\n\n.auth\n\n3\n\n.updateUser({ email })\n\n### Link an OAuth identity#\n\nTo link an OAuth identity to an anonymous user, you need to enable manual\nlinking for your project. Learn about how identity linking works with Supabase\nAuth.\n\nOnce enabled, you can call the linkIdentity() method:\n\n1\n\nconst { data, error } = await supabase\n\n2\n\n.auth\n\n3\n\n.linkIdentity({ provider: 'google' })\n\n## Impersonating an anonymous user#\n\nWhen creating RLS policies to differentiate access for an anonymous user, you\ncan leverage the user impersonation feature in the SQL editor to test out your\npolicies:\n\nDatabase role settings in the SQL editor. You can impersonate an anonymous\nuser by selecting the user from the dropdown.\n\nThe user management screen provides an option to filter by anonymous users,\nwhich can help to know how many anonymous users have been created.\n\nFiltering by anonymous users on the Users page.\n\n## What\u2019s next#\n\nManaging anonymous users can be tricky, especially when you have a lot of\nvisitors to your site. We\u2019re working on an \u201cautomatic clean-up\u201d option to\ndelete anonymous users that have been inactive for more than 30 days. In the\nmeantime, since anonymous users are stored in the auth schema in your\ndatabase, you can clean up orphaned anonymous users by running the following\nquery:\n\n1\n\n\\-- deletes anonymous users created more than 30 days ago\n\n2\n\ndelete from auth.users\n\n3\n\nwhere is_anonymous is true and created_at < now() - interval '30 days';\n\nWe are also working on a linter to check your RLS policies and highlight those\nthat allow anonymous users access - stay tuned for updates later this month!\n\n## Getting started#\n\n  * Docs: Anonymous sign-ins\n  * API method references: Javascript, Flutter, Swift\n\nWeek\n\n15-19 April\n\nDay 1 -Supabase is officially launching into General AvailabilityDay 2\n-Supabase Functions now supports AI modelsDay 3 -Supabase Auth now supports\nAnonymous sign-ins\n\nBuild Stage\n\n01 -PostgreSQL Index Advisor02 -Branching now Publicly Available03 -Oriole\njoins Supabase04 -Supabase on AWS Marketplace05 -Supabase Bootstrap06\n-Supabase SwiftOpen Source Hackathon 2024Community Meetups\n\nShare this article\n\nNext post\n\n#### AI Inference now available in Supabase Edge Functions\n\n16 April 2024\n\nlaunch-week\n\ndatabase\n\nOn this page\n\n  * Enabling Anonymous sign-ins\n  * Terminology\n  * Restricting access for anonymous users\n  * Convert an anonymous user to a permanent user\n\n    * Link an email or phone identity\n    * Link an OAuth identity\n  * Impersonating an anonymous user\n  * What\u2019s next\n  * Getting started\n\nShare this article\n\n## Build in a weekend, scale to millions\n\n## Footer\n\nWe protect your data.More on Security\n\n  * SOC2 Type 2 Certified\n  * HIPAA Compliant\n\nTwitter\n\nGitHub\n\nDiscord\n\nYoutube\n\n###### Product\n\n  * Database\n\n  * Auth\n\n  * Functions\n\n  * Realtime\n\n  * Storage\n\n  * Vector\n\n  * Pricing\n\n  * GA Week\n\n###### Resources\n\n  * Support\n\n  * System Status\n\n  * Become a Partner\n\n  * Integrations\n\n  * Experts\n\n  * Brand Assets / Logos\n\n  * Security and Compliance\n\n  * DPA\n\n  * SOC2\n\n  * HIPAA\n\n###### Developers\n\n  * Documentation\n\n  * Changelog\n\n  * Contributing\n\n  * Open Source\n\n  * SupaSquad\n\n  * DevTo\n\n  * RSS\n\n###### Company\n\n  * Blog\n\n  * Customer Stories\n\n  * Careers\n\n  * Company\n\n  * Terms of Service\n\n  * Privacy Policy\n\n  * Acceptable Use Policy\n\n  * Support Policy\n\n  * Service Level Agreement\n\n  * Humans.txt\n\n  * Lawyers.txt\n\n  * Security.txt\n\n\u00a9 Supabase Inc\n\nWe only collect analytics essential to ensuring smooth operation of our\nservices. Learn more\n\nLearn more\n\n", "frontpage": true}
