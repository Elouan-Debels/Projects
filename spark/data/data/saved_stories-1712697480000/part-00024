{"aid": "39979078", "title": "Writing highly scalable backends in UDP", "url": "https://mas-bandwidth.com/writing-highly-scalable-backends-in-udp/", "domain": "mas-bandwidth.com", "votes": 5, "user": "gafferongames", "posted_at": "2024-04-09 13:12:18", "comments": 0, "source_title": "Writing highly scalable backends in UDP", "source_text": "Writing highly scalable backends in UDP\n\nM\u00e1s Bandwidth\n\nSign in Subscribe\n\nApr 9, 2024 3 min read bandwidth\n\n# Writing highly scalable backends in UDP\n\nIn this article I share an interview question I've used for years at Network\nNext. How to implement a highly scalable backend in UDP. Can you solve it?\n\nPhoto by Samuel Ferrara / Unsplash\n\nI'm Glenn Fiedler and welcome to M\u00e1s Bandwidth, my new blog at the\nintersection of game network programming and scalable backend engineering.\n\nImagine you have a system you need to code and it needs to scale up to many\nmillions of requests per-second. The well-trodden path is to implement this in\nHTTPS with a load balancer in front of some VMs that autoscale according to\ndemand. For example, you could implement this in Google Could with load\nbalancer in front of a MIG and implement the HTTPS handlers in Golang\n(trivial). There's plenty of information about how to do this online, and it's\nrelatively easy to scale this up to many millions of requests per-second.\n\nBut what if you needed to do the same thing in UDP instead of HTTPS?\n\nWell, now you're off the beaten path, and you'll find very little information\nabout how to do this. This is actually something we needed to do at Network\nNext, my startup that provides network acceleration technology for multiplayer\ngames. Our SDK runs on game consoles like PS4, PS5, Nintendo Switch and XBox\nas well as Windows, MacOS and Linux, and avoiding the overhead and complexity\nof porting and maintaining something like libcurl or mbedtls on consoles is\nbeneficial to our customers.\n\nTo be clear, I'm not advocating that you stop using HTTPS and switch your\nbackend to UDP. If you're happy with HTTPS and it's doing what you need,\nawesome! Stay on the well trodden path. But if, like me, you have some use\ncase that is better with UDP, or even if you are just curious about how such a\nstrange approach can work, stick around and you may learn some new things.\n\n## The Perfect Interview Question\n\nThis idea of building a scalable backend with UDP is so out there that I've\nused it as an interview question at Network Next for years. You simply could\nnot google this and find any example source code showing how to do it. To\nsolve this problem, you need to take in many sources and creatively synthesize\nyour own result, exactly what I'm looking for from engineers at Network Next.\n\nThe actual question itself looks deceptively easy:\n\n> You are tasked with creating a client/server application in Golang that runs\n> in Google Cloud. The client in this application must communicate with the\n> server over UDP.\n>\n> Each client sends 100 requests per-second. Each request is 100 bytes long.\n> The server processes each request it receives and forwards it over HTTP to\n> the backend.\n>\n> The backend processes the request, and returns a response containing the\n> FNV1a 64 bit hash of the request data. The server returns the response it\n> receives from the backend down to the client over UDP.\n>\n> Implement the client, server and backend in Golang and Terraform such that\n> it scales to more than 1M users. Provide estimates of the cost to run the\n> solution at 1M users per-month, as well as some options to reduce the cost.\n>\n> IMPORTANT: When you load test this system, make sure you are communicating\n> between the client, server and backend using internal addresses to avoid\n> egress bandwidth charges.\n\nWhile I'm confident that an experienced senior engineer could find a solution\nover a weekend, I gave engineers as much time to research and solve the\nproblem at home as they needed. What matters is the quality of the solution\nand the thinking process of the engineer, not how quickly they implement it.\nAnd of course, I wanted to respect that engineers may be implementing this in\ntheir spare time while working another job.\n\nIf you'd like to have a go at solving this yourself, now is the time.\n\nI'll publish the full solution April 16, 2024, one week from now.\n\n### Published by:\n\n### You might also like...\n\nApr\n\n01\n\n## XDP for Game Programmers\n\nLearn how you can use XDP/eBPF to get maximum bandwidth for your applications.\n\nApr 1, 2024\n\n15 min read\n\nM\u00e1s Bandwidth \u00a9 2024\n\nPowered by Ghost\n\n", "frontpage": true}
