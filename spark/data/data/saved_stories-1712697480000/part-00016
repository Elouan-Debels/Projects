{"aid": "39979026", "title": "Changes to Rust's WASI Targets", "url": "https://blog.rust-lang.org/2024/04/09/updates-to-rusts-wasi-targets.html", "domain": "rust-lang.org", "votes": 2, "user": "ingve", "posted_at": "2024-04-09 13:07:19", "comments": 0, "source_title": "Changes to Rust's WASI targets | Rust Blog", "source_text": "Changes to Rust's WASI targets | Rust Blog\n\n## Changes to Rust's WASI targets\n\nApr. 9, 2024 \u00b7 Yosh Wuyts\n\nWASI 0.2 was recently stabilized, and Rust has begun implementing first-class\nsupport for it in the form of a dedicated new target. Rust 1.78 will introduce\nnew wasm32-wasip1 (tier 2) and wasm32-wasip2 (tier 3) targets. wasm32-wasip1\nis an effective rename of the existing wasm32-wasi target, freeing the target\nname up for an eventual WASI 1.0 release. Starting Rust 1.78 (May 2nd, 2024),\nusers of WASI 0.1 are encouraged to begin migrating to the new wasm32-wasip1\ntarget before the existing wasm32-wasi target is removed in Rust 1.84 (January\n5th, 2025).\n\nIn this post we'll discuss the introduction of the new targets, the motivation\nbehind it, what that means for the existing WASI targets, and a detailed\nschedule for these changes. This post is about the WASI targets only; the\nexisting wasm32-unknown-unknown and wasm32-unknown-emscripten targets are\nunaffected by any changes in this post.\n\n## Introducing wasm32-wasip2\n\nAfter nearly five years of work the WASI 0.2 specification was recently\nstabilized. This work builds on WebAssembly Components (think: strongly-typed\nABI for Wasm), providing standard interfaces for things like asynchronous IO,\nnetworking, and HTTP. This will finally make it possible to write asynchronous\nnetworked services on top of WASI, something which wasn't possible using WASI\n0.1.\n\nPeople interested in compiling Rust code to WASI 0.2 today are able to do so\nusing the cargo-component tool. This tool is able to take WASI 0.1 binaries,\nand transform them to WASI 0.2 Components using a shim. It also provides\nnative support for common cargo commands such as cargo build, cargo test, and\ncargo run. While it introduces some inefficiencies because of the additional\ntranslation layer, in practice this already works really well and people\nshould be enough able to get started with WASI 0.2 development.\n\nWe're however keen to begin making that translation layer obsolete. And for\nthat reason we're happy to share that Rust has made its first steps towards\nthat with the introduction of the tier 3 wasm32-wasip2 target landing in Rust\n1.78. This will initially miss a lot of expected features such as stdlib\nsupport, and we don't recommend people use this target quite yet. But as we\nfill in those missing features over the coming months, we aim to eventually\nhit meet the criteria to become a tier 2 target, at which point the\nwasm32-wasip2 target would be considered ready for general use. This work will\nhappen through 2024, and we expect for this to land before the end of the\ncalendar year.\n\n## Renaming wasm32-wasi to wasm32-wasip1\n\nThe original name for what we now call WASI 0.1 was \"WebAssembly System\nInterface, snapshot 1\". Rust shipped support for this in 2019, and we did so\nknowing the target would likely undergo significant changes in the future.\nWith the knowledge we have today though, we would not have chosen to introduce\nthe \"WASI, snapshot 1\" target as wasm32-wasi. We should have instead chosen to\nadd some suffix to the initial target triple so that the eventual stable WASI\n1.0 target can just be called wasm32-wasi.\n\nIn anticipation of both an eventual WASI 1.0 target, and to preserve\nconsistency between target names, we'll begin rolling out a name change to the\nexisting WASI 0.1 target. Starting in Rust 1.78 (May 2nd, 2024) a new\nwasm32-wasip1 target will become available. Starting Rust 1.81 (September 5th,\n2024) we will begin warning existing users of wasm32-wasi to migrate to\nwasm32-wasip1. And finally in Rust 1.84 (January 9th, 2025) the wasm32-wasi\ntarget will no longer be shipped on the stable release channel. This will\nprovide an 8 month transition period for projects to switch to the new target\nname when they update their Rust toolchains.\n\nThe name wasip1 can be read as either \"WASI (zero) point one\" or \"WASI preview\none\". The official specification uses the \"preview\" moniker, however in most\ncommunication the form \"WASI 0.1\" is now preferred. This target triple was\nchosen because it not only maps to both terms, but also more closely resembles\nthe target terminology used in other programming languages. This is something\nthe WASI Preview 2 specification also makes note of.\n\n## Timeline\n\nThis table provides the dates and cut-offs for the target rename from\nwasm32-wasi to wasm32-wasip1. The dates in this table do not apply to the\nnewly-introduced wasm32-wasi-preview1-threads target; this will be renamed to\nwasm32-wasip1-threads in Rust 1.78 without going through a transition period.\nThe tier 3 wasm32-wasip2 target will also be made available in Rust 1.78.\n\ndate| Rust Stable| Rust Beta| Rust Nightly| Notes  \n---|---|---|---|---  \n2024-02-08| 1.76| 1.77| 1.78| wasm32-wasip1 available on nightly  \n2024-03-21| 1.77| 1.78| 1.79| wasm32-wasip1 available on beta  \n2024-05-02| 1.78| 1.79| 1.80| wasm32-wasip1 available on stable  \n2024-06-13| 1.79| 1.80| 1.81| warn if wasm32-wasi is used on nightly  \n2024-07-25| 1.80| 1.81| 1.82| warn if wasm32-wasi is used on beta  \n2024-09-05| 1.81| 1.82| 1.83| warn if wasm32-wasi is used on stable  \n2024-10-17| 1.82| 1.83| 1.84| wasm32-wasi unavailable on nightly  \n2024-11-28| 1.83| 1.84| 1.85| wasm32-wasi unavailable on beta  \n2025-01-09| 1.84| 1.85| 1.86| wasm32-wasi unavailable on stable  \n  \n## Conclusion\n\nIn this post we've discussed the upcoming updates to Rust's WASI targets. Come\nRust 1.78 the wasm32-wasip1 (tier 2) and wasm32-wasip2 (tier 3) targets will\nbe added. In Rust 1.81 we will begin warning if wasm32-wasi is being used. And\nin Rust 1.84, the existing wasm32-wasi target will be removed. This will free\nup wasm32-wasi to eventually be used for a WASI 1.0 target. Users will have 8\nmonths to switch to the new target name when they update their Rust\ntoolchains.\n\nThe wasm32-wasip2 target marks the start of native support for WASI 0.2. In\norder to target it today from Rust, people are encouraged to use cargo-\ncomponent tool instead. The plan is to eventually graduate wasm32-wasip2 to a\ntier-2 target, at which point cargo-component will be upgraded to support it\nnatively instead.\n\nWith WASI 0.2 finally stable, it's an exciting time for WebAssembly\ndevelopment. We're happy for Rust to begin implementing native support for\nWASI 0.2, and we're excited for what this will enable people to build.\n\n#### Get help!\n\n  * Documentation\n  * Contact the Rust Team\n\n#### Terms and policies\n\n  * Code of Conduct\n  * Licenses\n  * Logo Policy and Media Guide\n  * Security Disclosures\n  * All Policies\n\n#### Social\n\n#### RSS\n\n  * Main Blog\n  * \"Inside Rust\" Blog\n\nMaintained by the Rust Team. See a typo? Send a fix here!\n\n", "frontpage": false}
