{"aid": "40068856", "title": "Show HN: Highlights of RisingWave v1.8: The Open-Source Streaming Database", "url": "https://risingwave.com/blog/highlights-of-risingwave-v1-8-the-open-source-streaming-database/", "domain": "risingwave.com", "votes": 2, "user": "Chuanwei", "posted_at": "2024-04-17 19:07:18", "comments": 0, "source_title": "Highlights of RisingWave v1.8: The Open-Source Streaming Database", "source_text": "Highlights of RisingWave v1.8: The Open-Source Streaming Database\n\nSkip to content\n\nHands-on tutorial for data streaming developers! Start stream processing now \u2192\n\nRisingWave: Open-Source Streaming Database\n\nReal-time insights on streaming data useing SQL\n\n  * [Products]\n\n    * [RisingWave Cloud\n\nA fully managed, cloud-hosted RisingWave cluster\n\n]\n\n    * [RisingWave Database\n\nOpen-source distributed streaming database\n\n]\n\n  * [Pricing]\n  * [Use Cases]\n  * [Resources]\n\n    * [Docs\n\nThe official user documentation of RisingWave\n\n]\n\n    * [Blogs\n\nDiscover new perspectives and insights\n\n]\n\n    * [Videos\n\nLearn more through our videos\n\n]\n\n    * [Community\n\nDiscover the impact you can have as a member\n\n]\n\n    * [Events\n\nJoin us at an upcoming event or review past events\n\n]\n\n    * [FAQs\n\nFrequently Asked Questions\n\n]\n\n  * [Contact]\n\n  * [LOG IN]\n  * [SIGN UP]\n\n6.2K\n\n[ Blogs ]\n\n# Highlights of RisingWave v1.8: The Open-Source Streaming Database\n\nJoin us in exploring some of the most highly anticipated and prominent\nfeatures of this new release. Additional improvements are made to Python UDFs,\nRust UDFs, and connectors, providing users with more flexibility and control\nover their database. A breaking change regarding decoupled sinks is also\nincluded, so read on to learn how to avoid compatibility issues.\n\ncontents_\n\nBreaking change: decoupling sinks\n\nEmbedded UDFs\n\nEmbedded Python UDFs\n\nEmbedded Rust UDFs\n\nRefresh schema\n\nRANGE in window functions\n\nRuby client support\n\nNew source connectors\n\nIceberg source\n\nMongoDB CDC\n\nSQL meta store\n\nWe at RisingWave are happy to announce the release of v1.8 this month! This\nrelease is again filled with new features, updates to existing features, and\nbug fixes. Additional improvements are made to Python UDFs, Rust UDFs, and\nconnectors, providing users with more flexibility and control over their\ndatabase. A breaking change regarding decoupled sinks is also included, so\nread on to learn how to avoid compatibility issues.\n\nIf you are interested in the full list of v1.8 updates, see the release note.\n\n## Breaking change: decoupling sinks\n\nStarting from v1.8, RisingWave has changed to a more lightweight method for\nstate cleaning, affecting sinks with decouple enabled. This was first\nimplemented in v1.6, but sink decoupling compatibility will not be maintained\ngoing forward. It is recommended for users with decoupled sinks to either not\ndirectly upgrade to v1.8, or to delete all sinks with decoupled enabled before\nupgrading.\n\nTo check if you have any sinks with decoupled enabled, first upgrade to v1.7.\nIn v1.7, we support the internal table rw_sink_decouple, which allows you to\ncheck the decouple status of all sinks. There are no compatilibility issues\nwhen upgrading from v1.6 to v1.7. Next, run the following query.\n\n    \n    \n    SELECT * FROM rw_sink_decouple WHERE is_decouple AND watermark_vnode_count < 256;\n\nThe query will return any sinks that may run into compatibility issues if you\nupgrade. If the query returns empty results, it is safe to upgrade to v1.8.\n\n## Embedded UDFs\n\nIn v1.7, we introduced support for UDFs in additional languages. With this\nrelease, we continue to improve the functionality of UDFs. Now you can create\nembedded UDFs in Python and Rust, which means these UDFs are defined,\ncompiled, and ran internally in RisingWave. This way, there is no need to\ninstall the external API. However, you are limited from using external\nlibraries or file systems.\n\n### Embedded Python UDFs\n\nWhen creating an embedded Python UDF, use the CREATE FUNCTION command. Here is\nan example.\n\n    \n    \n    CREATE FUNCTION gcd(a int, b int) RETURNS int LANGUAGE python AS $$ def gcd(a, b): while b != 0: a, b = b, a % b return a $$;\n\nThe function definition is written using Python syntax. You also have the\noption to create table functions and to have your function return struct\ntypes.\n\nCreating an embedded UDFs means that you are limited to pure computation logic\nbut it is useful if you need to repeatedly use complex computations. However,\nyou do have access to the json, decimal, re, math, and datetime libraries.\nAfter the function is created, you can call it like any other built-in\nfunction.\n\nSome built-in functions are not allowed. For the full list, see the official\ndocumentation linked below.\n\n### Embedded Rust UDFs\n\nLikewise with embedded Python UDFs, use the CREATE FUNCTION command to define\nan embedded UDF.\n\n    \n    \n    CREATE FUNCTION gcd(int, int) RETURNS int LANGUAGE rust AS $$ fn gcd(mut x: i32, mut y: i32) -> i32 { while y != 0 { (x, y) = (y, x % y); } return x; } $$;\n\nThe function body is defined using Rust syntax. And just like embedded Python\nUDFs, you can create table functions and have your function return struct\ntypes. While additional external libraries are not supported, you can still\nuse the standard libraries chrono, rust_decimal, and serde_json. Once your\nfunction is defined, you can use it like any built-in function.\n\nFor details on the syntax, see the documentation linked below.\n\nFor more details, see:\n\n  * Use UDFs in Rust\n\n  * Embedded Python UDFs\n\n## Refresh schema\n\nPreviously, to refresh the schema of a source defined with a Schema Registry,\nyou needed to redefine its schema registry using the ALTER SOURCE command,\nwhich was quite verbose. Furthermore, refreshing the schema of a table was not\nsupported.\n\nIn this release, we introduce the REFRESH SCHEMA syntax, making it much easier\nto update the schema of the table or source in RisingWave. Note that the data\nFORMAT and ENCODE options cannot be changed when updating the schema. The\nsyntax of refreshing the schema of a source is as follows.\n\n    \n    \n    ALTER SOURCE s REFRESH SCHEMA;\n\nNow the schema of the source s1 will be updated with any changes made to the\nsource schema.\n\nSimilarly, the syntax to refresh the schema of a table created with an\nexternal connector is as follows.\n\n    \n    \n    ALTER TABLE t REFRESH SCHEMA;\n\nIf upon refreshing the schema, certain columns are dropped but those columns\nare referenced by other downstream fragments, such as a materialized view, the\ncommand will not work.\n\nFor more details, see:\n\n  * Refresh the schema registry\n\n  * ALTER SOURCEcommand\n\n  * ALTER TABLE command\n\n## RANGE in window functions\n\nWhen employing a window function in your SQL queries, the RANGE clause can be\nused to specify the range of rows relative to the current row that are\nincluded in the window frame. It operates on a range of values based on the\nordering of rows. The RANGE can be specified as follows.\n\n    \n    \n    RANGE BETWEEN frame_start AND frame_end\n\nHere, frame_start and frame_end describe which rows to perform the\ncalculations on.\n\nframe_start can be any one of UNBOUNDED PRECEDING, CURRENT ROW, a certain\nnumber of rows, or a certain time interval. For instance, the following clause\nincludes all rows from 1 day before to the current row.\n\n    \n    \n    RANGE BETWEEN 1 DAY PRECEDING AND CURRENT ROW\n\nframe_end can be UNBOUNDED FOLLOWING, CURRENT ROW, a certain number of rows,\nor a time interval. The following clause includes all rows after the current\nrow.\n\n    \n    \n    RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n\nFor more details, see:\n\n  * Window functions (OVER clause)\n\n## Ruby client support\n\nIf you have an external Ruby application, you can now interact with RisingWave\nfrom it using any third-party PostgreSQL driver. Our official documentation\ngoes over this process using the ruby-pg driver. The following lines of code\nin Ruby allows you to establish a connection with the RisingWave database,\nassuming default database credentials.\n\n    \n    \n    require 'pg' conn = PG.connect(host: '127.0.0.1', port: 4566, dbname: 'dev', user: 'root')\n\nOnce connected, you can run SQL queries just like you would in RisingWave, or\nemploy any of the built-in features that ruby-pg has to offer.\n\nThe ruby-pg driver ensures optimal performance and compatibility with\nPostgreSQL features and database operations, making it suitable if you are\nlooking to build Ruby applications with demanding performance requirements.\n\nFor more details, see:\n\n  * Use RisingWave in your Ruby application\n\n## New source connectors\n\nIn addition to the numerous improvements made to existing source and sink\nconnectors, we introduce two new source connectors with this release,\nproviding you with more flexibility on how you want to build your stream\nprocessing pipeline.\n\n### Iceberg source\n\nYou can now batch-read data from an Iceberg source with the new Iceberg source\nconnector. Like with all other source connectors in RisingWave, you can start\ningesting data by using a CREATE SOURCE command. Note that the source table in\nIceberg must be a COW table or cannot be deleted files.\n\n    \n    \n    CREATE SOURCE iceberg_source ( id bigint, user_name varchar ) WITH ( connector = 'iceberg', catalog.type = 'storage', warehouse.path = 's3a://hummock001/', s3.endpoint = '<http://127.0.0.1:9301>', s3.access.key = 'admin', s3.secret.key = 'admin', s3.region = 'us-east-1', database.name='db_name', table.name='table_name' );\n\nThe supported catalog types are storage, jdbc, hive, and rest.\n\nFurthermore, it is optional to specify the columns when creating an Iceberg\nsource. All columns from the table are automatically derived in this case.\n\n### MongoDB CDC\n\nPreviously, ingesting CDC data from MongoDB into RisingWave required you to\nset up a pipeline that included a Debezium connector, for MongoDB to track\ndatabase changes and record them in a Kafka topic, and a Kafka connector that\nyou connect to in RisingWave. The new MongoDB CDC connector simplifies the\nprocess by allowing you to directly connect to MongoDB from RisingWave. All\nyou need is a CREATE TABLE command to establish a direct connection with\nMongoDB.\n\n    \n    \n    CREATE TABLE mongocdc( _id varchar PRIMARY KEY, payload jsonb ) WITH ( connector = 'mongodb_cdc', mongodb.url = 'mongodb://localhost:27017/?replicaSet=rs0', collection.name = 'dbname.*, foo.*' );\n\nYou can choose to ingest data from collections from multiple databases in the\n[collection.name](<http://collection.name>) parameter, or from specific\ncollections.\n\nFor more details, see:\n\n  * Ingest data from Apache Iceberg\n\n  * Ingest data from MongoDB CDC\n\n## SQL meta store\n\nWhile etcd is still supported for backward compatibility, we have also\nintroduced the technical preview of PostgreSQL, MySQL, and SQLite as new\noptions for metadata storage.\n\nPostgreSQL offers greater robustness when it comes to large volumes of\nmetadata. For example, when creating over 1,000 materialized views and sinks,\netcd is prone to be overwhelmed and lead to out-of-memory errors, whereas\nPostgreSQL is more resilient.\n\nIn a production environment, we recommend deploying an instance with 2 CPU\ncores and 4 GB memory at minimum for PostgreSQL, along with active replication\nfor high availability.\n\nFor more details, see:\n\n  * Start RisingWave using Docker Compose | RisingWave\n\nConclusion\n\nThese are just some of the new features included with the release of\nRisingWave v1.8. To see the entire list of updates, which includes updates\nmade data formats and system catalogs, please refer to the detailed release\nnotes.\n\nLook out for next month\u2019s edition to see what new, exciting features will be\nadded. Check out the RisingWave GitHub repository to stay up to date on the\nnewest features and planned releases.\n\nSign up for our monthly newsletter if you\u2019d like to keep up to date on all the\nhappenings with RisingWave. Follow us on Twitter and LinkedIn, and join our\nSlack community to talk to our engineers and hundreds of streaming enthusiasts\nworldwide.\n\n  * /*Copy Link*/\n\n  * /*Twitter*/\n\n  * /*Linkedin*/\n\nEmily Le\n\nDeveloper Advocate\n\n  * Copy Link\n  * Twitter\n  * Linkedin\n\nRelated Posts_\n\n[ Blogs ]\n\nMeet RisingWave Labs at Kafka Summit London\n\nWe are thrilled to be joining all data processing practitioners at Kafka\nSummit London! This year, we are happy to offer several opportunities for you\nall to connect with us\u2014between a pre-Kafka warm-up and Yingjun\u2019s talk in\nbreakout room 1, stop by booth 206!\n\n3 mins Read Mar 13, 2024 Read More About Meet RisingWave Labs at Kafka Summit\nLondon\n\n[ Blogs ]\n\nHighlights of RisingWave v1.7: The Open-Source Streaming Database\n\nJoin us in exploring some of the most highly anticipated and prominent\nfeatures of this new release. These include improved UDF support, new SQL\nfunctions, new query syntax, and more.\n\n5 mins Read Mar 1, 2024 Read More About Highlights of RisingWave v1.7: The\nOpen-Source Streaming Database\n\n[ Blogs ]\n\nRisingWave Labs and Voltron Data Collaborate to Accelerate Stream Processing\n\nRisingWave Labs is excited to announce a strategic collaboration with Voltron\nData, a pioneering data analytics company, to deliver a seamless real-time\ndata processing experience to Python developers.\n\n2 mins Read Feb 16, 2024 Read More About RisingWave Labs and Voltron Data\nCollaborate to Accelerate Stream Processing\n\nGET STARTED ON STREAM PROCESSING IN MINUTES_\n\n95 3RD ST, 2ND FLOOR, SAN FRANCISCO, CA 94103\n\n\u00a92024 RisingWave. All rights reserved.\n\nProducts\n\n  * RisingWave Cloud\n  * RisingWave Database\n\nResources\n\n  * Use Cases\n  * Docs\n  * Streaming Database\n  * Streaming SQL\n  * RisingWave vs Flink\n  * RisingWave vs ksqlDB\n  * Materialized Views\n\nCompany\n\n  * Contact Us\n  * Privacy Policy\n  * About Us\n  * Careers\n  * News and Press Coverage\n  * Partners\n\nProducts\n\n  * RisingWave Cloud\n  * RisingWave Database\n\nResources\n\n  * Use Cases\n  * Docs\n  * Streaming Database\n  * Streaming SQL\n  * RisingWave vs Flink\n  * RisingWave vs ksqlDB\n  * Materialized Views\n\nCompany\n\n  * Contact Us\n  * Privacy Policy\n  * About Us\n  * Careers\n  * News and Press Coverage\n  * Partners\n\n\u00a92024 RisingWave. All rights reserved.\n\nsign up successfully_\n\n#### Welcome to RisingWave community\n\nGet ready to embark on an exciting journey of growth and inspiration. Stay\ntuned for updates, exclusive content, and opportunities to connect with like-\nminded individuals.\n\nmessage sent successfully_\n\n#### Thank you for reaching out to us\n\nWe appreciate your interest in RisingWave and will respond to your inquiry as\nsoon as possible. In the meantime, feel free to explore our website for more\ninformation about our services and offerings.\n\nsubscribe successfully_\n\n#### Welcome to RisingWave community\n\nGet ready to embark on an exciting journey of growth and inspiration. Stay\ntuned for updates, exclusive content, and opportunities to connect with like-\nminded individuals.\n\n", "frontpage": false}
