{"aid": "40067875", "title": "Making Overture Maps Data More Efficient with GeoParquet and Apache Sedona", "url": "https://wherobots.com/overture-maps-data-cloud-native-geoparquet-apache-sedona/", "domain": "wherobots.com", "votes": 1, "user": "johnymontana", "posted_at": "2024-04-17 17:43:59", "comments": 0, "source_title": "Making Overture Maps Data More Efficient With GeoParquet And Apache Sedona", "source_text": "Making Overture Maps Data More Efficient With GeoParquet And Apache Sedona -\nWherobots\n\nSkip to content\n\n  * Try Wherobots\n\nMenu\n\n  * Products\n\n    * Wherobots CloudA cloud computing platform for every spatial analytics and AI need\n    * Sedona DBEnterprise-scale spatial analytics database engine\n    * PricingA flexible pricing model that fits your business needs and usage patterns\n  * Use Cases\n  * Developers\n\n    * Apache SedonaThe most scalable open source spatial data processing engine\n    * DocumentationFor technical details, tutorials, and hand-on code about Apache Sedona, SedonaDB and Wherobots Cloud\n  * Resources\n\n    * BlogsTechnical and thought leadership articles on spatial database, analytics, and AI\n    * NewsNews about Wherobots, Apache Sedona and Product releases\n    * VideosVideo content about Spatial Database, Analytics and AI\n  * Company\n\n    * TeamWherobots Team and Story\n    * CareersWherobots culture and career opportunities\n  * Contact\n\n  * Try Wherobots\n\n  * Linkedin\n  * Twitter\n  * Github\n  * Youtube\n\n7 Mins Read\n\n16 Apr 2024\n\n## Making Overture Maps Data More Efficient With GeoParquet And Apache Sedona\n\nThe latest release of Overture Maps data is now published in GeoParquet\nformat, allowing for more efficient spatial operations when selecting subsets\nof the dataset and enabling interoperability with a growing ecosystem of data\ntooling that supports the cloud-native GeoParquet format. In this post we\nexplore some of the motivations and advantages of publishing the [...]\n\nAuthors\n\n  * Feng Jiang\n  * Jia Yu\n  * William Lyon\n\nApache Sedona\n\nTABLE OF CONTENTS\n\n  * Understanding GeoParquet\n  * Benefits of GeoParquet\n  * The Role Of Apache Sedona\n  * Generating GeoParquet Files With Apache Sedona\n  * Analyze OMF GeoParquet Files with Sedona on Wherobots Cloud\n  * Conclusion\n\nContributors\n\n  * Feng Jiang\n\nSenior software engineer At Microsoft. Loving to build the maps with decent\ntech.\n\n  * Jia Yu\n\nJia Yu is a co-founder and the Chief Architect of Wherobots Inc. He is the PMC\nChair of Apache Sedona\n\n  * William Lyon\n\nDeveloper Relations At Wherobots\n\nShare Article\n\nThe latest release of Overture Maps data is now published in GeoParquet\nformat, allowing for more efficient spatial operations when selecting subsets\nof the dataset and enabling interoperability with a growing ecosystem of data\ntooling that supports the cloud-native GeoParquet format. In this post we\nexplore some of the motivations and advantages of publishing the Overture Maps\ndata as GeoParquet as well as the process used by Overture to generate and\npublish a large scale geospatial dataset as GeoParquet using Apache Sedona.\n\n#### Understanding GeoParquet\n\nBuilt upon Apache Parquet, GeoParquet is an open-source file format\nspecifically designed for storing geospatial data efficiently. Apache Parquet\nis a column-oriented data file format optimized for storing data efficiently\nin cloud data object stores like Amazon\u2019s S3 service. However Parquet lacks\nnative support for geospatial data. GeoParquet extends Parquet by defining a\nstandard for storing geometry data and associated metadata, such as the\nspatial bounding box and coordinate reference system for each file.\n\nIn a nutshell, GeoParquet adds the following information to the file metadata:\n\n  * Version: the GeoParquet specification version of this file\n  * Primary column: the main Geometry Type column should be considered when there are multiple Geometry Type columns stored in this file.\n  * Column metadata per Geometry Type column:\n\n    * Encoding of the geometry data. Currently only WKB format is supported.\n    * Geometry types: all possible geometry types occurred in this column, such as POINT, POLYGON, LINESTRING\n    * Coordinate reference system information, bounding box, geometry orientation, and so on\n\nIn GeoParquet, all geometric data is required to be housed in Parquet\u2019s Binary\nType. This data must adhere to the encoding specifications detailed in the\ncolumn metadata, which currently employs Well-Known Binary (WKB) encoding.\n\nThe storage of geometries in GeoParquet using Parquet\u2019s intrinsic binary\nformat ensures that standard Parquet readers can seamlessly access GeoParquet\nfiles. This feature significantly enhances GeoParquet\u2019s compatibility with\nexisting data systems. Nevertheless, a dedicated GeoParquet reader, designed\nto interpret GeoParquet metadata, can utilize this information for further\noptimizations and to execute more advanced geospatial operations.\n\n#### Benefits of GeoParquet\n\nGeoParquet integrates all the advantages of Parquet, such as its compact data\nstorage and rapid data retrieval capabilities. Additionally, GeoParquet\nintroduces a standardized approach for storing and accessing geospatial data.\nThis standardization significantly simplifies the process of data sharing and\nenhances interoperability across various systems and tools within the\ngeospatial data processing ecosystem.\n\nCrucially, GeoParquet enables specialized GeoParquet readers to optimize\ngeospatial queries, significantly enhancing the efficiency of data retrieval.\nThis optimization is particularly vital for applications demanding real-time\ndata processing and analysis.\n\nA significant contributor to this enhanced efficiency is the bounding box\ninformation (abbreviated as BBox) embedded in the GeoParquet file metadata.\nThe BBox effectively serves as a spatial index, streamlining the process of\ndata filtering. This is particularly useful when executing geospatially driven\nqueries. When a spatial query is executed \u2014 for instance, searching for all\npoints of interest within a certain area \u2014 the GeoParquet reader first checks\nthe BBox information. If the query\u2019s geographic area doesn\u2019t intersect with\nthe BBox of the data, the reader can immediately exclude that file from\nfurther consideration. This step vastly reduces the amount of data that needs\nto be retrieved and processed.\n\nAs a testimony, with the help of Apache Sedona, Wherobots engineers created a\nGeoParquet version of the Overture 2023-07-26-alpha.0 data release which was\nnot in GeoParquet format. This transformation led to a remarkable improvement\nin query performance. When conducting a spatial range query on the Building\ndataset using Apache Sedona, the process on the GeoParquet version took\napproximately 3 minutes, a significant reduction from the 1 hour and 30\nminutes required for the same query on the original dataset. Further details\nand insights into this transformation are available in our blog post titled\nHarnessing Overture Maps Data: Apache Sedona\u2019s Journey from Parquet to\nGeoParquet.\n\n#### The Role Of Apache Sedona\n\nThe GIS software landscape offers a variety of tools capable of handling\nGeoParquet data, such as GeoPandas and QGIS. However, Apache Sedona stands\napart in this field. As a renowned open-source cluster computing system, it is\nspecifically tailored for processing large-scale spatial data. Apache Sedona\noffers a rich suite of spatial operations and analytics functions, all\naccessible through an intuitive Spatial SQL programming language. This unique\nblend of features establishes Apache Sedona as a highly effective system for\ngeospatial data analysis.\n\nWith the adoption of GeoParquet, Apache Sedona has expanded its capabilities,\nnow able to create GeoParquet files. This integration not only enhances Apache\nSedona\u2019s data storage efficiency but also opens up broader prospects for\nadvanced data analysis. This positions Apache Sedona as a distinct and\npowerful tool in the realm of geospatial data processing, differentiating it\nfrom other GIS tools by its ability to handle complex, large-scale spatial\ndatasets efficiently. Further details can be found on Sedona\u2019s website:\nhttps://sedona.apache.org/\n\n#### Generating GeoParquet Files With Apache Sedona\n\nLeveraging Sedona\u2019s programming guides, OMF crafts GeoParquet datasets by\nincorporating a geometry column sourced from its WKB geospatial data. The\nprocess involves utilizing Sedona functions, as illustrated in the python code\nsnippet below:\n\n    \n    \n    myDataFrame.withColumn(\"geometry\", expr(\"ST_*\")).selectExpr(\"ST_*\")\n\nIn its commitment to improving the spatial query experience for its customers,\nOMF has implemented a strategic pre-defined indexing method. This method\norganizes data effectively based on theme and type combinations. To further\nrefine spatial filter pushdown performance, OMF capitalizes on Sedona\u2019s\nST_GeoHash function to generate dual GeoHash IDs for each geometry in the\ndataset.\n\n  1. Coarse-Level GeoHashing (Precision Level 3): The first GeoHash, with a precision level of 3, creates cells approximately 156.5km x 156km in size. This level is ideal for grouping data based on geographic proximity. Using this GeoHash key, a large Sedona DataFrame is partitioned into numerous smaller GeoParquet files. Each file correlates to a unique 3-character GeoHash key, facilitating efficient data pruning at the Parquet file level. Importantly, this approach enables users to manually download individual GeoParquet files by referencing the GeoHash key in the file path, bypassing the need for a Parquet file reader.\n  2. Fine-Level GeoHashing (Precision Level 8): Concurrently, OMF utilizes a finer GeoHash at level 8, resulting in smaller cells around 38.2m x 19m and then sorts data using this GeoHash within each GeoParquet file. This precision is used to sort data within each GeoParquet file. By doing so, OMF ensures that the data within each Parquet row-group or data page is organized based on spatial proximity. This organization is crucial for enabling efficient data pruning, particularly on the bbox column.\n\nThe bbox column, stored in a native Parquet Struct Type, consists of four\nDouble Type sub-columns: minx, maxx, miny, and maxy. It allows even standard\nParquet readers to conduct pruning operations effectively. This capability is\nparticularly beneficial as it complements the BBox information found in the\nGeoParquet file metadata. While the BBox metadata provides an overall spatial\nreference for the file, the bbox column offers a more granular level of\nspatial data, enabling granular data pruning at the Parquet row-group level.\n\nThis dual GeoHash approach serves three core purposes:\n\n  * It allows users to download individual GeoParquet files from OMF without requiring a GeoParquet or Parquet reader, simply by checking the GeoHash key.\n  * GeoParquet readers can efficiently filter files using the BBox information in each file\u2019s metadata, enhancing query speed.\n  * The strategy also enhances the functionality of standard Parquet readers which can effectively filter files using the statistical information of the bbox column, found in each file\u2019s column and row-group metadata, without needing to recognize the file as a GeoParquet file.\n\n#### Analyze OMF GeoParquet Files with Sedona on Wherobots Cloud\n\nLet\u2019s see some of the benefits of querying a large-scale GeoParquet dataset in\naction by analyzing the Overture Places theme using Apache Sedona. The easiest\nway to get started with Apache Sedona is by using the official Apache Sedona\nDocker image, or by creating a free hosted notebook in Wherobots Cloud.\n\nThe following command will start a local Docker container running Apache\nSedona and expose a Jupyter Lab environment on localhost port 8888:\n\n    \n    \n    docker run -p 8888:8888 -p 8080:8080 -p 8081:8081 -p 4040:4040 \\ apache/sedona:latest\n\nThis Jupyter Lab environment can now be accessed via a web browser at\nhttp://localhost:8888\n\nNext, the following Python code will load the latest Overture Maps GeoParquet\nrelease (at the time of writing) in Sedona:\n\n    \n    \n    from sedona.spark import * config = SedonaContext. \\ builder(). \\ config(\"fs.s3a.aws.credentials.provider\", \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\"). \\ getOrCreate() sedona = SedonaContext.create(config) df = sedona.read.format(\"geoparquet\"). \\ load(\"s3a://overturemaps-us-west-2/release/2024-01-17-alpha.0/theme=places/type=place\")\n\nWe can now apply a spatial predicate to filter for points of interest within\nthe bounds of New York City, using the following Spatial SQL functions:\n\n  * ST_PolygonFromEnvelope \u2013 create a polygon geometry that will serve as the area roughly representing the boundaries of New York City from a specified bounding box\n  * ST_Within \u2013 filter rows for only points of interest that fall within the boundary of that polygon geometry\n\n    \n    \n    spatial_filter = \"ST_Within(geometry, ST_PolygonFromEnvelope(-74.25909, 40.477399, -73.700181, 40.917577))\" df = df.where(spatial_filter) df.createOrReplaceTempView(\"places\")\n\nWhen executing this spatial filter, Sedona can leverage the BBox GeoParquet\nmetadata in each partitioned GeoParquet file to exclude any files that do not\ncontain points of interest within the polygon defined in the spatial\npredicate. This results in less data being examined and scanned by Sedona and\nless data that needs to be retrieved over the network improving query\nperformance. Also, note that the geometry column is interpreted as a geometry\ntype without the need for explicit type casting thanks to the WKB\nserialization as part of the GeoParquet specification.\n\nTo further demonstrate the functionality of Spatial SQL with Apache Sedona,\nlet\u2019s query for all stadiums within the area of New York City, then find all\npoints of interest within a short walking distance of each stadium using the\nfollowing Spatial SQL functions:\n\n  * ST_Buffer \u2013 create a new geometry that represents a buffer around each stadium that represents a short walking distance from the stadium\n  * ST_Intersects \u2013 filter for points of interest that lie within the buffer geometry, identifying points of interest within walking distance of each stadium\n\n    \n    \n    stadium_places = sedona.sql(\"\"\" WITH stadiums AS (SELECT * FROM places WHERE categories.main = \"stadium_arena\") SELECT * FROM places, stadiums WHERE ST_Intersects(places.geometry, ST_Buffer(stadiums.geometry, 0.002)) \"\"\")\n\nVisualizing points of interest within walking distance from each stadium.\n\nYou can see more detailed examples of analyzing the Overture Places dataset\nusing Apache Sedona in this blog post.\n\n#### Conclusion\n\nThe Overture Maps Foundation\u2019s adoption of GeoParquet, in collaboration with\nApache Sedona, marks a significant milestone in geospatial data management.\nThe combination of GeoParquet\u2019s efficient storage format and Apache Sedona\u2019s\nspatial analytics capabilities brings unprecedented performance and\nscalability to geospatial dataset publishing and analysis. This integration\nopens up new avenues for researchers, developers, and geospatial enthusiasts,\nempowering them to explore and derive insights from vast geospatial datasets\nmore efficiently than ever before.\n\nWant to keep up with the latest developer news from the Wherobots and Apache\nSedona community? Sign up for the This Month In Wherobots Newsletter:\n\nContributors\n\n  * Feng Jiang\n\nSenior software engineer At Microsoft. Loving to build the maps with decent\ntech.\n\n  * Jia Yu\n\nJia Yu is a co-founder and the Chief Architect of Wherobots Inc. He is the PMC\nChair of Apache Sedona\n\n  * William Lyon\n\nDeveloper Relations At Wherobots\n\nCreated: 16 Apr 2024, 22:10\n\nShare Article\n\n###### RELATED POSTS\n\nVIEW MORE\n\n5 Mins Read 13 Mar 2024\n\nRaster Data Analysis, Processing Petabytes of Agronomic Data, Overview of\nSedona 1.5, and Unlocking The Spatial Frontier \u2013 This Month In Wherobots\n\nRaster Data Analysis, Processing Petabytes of Agronomic Data, Overview of\nSedona 1.5, and Unlocking The Spatial Frontier \u2013 This Month In Wherobots\nWelcome to This Month In Wherobots, the monthly newsletter for data\npractitioners in the Apache Sedona and Wherobots community. This month we\u2019re\nexploring raster data analysis with Spatial SQL, processing petabytes of\nagronomic [...]\n\nApache Sedona + 1\n\n11 Mins Read 8 Mar 2024\n\nRaster Data Analysis With Spatial SQL And Apache Sedona\n\nOne of the strengths of Apache Sedona and Wherobots Cloud is the ability to\nwork with large scale vector and raster geospatial data together using Spatial\nSQL. In this post we\u2019ll take a look at how to get started working with raster\ndata in Sedona using Spatial SQL and some of the use cases for [...]\n\nApache Sedona\n\n9 Mins Read 16 Feb 2024\n\nWorking With Files \u2013 Getting Started With Wherobots Cloud & SedonaDB Part 3\n\nThis is the third post in a series that will introduce Wherobots Cloud and\nSedonaDB, covering how to get started with cloud-native geospatial analytics\nat scale. Part 1: Wherobots Cloud Overview Part 2: The Wherobots Notebook\nEnvironment Part 3: Working With Files (this post) In the previous post in\nthis series we saw how to [...]\n\nSedonaDB\n\nshare this article\n\nAwesome that you\u2019d like to share our articles. Where would you like to share\nit to:\n\n  * Linkedin\n\n  * Twitter\n\n  * Facebook\n\n  * Copy link\n\nTHE SPATIAL ANALYTICS\n\n& AI CLOUD\n\n  * Linkedin\n  * Twitter\n  * Github\n\nProducts\n\n  * Sedona DB\n  * Wherobots Cloud\n  * Pricing\n\nDevelopers\n\n  * Apache Sedona\n  * Documentation\n\nResources\n\n  * Blogs\n  * Videos\n\nCompany\n\n  * Team\n  * Careers\n\nOther\n\n  * Use Cases\n\n  * Sedona DB\n  * Wherobots Cloud\n  * Pricing\n  * Apache Sedona\n  * Documentation\n  * Use Cases\n\n  * Blogs\n  * Videos\n  * News\n  * Team\n  * Careers\n\n\u00a9 2024 Wherobots \u2014 All rights reserved.\n\n  * Terms & Conditions\n  * Privacy Policy\n\nClose\n\nLoading Comments...\n\n", "frontpage": false}
