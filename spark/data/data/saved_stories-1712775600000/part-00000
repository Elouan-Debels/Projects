{"aid": "39990186", "title": "Using Speakeasy and Gnostic to Combine REST and gRPC", "url": "https://www.speakeasyapi.dev/guides/api-frameworks/gnostic", "domain": "speakeasyapi.dev", "votes": 2, "user": "ritzaco", "posted_at": "2024-04-10 12:58:27", "comments": 0, "source_title": "Using Speakeasy and Gnostic To Combine REST and gRPC | Speakeasy", "source_text": "Using Speakeasy and Gnostic To Combine REST and gRPC | Speakeasy\n\nTry It Now\n\nLog in\n\nDocumentationExamplesGuides\n\n  * Guides\n  *     *       * Integrate FastAPI with Speakeasy\n      * Addressing Form Data Type Compatibility in FastAPI\n\n    * Generate SDKs with Fastify\n    * Generate SDKs with Zod\n    * Generate SDKs with tRPC\n    * Generate SDKs with tsoa\n    * Generate SDKs with goa\n    * Create SDKs for gRPC\n    * Create SDKs for Gnostic\n\n  *     * Additionalproperties\n    * X Codesamples\n\n  *     * Creating a Monorepo\n\nDocumentationExamplesGuides\n\n# Using Speakeasy and Gnostic To Combine REST and gRPC\n\nIn this tutorial, we'll start with an OpenAPI document and end with a fully\nfunctional gRPC server. We'll also create a RESTful gateway to the gRPC\nserver, and create SDKs in multiple languages.\n\nYou might rightfully ask why we would want to do all of this, and there's no\nbetter way to illustrate a need than by starting with a real example that is\nentirely plausible and definitely not made up.\n\nPicture this: You're tasked with setting up an underground bar in the far\nreaches of the galaxy. Interstellar travelers from far and wide look forward\nto drinks they've never even dreamt of.\n\nBecause this is the far future and, obviously, everyone is still using gRPC,\nwe better set up a gRPC server that can handle billions of requests from light\nyears away. gRPC helps us keep throughput high and latency low\u2014both essential\nelements of an interstellar API. However, even civilizations that have\nmastered the Dyson Sphere know better than to use gRPC in the browser and\nother clients. So we'll need to create an HTTP server to complement our gRPC\nserver. Our users will need SDKs to query our endpoints.\n\nThere's no AI in the Laniakea Supercluster of galaxies who'd be willing to\ncode all of this token by token, so let's help them generate as much of this\nas possible.\n\nWe're working with enough acronyms to make our heads spin faster than the\nneutron star and the space jokes aren't helping.\n\nLet's break this down step by step and park the science fiction for the\nmoment. Here's what we'll do:\n\n  1. Create an OpenAPI document describing our API.\n  2. Set up a development environment using Docker and dev containers.\n  3. Install a handful of dependencies.\n  4. Use Gnostic to generate a binary protocol buffer description of our API.\n  5. Use the Gnostic gRPC plugin to generate an annotated protocol buffer description of our API.\n  6. Transcode that description to create a gRPC API.\n  7. Create our server logic as a Go package.\n  8. Generate a gRPC gateway to handle HTTP requests and pass these to our server.\n  9. Use Speakeasy to create SDKs in Python and TypeScript.\n  10. And finally, test all of this by requesting some spectacular drinks.\n\n## Example gRPC and REST API Server Repository\n\nThe source code for our complete example is available in the Speakeasy gRPC\nand REST example repository (opens in a new tab).\n\nThis repository already contains all the generated code we'll cover in this\ntutorial. You can clone it and follow along with the tutorial, or use it as a\nreference to build your own gRPC and REST API server.\n\n## Creating an OpenAPI Document to Describe Our API\n\nAs a start, and for the sake of shipping our server, we'll create an API with\nonly two endpoints.\n\nThe first endpoint is createDrink: Create a new drink based on the provided\ningredients and return the drink's name, description, recipe, and possibly a\nphoto.\n\nOur second endpoint is getDrink: Create a new drink based only on the drink's\nname. Return a list of ingredients with quantities, a recipe, and a photo.\n\nLet's take a detailed tour of our API by exploring bar.yaml:\n\nWe'll start by creating an OpenAPI 3.0.0 document. Gnostic, unfortunately,\nonly supports OpenAPI 3.0.0, so we'll have to make sure our document is\ncompliant.\n\nNext, we'll create an info object that describes our API. This object contains\nthe title, version, and description of our API.\n\nNow let's define the servers where our API will be hosted. In this case, we'll\nhave a single server running locally on http://localhost:8080.\n\nNext, we'll define the /create-drink endpoint. This endpoint will accept a\nPOST request with a JSON body containing the ingredients of the drink.\n\nOur /create-drink endpoint will return a JSON object with the drink's name,\ndescription, recipe, and possibly a photo.\n\nNext, we'll define the /get-drink endpoint. This endpoint will accept a POST\nrequest with a JSON body containing the name of the drink.\n\nOur /get-drink endpoint will return a JSON object with the ingredients,\nrecipe, and possibly a photo of the drink.\n\nOur first component, IngredientsRequest, is a JSON object that contains the\ningredients of a drink as an array of strings.\n\nNext up, DrinkResponse, is a JSON object that contains the name, description,\nrecipe, and a photo of a drink.\n\nThe third component, DrinkNameRequest, is a JSON object that contains the name\nof a drink.\n\nOur fourth component, DrinkRecipeResponse, is a JSON object that contains the\ningredients, recipe, and a photo of a drink.\n\nOur fifth component, IngredientQuantity, is a JSON object that contains the\nname and quantity of an ingredient.\n\nFinally, error, is a JSON object that contains an error code and message.\n\nbar.yaml\n\nopenapi: 3.0.0\n\ninfo:\n\ntitle: Hitchhiker's Guide to Drinks\n\ndescription: An API for creating and retrieving drinks.\n\nversion: 1.0.0\n\nservers:\n\n\\- url: http://localhost:8080\n\ndescription: Local development server\n\npaths:\n\n/create-drink:\n\npost:\n\noperationId: createDrink\n\nsummary: Create a new drink based on provided ingredients\n\nrequestBody:\n\nrequired: true\n\ncontent:\n\napplication/json:\n\nschema:\n\n$ref: \"#/components/schemas/IngredientsRequest\"\n\nexample:\n\ningredients:\n\n\\- Gin\n\n\\- Tonic water\n\n\\- Lime juice\n\nresponses:\n\n\"200\":\n\ndescription: Successful response\n\ncontent:\n\napplication/json:\n\nschema:\n\n$ref: \"#/components/schemas/DrinkResponse\"\n\nexample:\n\nname: Pan Galactic Gin and Tonic\n\ndescription: A refreshing twist on the classic gin and tonic, inspired by the\nHitchhiker's Guide to the Galaxy.\n\nrecipe: Fill a glass with ice. Pour in 2 oz of gin, 4 oz of tonic water, and a\nsqueeze of lime juice. Stir gently and garnish with a lime wedge. Enjoy\nresponsibly while contemplating the vastness of the universe.\n\nphoto: https://example.com/pan-galactic-gin-and-tonic.jpg\n\ndefault:\n\ndescription: unexpected error\n\ncontent:\n\napplication/json:\n\nschema:\n\n\"$ref\": \"#/components/schemas/error\"\n\n/get-drink:\n\npost:\n\noperationId: getDrink\n\nsummary: Get a drink recipe by providing its name\n\nrequestBody:\n\nrequired: true\n\ncontent:\n\napplication/json:\n\nschema:\n\n$ref: \"#/components/schemas/DrinkNameRequest\"\n\nexample:\n\nname: Pan Galactic Gargle Blaster\n\nresponses:\n\n\"200\":\n\ndescription: Successful response\n\ncontent:\n\napplication/json:\n\nschema:\n\n$ref: \"#/components/schemas/DrinkRecipeResponse\"\n\nexample:\n\ningredients:\n\n\\- name: Ol' Janx Spirit\n\nquantity: 1 bottle\n\n\\- name: Sea water from Santraginus V\n\nquantity: 1 measure\n\n\\- name: Acturan Mega-gin\n\nquantity: 3 cubes\n\n\\- name: Fallian marsh gas\n\nquantity: 4 liters\n\n\\- name: Qualactin Hypermint extract\n\nquantity: 1 teaspoon\n\nrecipe: Pour the Ol' Janx Spirit into a glass, add the sea water and Acturan\nMega-gin. Bubble the Fallian marsh gas through the mixture, then add the\nQualactin Hypermint extract. Drink... but... very carefully.\n\nphoto: https://example.com/pan-galactic-gargle-blaster.jpg\n\ndefault:\n\ndescription: unexpected error\n\ncontent:\n\napplication/json:\n\nschema:\n\n\"$ref\": \"#/components/schemas/error\"\n\ncomponents:\n\nschemas:\n\nIngredientsRequest:\n\ntype: object\n\ndescription: A request containing a list of ingredients for creating a new\ndrink.\n\nproperties:\n\ningredients:\n\ntype: array\n\ndescription: An array of ingredient names as strings.\n\nexample:\n\n\\- Gin\n\n\\- Tonic water\n\n\\- Lime juice\n\nitems:\n\ntype: string\n\nexample: Gin\n\nrequired:\n\n\\- ingredients\n\nDrinkResponse:\n\ntype: object\n\ndescription: A response containing information about a newly created drink.\n\nproperties:\n\nname:\n\ntype: string\n\ndescription: The name of the drink.\n\nexample: Pan Galactic Gin and Tonic\n\ndescription:\n\ntype: string\n\ndescription: A brief description of the drink.\n\nexample: A refreshing twist on the classic gin and tonic, inspired by the\nHitchhiker's Guide to the Galaxy.\n\nrecipe:\n\ntype: string\n\ndescription: The recipe for making the drink.\n\nexample: Fill a glass with ice. Pour in 2 oz of gin, 4 oz of tonic water, and\na squeeze of lime juice. Stir gently and garnish with a lime wedge. Enjoy\nresponsibly while contemplating the vastness of the universe.\n\nphoto:\n\ntype: string\n\nformat: uri\n\ndescription: A URL pointing to an image of the drink.\n\nexample: https://example.com/pan-galactic-gin-and-tonic.jpg\n\nDrinkNameRequest:\n\ntype: object\n\ndescription: A request containing the name of a drink to retrieve the recipe\nfor.\n\nproperties:\n\nname:\n\ntype: string\n\ndescription: The name of the drink.\n\nexample: Pan Galactic Gargle Blaster\n\nrequired:\n\n\\- name\n\nDrinkRecipeResponse:\n\ntype: object\n\ndescription: A response containing the recipe and information about a drink.\n\nproperties:\n\ningredients:\n\ntype: array\n\ndescription: An array of objects representing ingredients and their\nquantities.\n\nitems:\n\n$ref: \"#/components/schemas/IngredientQuantity\"\n\nrecipe:\n\ntype: string\n\ndescription: The recipe for making the drink.\n\nexample: Pour the Ol' Janx Spirit into a glass, add the sea water and Acturan\nMega-gin. Bubble the Fallian marsh gas through the mixture, then add the\nQualactin Hypermint extract. Drink... but... very carefully.\n\nphoto:\n\ntype: string\n\nformat: uri\n\ndescription: A URL pointing to an image of the drink.\n\nexample: https://example.com/pan-galactic-gargle-blaster.jpg\n\nIngredientQuantity:\n\ntype: object\n\ndescription: An object representing an ingredient and its quantity.\n\nproperties:\n\nname:\n\ntype: string\n\ndescription: The name of the ingredient.\n\nexample: Ol' Janx Spirit\n\nquantity:\n\ntype: string\n\ndescription: The quantity of the ingredient required.\n\nexample: 1 bottle\n\nerror:\n\nrequired:\n\n\\- code\n\n\\- message\n\nproperties:\n\ncode:\n\ntype: integer\n\nformat: int32\n\nmessage:\n\ntype: string\n\ntype: object\n\n## Setting Up a Development Environment\n\nHere, we'll take an opinionated approach to setting up a development\nenvironment. We'll use Docker and dev containers in VS Code to ensure that\neveryone has the same environment and avoid any issues with dependencies.\n\nWe'll start by creating a Dockerfile in the .devcontainer directory. The\nDockerfile will install all the dependencies we need to generate our gRPC\nserver.\n\nOur development container is based on mcr.microsoft.com/devcontainers/go from\nthe Microsoft Dev Container Images repository. The image we'll use has Go\nversion 1.22 and is based on Debian Bookworm.\n\nWe'll install Speakeasy using the install.sh script from the Speakeasy\nrepository.\n\nNext, we'll install Gnostic, the Gnostic gRPC plugin, the Go protocol buffer\ncompiler, Buf, the gRPC Go plugin, gRPCurl, and the gRPC gateway plugin.\n\nWe'll copy our project files into the container and set the working directory\nto /app.\n\nWe'll run go mod tidy to ensure all dependencies are up to date.\n\nFinally, we'll expose port 50051 and run our server.\n\n.devcontainer/Dockerfile\n\nFROM mcr.microsoft.com/devcontainers/go:1-1.22-bookworm\n\nRUN curl -fsSL https://raw.githubusercontent.com/speakeasy-api/speakeasy/main/install.sh | sh\n\nRUN go install github.com/google/gnostic@latest\n\nRUN go install github.com/googleapis/gnostic-grpc@latest\n\nRUN go install github.com/golang/protobuf/protoc-gen-go@latest\n\nRUN go install github.com/bufbuild/buf/cmd/buf@v1.30.0\n\nRUN go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n\nRUN go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest\n\nRUN go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-\ngateway@latest\n\nCOPY . /app\n\nWORKDIR /app\n\nRUN go mod tidy\n\nEXPOSE 50051\n\nEXPOSE 8080\n\nCMD [\"go\", \"run\", \"main.go\"]\n\n### Dev Container Configuration\n\nNext, we'll create a devcontainer.json file in our .devcontainer directory to\nconfigure our development container:\n\n.devcontainer/devcontainer.json\n\n{\n\n\"name\": \"Go\",\n\n// Override the default dockerfile to use our custom Dockerfile\n\n\"dockerComposeFile\": [\"../docker-compose.yaml\", \"docker-compose.yaml\"],\n\n\"service\": \"app\",\n\n\"workspaceFolder\": \"/app\",\n\n\"shutdownAction\": \"stopCompose\"\n\n}\n\nFor help with the devcontainer.json file, check out the official documentation\n(opens in a new tab).\n\n### Docker Compose\n\nWe'll also create a docker-compose.yaml file in our .devcontainer directory to\ndefine our development container:\n\n.devcontainer/docker-compose.yaml\n\nversion: \"3\"\n\nservices:\n\napp:\n\nbuild:\n\ncontext: .\n\ndockerfile: .devcontainer/Dockerfile\n\nvolumes:\n\n\\- ..:/workspaces:cached\n\ncommand: /bin/sh -c \"while sleep 1000; do :; done\"\n\nThis Docker compose file defines a service called app that uses the Dockerfile\nin the .devcontainer directory. It also mounts the current directory into the\ncontainer at /app and overrides the default command to start the server.\n\nWe use /bin/sh -c \"while sleep 1000; do :; done\" as the default command to\nkeep the container running while we work on our server. This means we can\nstart the server manually when we're ready.\n\n### Starting the Development Container\n\nFor this step, you'll need to have Docker (opens in a new tab) and the Dev\nContainers extension (opens in a new tab) for VS Code installed.\n\nStart the Docker engine and open the project in VS Code. Press F1 to open the\ncommand palette, then select Dev Containers: Reopen in Container. This will\nbuild the development container and open a new VS Code window inside it.\n\nThis step might take a while the first time you run it, as it needs to\ndownload the base image and install all the dependencies.\n\n### Interacting With the Development Container\n\nOnce the development container is running, you can interact with it using the\nterminal in VS Code. You can run commands as you would in a regular terminal,\nsuch as go run main.go to start the server later on.\n\nWhen we refer to running commands in the development container, we mean\nrunning them in the dev container terminal in VS Code.\n\nIf you think something isn't working as expected, try restarting the\ndevelopment container by running Dev Containers: Rebuild Container from the\ncommand palette. You may also restart Docker to ensure everything is working\nas expected.\n\n## Dependencies for generating a gRPC server using Gnostic\n\nTo generate a gRPC server using Gnostic, we added the following dependencies\nto our development container:\n\n  * Gnostic (opens in a new tab): A compiler for APIs described by the OpenAPI 3.0.0 specification.\n  * Gnostic gRPC plugin (opens in a new tab): A plugin for Gnostic that generates gRPC service definitions.\n  * Go protocol buffer compiler (opens in a new tab): A plugin for the protocol buffer compiler that generates Go code.\n  * Buf (opens in a new tab): A tool for managing protocol buffer files.\n  * gRPC Go plugin (opens in a new tab): A plugin for the protocol buffer compiler that generates Go gRPC code.\n  * gRPCurl (opens in a new tab): A command-line tool for interacting with gRPC servers. We'll use this to test our gRPC server.\n  * gRPC gateway plugin (opens in a new tab): A plugin for the protocol buffer compiler that generates a reverse proxy server to translate RESTful HTTP and JSON requests to gRPC.\n\n## Generating a gRPC Server Using Gnostic\n\nTo generate a gRPC server using Gnostic, we need to follow these steps:\n\n  1. Compile the API definition to a binary protocol buffer file using Gnostic.\n  2. Create an API definition in a .proto file.\n  3. Generate a gRPC service definition using the Gnostic gRPC plugin.\n  4. Generate Go code using the Go protocol buffer compiler and the gRPC Go plugin.\n\nWe've already completed step 1 by creating the bar.yaml file. Now we'll\ncompile the API definition to a binary protocol buffer file using Gnostic.\n\n### Compiling the API Definition to a Binary Protocol Buffer File\n\nThis step is necessary because we've found that the Go protocol buffer\ncompiler and the gRPC Go plugin require a binary protocol buffer file as\ninput. To compile the API definition to a binary protocol buffer file, we'll\nuse the following command:\n\nvscode@devcontainer\n\ngnostic --pb-out=. bar.yaml\n\nThis command compiles the API definition in bar.yaml to a binary protocol\nbuffer file named bar.pb.\n\n### Creating an API Definition in a .proto File\n\nNext we'll create an API definition in a .proto file. We'll use the bar.pb\nfile generated in the previous step as input. To accomplish this, we'll use\nthe following command:\n\nvscode@devcontainer\n\ngnostic-grpc -input bar.pb -output .\n\nThis command generates a .proto file named bar.proto that contains the gRPC\nservice definition:\n\nbar.proto\n\nsyntax = \"proto3\";\n\npackage bar;\n\nimport \"google/api/annotations.proto\";\n\nimport \"google/protobuf/descriptor.proto\";\n\nimport \"google/protobuf/empty.proto\";\n\nmessage IngredientsRequest {\n\nrepeated string ingredients = 1;\n\n}\n\nmessage DrinkResponse {\n\nstring name = 1;\n\nstring description = 2;\n\nstring recipe = 3;\n\nstring photo = 4;\n\n}\n\nmessage DrinkNameRequest {\n\nstring name = 1;\n\n}\n\nmessage DrinkRecipeResponse {\n\nrepeated IngredientQuantity ingredients = 1;\n\nstring recipe = 2;\n\nstring photo = 3;\n\n}\n\nmessage IngredientQuantity {\n\nstring name = 1;\n\nstring quantity = 2;\n\n}\n\nmessage Error {\n\nint32 code = 1;\n\nstring message = 2;\n\n}\n\n//CreateDrinkParameters holds parameters to CreateDrink\n\nmessage CreateDrinkRequest {\n\nIngredientsRequest ingredients_request = 1;\n\n}\n\n//GetDrinkParameters holds parameters to GetDrink\n\nmessage GetDrinkRequest {\n\nDrinkNameRequest drink_name_request = 1;\n\n}\n\nservice Bar {\n\nrpc CreateDrink ( CreateDrinkRequest ) returns ( DrinkResponse ) {\n\noption (google.api.http) = { post:\"/create-drink\" body:\"ingredients_request\"\n};\n\n}\n\nrpc GetDrink ( GetDrinkRequest ) returns ( DrinkRecipeResponse ) {\n\noption (google.api.http) = { post:\"/get-drink\" body:\"drink_name_request\" };\n\n}\n\n}\n\n### Generating Go Code Using Buf and the gRPC Go Plugin\n\nTo set up Buf, we need to run the following command:\n\nvscode@devcontainer\n\nbuf mod init\n\nThis command initializes a new Buf module in the current directory.\n\nUpdate the buf.yaml file created in the project root with the following\ncontent:\n\nbuf.yaml\n\nversion: v1\n\ndeps:\n\n\\- buf.build/googleapis/googleapis\n\nWe depend on googleapis because the gRPC Go plugin requires it.\n\nNext, create a buf.gen.yaml file in the project root with the following\ncontent:\n\nWe enable managed mode and set the go_package_prefix to github.com/speakeasy-\napi/grpc-rest-service/bar.\n\nWe also specify the plugins we want to use and where to output the generated\ncode.\n\nbuf.gen.yaml\n\nversion: v1\n\nmanaged:\n\nenabled: true\n\ngo_package_prefix:\n\ndefault: github.com/speakeasy-api/grpc-rest-service/bar\n\nexcept:\n\n\\- buf.build/googleapis/googleapis\n\n\\- buf.build/grpc-ecosystem/grpc-gateway\n\nplugins:\n\n\\- name: go\n\nout: bar\n\nopt:\n\n\\- paths=source_relative\n\n\\- name: go-grpc\n\nout: bar\n\nopt:\n\n\\- paths=source_relative\n\n\\- plugin: grpc-gateway\n\nout: bar\n\nopt:\n\n\\- paths=source_relative\n\nUpdate Buf's dependencies using the following command:\n\nvscode@devcontainer\n\nbuf mod update\n\nNow we can generate Go code using the following command:\n\nvscode@devcontainer\n\nbuf generate\n\nThis command generates Go code in the bar directory. The generated code\nincludes the gRPC service definition and the gRPC gateway definition.\n\n## Implementing the gRPC Server\n\nTo implement the gRPC server, we created one big main.go with our endpoint\nimplementations and business logic all in one. This will make a lot of people\nvery angry and is widely regarded as a bad move. (\ud83e\udee1 Douglas Adams (opens in a\nnew tab))\n\nTo make things slightly more confusing, we're including OpenAI API calls\nalongside our focus on OpenAPI. The similarities in the names are purely\ncoincidental.\n\nThe main.go file is too large to include here, but you can find it in the root\nof the example project.\n\n## Optional: Adding Your OpenAI API Key\n\nIf you want to use the OpenAI API to generate drink recipes, you'll need to\nadd your OpenAI API key to the project. Without this key, the server will\nreturn placeholder data for the drink recipes.\n\nCopy the .env.template file to a new file named .env:\n\nvscode@devcontainer\n\ncp .env.template .env\n\nOpen the .env file and add your OpenAI API key:\n\nOPENAI_API_KEY=your-openai-api-key\n\nThis file is included in the .gitignore file, so it won't be checked into\nversion control.\n\n## Rebuilding the Docker Image\n\nWe've installed a bunch of new dependencies and generated a lot of new code.\nTo make sure everything is working as expected, we need to rebuild our Docker\nimage.\n\nThis also runs go mod tidy to ensure all dependencies are up to date, which\ncan take a while.\n\nIn VS Code, press F1 to open the command palette, then select Dev Containers:\nRebuild Container. This will rebuild the development container and install all\nthe dependencies.\n\n## Running the gRPC Server\n\nTo run the gRPC server, we need to start the development container and run the\nfollowing command:\n\nvscode@devcontainer\n\ngo run main.go\n\nThis command starts the gRPC server on port 50051 and the gRPC gateway on port\n8080.\n\n## Testing the gRPC Server\n\nTo test the gRPC server, we'll use the grpcurl command-line tool.\n\nFirst, open a new terminal in VS Code by pressing \u2303\u21e7`.\n\nThis next step will use OpenAI credits, so make sure you have credits\navailable before running the command.\n\nNow run the following command to send a request to the gRPC server:\n\nvscode@devcontainer\n\ngrpcurl -plaintext -d '{\"drink_name_request\": {\"name\": \"Pan Galactic Gargle\nBlaster\"}}' localhost:50051 bar.Bar/GetDrink\n\nThis command sends a request to the GetDrink endpoint with the name field set\nto Pan Galactic Gargle Blaster.\n\nThe response should look something like this:\n\n{\n\n\"ingredients\": [\n\n{\n\n\"name\": \"Ol' Janx Spirit\",\n\n\"quantity\": \"1 oz\"\n\n},\n\n{\n\n\"name\": \"Water from the seas of Santraginus V\",\n\n\"quantity\": \"0.5 oz\"\n\n},\n\n{\n\n\"name\": \"Arcturan Mega-gin\",\n\n\"quantity\": \"1 oz\"\n\n},\n\n{\n\n\"name\": \"Fallian marsh gas\",\n\n\"quantity\": \"A gentle bubble\"\n\n},\n\n{\n\n\"name\": \"Quantum hyper-mint extract\",\n\n\"quantity\": \"1 teaspoon\"\n\n},\n\n{\n\n\"name\": \"Zap powder\",\n\n\"quantity\": \"A pinch\"\n\n},\n\n{\n\n\"name\": \"Algolian Suntiger tooth extract\",\n\n\"quantity\": \"1 drop\"\n\n},\n\n{\n\n\"name\": \"Galaxy-wide famous Olives\",\n\n\"quantity\": \"1 olive\"\n\n}\n\n],\n\n\"recipe\": \"In a cosmic shaker, mix Ol' Janx Spirit, Arcturan Mega-gin, and\nwater from Santraginus V. Gently add fallian marsh gas to create a mystery\nbubble. Stir in quantum hyper-mint extract and a pinch of zap powder with a\nmolecular stirrer (mind the speed, or you'll end up in another dimension).\nCarefully add a single drop of Algolian Suntiger tooth extract, ensuring not\nto evaporate your mixing vessel. Serve in a glass forged from comets' ice,\ngarnished with a galaxy-wide famous Olive. Be sure to have your propulsion\nsystem set to the nearest recovery planet because after one sip, you'll need\nit.\",\n\n\"photo\": \"https://example.com/photo.jpg\"\n\n}\n\nThe photo URL returned by OpenAI is only valid for an hour, so be sure to open\nit in a browser to view it.\n\nYou may find that the terminal output escapes the JSON response, breaking the\nphoto URL. You can use the following command to unescape the JSON response:\n\nvscode@devcontainer\n\ngrpcurl -plaintext -d '{\"drink_name_request\": {\"name\": \"Pan Galactic Gargle Blaster\"}}' localhost:50051 bar.Bar/GetDrink | sed 's/%3A/:/g; s/%2F/\\//g; s/%3D/=/g; s/%3F/?/g; s/%26/\\&/g' | jq\n\nThis command uses sed to unescape the JSON response and jq to format the JSON\nresponse.\n\n## Generating SDKs for the gRPC Gateway\n\nTo generate a TypeScript SDK for the gRPC gateway, we run the following\ncommand:\n\nvscode@devcontainer\n\nspeakeasy generate sdk \\\n\n\\--schema bar.yaml \\\n\n\\--lang typescript \\\n\n\\--out ./bar-sdk-typescript\n\nThis command generates a TypeScript SDK in the bar-sdk-typescript directory.\n\nTo generate a Python SDK for the gRPC gateway, we run the following command:\n\nvscode@devcontainer\n\nspeakeasy generate sdk \\\n\n\\--schema bar.yaml \\\n\n\\--lang python \\\n\n\\--out ./bar-sdk-python\n\nNow we have generated SDKs for the gRPC gateway in both TypeScript and Python.\n\nTry It Now\n\nLog in\n\nBlog\n\nAbout Us\n\nWe're Hiring!\n\nGet in touch\n\nDocs\n\nChangelog\n\nCommunity\n\nEvents\n\nStatus\n\nRoadmap\n\nBook a Demo\n\nTerms of Service\n\nPrivacy Policy\n\n\u00a9 2024 Speakeasy, Inc. All Rights Reserved.\n\n", "frontpage": false}
