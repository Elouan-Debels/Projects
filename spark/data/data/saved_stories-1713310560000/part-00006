{"aid": "40054833", "title": "How to Create a Stanford Course", "url": "https://saligrama.io/blog/post/infracourse-how-to-setup/", "domain": "saligrama.io", "votes": 1, "user": "saligrama", "posted_at": "2024-04-16 17:34:56", "comments": 0, "source_title": "How to create a Stanford course", "source_text": "How to create a Stanford course - Aditya's Blog\n\nAditya's Blog Thoughts, guides and fun from a security/systems enthusiast @\nStanford\n\n## How to create a Stanford course\n\nApril 15, 2024 1736 words No tag\n\nThis is the first post in a three-part retrospective on teaching CS 40.\n\nLast quarter (Winter 2024), Cody Ho and I taught CS 40 Cloud Infrastructure\nand Scalable Application Deployment at Stanford, a new course we\u2019d been\nworking on creating for nearly a year. CS 40 is Stanford\u2019s first-ever hands-on\nintro cloud computing course, and with 50 students enrolled, achieving our\ninstructional goals of leaving students with a robust understanding of the\nmaterial was no easy feat.\n\nWrapping up the quarter, I\u2019m thrilled with how the course turned out, even\ngiven how hectic it was at times. This post is a retrospective on the process\nof designing the course, getting it approved, and building out course content\nbefore the start of the quarter.\n\n## Course motivation\n\nThe idea to teach a course about cloud infrastructure first came to me in\nSpring 2023 arising from my work with the Stanford entrepreneurial community\nover the last few years. Stanford startups, particularly those in the consumer\nsocial space, have historically had a poor track record with security. Since\n2021, I\u2019ve disclosed critical security vulnerabilities to over 20 startups\nmarketing at Stanford, and have helped numerous more through the Stanford\nSecurity Clinic.\n\nMore than just finding vulnerabilties, however, this process also gave me a\nwindow into the infrastructure deployment topology of many of these startups.\nThe mode tech stack was far and away React single-page applications and React\nNative mobile apps that were thin clients over a Firebase backend-as-a-service\n\u2013 a foot cannon that makes achieving security with common data models\ndifficult, but it also ties the app\u2019s entire functionality and logic to that\nspecific BaaS provider. When Firebase no longer makes sense for an app \u2013 often\nfor cost, security, or data modeling reasons \u2013 migrating to a more industry-\nstandard architecture can be an ordeal.\n\nAnd beyond Firebase, we\u2019d also seen many suboptimal infrastructure and\narchitecture configurations \u2013 for example, the use of hosted GraphQL providers\nwhen that transport protocol made no sense for the given application, or\nPHP/Laravel stacks with MySQL on the same compute instance.\n\nGiven our prior experience \u2013 beyond security and infrastructure-focused\ninternships at cloud-native tech companies, I led infrastructure for a\nStanford course and a startup, and Cody has been instrumental in building up\nthe Applied Cyber competition test range \u2013 we came up with the idea to teach a\ncourse focusing on architecting robust application deployments on the public\ncloud. We hoped such a course could inform students about the cloud resources\navailable in deploying applications, and to be able to use those resources\nusing best-practice architectures and techniques.\n\nBeyond startups, we reasoned that such skills would be useful to any technical\ncareer. Nearly every tech company today uses the public cloud in some way; any\nStanford graduate entering the software engineering workforce will reasonably\nbe expected to work with the cloud. The public cloud features heavily in\nacademic computer science research as acquiring compute resources isn\u2019t\nsubject to hardware lead times.\n\nDespite the importance of these skills to a modern education in computer\nscience, to our knowledge no university has offered a hands-on intro cloud\ncomputing course to its undergraduates. A number of continuing education\nprograms do offer cloud-focused courses, but they tend to be survey courses\nwithout programming assignments that are targeted at mid-career professionals,\nparticularly those transitioning from on-prem systems administration to cloud\nDevOps.\n\nAnyone else \u2013 and especially a \u201ctypical\u201d CS graduate going into software\nengineering \u2013 is expected to learn about cloud deployment techniques either\nfrom a sympathetic senior engineer at an internship or a job, or on their own.\nUnfortunately, with how complicated modern public cloud platforms have become,\nself-learning these skills can be difficult.\n\nGiven this context, we recognized the need for a course that teaches basic\ncloud fluency. In focusing on teaching cloud deployment skills in a hands-on\nway to students with existing software development background, we knew we\nwould be doing something completely new \u2013 but we felt up to the challenge.\n\n## Prototyping the initial course structure\n\nWe knew that teaching a student course was something realistically achievable\nas Stanford CS coterm (BS + MS) students. After all, at the time, our friend\nAkshay Srivatsan was in the middle of teaching CS 45 Software Tools Every\nProgrammer Should Know, an introductory course on development environments and\nessential tools.\n\nIn our initial exploration of the idea, our first step was to chat with Mike\nAbbott, who was at the time leading the Cloud Services organization at Apple\nas a VP of Engineering. Mike had taught CS 153 Applied Security at Scale,\nwhich Cody and I had both taken the previous quarter. I approached Mike about\nthe idea in late May 2023 as he was distributing a late shipment of course\nT-shirts. Mike loved our idea, and he told us he could advise us for the class\nand help coordinate guest speakers and cloud credits for students. We were off\nto the races.\n\nThroughout the summer, Cody and I worked on writing a course syllabus and\nproposal that we could take to the CS department to get the course approved.\nAkshay helped us out tremendously here, sending us all of the material and\ndocumentation for CS 45\u2019s approval process. This gave us a basic idea of what\nthe department would expect from us and what the process would look like.\n\nWe oriented our syllabus around four main learning goals:\n\n> #### Course Goals\n>\n>   1. Understanding the types of cloud resources made available by cloud\n> providers that help in deploying applications.\n>   2. Architecting a cloud deployment by selecting resources for optimal\n> scaling (performance) and cost efficiency.\n>   3. Systematically deploying cloud resources using Infrastructure as Code\n> (IaC).\n>   4. Ensuring your deployment remains secure, observable, and continuously\n> updated.\n>\n\nIn practice, fulfilling the first goal meant planning out a set of lectures\nthat covered the core areas of cloud application deployment. Roughly in order,\nthese included the basics of (and further detail in) compute, networking, and\nstorage resources; security and observability; cloud AI/ML pipelines; and\nCI/CD.\n\nMeanwhile, the remaining goals would be fulfilled through a set of hands-on\nassignments that would teach students to deploy web applications to the cloud\nusing infrastructure as code.\n\nOriginally, we envisioned giving students a base application that they could\ndeploy different aspects of, extending their deployment in each of the 10\nweeks of the course \u2013 starting by using \u201cClickOps\u201d (i.e., the web console),\nand then replacing that initial setup with a more robust IaC-based\nconfiguration. However, we later realized that this level of granularity would\nbe difficult to manage for both us and the students, and we wound up\nconsolidating everything into four assignments, three of which were IaC-based.\n\nWe also added a final project where students could demonstrate their\nunderstanding of the course material through the deployment of any application\nof their choice.\n\n## The course approval process\n\nOnce we had our initial syllabus, we first shopped it with some friends for\nfeedback \u2013 shoutout to Nathan Bhak, Glen Husman, Miles McCain, and Akshay\nSrivatsan for suggestions on lecture and assignment content, as well as course\npolicy. Ben Tripp also agreed to be our teaching assistant, and he was\ninstrumental in making this course succeed.\n\nWe then hopped on a call with Mike in late August to get his thoughts. Beyond\nfeedback on the syllabus itself, Mike was able to point out a few key places\nwhere some industry veterans in the cloud space that he knew well could drive\nour course content forward as guest speakers. Mike made a number of such\nintroductions for us, and he also got us in contact with Christos Kozyrakis, a\nprofessor in electrical engineering and computer science with research\ninterests in cloud computing, who would serve as our faculty sponsor.\n\nWith some final feedback from Christos, in late September we followed Akshay\u2019s\nlead and emailed our proposal to Chris Gregg, the CS department\u2019s Associate\nChair for Education. Chris interfaced with the department\u2019s Curriculum\nCommittee on our behalf, and helped us overcome the potential roadblock of the\ncommittee only accepting new course suggestions in the spring for the\nfollowing year.\n\nThe committee only had some minor feedback for us, and by mid-October, we had\nour final approval to offer the course \u2013 now numbered CS 40 \u2013 in the winter,\nprovided that both of us switch to graduate tuition status per department\npolicy.\n\nWinter quarter enrollment day was Wednesday, November 29, and this would be\nthe moment of truth in terms of student interest in CS 40. We\u2019d done a decent\nbit of marketing over the last few weeks, blasting a flyer out to any CS-\nadjacent mailing list and to a number of clubs, as well as promoting the\ncourse on social media.\n\nWith our initial course cap of 50 students, we were able to fill the course up\nfrom just the first seven enrollment groups (i.e., before any sophomores or\nfreshmen were able to register based on priority). After negotiating for a\nlarger room and increasing our course cap, we had enrolled 60 students with 21\non the waitlist at our peak.\n\n## Building out the course\n\nBy the time we had our course approval in hand, we were already hard at work\nbuilding out some of the technical aspects of the course. For me, this\ninvolved creating the backend for Yoctogram, a minimal image-sharing web\napplication that would be used by students as the primary deployable for\nassignments.\n\nOur decision to build an image-sharing app was based on a blog post detailing\nInstagram\u2019s early architecture. We felt that the domain allowed us to make the\napp as simple or as complex as needed based on the needs of the course, and\nthat modernizing some of the infrastructure choices would lead to an\narchitecture that would be suitable for many early-stage startups like the\nones we see at Stanford.\n\nFall quarter consisted of a lot of heads-down building of Yoctogram\u2019s backend\nand deployment IaC, which would serve as the starter code for Assignment 2 and\na base for Assignments 3 and 4. We also built a course website and some\nmiscellaneous course management infrastructure. I\u2019ll talk more about their\ntechnical specifics in a later post.\n\nLastly, we started working on lecture slides for the early parts of the course\nin late December. By the time winter quarter started, we had mostly been able\nto pre-prepare all the material for the first few weeks of the course.\n\nTo be continued: reflections on teaching CS 40.\n\n> Unless otherwise noted, the content of this site is licensed under CC BY-NC-\n> SA 4.0.\n\n### Pages\n\n  * Home\n  * RSS\n\n### Links\n\n  * About me\n  * GitHub\n  * Twitter\n  * Linkedin\n\n### Tags\n\n### Table of Contents\n\n### Pages\n\n  * Home\n  * RSS\n\n### Links\n\n  * About me\n  * GitHub\n  * Twitter\n  * Linkedin\n\n### Tags\n\n### Table of Contents\n\n\u00a9 2022-2024 Aditya Saligrama | Source code | Powered by Fuji-v2 & Hugo\n\n", "frontpage": false}
