{"aid": "39988038", "title": "MySQL-Manage Memory Usage Efficiently", "url": "https://shurutech.com/manage-memory-usage-efficiently-in-mysql/", "domain": "shurutech.com", "votes": 3, "user": "sjtly16", "posted_at": "2024-04-10 07:42:03", "comments": 0, "source_title": "MySQL-Manage Memory Usage Efficiently", "source_text": "MySQL-Manage Memory Usage Efficiently\n\nSkip to content Skip to footer\n\nShuruYour Self-Managed Technology Team\n\nLet's Talk\n\nShuruYour Self-Managed Technology Team\n\nLet's Talk\n\nMenu\n\nShuruYour Self Managed Technology Team Close\n\nSoftware Engineering\n\n# MySQL-Manage Memory Usage Efficiently\n\nByShashank Jaitly 24 hours ago 0Comments\n\n## Introduction\n\nA few months back, we faced a significant challenge with our production\ndatabase running MySQL 5.7. The issue was straightforward yet daunting: our\nMySQL server was consuming an unexpectedly high amount of memory, leading to\ndegraded performance and, occasionally, service interruptions. This situation\nprompted us to embark on a comprehensive journey to understand how MySQL uses\nmemory and to discover the tools and strategies necessary for monitoring and\noptimising memory usage effectively.\n\nThis blog post aims to share insights from our experience, focusing on the\ntechnical aspects of MySQL\u2019s memory usage, the utilisation of the Performance\nSchema, and the sys schema to monitor and optimise memory. This post will\nprovide valuable information to help you manage memory usage in MySQL\nefficiently.\n\n## How MySQL Uses Memory\n\nMySQL uses memory in a multifaceted way to ensure data processing efficiency,\nquery performance, and overall system reliability. Understanding these\nmechanisms is crucial for effective memory management and optimisation. Here\u2019s\na breakdown of the key memory utilization aspects in MySQL:\n\n### Global Memory Allocations\n\nMySQL allocates memory globally for several buffers and caches that are shared\namong all connections. Notable among these are the InnoDB buffer pool, the\nquery cache, and the thread cache. The InnoDB buffer pool is particularly\ncrucial as it caches data and indexes for InnoDB tables, significantly\nimpacting performance.\n\n#### Tuning the InnoDB Buffer Pool Size\n\nWhen increasing or decreasing innodb_buffer_pool_size, the operation is\nperformed in chunks. Chunk size is defined by the\ninnodb_buffer_pool_chunk_size configuration option.\n\nThe size of the InnoDB buffer pool must be a multiple of\ninnodb_buffer_pool_chunk_size * innodb_buffer_pool_instances. If the set\ninnodb_buffer_pool_size does not meet this criterion, MySQL automatically\ncorrects it to comply, ensuring efficient memory allocation and system\nperformance.\n\nThe innodb_buffer_pool_size configuration option can be set dynamically using\na SET statement, allowing you to resize the buffer pool without restarting the\nserver. For example:\n\n    \n    \n    SET GLOBAL innodb_buffer_pool_size = 1024 * 1024 * 1024; -- Adjust based on your workload and observationsCode language: PHP (php)\n\nThis command configures the InnoDB buffer pool size, which is crucial for\ncaching data and indexes of InnoDB tables.\n\nThe resizing process can be monitored via Innodb_buffer_pool_resize_status or\nvia server logs. For example:\n\n    \n    \n    SHOW STATUS WHERE Variable_name='InnoDB_buffer_pool_resize_status';Code language: JavaScript (javascript)\n\nNote Active transactions and operations performed through InnoDB APIs should\nbe completed before resizing the buffer pool. When initiating a resizing\noperation, the operation does not start until all active transactions are\ncompleted. Once the resizing operation is in progress, new transactions and\noperations that require access to the buffer pool must wait until the resizing\noperation finishes\n\n### Per-Connection Memory Allocations\n\nEvery client connection to MySQL requires memory for session-specific\nresources such as sort buffers, join buffers, and temporary tables. These\nallocations are dynamic and depend on the queries being executed. For complex\nqueries involving sorting, grouping, or temporary table creation, MySQL might\nallocate additional memory, which increases the per-connection memory\nfootprint.\n\nSort buffer is the buffer used for sorting data during the creation of an\nInnoDB index. Sort buffer size is configured using the sort_buffer_size system\nvariable.\n\nJoin Buffer is the buffer that is used for plain index scans, range index\nscans, and joins that do not use indexes and thus perform full table scans\n\nTemporary Table is a table whose data does not need to be truly permanent. For\nexample, temporary tables might be used as storage areas for intermediate\nresults in complicated calculations or transformations.\n\n#### Analyzing Sort Buffer Usage\n\nTo identify queries that require large sort buffers, you can monitor the\nstatus variables like Sort_merge_passes and adjust the sort_buffer_size as\nneeded:\n\n    \n    \n    SHOW STATUS LIKE 'Sort_merge_passes';Code language: JavaScript (javascript)\n\nThis command helps identify if MySQL has been performing many\nSort_merge_passes, indicating that increasing the sort_buffer_size might\nimprove the performance of ORDER BY or GROUP BY operations that cannot be\nimproved with query optimisation or improved indexing.\n\nTo set sort_buffer_size permanently\n\n  1. Locate your MySQL server\u2019s main configuration file\n  2. Find the [mysqld] section in the file, and add or modify the sort_buffer_size option\n\nFor example, to set the sort_buffer_size to 4MB, you would add\n\n    \n    \n    [mysqld] sort_buffer_size = 4M\n\nNote Adjusting sort_buffer_size requires careful consideration as it is\nallocated for each client connection and can significantly impact memory usage\nand performance. For further specifications related to sort_buffer_size please\nrefer to MySQL docs here\n\n### Thread Memory Allocations\n\nMySQL\u2019s server threads consume memory for various operations. For instance,\nInnoDB uses additional memory for background threads performing tasks like\nflushing dirty pages from the buffer pool or merging insert buffer entries.\n\nDirty Page is a page in the InnoDB buffer pool that has been updated in\nmemory, where the changes are not yet written (flushed) to the data files\n\nAll threads share the same base memory. When a thread is no longer needed, the\nmemory allocated to it is released and returned to the system unless the\nthread goes back into the thread cache. In that case, the memory remains\nallocated.\n\n#### Configuring the Thread Cache Size\n\nThread Cache Size tells us how many threads the server should cache for reuse.\nBy examining the difference between the Connections and Threads_created status\nvariables, we can see how efficient the thread cache is.\n\nConnections variable tells the number of connection attempts (successful or\nnot) made to the MySQL server and Threads_created tells the number of threads\ncreated to handle connections. If Threads_created is big, you may increase the\nthread_cache_size value. The cache miss rate can be calculated as\nThreads_created/Connections.\n\nIncreasing the thread cache size can help improve performance, especially in\nenvironments with a high rate of new connections.\n\nFor instance, if 100 connections are created per second and each thread takes\n1 second before it goes back into the thread cache. The thread_cache_size\nshould be 100 so that all new connections use cached threads.\n\n    \n    \n    SET GLOBAL thread_cache_size = 100; -- Adjust based on your workload and observationsCode language: PHP (php)\n\nHowever, it\u2019s important to note that the actual optimal thread_cache_size\nvalue may vary based on the specific details of your workload and server\nconfiguration\n\nUnderstanding these aspects is the foundation for diagnosing and addressing\nmemory usage concerns in MySQL.\n\n## Monitoring MySQL Memory Usage\n\nTo effectively manage and optimize memory in MySQL, it\u2019s essential to monitor\nits usage accurately. MySQL offers two powerful tools for this purpose: the\nPerformance Schema and the sys schema.\n\n### Performance Schema\n\nThe Performance Schema is a feature-rich tool that provides detailed insights\ninto MySQL server execution at a low overhead. It includes numerous\ninstruments and consumers that can be configured to monitor various aspects of\nthe MySQL server, including memory usage.\n\nThe Performance Schema tracks memory allocation and deallocation operations\nfor memory diagnostics, offering visibility into how memory is used across\ndifferent MySQL components.\n\nTo leverage the Performance Schema for monitoring memory usage, it\u2019s important\nto enable the specific instruments related to memory and configure the\nconsumers that collect and store this data. Once configured, queries can be\nexecuted against the Performance Schema\u2019s tables to analyze memory usage\nmetrics.\n\nEnabling Memory Instruments\n\nFirst, enable the memory instrumentation:\n\n    \n    \n    UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES' WHERE NAME LIKE 'memory/%';Code language: JavaScript (javascript)\n\nThen, query the memory usage by instrument:\n\n    \n    \n    SELECT * FROM performance_schema.memory_summary_global_by_event_name WHERE COUNT_ALLOC > 0;Code language: CSS (css)\n\nThese queries activate memory instruments and display memory usage by each\ninstrument, allowing for detailed analysis.\n\nServer monitoring occurs continuously and unobtrusively with very little\noverhead. Activating the Performance Schema does not make the server unusable.\n\n### sys Schema\n\nThe sys schema provides a high-level view of the information collected by the\nPerformance Schema, simplifying the monitoring and analysis of MySQL\nperformance metrics, including memory usage.\n\nIt includes pre-defined views and procedures that encapsulate complex\nPerformance Schema queries, making it easier for administrators and developers\nto understand and optimize MySQL\u2019s performance.\n\nFor memory monitoring, the sys schema offers views like memory_global_total\nand memory_by_thread_by_current_bytes, which present aggregated memory usage\ndata. These views are instrumental in identifying high memory usage patterns\nand pinpointing the sources of memory consumption.\n\nViewing Global Memory Usage\n\nTo get a summary of global memory usage:\n\n    \n    \n    SELECT * FROM sys.memory_global_total;Code language: CSS (css)\n\nAnd to analyze memory usage by thread\n\n    \n    \n    SELECT * FROM sys.memory_by_thread_by_current_bytes;Code language: CSS (css)\n\nThese views provide a simplified interface to the Performance Schema\u2019s memory\nusage data, making it easier to identify and address memory usage concerns.\n\n### Bonus: Regular Monitoring and Analysis\n\nUsing the Performance Schema and the sys schema, establish a routine for\nmonitoring memory usage, identifying trends, and making adjustments as\nnecessary to maintain optimal performance.\n\n#### Routine Monitoring Query\n\n    \n    \n    SELECT EVENT_NAME, COUNT_STAR, SUM_TIMER_WAIT as TOTAL_ALLOCATED FROM performance_schema.events_stages_summary_global_by_event_name WHERE SUM_TIMER_WAIT > 0 ORDER BY SUM_TIMER_WAIT DESC;Code language: JavaScript (javascript)\n\nThis query provides insights into the memory usage by different stages and\nevents, helping in regular monitoring and analysis for memory optimization\n\n## Conclusion\n\nOptimizing memory usage in MySQL is a critical aspect of database\nadministration that requires a deep understanding of how MySQL uses memory and\nthe tools available for monitoring and analysis. By leveraging the Performance\nSchema and the sys schema we can gain valuable insights into memory usage\npatterns and make informed decisions to optimize memory allocation. Our\nexperience in addressing high memory consumption in our production database\nunderscores the importance of continuous monitoring, analysis, and\noptimization to ensure MySQL runs efficiently and reliably.\n\n## References\n\nMySQL 5.7 Official Documentation: https://dev.mysql.com/doc/\n\nhttps://cloud.google.com/mysql/memory-usage\n\nRead about Mitigating High CPU Usage in MySQL\n\nTags: Memory UsageMySQLOptimisationPerformancesys Schema\n\n2Likes\n\n### Leave a comment Cancel reply\n\n### You May Also Like\n\nSoftware Engineering\n\n###### How is 2 git branches workflow more convenient for mobile app\ndevelopment?\n\nSoftware Engineering\n\n###### Kong API Gateway on Kubernetes \u2013 A Comprehensive Guide\n\n## Get the right partners for you.\n\n###### Say Hello\n\nhi@shurutech.com\n\nShuru Technologies PTE Ltd \u00a9 2024. All rights reserved.\n\nGo to mobile version\n\n", "frontpage": false}
