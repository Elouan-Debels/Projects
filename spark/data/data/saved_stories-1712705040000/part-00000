{"aid": "39981724", "title": "The History of ARM Linux", "url": "https://www.arm.linux.org.uk/docs/history.php", "domain": "linux.org.uk", "votes": 2, "user": "debo_", "posted_at": "2024-04-09 17:21:49", "comments": 0, "source_title": "ARM Linux - The History", "source_text": "ARM Linux - The History\n\nThe History of ARM Linux  \n---  \n  \nHome + About + Documentation + Developer + Mailing Lists + Contacting\n\nI reserve the right to make mistakes in here - this is from memory!\n\n## Initial port\n\nARM Linux started out in the Summer of 1994 as a one-man port of a 1.0.x\nkernel to the Acorn A5000. The aim was to get a Unix OS running on the A5000,\nand not to any thoughts of integrating the result back into Linus' kernel\ntree. In those days, the kernel was not portable in any respect (indeed, the\nport was started before the kernel even knew about the SPARC, MIPS, Alpha or\nM68K architectures).\n\n### Unpacking The Source\n\nInitially, the kernel sources were unpacked onto an ADFS hard drive,\nconverting the filenames and directories from foo.c to c.foo. When there were\ntoo many files (such as the kernel includes) in a single directory (ADFS has a\nlimit of 77 files per directory), the directory was split into two separate\ndirectories (eg, include1 and include2). The original makefiles initially were\nkept, but they used GNU make extensions which were incompatible with the Acorn\nmake utility (amu).Norcroft C (with very long command line) was used to\ncompile this kernel. Eventually, an alias was set up for compiling Linux-\nrelated programs, called 'gcc'! There wasn't GCC for ARM back then, and\ncertainly not a set of binutils for ARM, so cross-compilation was out of the\nquestion. After attempting to compile a couple of kernel files, it was clear\nthat there was something missing - autoconf.h. Also, the inline functions in\nthe header files were discovered...\n\n### Kernel Configuration\n\nThe kernel configuration was a nightmare - no configure script to\nautomatically generate the required configuration. A very basic kernel\nconfiguration was installed by editing the original GNU Makefiles (and\nremoving the GNU extensions) and editing header files (yuck!)This basic\nconfiguration did not include any networking (in fact, it didn't even require\nthe drivers/net/ or the net/ trees), SCSI or block drivers.\n\n### Kernel compilation\n\nEach section of the kernel was compiled up separately - fs, kernel, ipc. As\nthe inline functions in the header files were discovered, they were removed\nand put into a separate directory called `inclib'. The Linux memory management\nsystem (mm) had to be re-written since the memory management hardware does its\nmappings `the wrong way round' - it is told where to map a physical page into\nthe logical address space, not where to map a logical page to a physical page.\nVery little time was spent initially on the MM system, especially as there\nwere drivers to sort out as well.Drivers were less of a problem - although the\nA5000 has PC-like floppy, IDE, serial and parallel port hardware, it does not\nhave a VGA adapter as such - there isn't character generator hardware but\ninstead a frame buffer. There isn't a keyboard controller, but a serial port\nto talk to the keyboard. A new set of very basic console and keyboard support\ncode was written, and the original PC Linux code discarded.Any assembler such\nas the kernel entry points had to be interpreted and re-written.\n\n### Linking\n\nOnce all the modules had been compiled, an attempt was made to link the\nkernel. This attempt was expected to fail, and indeed it did. It provided a\nlist of undefined symbols, which then indicate the areas of the kernel that\nneeded more work.After a month of hacking, Linux finally booted and was asking\nfor a root disk. A root disk requires a block device, but the kernel didn't\ncontain any. The Linux floppy driver was singled out for some work, and after\ntripping over a hardware mismatch between the PC and Acorn hardware, the\nkernel could control the floppy drive. The kernel still wasn't useful without\nthe root disk!\n\n### Root disks...\n\nHow to create a root disk: you need a kernel (yep, got that), and a system\n(erm, no, that requires a root disk), ahhh. That sounds like a catch-22\nsituation, but not all that bad since it has a difference, or rather a way\nout. Linux already runs on one platform, so find a friendly PC user with Linux\ninstalled (Thanks Jez) to create a root disk for you but without any programs\non. The disk just contained the /dev special device entries, since the ARM\ncannot run PC code.After several nights disturbing the other residents of my\ndigs due to the floppy drives chug-chug-chug noise), I managed to get the\nkernel to mount its first root filesystem.The kernel now boots and mounts its\nroot filesystem. But it's still useless! It hasn't got anything to run! It\nneeds at least a shell. Ok, so what does sunsite have to offer? Smash (small\nshell) written as a university project by X#*!X#*!X#*!X! It's not a feature\npacked shell, but it's a start. It does, however, require a C library.This\nidea was shelved for a while and an alternative approach taken - why not put\nthe shell into the kernel? That way, you don't need a C library! So a very\nbasic small shell was created that the kernel could run if it didn't find an\ninit daemon or a shell on the filesystem to run. It had very simple commands -\ncp, rm, mkdir, rmdir, mount, umount, and it wouldn't even allow you to run a\ncommand from the filesystem.\n\n## The first binaries\n\nA C library was needed, and a very small and basic C library was created using\nthe Acorn DDE. The whole of this static C library was written from scratch,\nattempting to support everything that smash required - stdio, string and a few\nUnix specifics thrown in for good measure.Once smash was working, the command\nset was improved - using the GNU fileutils and textutils packages (which were\nalso compiled using Norcroft) caused the C library to grow. Later, some of the\nutil-linux package was added.By this time, the root disk was looking slightly\nrespectable, but the system still wasn't useful - all it was capable of was\ncopying and manipulating files. There wasn't even an editor for it!More\nbinaries were added over time, but progress was slow. It was time to get a\nproper C library together, with GCC and binutils.\n\n## Linux C Library, Compilers and Binutils\n\nAt the start of 1995, GCC 2.6.1 supported the ARM processors, but binutils\n(gas 940921 from Richard Earnshaw) was lacking. Binutils didn't have any\narchitecture-independent support for Linux either. Since GCC had a hope of\nworking, it was cross-compiled on a Solbourne at Southampton University. cc1\nwas tested with some trivial code and the result was ARM code. This was the\nfirst package done.Binutils didn't have particularly brilliant support for ARM\n- it didn't link the bl instruction properly. However, after several attempts\nat fixing this (I hadn't even looked into the GNU binutils package before),\nthese problems were fixed. It did unfortunately take a significant amount of\ntime to sort out a reasonable set of tools.Once the obvious problems had been\ncured, it was time to try cross-compiling a very simple program - a couple of\ntrivial assembler files that called the Linux system calls and checking that\nthey ran.\n\n## Later kernels\n\nThis part isn't written yet, but here are a couple of archives of the source\ncode to the original Linux bootloader and kernel, both of which were compiled\nnative in the RISC OS environment. To unarchive these, either use !ArcFS,\n!SparkPlug, !Spark, (all RISC OS utilities) or get a copy of the GPL NSpark by\nAndy Duplain and othersLinux Kernel source V1.1.59+ (RISC OS Spark file\narchive) Boot Loader for V1.1.59+ (RISC OS Spark file archive)more later...  \n---  \n(C) 2024 Russell King, All rights reserved.| Linux is a trademark of Linus\nTorvalds in the US and some other countries. ARM and StrongARM are trademarks\nof ARM Ltd. This site is hosted on a Macchiatobin VM running Linux.\nConnectivity for this site is provided by Deep Blue Solutions Ltd.  \n---|---\n\n", "frontpage": false}
