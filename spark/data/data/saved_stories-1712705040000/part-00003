{"aid": "39981734", "title": "Security advisory for the standard library (CVE-2024-24576)", "url": "https://blog.rust-lang.org/2024/04/09/cve-2024-24576.html", "domain": "rust-lang.org", "votes": 1, "user": "ingve", "posted_at": "2024-04-09 17:22:16", "comments": 0, "source_title": "Security advisory for the standard library (CVE-2024-24576) | Rust Blog", "source_text": "Security advisory for the standard library (CVE-2024-24576) | Rust Blog\n\n## Security advisory for the standard library (CVE-2024-24576)\n\nApr. 9, 2024 \u00b7 The Rust Security Response WG\n\nThe Rust Security Response WG was notified that the Rust standard library did\nnot properly escape arguments when invoking batch files (with the bat and cmd\nextensions) on Windows using the Command API. An attacker able to control the\narguments passed to the spawned process could execute arbitrary shell commands\nby bypassing the escaping.\n\nThe severity of this vulnerability is critical if you are invoking batch files\non Windows with untrusted arguments. No other platform or use is affected.\n\nThis vulnerability is identified by CVE-2024-24576.\n\n## Overview\n\nThe Command::arg and Command::args APIs state in their documentation that the\narguments will be passed to the spawned process as-is, regardless of the\ncontent of the arguments, and will not be evaluated by a shell. This means it\nshould be safe to pass untrusted input as an argument.\n\nOn Windows, the implementation of this is more complex than other platforms,\nbecause the Windows API only provides a single string containing all the\narguments to the spawned process, and it's up to the spawned process to split\nthem. Most programs use the standard C run-time argv, which in practice\nresults in a mostly consistent way arguments are splitted.\n\nOne exception though is cmd.exe (used among other things to execute batch\nfiles), which has its own argument splitting logic. That forces the standard\nlibrary to implement custom escaping for arguments passed to batch files.\nUnfortunately it was reported that our escaping logic was not thorough enough,\nand it was possible to pass malicious arguments that would result in arbitrary\nshell execution.\n\n## Mitigations\n\nDue to the complexity of cmd.exe, we didn't identify a solution that would\ncorrectly escape arguments in all cases. To maintain our API guarantees, we\nimproved the robustness of the escaping code, and changed the Command API to\nreturn an InvalidInput error when it cannot safely escape an argument. This\nerror will be emitted when spawning the process.\n\nThe fix will be included in Rust 1.77.2, to be released later today.\n\nIf you implement the escaping yourself or only handle trusted inputs, on\nWindows you can also use the CommandExt::raw_arg method to bypass the standard\nlibrary's escaping logic.\n\n## Affected Versions\n\nAll Rust versions before 1.77.2 on Windows are affected, if your code or one\nof your dependencies executes batch files with untrusted arguments. Other\nplatforms or other uses on Windows are not affected.\n\n## Acknowledgments\n\nWe want to thank RyotaK for responsibly disclosing this to us according to the\nRust security policy, and Simon Sawicki (Grub4K) for identifying some of the\nescaping rules we adopted in our fix.\n\nWe also want to thank the members of the Rust project who helped us disclose\nthe vulnerability: Chris Denton for developing the fix; Mara Bos for reviewing\nthe fix; Pietro Albini for writing this advisory; Pietro Albini, Manish\nGoregaokar and Josh Stone for coordinating this disclosure; Amanieu d'Antras\nfor advising during the disclosure.\n\n#### Get help!\n\n  * Documentation\n  * Contact the Rust Team\n\n#### Terms and policies\n\n  * Code of Conduct\n  * Licenses\n  * Logo Policy and Media Guide\n  * Security Disclosures\n  * All Policies\n\n#### Social\n\n#### RSS\n\n  * Main Blog\n  * \"Inside Rust\" Blog\n\nMaintained by the Rust Team. See a typo? Send a fix here!\n\n", "frontpage": false}
