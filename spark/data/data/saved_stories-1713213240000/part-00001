{"aid": "40041034", "title": "SNI", "url": "https://blog.cloudflare.com/polyfill-io-now-available-on-cdnjs-reduce-your-supply-chain-risk", "domain": "cloudflare.com", "votes": 2, "user": "Aguinaldo", "posted_at": "2024-04-15 14:32:03", "comments": 0, "source_title": "polyfill.io now available on cdnjs: reduce your supply chain risk", "source_text": "polyfill.io now available on cdnjs: reduce your supply chain risk\n\nGet Started Free|Contact Sales\n\n## The Cloudflare Blog\n\nSubscribe to receive notifications of new posts:\n\n# polyfill.io now available on cdnjs: reduce your supply chain risk\n\n02/29/2024\n\n  * Sven Sauleau\n\n  * Michael Tremante\n\n4 min read\n\nPolyfill.io is a popular JavaScript library that nullifies differences across\nold browser versions. These differences often take up substantial development\ntime.\n\nIt does this by adding support for modern functions (via polyfilling),\nultimately letting developers work against a uniform environment simplifying\ndevelopment. The tool is historically loaded by linking to the endpoint\nprovided under the domain polyfill.io.\n\nIn the interest of providing developers with additional options to use\npolyfill, today we are launching an alternative endpoint under cdnjs. You can\nreplace links to polyfill.io \u201cas is\u201d with our new endpoint. You will then rely\non the same service and reputation that cdnjs has built over the years for\nyour polyfill needs.\n\nOur interest in creating an alternative endpoint was also sparked by some\nconcerns raised by the community, and main contributors, following the\ntransition of the domain polyfill.io to a new provider (Funnull).\n\nThe concerns are that any website embedding a link to the original polyfill.io\ndomain, will now be relying on Funnull to maintain and secure the underlying\nproject to avoid the risk of a supply chain attack. Such an attack would occur\nif the underlying third party is compromised or alters the code being served\nto end users in nefarious ways, causing, by consequence, all websites using\nthe tool to be compromised.\n\nSupply chain attacks, in the context of web applications, are a growing\nconcern for security teams, and also led us to build a client side security\nproduct to detect and mitigate these attack vectors: Page Shield.\n\nIrrespective of the scenario described above, this is a timely reminder of the\ncomplexities and risks tied to modern web applications. As maintainers and\ncontributors of cdnjs, currently used by more than 12% of all sites, this\nreinforces our commitment to help keep the Internet safe.\n\n### polyfill.io on cdnjs\n\nThe full polyfill.io implementation has been deployed at the following URL:\n\nhttps://cdnjs.cloudflare.com/polyfill/\n\nThe underlying bundle link is:\n\nFor minified: https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js For\nunminified: https://cdnjs.cloudflare.com/polyfill/v3/polyfill.js\n\nUsage and deployment is intended to be identical to the original polyfill.io\nsite. As a developer, you should be able to simply \u201creplace\u201d the old link with\nthe new cdnjs-hosted link without observing any side effects, besides a\npossible improvement in performance and reliability.\n\nIf you don\u2019t have access to the underlying website code, but your website is\nbehind Cloudflare, replacing the links is even easier, as you can deploy a\nCloudflare Worker to update the links for you:\n\n    \n    \n    export interface Env {} export default { async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> { ctx.passThroughOnException(); const response = await fetch(request); if ((response.headers.get('content-type') || '').includes('text/html')) { const rewriter = new HTMLRewriter() .on('link', { element(element) { const rel = element.getAttribute('rel'); if (rel === 'preconnect') { const href = new URL(element.getAttribute('href') || '', request.url); if (href.hostname === 'polyfill.io') { href.hostname = 'cdnjs.cloudflare.com'; element.setAttribute('href', href.toString()); } } }, }) .on('script', { element(element) { if (element.hasAttribute('src')) { const src = new URL(element.getAttribute('src') || '', request.url); if (src.hostname === 'polyfill.io') { src.hostname = 'cdnjs.cloudflare.com'; src.pathname = '/polyfill' + src.pathname; element.setAttribute('src', src.toString()); } } }, }); return rewriter.transform(response); } else { return response; } }, };\n\nInstructions on how to deploy a worker can be found on our developer\ndocumentation.\n\nYou can also test the Worker on your website without deploying the worker. You\ncan find instructions on how to do this in another blog post we wrote in the\npast.\n\n### Implemented with Rust on Cloudflare Workers\n\nWe were happy to discover that polyfill.io is a Rust project. As you might\nknow, Rust has been a first class citizen on Cloudflare Workers from the\nstart.\n\nThe polyfill.io service was hosted on Fastly and used their Rust library. We\nforked the project to add the compatibility for Cloudflare Workers, and plan\nto make the fork publicly accessible in the near future.\n\n### Worker\n\nThe https://cdnjs.cloudflare.com/polyfill/[...].js endpoints are also\nimplemented in a Cloudflare Worker that wraps our Polyfill.io fork. The\nwrapper uses Cloudflare\u2019s Rust API and looks like the following:\n\n    \n    \n    #[event(fetch)] async fn main(req: Request, env: Env, ctx: Context) -> Result<Response> { let metrics = {...}; let polyfill_store = get_d1(&req, &env)?; let polyfill_env = Arc::new(service::Env { polyfill_store, metrics }); // Run the polyfill.io entrypoint let res = service::handle_request(req2, polyfill_env).await; let status_code = if let Ok(res) = &res { res.status_code() } else { 500 }; metrics .requests .with_label_values(&[&status_code.to_string()]) .inc(); ctx.wait_until(async move { if let Err(err) = metrics.report_metrics().await { console_error!(\"failed to report metrics: {err}\"); } }); res }\n\nThe wrapper only sets up our internal metrics and logging tools, so we can\nmonitor uptime and performance of the underlying logic while calling the\nPolyfill.io entrypoint.\n\n### Storage for the Polyfill files\n\nAll the polyfill files are stored in a key-value store powered by Cloudflare\nD1. This allows us to fetch as many polyfill files as we need with a single\nSQL query, as opposed to the original implementation doing one KV get() per\nfile.\n\nFor performance, we have one Cloudflare D1 instance per region and the SQL\nqueries are routed to the nearest database.\n\n### cdnjs for your JavaScript libraries\n\ncdnjs is hosting over 6k JavaScript libraries as of today. We are looking for\nways to improve the service and provide new content. We listen to community\nfeedback and welcome suggestions on our community forum, or cdnjs on GitHub.\n\nPage Shield is also available to all paid plans. Log in to turn it on with a\nsingle click to increase visibility and security for your third party assets.\n\nWe protect entire corporate networks, help customers build Internet-scale\napplications efficiently, accelerate any website or Internet application, ward\noff DDoS attacks, keep hackers at bay, and can help you on your journey to\nZero Trust.\n\nVisit 1.1.1.1 from any device to get started with our free app that makes your\nInternet faster and safer.\n\nTo learn more about our mission to help build a better Internet, start here.\nIf you're looking for a new career direction, check out our open positions.\n\nDiscuss on Hacker News\n\nCDNJSJavaScriptSupply Chain Attacks\n\nFollow on X\n\nSven Sauleau|@svensauleau\n\nMichael Tremante|@MichaelTremante\n\nCloudflare|@cloudflare\n\nRelated posts\n\nOctober 13, 2021 12:59 PM\n\n## Coalescing Connections to Improve Network Privacy and Performance\n\nReal world experiments for evaluating connection coalescing effects....\n\nBy\n\n  * Talha Paracha,\n\n  * Suleman Ahmad\n\nResearch, Privacy, Performance, Browser Insights, Better Internet, CDNJS\n\nJuly 24, 2021 12:57 PM\n\n## Cloudflare's Handling of an RCE Vulnerability in cdnjs\n\nRecently, a RCE vulnerability in the way cdnjs\u2019 backend is automatically\nkeeping web resources up to date has been disclosed. Read about how Cloudflare\nhandled the security incident and what will prevent similar exploits in the\nfuture....\n\nBy\n\n  * Jonathan Ganz,\n\n  * Thomas Calderon,\n\n  * Sven Sauleau\n\nCDNJS, Security, Bug Bounty\n\nSeptember 10, 2020 11:00 AM\n\n## Migrating cdnjs to serverless with Workers KV\n\nCloudflare powers cdnjs, an open-source project that delivers popular\nJavaScript libraries to over 11% of websites. Today, we are excited to\nannounce its migration to a serverless infrastructure using Cloudflare Workers\nand its distributed key-value store Workers KV!...\n\nBy\n\n  * Tyler Caslin\n\nCDNJS, Cloudflare Workers KV, Open Source, Speed & Reliability, Serverless\n\nJanuary 27, 2020 4:48 PM\n\n## JavaScript Libraries Are Almost Never Updated Once Installed\n\nAn analysis, based on CDNJS data, of when and if JavaScript libraries are\nupdated after being installed onto websites....\n\nBy\n\n  * Zack Bloom\n\nJavaScript, CDNJS, Data\n\n  * Sales\n  * Enterprise Sales\n  * Become a Partner\n\nContact Sales:\n\n+1 (888) 993-5273\n\n  * Getting Started\n  * Pricing\n  * Case Studies\n  * White Papers\n  * Webinars\n  * Learning Center\n\n  * Community\n  * Community Hub\n  * Project Galileo\n  * Athenian Project\n  * Cloudflare TV\n\n  * Developers\n  * Developer Hub\n  * Developers Discord\n  * Cloudflare Workers\n  * Integrations\n\n  * Tools\n  * Cloudflare Radar\n  * Speed Test\n  * Is BGP Safe Yet?\n  * RPKI Toolkit\n  * Certificate Transparency\n\n  * Support\n  * Support\n  * Cloudflare Status\n  * Compliance\n  * GDPR\n\n  * Company\n  * About Cloudflare\n  * Our Team\n  * Press\n  * Analysts\n  * Careers\n  * Logo\n  * Network Map\n\n\u00a9 2024 Cloudflare, Inc. | Privacy Policy | Terms of Use |Cookie Preferences | Trust & Safety | Trademark\n\n", "frontpage": false}
