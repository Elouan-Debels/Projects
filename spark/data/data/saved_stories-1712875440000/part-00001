{"aid": "40004141", "title": "RefinedC: Automating the foundational verification of C code with refine (2021)", "url": "https://plv.mpi-sws.org/refinedc/", "domain": "mpi-sws.org", "votes": 1, "user": "fanf2", "posted_at": "2024-04-11 16:42:04", "comments": 0, "source_title": "RefinedC: Automating the Foundational Verification of C Code with Refined Ownership Types", "source_text": "RefinedC: Automating the Foundational Verification of C Code with Refined\nOwnership Types\n\n# RefinedC\n\n# Automating the Foundational Verification of C Code with Refined Ownership\nTypes\n\nMichael Sammler, Rodolphe Lepigre, Robbert Krebbers, Kayvan Memarian, Derek\nDreyer, Deepak Garg.\n\nPaper Appendix Git repository Artifact Chat\n\nGiven the central role that C continues to play in systems software, and the\ndifficulty of writing safe and correct C code, it remains a grand challenge to\ndevelop effective formal methods for verifying C programs. In this paper, we\npropose a new approach to this problem: a type system we call RefinedC, which\ncombines ownership types (for modular reasoning about shared state and\nconcurrency) with refinement types (for encoding precise invariants on C data\ntypes and Hoare-style specifications for C functions).\n\nRefinedC is both automated (requiring minimal user intervention) and\nfoundational (producing a proof of program correctness in Coq), while at the\nsame time handling a range of low-level programming idioms such as pointer\narithmetic. In particular, following the approach of RustBelt, the soundness\nof the RefinedC type system is justified semantically by interpretation into\nthe Coq-based Iris framework for higher-order concurrent separation logic.\nHowever, the typing rules of RefinedC are also designed to be encodable in a\nnew \u201cseparation logic programming\u201d language we call Lithium. By restricting to\na carefully chosen (yet expressive) fragment of separation logic, Lithium\nsupports predictable, automatic, goal-directed proof search without\nbacktracking. We demonstrate the effectiveness of RefinedC on a range of\nrepresentative examples of C code.\n\nRead Paper\n\nThis paper was realized using Iris.\n\n", "frontpage": false}
