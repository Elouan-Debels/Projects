{"aid": "40003373", "title": "Announcing pl/dotnet, version 0.99 (beta) for PostgreSQL", "url": "https://www.postgresql.org/about/news/announcing-pldotnet-version-099-beta-2838/", "domain": "postgresql.org", "votes": 1, "user": "neonsunset", "posted_at": "2024-04-11 15:38:35", "comments": 0, "source_title": "Announcing pl/dotnet, version 0.99 (beta)", "source_text": "PostgreSQL: Announcing pl/dotnet, version 0.99 (beta)\n\n8th February 2024: PostgreSQL 16.2, 15.6, 14.11, 13.14, and 12.18 Released!\n\n## Quick Links\n\n  * About\n  * Policies\n  * Feature Matrix\n  * Donate\n  * History\n  * Sponsors\n\n    * Contributing\n    * Financial\n    * Servers\n  * Latest News\n  * Upcoming Events\n\n    * Past events\n  * Press\n  * Licence\n\n# Announcing pl/dotnet, version 0.99 (beta)\n\nPosted on 2024-04-09 by Brick Abode\n\nRelated Open Source\n\n# Announcing pl/dotnet, version 0.99 (beta)\n\npl/dotnet adds full support for C# and F# to PostgreSQL. 0.99 is our public\nbeta release; we wish to share its amazingness with the world.\n\n  * We support all PL operations: functions, procedures, DO, SPI, triggers, records, SRF, OUT/INOUT, table functions, etc\n  * We natively support 40 out of 46 standard user types, the most of any external PL\n  * Fully NPGSQL-compatible, and SPI is exposed through the NPGSQL API for maximum compatibility\n  * In our benchmarks, C# and F# are the fastest Procedural Languages in PostrgreSQL\n  * All features are fully tested for both C# and F#, with 1013 unit tests\n  * 100% free software under the PostgreSQL license\n\nThis is a beta release; we invite usage and welcome feedback.\n\nAccessing it:\n\n  * Installation instructions: dpkg, docker\n  * Our GitHub\n  * Our discussion forum\n  * Our WebPage\n  * Our FAQ\n  * Our Wiki\n  * Our whitepaper\n\nMore details below.\n\n## Usage example\n\npl/dotnet gives you the full power of C# and F# in your PostgreSQL procedures,\nfunctions, and triggers.\n\n    \n    \n    CREATE OR REPLACE FUNCTION dynamic_record_generator_srf(lim INT8) RETURNS SETOF record AS $$ upperLimit = lim.HasValue ? lim : System.Int32.MaxValue; for(long i=0;i<upperLimit;i++){ yield return new object?[] { i, $\"Number is {i}\" }; } $$ LANGUAGE plcsharp; CREATE OR REPLACE FUNCTION dynamic_record_generator_srf_fsharp(lim INT8) RETURNS SETOF record AS $$ let upperLimit = Option.defaultValue (int64 System.Int32.MaxValue) lim seq { for i in 0L .. upperLimit - 1L do yield [| box i; $\"Number is {i}\" |] } $$ LANGUAGE plfsharp;\n\n## SQL features\n\nWe support all SQL function modes:\n\n  * normal procedures and functions\n  * trigger functions, will full trigger support: trigger arguments, old/new row, row rewriting (where allowed), and all the standard trigger information\n  * set-returning functions, nicely mapped to iterators in C# and sequences in F#\n  * table functions, as well as functions returning records or sets of records\n  * full support for IN/OUT/INOUT functions\n\n## Data type support\n\nWe support 40 PostgreSQL types, with all mapped to their NPGSQL-standard\ndotnet types. The only notable exceptions are multirange, enum, and struct\ntypes, which we hope to add in the future. All datatypes are nullable, have\nfull array support, and are fully unit-tested for C# and F#. (Formatted as a\nlist of (PostgreSQL type: Dotnet type) instead of a table for technical\nreasons.)\n\n  * bit: BitArray\n  * bool: Bool\n  * box: NpgsqlBox\n  * bpchar: String\n  * bytea: Byte[]\n  * cidr: (IPAddress Address, Int Netmask)\n  * circle: NpgsqlCircle\n  * date: DateOnly\n  * daterange: NpgsqlRange<DateOnly>\n  * float4: Float\n  * float8: Double\n  * inet: (IPAddress Address, Int Netmask)\n  * int2: Short\n  * int4: Int\n  * int4range: NpgsqlRange<Int>\n  * int8: Long\n  * int8range: NpgsqlRange<Long>\n  * interval: NpgsqlInterval\n  * json: String\n  * line: NpgsqlLine\n  * lseg: NpgsqlLSeg\n  * macaddr8: PhysicalAddress\n  * macaddr: PhysicalAddress\n  * money: Decimal\n  * path: NpgsqlPath\n  * point: NpgsqlPoint\n  * polygon: NpgsqlPolygon\n  * record: Object?[]\n  * text: String\n  * timestamp: DateTime\n  * timestamptz: DateTime\n  * time: TimeOnly\n  * timetz: DateTimeOffset\n  * tsrange: NpgsqlRange<DateTime>\n  * tstzrange: NpgsqlRange<DateTime>\n  * uuid: Guid\n  * varbit: BitArray\n  * varchar: String\n  * void: Void\n  * xml: String\n\n## SPI\n\nOur SPI leverages the NPGSQL client library to provide a native dotnet\nimplementation which is maximally compatible with existing client code. We\nintercepted the NPGSQL calls at a very low level to replace the client\nprotocol handling with SPI calls; otherwise, NPGSQL was unmodified. We\nimported the NPGSQL test suite as stored procedures and are using it for our\ntesting, giving us very good understanding of our compatiblity level.\n\nWork remains to improve the compatibility and add features. Our biggest\ncategory of NPGSQL tests that continue to fail is error mapping, because SPI\nthrows exceptions differently than NPGSQL does. Such incompatibilities are\nminor but numerous; we continue working to improve them.\n\nHere are our currently tested SPI operations:\n\n  * Data Manipulation Language (DML) Operations\n\n    * Select\n    * Insert\n    * Update\n    * Delete\n  * Data Definition Language (DDL) Operations\n\n    * Create Table\n    * Alter Table\n    * Drop Table\n    * Truncate\n    * Create Index\n    * Drop Index\n    * Create View\n    * Drop View\n    * Create Function\n    * Call Function\n    * Drop Function\n    * Create Procedure\n    * Call Procedure\n    * Drop Procedure\n  * Transaction Control\n\n    * Begin Transaction\n    * Commit\n    * Rollback\n  * Supported Data Types: all pl/dotnet types\n\n    * Basic types (including ranges)\n    * Array types\n    * Record\n\n## What we don't have\n\nWe lack support for multirange, enum, and composite/table types. We intend to\nadd them.\n\nOur SPI implementation lacks some minor features like sub-transactions, and we\nsometimes raise errors in a different (and therefore slightly incompatible)\nway from NPGSQL.\n\nOur build system, with both dpkg and binary output, is functional but not as\ntidy as we would like.\n\nWe welcome code submissions to address any of these issues, and we hope to\nimprove them all in time.\n\n## Where to get it\n\nOur operating system support:\n\n  * We fully support Linux and provide dpkg's for Debian and Ubuntu. (Details on our installation page)\n  * We have built and tested the system on OSX (arm and x86), but we have not packaged it yet.\n  * We look forward to having Windows support soon; ping us if you would like to help.\n\n# Getting in touch\n\nWe welcome hearing from the community. You can reach us at our GitHub\ndiscussion forum or email us at pldotnet@brickabode.com.\n\nPolicies | Code of Conduct | About PostgreSQL | Contact\n\nCopyright \u00a9 1996-2024 The PostgreSQL Global Development Group\n\n", "frontpage": false}
