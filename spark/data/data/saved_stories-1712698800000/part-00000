{"aid": "39980588", "title": "The Open Multi-Perspective Issuance Corroboration Project", "url": "https://freedom-to-tinker.com/2024/02/13/announcing-the-open-multi-perspective-issuance-corroboration-project/", "domain": "freedom-to-tinker.com", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-09 15:38:26", "comments": 0, "source_title": "Announcing the Open Multi-Perspective Issuance Corroboration Project", "source_text": "Announcing the Open Multi-Perspective Issuance Corroboration Project - Freedom\nto Tinker\n\nApril 9, 2024\n\nPosts Comments\n\nFreedom to Tinker\n\nResearch and commentary on digital technologies in public life\n\n# Announcing the Open Multi-Perspective Issuance Corroboration Project\n\nFebruary 13, 2024 by Henry Birge-Lee Leave a Comment\n\nBy Henry Birge-Lee, Grace Cimaszewski, Liang Wang, Cyrill Kr\u00e4henb\u00fchl, Kerstin\nFagerstrom, and Prateek Mittal\n\nToday we are announcing the development of a new open source project by our\nresearch group at Princeton University designed to strengthen certificate\nissuance against Border Gateway Protocol (BGP) routing attacks. Recent years\nhave seen an uptick in a very powerful attack that can man-in-the-middle an\nHTTPS webpage by exploiting a vulnerability in the Internet\u2019s routing system.\nWe previously analyzed one such example of this attack in the wild in a\nprevious blog post.\n\nAs discussed in our Usenix Security \u201823 paper, the process that CAs use to\nverify domain ownership, known as domain control validation, is vulnerable to\nBGP attacks. By hijacking traffic to a victim\u2019s webserver during domain\ncontrol validation, an adversary can fool a CA into signing a certificate on\nits behalf for a domain it does not control. To mitigate the risk of BGP\nattacks on domain control validation, several CAs (including the world\u2019s\nlargest Web PKI CA Let\u2019s Encrypt and Google Trust Services) have deployed a\ncountermeasure known as Multi-Perspective Issuance Corroboration or MPIC\n(which we designed in our Usenix Security \u201818 paper and studied the deployment\nof in our Usenix Security \u201821 paper). In MPIC, domain control validation for\neach certificate request is performed multiple times from distinct vantage\npoints spread throughout the Internet. This technique detects BGP attacks by\nexploiting the fact that many BGP announcements are localized and only affect\na portion of Internet traffic. If a CA performs domain control validation from\na vantage point whose routing is unaffected by the adversary\u2019s attack, this\nvantage point\u2019s traffic will be routed to the victim\u2019s server and connect to\nthe \u201creal\u201d domain, enabling detection of the attack.\n\nToday, we are beginning the development of an open source, and extensible MPIC\nimplementation that can be readily deployed by any CA. There are currently\nthree MPIC implementations, but each has limitations that potentially prevent\nit from scaling to the entirety of the CA ecosystem.\n\n  * Let\u2019s Encrypt uses MPIC in their open-source production CA Boulder, but it is based on Let\u2019s Encrypt-specific back end data structures and RPC calls which potentially make it difficult to integrate into other CA codebases. Furthermore, as Let\u2019s Encrypt is an ACME-only CA their implementation only handles ACME domain control validation types.\n  * Google Trust Services similarly uses MPIC in production, but has a MPIC deployment that currently utilizes Google-specific infrastructure. Google Trust Services only supports ACME in their MPIC deployment.\n  * CloudFlare developed a HTTPS-API-based deployment of MPIC in order to assist the broader CA community in deploying MPIC. This API currently only supports ACME validation methods but there are plans to add non-ACME validation methods as well.\n\nImplementation| non-ACME Support| Open Source| First-Party Hosted| RESTful API  \n---|---|---|---|---  \nCloudFlare| No*| No*| No| Yes  \nLet\u2019s Encrypt| No| Yes| Yes| No  \nGoogle Trust Services| No| No| No| No  \nOpen MPIC| Yes| Yes| Yes| Yes  \nTable of different MPIC implementations vs various features. *Features\nintended for support in future versions.\n\nWe identify the following limitations in existing implementations. First,\nthere is no option for CAs that do not support ACME or support validation\nmethods other than the ACME validation methods. Second, adapting the Let\u2019s\nEncrypt or Google Trust Services implementation for a different CA requires\nrethinking infrastructure-specific design choices. While the CloudFlare\nimplementation does offer a convenient API for all CAs to use, some CAs may\nprefer to maintain control over this infrastructure as opposed to relying on a\nthird party to operate it.\n\nWith this in mind, we are launching the Open MPIC project. The goal of the\nproject is to develop an API-style implementation of MPIC that anyone can\ndeploy on the cloud provider of their choice. This offers the convenience of a\nRESTful HTTPS API for implementation purposes, but allows a CA to manage the\ninfrastructure themselves. Below we discuss some of the design choices we are\nmaking for the project.\n\n### ACME and Non-ACME Support\n\nWe plan to support both ACME and non-ACME HTTP and DNS validation methods.\nThis will be done by having a flexible format for URLs and domain names that\nwill not require specific ACME prefixes (e.g., \u201c.acme-challenge\u201d).\n\n### Various Domain Control Validation Methods Supported\n\nWe plan to initially focus on HTTP and DNS-based validation. After this, we\nplan to further expand the API to retrieve records (e.g., email contacts in\nCAA records which can be used for validation) from multiple network\nperspectives.\n\n### CAA Compliance Checking\n\nThe API will offer the option of checking CAA records concurrently with DNS or\nHTTP challenges. The API will also support the checking of CAA records via a\nseparate API call that can be initiated at any time.\n\n### Logging\n\nThe implementation will support detailed logging designed to comply with the\ncurrent logging requirements in the draft of the MPIC ballot. This will\ninclude multiple logging levels, cloud logs generated at remote network\nperspectives, and detailed API responses. We intend to include in the API\nresponses a unique identifier of the remote perspectives used, the domain/IP\nbeing validated, the methods used by each perspective, and the result from\neach perspective. With this design, storing these API responses using a CA\u2019s\nexisting logging infrastructure should satisfy the current logging requirement\nfor MPIC stated in the draft ballot.\n\n### Use of Secure Infrastructure and Best Practices\n\nThe API will be hosted on secure infrastructure that conforms to best\npractices to prevent any attacks that occur on API infrastructure.\nFurthermore, communication between the CA and the API endpoint will be\nprotected with TLS and API secrets that are only known to the specific CA\nusing the API. Communication between all elements of the API (e.g., remote\nnetwork perspectives) will also all be done over secure and encrypted channels\nthat offer confidentiality and integrity.\n\n### Automated Deployment\n\nA potential challenge with a roll-your-own API approach is that each CA has to\nmanage remote infrastructure all around the globe which is a considerable part\nof the difficulty involved with deploying MPIC. To solve this we plan to\nutilize an automated deployment system to allow for rapid deployment of our\nAPI using only a CA\u2019s cloud provider account id/access token. Config scripts,\ninitialization scripts, monitoring will all be included in the project and\nallow for the deployment of a personalized and customized API using a single\ncommand.\n\n### Serverless Computing\n\nOur preliminary work has shown the potential to run such an API using\nserverless computing. This eliminates the need to operate \u201cservers\u201d to run the\nAPI and instead reduces the API to several functions which can be invoked on\nan on-demand basis on cloud-provider-managed servers. While simplifying some\nsetup scripts and interactions with OSes, the main advantage of running an API\nlike this in a serverless environment is that a CA does not need to keep the\nservers running when no requests are coming in. The costs of running MPIC even\nat a large scale are quite manageable (as discussed in our Usenix Security \u201821\npaper) but the serverless option further saves resources.\n\n### High Degree of Configurability\n\nWhile we expect default settings to work for many CAs, we also want the API to\nbe highly configurable and easily manage variables like network perspective\nlocation, count, and quorum policy. We plan to have this adjustable in a\nconfiguration file which CAs can change to get the MPIC deployment they want.\n\n### Cross Cloud Provider Compatibility\n\nDifferent cloud providers offer different pricing models, and some CAs may\nalready have billing relationships in place with specific cloud providers\nfurther simplifying setup. With this in mind we would eventually like the API\nto be fully cross-cloud compatible.\n\n### Call for Collaborators\n\nWe welcome any external collaboration on this project from both the broader\ncommunity or industry. The project will be fully open source and community\ndriven. We plan to announce an official GitHub repo shortly (as well as a\nformal email list for discussion). We further are open to working with CA\nproduct vendors to integrate this API directly into popular CA software. For\nthe time being any interested parties with more questions or collaboration\ninquiries can contact open-mpic [at] princeton.edu or subscribe to this list\nhere.\n\n### Conclusion\n\nWith all of these features and conveniences, we aim to make MPIC readily\ndeployable for any CA. We intend for the API format to return enough detail to\nsatisfy potential CA/B Forum logging requirements but also return a simple\nYes/No that can be easily parsed from the result of the API call (e.g., in the\nHTTP status code). We hope this will ease the burden on CAs for deploying MPIC\nand make it something that can be integrated into any CA\u2019s operations with\nvery few lines of code.\n\nFiled Under: Infrastructure, Privacy & Security Tagged With: BGP, CA,\nCertificate Authorities, PKI, Public Key Infrastructure, Security\n\n### Speak Your Mind Cancel reply\n\nFreedom to Tinker is hosted by Princeton's Center for Information Technology\nPolicy, a research center that studies digital technologies in public life.\nHere you'll find comment and analysis from the digital frontier, written by\nthe Center's faculty, students, and friends.\n\n#### What We Discuss\n\nAACS bitcoin CD Copy Protection censorship CITP Competition Computing in the\nCloud Copyright Cross-Border Issues cybersecurity policy DMCA DRM Education\nethics Events Facebook FCC Government Government transparency Grokster Case\nHumor Innovation Policy Internet Law Managing the Internet Media NSA Online\nCommunities Peer-to-Peer Predictions Princeton Privacy Publishing Recommended\nReading Secrecy Security Spam Super-DMCA surveillance Tech/Law/Policy Blogs\nTechnology and Freedom transparency Voting Wiretapping WPM\n\n#### Contributors\n\n#### Archives by Month\n\n  * 2024: J F M A M J J A S O N D\n  * 2023: J F M A M J J A S O N D\n  * 2022: J F M A M J J A S O N D\n  * 2021: J F M A M J J A S O N D\n  * 2020: J F M A M J J A S O N D\n  * 2019: J F M A M J J A S O N D\n  * 2018: J F M A M J J A S O N D\n  * 2017: J F M A M J J A S O N D\n  * 2016: J F M A M J J A S O N D\n  * 2015: J F M A M J J A S O N D\n  * 2014: J F M A M J J A S O N D\n  * 2013: J F M A M J J A S O N D\n  * 2012: J F M A M J J A S O N D\n  * 2011: J F M A M J J A S O N D\n  * 2010: J F M A M J J A S O N D\n  * 2009: J F M A M J J A S O N D\n  * 2008: J F M A M J J A S O N D\n  * 2007: J F M A M J J A S O N D\n  * 2006: J F M A M J J A S O N D\n  * 2005: J F M A M J J A S O N D\n  * 2004: J F M A M J J A S O N D\n  * 2003: J F M A M J J A S O N D\n  * 2002: J F M A M J J A S O N D\n\nauthor log in\n\nReturn to top of page\n\nCopyright \u00a9 2024 on Genesis Framework \u00b7 WordPress \u00b7 Log in\n\n", "frontpage": false}
