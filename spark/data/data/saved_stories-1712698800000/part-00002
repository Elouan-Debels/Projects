{"aid": "39980596", "title": "Autoreload", "url": "https://ipython.readthedocs.io/en/stable/config/extensions/autoreload.html", "domain": "ipython.readthedocs.io", "votes": 1, "user": "jawns", "posted_at": "2024-04-09 15:38:49", "comments": 0, "source_title": "autoreload \u2014 IPython 8.23.0 documentation", "source_text": "autoreload \u2014 IPython 8.23.0 documentation\n\n  * Configuration and customization\n  * IPython extensions\n  * autoreload\n  * Edit on GitHub\n\nImportant\n\nThis documentation covers IPython versions 6.0 and higher. Beginning with\nversion 6.0, IPython stopped supporting compatibility with Python versions\nlower than 3.3 including all versions of Python 2.7.\n\nIf you are looking for an IPython version compatible with Python 2.7, please\nuse the IPython 5.x LTS release and refer to its documentation (LTS is the\nlong term support release).\n\n# autoreload\u00b6\n\n%autoreload\u00b6\n\nIPython extension to reload modules before executing user code.\n\nautoreload reloads modules automatically before entering the execution of code\ntyped at the IPython prompt.\n\nThis makes for example the following workflow possible:\n\n    \n    \n    In [1]: %load_ext autoreload In [2]: %autoreload 2 In [3]: from foo import some_function In [4]: some_function() Out[4]: 42 In [5]: # open foo.py in an editor and change some_function to return 43 In [6]: some_function() Out[6]: 43\n\nThe module was reloaded without reloading it explicitly, and the object\nimported with from foo import ... was also updated.\n\n## Usage\u00b6\n\nThe following magic commands are provided:\n\n%autoreload, %autoreload now\n\n> Reload all modules (except those excluded by %aimport) automatically now.\n\n%autoreload 0, %autoreload off\n\n> Disable automatic reloading.\n\n%autoreload 1, %autoreload explicit\n\n> Reload all modules imported with %aimport every time before executing the\n> Python code typed.\n\n%autoreload 2, %autoreload all\n\n> Reload all modules (except those excluded by %aimport) every time before\n> executing the Python code typed.\n\n%autoreload 3, %autoreload complete\n\n> > Same as 2/all, but also adds any new objects in the module. See unit test\n> at\n> IPython/extensions/tests/test_autoreload.py::test_autoload_newly_added_objects\n>\n> Adding --print or -p to the %autoreload line will print autoreload activity\n> to standard out. --log or -l will do it to the log at INFO level; both can\n> be used simultaneously.\n\n%aimport\n\n> List modules which are to be automatically imported or not to be imported.\n\n%aimport foo\n\n> Import module \u2018foo\u2019 and mark it to be autoreloaded for %autoreload 1\n\n%aimport foo, bar\n\n> Import modules \u2018foo\u2019, \u2018bar\u2019 and mark them to be autoreloaded for %autoreload\n> 1\n\n%aimport -foo\n\n> Mark module \u2018foo\u2019 to not be autoreloaded.\n\n## Caveats\u00b6\n\nReloading Python modules in a reliable way is in general difficult, and\nunexpected things may occur. %autoreload tries to work around common pitfalls\nby replacing function code objects and parts of classes previously in the\nmodule with new versions. This makes the following things to work:\n\n  * Functions and classes imported via \u2018from xxx import foo\u2019 are upgraded to new versions when \u2018xxx\u2019 is reloaded.\n\n  * Methods and properties of classes are upgraded on reload, so that calling \u2018c.foo()\u2019 on an object \u2018c\u2019 created before the reload causes the new code for \u2018foo\u2019 to be executed.\n\nSome of the known remaining caveats are:\n\n  * Replacing code objects does not always succeed: changing a @property in a class to an ordinary method or a method to a member variable can cause problems (but in old objects only).\n\n  * Functions that are removed (eg. via monkey-patching) from a module before it is reloaded are not upgraded.\n\n  * C extension modules cannot be reloaded, and so cannot be autoreloaded.\n\n  * While comparing Enum and Flag, the \u2018is\u2019 Identity Operator is used (even in the case \u2018==\u2019 has been used (Similar to the \u2018None\u2019 keyword)).\n\n  * Reloading a module, or importing the same module by a different name, creates new Enums. These may look the same, but are not.\n\nPrevious Next\n\n\u00a9 Copyright The IPython Development Team. Revision 5e7c4a99. Last updated on\nMar 31, 2024.\n\nBuilt with Sphinx using a theme provided by Read the Docs.\n\nRead the Docs v: stable\n\nVersions\n\n    latest\n    stable\n    8.23.0\n    8.22.2\n    8.22.1\n    8.22.0\n    8.21.0\n    8.20.0\n    8.19.0\n    8.18.1\n    8.18.0\n    8.17.2\n    8.17.1\n    8.17.0\n    8.16.0\n    8.15.0\n    8.14.0\n    8.13.2\n    8.13.1\n    8.13.0\n    8.12.1\n    8.12.0\n    8.11.0\n    7.x\n    7.31.0\n    7.30.1\n    6.x\n    6.5.0\n    5.x\n    4.x\n    3.x\n    2.x\n    1.x\n\nOn Read the Docs\n\n    Project Home\n    Builds\n    Downloads\n\nOn GitHub\n\n    View\n\nSearch\n\nHosted by Read the Docs \u00b7 Privacy Policy\n\n", "frontpage": false}
