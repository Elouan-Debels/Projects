{"aid": "40002424", "title": "Postgres Roles and Privileges", "url": "https://supabase.com/blog/postgres-roles-and-privileges", "domain": "supabase.com", "votes": 6, "user": "imor80", "posted_at": "2024-04-11 14:18:30", "comments": 0, "source_title": "Postgres Roles and Privileges", "source_text": "Postgres Roles and Privileges\n\nJoin us for a Special Announcement\n\n03d\n\n:\n\n23h\n\n:\n\n50m\n\n:\n\n45s\n\nClaim your ticket\n\nBack\n\nBlog\n\n# Postgres Roles and Privileges\n\n2024-04-11\n\n\u2022\n\n43 minute read\n\nRaminder SinghEngineering\n\nControlling access to data in Postgres is paramount for data security.\nPostgres provides a robust and flexible permissions model for users to manage\naccess to their data. The permissions model is based on the familiar object,\nprivilege, role model but has subtleties which must be understood by a\ndatabase administrator to create airtight access. In this post we will take a\ndetailed look at how roles and permissions work in Postgres.\n\n# Basic Concepts#\n\nLet's first understand some basic concepts which will be used throughout the\nrest of the post.\n\n## Database Object#\n\nA database object is any entity created in the database. Tables, foreign\ntables, views, materialized views, types, domains, operators, functions,\ntriggers etc. are database objects. Objects allow operations on them which\nvary for each object. For example, you can select data from a table and you\ncan execute a function.\n\n## Privilege#\n\nA privilege controls what operation is allowed to be run on a database object.\nFor example, the select privilege on a table controls the ability to read data\nfrom the table. Similarly, the execute privilege controls the ability to\nexecute a function. Privileges are assigned to roles. A role must have the\npermission for the operation it is performing on an object.\n\n## Role#\n\nA role is a user or a group. A user is someone who can login to the database.\nA group is a collection of users to make it easier to manage privileges for\nusers. Unlike a user, a group can't login to the database. The distinction\nbetween a user and a group doesn\u2019t matter to Postgres for the most part as\nthey are both roles, but it is still useful to think of them as separate\nconcepts for ease of understanding.\n\n## Owner#\n\nEvery database object has an owner. The owner has complete control over the\nobject. They can modify or delete the object or grant privileges to other\nusers and groups. When a user creates a new object, they become the owner of\nthe object. An owner can also transfer the ownership of objects to other\nroles. A role cannot be deleted before all its owned objects\u2019 ownership is\ntransferred to another role.\n\nWith these basic terms defined, let's take a look at the permissions model in\nPostgres in depth. The rest of the post will be more like a tutorial, so you\ncan follow along. I'll be using a hosted Supabase project, but you are free to\nuse any Postgres installation.\n\n# Setting Up#\n\nCreate a new Supabase project (or use an existing one) and copy its connection\nstring URI from the Database Settings page. The URI looks like the following:\n\n1\n\npostgres://[USER].[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-\nSUBDOMAIN].pooler.supabase.com:5432/postgres\n\nWhere USER is the user to connect as. YOUR-PROJECT-REF is a string uniquely\nidentifying your project. YOUR-PASSWORD is the database password for the USER\nuser and REGION-SUBDOMAIN is the subdomain where your database is hosted.\n\nUse the psql command line tool to connect to the database:\n\n1\n\n\u279c psql postgres://postgres.[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-\nSUBDOMAIN].pooler.supabase.com:5432/postgres\n\nOnce connected, confirm that you are connected as the postgres user by running\nselect current_role command:\n\n1\n\n# as postgres\n\n2\n\npostgres=> select current_role;\n\n3\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n4\n\n\u2502 current_role \u2502\n\n5\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n6\n\n\u2502 portgres \u2502\n\n7\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n8\n\n(1 row)\n\n## Creating Roles#\n\nNow, let's create two users named junior_dev and senior_dev. A database role\ncan be created with the create role command. Since a user is a role that can\nlogin, use the login parameter:\n\n1\n\n# as postgres\n\n2\n\npostgres=> create role junior_dev login password 'a long and secure password';\n\n3\n\nCREATE ROLE\n\n4\n\npostgres=> create role senior_dev login password 'another long and secure\npassword';\n\n5\n\nCREATE ROLE\n\nYou can now confirm that the junior_dev and senior_dev users can login to the\ndatabase:\n\n1\n\n\u279c psql postgres://junior_dev.[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-\nSUBDOMAIN].pooler.supabase.com:5432/postgres\n\n2\n\n3\n\npostgres=> select current_role;\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 current_role \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 junior_dev \u2502\n\n8\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n9\n\n(1 row)\n\n10\n\n11\n\npostgres=> exit\n\n12\n\n13\n\n\u279c psql postgres://senior_dev.[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-\nSUBDOMAIN].pooler.supabase.com:5432/postgres\n\n14\n\n15\n\npostgres=> select current_role;\n\n16\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n17\n\n\u2502 current_role \u2502\n\n18\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n19\n\n\u2502 senior_dev \u2502\n\n20\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n21\n\n(1 row)\n\nFor the rest of the post, open three terminals and login each with junior_dev,\nsenior_dev and postgres to easily switch between them. Each executed command\nwill list at the beginning the user it should be executed as, for example:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> this command should be executed from the junior_dev's terminal\n\n## Creating Objects and Assigning Privileges#\n\nLet's now try to create a table from as junior_dev:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> create table public.apps(id serial primary key, name text);\n\n3\n\nERROR: permission denied for schema public\n\n4\n\nLINE 1: create table public.apps(id serial primary key, name text);\n\n5\n\n^\n\nWhat happened? The error permission denied for schema public tells us that\njunior_dev doesn't have some permission on the public schema. We can check\nexisting permissions on a schema using the dn+ <schema> command in psql:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> \\dn+ public\n\n3\n\nList of schemas\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Name \u2502 Owner \u2502 Access privileges \u2502 Description \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 public \u2502 pg_database_owner \u2502 pg_database_owner=UC/pg_database_owner\u21b5\u2502\nstandard public schema \u2502\n\n8\n\n\u2502 \u2502 \u2502 =U/pg_database_owner \u21b5\u2502 \u2502\n\n9\n\n\u2502 \u2502 \u2502 postgres=U/pg_database_owner \u21b5\u2502 \u2502\n\n10\n\n\u2502 \u2502 \u2502 anon=U/pg_database_owner \u21b5\u2502 \u2502\n\n11\n\n\u2502 \u2502 \u2502 authenticated=U/pg_database_owner \u21b5\u2502 \u2502\n\n12\n\n\u2502 \u2502 \u2502 service_role=U/pg_database_owner \u2502 \u2502\n\n13\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n14\n\n(1 row)\n\nIndeed, the Access privileges column doesn\u2019t list junior_dev role anywhere,\nwhich means it doesn\u2019t have any permission on the public schema. How do we fix\nthis? Thepostgres user in Supabase hosted databases is a powerful role with\nmore privileges than many other roles. Think of the postgres role as an admin\nrole, although it is not a superuser. We can use this role to grant\nappropriate permissions.\n\nSo, let\u2019s switch to the postgres user connection and grant junior_dev the\npermission to create objects in the public schema. The general format of the\ngrant command is grant <privilege> on <object> to <role>. You can consult the\nprivileges page in Postgres documentation to find out the correct privilege\nname.\n\n1\n\n# as postgres\n\n2\n\npostgres=> grant create on schema public to junior_dev;\n\n3\n\nGRANT\n\nLet\u2019s check the permissions again:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> \\dn+ public\n\n3\n\nList of schemas\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Name \u2502 Owner \u2502 Access privileges \u2502 Description \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 public \u2502 pg_database_owner \u2502 pg_database_owner=UC/pg_database_owner\u21b5\u2502\nstandard public schema \u2502\n\n8\n\n\u2502 \u2502 \u2502 =U/pg_database_owner \u21b5\u2502 \u2502\n\n9\n\n\u2502 \u2502 \u2502 postgres=U/pg_database_owner \u21b5\u2502 \u2502\n\n10\n\n\u2502 \u2502 \u2502 anon=U/pg_database_owner \u21b5\u2502 \u2502\n\n11\n\n\u2502 \u2502 \u2502 authenticated=U/pg_database_owner \u21b5\u2502 \u2502\n\n12\n\n\u2502 \u2502 \u2502 service_role=U/pg_database_owner \u21b5\u2502 \u2502\n\n13\n\n\u2502 \u2502 \u2502 junior_dev=C/pg_database_owner \u2502 \u2502\n\n14\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n15\n\n(1 row)\n\nThis time we see a new line in the access privileges column:\n\n\ud83d\udca1 The grantor in the above case is pg_database_owner which is a role which\nowns the public schema. pg_database_owner has the owner of the current\ndatabase as the only member, which is postgres in our case.\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> create table public.apps(id serial primary key, name text);\n\n3\n\nCREATE TABLE\n\nLet\u2019s insert some data in it:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> insert into public.apps(name) values ('next app');\n\n3\n\nINSERT 0 1\n\n4\n\npostgres=> select * from public.apps;\n\n5\n\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n6\n\n\u2502 id \u2502 name \u2502\n\n7\n\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n8\n\n\u2502 1 \u2502 next app \u2502\n\n9\n\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10\n\n(1 row)\n\nNow switch to senior_dev and try to select data from the table:\n\n1\n\n# as senior_dev\n\n2\n\npostgres=> select * from public.apps;\n\n3\n\nERROR: permission denied for table apps\n\nsenior_dev can\u2019t select data from the public.apps table. Let\u2019s debug the\npermissions error as before. The command in psql to view table permissions is\n\\dp <tablename>:\n\n1\n\n# as senior_dev\n\n2\n\npostgres=> \\dp public.apps\n\n3\n\nAccess privileges\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Schema \u2502 Name \u2502 Type \u2502 Access privileges \u2502 Column privileges \u2502 Policies \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 public \u2502 apps \u2502 table \u2502 \u2502 \u2502 \u2502\n\n8\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n9\n\n(1 row)\n\nNo access privileges are present at all. As we did before, let\u2019s now switch to\nthe postgres user and fix the permissions. The privileges page tells us that\nwe need to grant the select privilege to senior_dev for them to select data\nfrom the public.apps table:\n\n1\n\n# as postgres\n\n2\n\npostgres=> grant select on table public.apps to senior_dev;\n\n3\n\nERROR: permission denied for table apps\n\nWhy can\u2019t postgres grant the select privilege? Because it is neither an owner,\nnor has it any access privileges on the table. But then how was junior_dev\nable to select data from the table? That is because junior_dev is the owner of\nthe table:\n\n1\n\n# as postgres\n\n2\n\npostgres=> \\dt public.apps\n\n3\n\nList of relations\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Schema \u2502 Name \u2502 Type \u2502 Owner \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 public \u2502 apps \u2502 table \u2502 junior_dev \u2502\n\n8\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n9\n\n(1 row)\n\nSince an owner has all the privileges on an object, junior_dev can select the\ndata. junior_dev can also grant privileges on the owned objects to other\nroles. Let\u2019s fix the permissions with junior_dev:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> grant select on public.apps to senior_dev;\n\n3\n\nGRANT\n\nNow senior_dev can select the data:\n\n1\n\n# as senior_dev\n\n2\n\npostgres=> select * from public.apps;\n\n3\n\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n4\n\n\u2502 id \u2502 name \u2502\n\n5\n\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n6\n\n\u2502 1 \u2502 next app \u2502\n\n7\n\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n8\n\n(1 row)\n\nAnother option in the above example would have been for junior_dev to grant\nthe privilege to grant the select privilege to the postgres role. The postgres\nrole would then have been able to grant the select privilege to senior_dev. To\ntry this, let\u2019s revoke the previously granted privilege to senior_dev first:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> revoke select on public.apps from senior_dev;\n\n3\n\nREVOKE\n\nAnd then grant the select privilege with grant option to postgres:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> grant select on public.apps to postgres with grant option;\n\n3\n\nGRANT\n\nNow, if we view the permissions on the public.apps table:\n\n1\n\n# as_junior_dev\n\n2\n\npostgres=> \\dp public.apps\n\n3\n\nAccess privileges\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Schema \u2502 Name \u2502 Type \u2502 Access privileges \u2502 Column privileges \u2502 Policies \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 public \u2502 apps \u2502 table \u2502 junior_dev=arwdDxt/junior_dev\u21b5\u2502 \u2502 \u2502\n\n8\n\n\u2502 \u2502 \u2502 \u2502 postgres=r*/junior_dev \u2502 \u2502 \u2502\n\n9\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10\n\n(1 row)\n\nNotice the * after the r in postgres=r*/junior_dev. which indicates that the\nselect permission was granted with grant option. Now postgres can grant the\nselect privilege to senior_dev:\n\n1\n\n# as postgres\n\n2\n\npostgres=> grant select on table public.apps to senior_dev;\n\n3\n\nGRANT\n\nAnd senior_dev has the select privilege and can select from the table again:\n\n1\n\n# as senior_dev\n\n2\n\npostgres=> \\dp public.apps\n\n3\n\nAccess privileges\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Schema \u2502 Name \u2502 Type \u2502 Access privileges \u2502 Column privileges \u2502 Policies \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 public \u2502 apps \u2502 table \u2502 junior_dev=arwdDxt/junior_dev\u21b5\u2502 \u2502 \u2502\n\n8\n\n\u2502 \u2502 \u2502 \u2502 postgres=r*/junior_dev \u21b5\u2502 \u2502 \u2502\n\n9\n\n\u2502 \u2502 \u2502 \u2502 senior_dev=r/postgres \u2502 \u2502 \u2502\n\n10\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n11\n\n(1 row)\n\n12\n\n13\n\npostgres=> select * from public.apps;\n\n14\n\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n15\n\n\u2502 id \u2502 name \u2502\n\n16\n\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n17\n\n\u2502 1 \u2502 next app \u2502\n\n18\n\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n19\n\n(1 row)\n\nA grant command only adds privileges for existing objects. What if we want to\ngrant certain privileges to objects as soon as they are created? That\u2019s where\ndefault access privileges come in.\n\n### Default Access Privileges#\n\nIf junior_dev now creates another table, it has to grant the privileges again\nto senior_dev. To avoid doing this each time junior_dev creates a new table,\nwe can alter junior_dev's default access privileges. First let\u2019s see the\ncurrent default privileges on the public schema:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> \\ddp public\n\n3\n\nDefault access privileges\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Owner \u2502 Schema \u2502 Type \u2502 Access privileges \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 postgres \u2502 public \u2502 function \u2502 postgres=X/postgres \u21b5\u2502\n\n8\n\n\u2502 \u2502 \u2502 \u2502 anon=X/postgres \u21b5\u2502\n\n9\n\n\u2502 \u2502 \u2502 \u2502 authenticated=X/postgres \u21b5\u2502\n\n10\n\n\u2502 \u2502 \u2502 \u2502 service_role=X/postgres \u2502\n\n11\n\n\u2502 postgres \u2502 public \u2502 sequence \u2502 postgres=rwU/postgres \u21b5\u2502\n\n12\n\n\u2502 \u2502 \u2502 \u2502 anon=rwU/postgres \u21b5\u2502\n\n13\n\n\u2502 \u2502 \u2502 \u2502 authenticated=rwU/postgres \u21b5\u2502\n\n14\n\n\u2502 \u2502 \u2502 \u2502 service_role=rwU/postgres \u2502\n\n15\n\n\u2502 postgres \u2502 public \u2502 table \u2502 postgres=arwdDxt/postgres \u21b5\u2502\n\n16\n\n\u2502 \u2502 \u2502 \u2502 anon=arwdDxt/postgres \u21b5\u2502\n\n17\n\n\u2502 \u2502 \u2502 \u2502 authenticated=arwdDxt/postgres \u21b5\u2502\n\n18\n\n\u2502 \u2502 \u2502 \u2502 service_role=arwdDxt/postgres \u2502\n\n19\n\n\u2502 supabase_admin \u2502 public \u2502 function \u2502 postgres=X/supabase_admin \u21b5\u2502\n\n20\n\n\u2502 \u2502 \u2502 \u2502 anon=X/supabase_admin \u21b5\u2502\n\n21\n\n\u2502 \u2502 \u2502 \u2502 authenticated=X/supabase_admin \u21b5\u2502\n\n22\n\n\u2502 \u2502 \u2502 \u2502 service_role=X/supabase_admin \u2502\n\n23\n\n\u2502 supabase_admin \u2502 public \u2502 sequence \u2502 postgres=rwU/supabase_admin \u21b5\u2502\n\n24\n\n\u2502 \u2502 \u2502 \u2502 anon=rwU/supabase_admin \u21b5\u2502\n\n25\n\n\u2502 \u2502 \u2502 \u2502 authenticated=rwU/supabase_admin \u21b5\u2502\n\n26\n\n\u2502 \u2502 \u2502 \u2502 service_role=rwU/supabase_admin \u2502\n\n27\n\n\u2502 supabase_admin \u2502 public \u2502 table \u2502 postgres=arwdDxt/supabase_admin \u21b5\u2502\n\n28\n\n\u2502 \u2502 \u2502 \u2502 anon=arwdDxt/supabase_admin \u21b5\u2502\n\n29\n\n\u2502 \u2502 \u2502 \u2502 authenticated=arwdDxt/supabase_admin\u21b5\u2502\n\n30\n\n\u2502 \u2502 \u2502 \u2502 service_role=arwdDxt/supabase_admin \u2502\n\n31\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n32\n\n(6 rows)\n\nNeither junior_dev nor senior_dev are listed. Let\u2019s alter junior_dev's default\nprivileges:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> alter default privileges in schema public grant select on tables to\nsenior_dev;\n\n3\n\nALTER DEFAULT PRIVILEGES\n\nHere we are altering default privileges such that whenever junior_dev creates\na new table in the public schema, senior_dev should be granted select\nprivilege on it. Let\u2019s check the privileges again:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> \\ddp public\n\n3\n\nDefault access privileges\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Owner \u2502 Schema \u2502 Type \u2502 Access privileges \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 junior_dev \u2502 public \u2502 table \u2502 senior_dev=r/junior_dev \u2502\n\n8\n\n\u2502 postgres \u2502 public \u2502 function \u2502 postgres=X/postgres \u21b5\u2502\n\n9\n\n\u2502 \u2502 \u2502 \u2502 anon=X/postgres \u21b5\u2502\n\n10\n\n\u2502 \u2502 \u2502 \u2502 authenticated=X/postgres \u21b5\u2502\n\n11\n\n\u2502 \u2502 \u2502 \u2502 service_role=X/postgres \u2502\n\n12\n\n\u2502 postgres \u2502 public \u2502 sequence \u2502 postgres=rwU/postgres \u21b5\u2502\n\n13\n\n\u2502 \u2502 \u2502 \u2502 anon=rwU/postgres \u21b5\u2502\n\n14\n\n\u2502 \u2502 \u2502 \u2502 authenticated=rwU/postgres \u21b5\u2502\n\n15\n\n\u2502 \u2502 \u2502 \u2502 service_role=rwU/postgres \u2502\n\n16\n\n\u2502 postgres \u2502 public \u2502 table \u2502 postgres=arwdDxt/postgres \u21b5\u2502\n\n17\n\n\u2502 \u2502 \u2502 \u2502 anon=arwdDxt/postgres \u21b5\u2502\n\n18\n\n\u2502 \u2502 \u2502 \u2502 authenticated=arwdDxt/postgres \u21b5\u2502\n\n19\n\n\u2502 \u2502 \u2502 \u2502 service_role=arwdDxt/postgres \u2502\n\n20\n\n\u2502 supabase_admin \u2502 public \u2502 function \u2502 postgres=X/supabase_admin \u21b5\u2502\n\n21\n\n\u2502 \u2502 \u2502 \u2502 anon=X/supabase_admin \u21b5\u2502\n\n22\n\n\u2502 \u2502 \u2502 \u2502 authenticated=X/supabase_admin \u21b5\u2502\n\n23\n\n\u2502 \u2502 \u2502 \u2502 service_role=X/supabase_admin \u2502\n\n24\n\n\u2502 supabase_admin \u2502 public \u2502 sequence \u2502 postgres=rwU/supabase_admin \u21b5\u2502\n\n25\n\n\u2502 \u2502 \u2502 \u2502 anon=rwU/supabase_admin \u21b5\u2502\n\n26\n\n\u2502 \u2502 \u2502 \u2502 authenticated=rwU/supabase_admin \u21b5\u2502\n\n27\n\n\u2502 \u2502 \u2502 \u2502 service_role=rwU/supabase_admin \u2502\n\n28\n\n\u2502 supabase_admin \u2502 public \u2502 table \u2502 postgres=arwdDxt/supabase_admin \u21b5\u2502\n\n29\n\n\u2502 \u2502 \u2502 \u2502 anon=arwdDxt/supabase_admin \u21b5\u2502\n\n30\n\n\u2502 \u2502 \u2502 \u2502 authenticated=arwdDxt/supabase_admin\u21b5\u2502\n\n31\n\n\u2502 \u2502 \u2502 \u2502 service_role=arwdDxt/supabase_admin \u2502\n\n32\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n33\n\n(7 rows)\n\nThe first line now indicates the default access privilege we just added. Let\u2019s\nnow create a new table and insert a row in it:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> create table public.users(id serial primary key, name text);\n\n3\n\nCREATE TABLE\n\n4\n\npostgres=> insert into public.users(name) values ('john doe');\n\n5\n\nINSERT 0 1\n\nNow try to select data in public.users from senior_dev:\n\n1\n\n# as senior_dev\n\n2\n\npostgres=> select * from public.users;\n\n3\n\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n4\n\n\u2502 id \u2502 name \u2502\n\n5\n\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n6\n\n\u2502 1 \u2502 john doe \u2502\n\n7\n\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n8\n\n(1 row)\n\nNote that we were immediately able to select data from public.users without\nexplicit grants from junior_dev.\n\nIt is clear from above that the owner has all the privileges on an object\nwhich they can grant to other roles. But it can become cumbersome for the\nowner to keep granting the same privileges to every new role. There is a\nbetter way. We can ensure that objects are owned by a group and then any users\nwhich need access to those objects are assigned membership to the group. Let\u2019s\nsee how this works.\n\n## Creating Groups#\n\nWe want to create a new developers group which will own the public.apps table.\nThen we will make junior_dev and senior_dev members of the developers group.\nThis will ensure that they both have the same kind of access, without\nexplicitly granting privileges after creating a new object.\n\nFirst, let\u2019s drop the public.apps table:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> drop table public.apps;\n\n3\n\nDROP TABLE\n\nLet\u2019s also revoke the create privilege from junior_dev on the public schema:\n\n1\n\n# as postgres\n\n2\n\npostgres=> revoke create on schema public from junior_dev;\n\n3\n\nREVOKE\n\nLet\u2019s create a developers group. Since a group is a role that is not allowed\nto login, use the nologin parameter:\n\n1\n\n# as postgres\n\n2\n\npostgres=> create role developers nologin;\n\n3\n\nCREATE ROLE\n\nYou can't login with the developers role because we set the nologin parameter.\nThe login/nologin parameters control the login attribute of a role. Earlier we\nalso set the password attribute of the junior_dev and senior_dev roles. There\nare many other role attributes which we will talk about later in the post.\n\nLet\u2019s give the create privilege to the developers group:\n\n1\n\n# as postgres\n\n2\n\npostgres=> grant create on schema public to developers;\n\n3\n\nGRANT\n\nSince junior_dev and senior_dev users do not have create privilege on the\npublic schema, they can\u2019t create objects in it. The developers group can, but\nwe can\u2019t login with it. So how do we create public.apps owned by developers?\nWell, a user can temporarily impersonate a group if they are a member of the\ngroup. So let\u2019s ensure junior_dev and senior_dev are members of the developers\ngroup:\n\n1\n\n# as postgres\n\n2\n\npostgres=> grant developers to junior_dev;\n\n3\n\nGRANT ROLE\n\n4\n\npostgres=> grant developers to senior_dev;\n\n5\n\nGRANT ROLE\n\nThe grant <group> to <user> is another variant of the grant command but should\nbe mentally read as add <user> to <group>.\n\n\ud83d\udca1 In this form of the grant command Postgres doesn\u2019t check that the <user> is\na user and <group> is a group. That is, Postgres doesn\u2019t care about these\nroles\u2019s ability to login. Hence, grant <user1> to <user2> is also allowed, in\nwhich case <user2> can impersonate <user1>. In fact, for the most part,\nPostgres doesn\u2019t care much about the difference between a user or a group. To\nit, both are just roles.\n\nNow junior_dev (or senior_dev) can impersonate developers:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> set role developers;\n\n3\n\nSET\n\n4\n\npostgres=> select current_role;\n\n5\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n6\n\n\u2502 current_role \u2502\n\n7\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n8\n\n\u2502 developers \u2502\n\n9\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10\n\n(1 row)\n\nAnd create the public.apps table:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> create table public.apps(id serial primary key, name text);\n\n3\n\nCREATE TABLE\n\nWhich is owned by the developers group:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> \\dt public.apps\n\n3\n\nList of relations\n\n4\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n5\n\n\u2502 Schema \u2502 Name \u2502 Type \u2502 Owner \u2502\n\n6\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n7\n\n\u2502 public \u2502 apps \u2502 table \u2502 developers \u2502\n\n8\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n9\n\n(1 row)\n\nNow if you stop impersonation:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> reset role;\n\n3\n\nRESET\n\n4\n\npostgres=> select current_role;\n\n5\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n6\n\n\u2502 current_role \u2502\n\n7\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n8\n\n\u2502 junior_dev \u2502\n\n9\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10\n\n(1 row)\n\nAnd try to insert or select data from public.apps it works:\n\n1\n\n# as junior_dev or senior_dev\n\n2\n\npostgres=> insert into public.apps(name) values ('next app');\n\n3\n\nINSERT 0 1\n\n4\n\npostgres=> select * from public.apps;\n\n5\n\n\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n6\n\n\u2502 id \u2502 name \u2502\n\n7\n\n\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n8\n\n\u2502 1 \u2502 next app \u2502\n\n9\n\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n10\n\n(1 row)\n\nThe reason junior_dev and senior_dev are able to insert and select data is\nbecause they are part of the developers group. If a new developer is created\nlater, they are just a grant developers to <new dev> away from having the same\naccess as every other developer. Contrast this with the previous method in\nwhich the new user would have to ask the owner of every object to grant them\npermissions.\n\n## Grant Options#\n\nMaking a user part of another group might grant it three abilities:\n\n  1. The ability to impersonate the group.\n  2. The ability to inherit the permissions from the group.\n  3. The ability to add or remove other users from the group.\n\nAll of these abilities can be controlled independently while running the grant\n<group> to <user> command by using the with <option name> true/false suffixed\nto it. The names of each of the above options are set, inherit, and admin. For\nexample, to disallow a user from impersonating a group run grant <group> to\n<user> with set false.\n\n\ud83d\udca1 In Postgres 15, only the admin option can be controlled. In Postgres 16, the\ninherit and set options can also be controlled. If these options are omitted\nfrom the grant command, their default values are true for set and inherit and\nfalse for admin.\n\nTo demonstrate, if we enable admin option on junior_dev:\n\n1\n\n# as postgres\n\n2\n\npostgres=> grant developers to junior_dev with admin option;\n\n3\n\nGRANT ROLE\n\nIt will be able to remove senior_dev from the developers group:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> revoke developers from senior_dev;\n\n3\n\nREVOKE ROLE\n\nWithout the admin option, junior_dev wouldn\u2019t have been able to do this.\n\n## Role Attributes#\n\nEvery role has some attributes associated with it which control the behavior\nof the role. Some of the common ones are listed below. For the full list and\ntheir details, refer to the Postgres role attributes documentation.\n\n  * login - controls the role\u2019s ability to login.\n  * superuser - controls whether the role is a superuser or not. See next section for details.\n  * createdb - controls whether the role will be able to create databases.\n  * createrole - controls whether the role will be able to create other roles.\n  * replication - controls whether the role can be used to initiate replication.\n  * bypassrls - controls whether the role can bypass row level security.\n  * connection limit - limits the maximum number of connections that the role can make to the database.\n  * inherit - controls whether the role can inherit permissions from roles it is a member of.\n\n## Special Roles#\n\nThere are two special roles which play an important part in how roles and\nprivileges are managed.\n\n### Superuser#\n\nA superuser is a role with the superuser attribute set. A superuser is like a\nroot user on the *nix OSes. It is very powerful and bypasses all privilege\nchecks except authentication during login. For this reason, you should avoid\nworking with this role as much as possible. Only superusers can create other\nsuperuser roles.\n\n### Public#\n\npublic is a group role which every other role is automatically a part of.\nThere is only one public role. So unlike superuser, there\u2019s no public role\nattribute. The public role is used to provide privileges which are considered\nto be so common that every role should have them. These privileges are:\n\n  * connect - ability to connect to the database.\n  * temporary - ability to create temporary tables.\n  * execute - ability to execute functions.\n  * usage - ability to use an object like a domain, language or type.\n\nThe public role can\u2019t be deleted, but its privileges can be revoked.\n\nPrivileges of a role are union of three sets of privileges:\n\n  1. Those granted to the role directly.\n  2. Those inherited from the roles this role is an explicit member of.\n  3. Those inherited from the public role, which every role is implicitly a member of.\n\nPrivileges inherited from the public role are a common source of confusion\nwhen working with roles in Postgres. Imagine that we want to disallow\njunior_dev from executing functions. Let\u2019s first create a function:\n\n1\n\n# as postgres\n\n2\n\npostgres=> create function add(integer, integer)\n\n3\n\nreturns integer\n\n4\n\nas 'select $1 + $2;'\n\n5\n\nlanguage sql;\n\n6\n\nCREATE FUNCTION\n\njunior_dev is currently able to execute this function:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> select add(1, 2);\n\n3\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\n4\n\n\u2502 add \u2502\n\n5\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2524\n\n6\n\n\u2502 3 \u2502\n\n7\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\n8\n\n(1 row)\n\nNow let\u2019s revoke junior_dev's execute permission:\n\n1\n\n# as postgres\n\n2\n\npostgres=> revoke execute on function add(integer, integer) from junior_dev;\n\n3\n\nREVOKE\n\nBut junior_dev is still able to execute the function:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> select add(1, 2);\n\n3\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\n4\n\n\u2502 add \u2502\n\n5\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2524\n\n6\n\n\u2502 3 \u2502\n\n7\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\n8\n\n(1 row)\n\nHow? Let\u2019s check add function\u2019s privileges:\n\n1\n\n# as postgres\n\n2\n\npostgres=> \\df+ add\n\n3\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n4\n\n\u2502 Schema \u2502 Name \u2502 Result data type \u2502 Argument data types \u2502 Type \u2502 Volatility \u2502\nParallel \u2502 Owner \u2502 Security \u2502 Access privileges \u2502 Language \u2502\n\n5\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\n6\n\n\u2502 public \u2502 add \u2502 integer \u2502 integer, integer \u2502 func \u2502 volatile \u2502 unsafe \u2502\npostgres \u2502 invoker \u2502 =X/postgres \u21b5\u2502 sql \u2502\n\n7\n\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 postgres=X/postgres \u21b5\u2502 \u2502\n\n8\n\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 anon=X/postgres \u21b5\u2502 \u2502\n\n9\n\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 authenticated=X/postgres\u21b5\u2502 \u2502\n\n10\n\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 service_role=X/postgres \u2502 \u2502\n\n11\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n12\n\n(1 row)\n\njunior_dev doesn\u2019t have any privilege, but the missing role name in the\n=X/postgres line means the public role. Let\u2019s revoke execute from public:\n\n1\n\n# as postgres\n\n2\n\npostgres=> revoke execute on function add(integer, integer) from public;\n\n3\n\nREVOKE\n\n4\n\npostgres=> \\df+ add\n\n5\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\n6\n\n\u2502 Schema \u2502 Name \u2502 Result data type \u2502 Argument data types \u2502 Type \u2502 Volatility \u2502\nParallel \u2502 Owner \u2502 Security \u2502 Access privileges \u2502 Language \u2502\n\n7\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\n8\n\n\u2502 public \u2502 add \u2502 integer \u2502 integer, integer \u2502 func \u2502 volatile \u2502 unsafe \u2502\npostgres \u2502 invoker \u2502 postgres=X/postgres \u21b5\u2502 sql \u2502\n\n9\n\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 anon=X/postgres \u21b5\u2502 \u2502\n\n10\n\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 authenticated=X/postgres\u21b5\u2502 \u2502\n\n11\n\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 service_role=X/postgres \u2502 \u2502\n\n12\n\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502\n\n13\n\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n14\n\n(1 row)\n\nNow junior_dev can not longer execute the add function:\n\n1\n\n# as junior_dev\n\n2\n\npostgres=> select add(1, 2);\n\n3\n\nERROR: permission denied for function add\n\nAnother thing to note here is that when we revoked execute privilege on add\nfrom junior_dev, there was actually nothing to revoke. But Postgres did not\nshow us any warning. So it is important to always explicitly check the\npermissions, especially after a revoke command.\n\n## Summary#\n\nTo summarize:\n\n  * Every database object has an owner.\n  * Operations on database objects are controlled by privileges.\n  * Owners can grant privileges on owned objects to other roles.\n  * Roles can be either users or groups.\n  * Roles can inherit permissions from roles they are a member of.\n  * public role is a role which every other role is implicitly a member of. It can\u2019t be deleted, but its privileges can be revoked.\n  * superuser roles are all powerful roles that bypass all privilege checks and should be used with care.\n  * grant command only grants privileges on existing objects.\n  * Default privileges control privileges to be granted to objects created in the future.\n\n## Conclusion#\n\nPostgres permissions follow the traditional objects, roles, privileges model\nbut it has its subtleties which can surprise users unless they understand it\nin detail. In this post we experimented with this model to understand it in\ndepth. Hope this understanding will allow you to manage and protect your\nPostgres database more effectively.\n\nShare this article\n\nNext post\n\n#### Announcing Data Preservation Service\n\n1 April 2024\n\nsupabase-engineering\n\nplanetpg\n\nOn this page\n\n  * Basic Concepts\n\n    * Database Object\n    * Privilege\n    * Role\n    * Owner\n  * Setting Up\n\n    * Creating Roles\n    * Creating Objects and Assigning Privileges\n\n      * Default Access Privileges\n    * Creating Groups\n    * Grant Options\n    * Role Attributes\n    * Special Roles\n\n      * Superuser\n      * Public\n    * Summary\n    * Conclusion\n\nShare this article\n\n## Build in a weekend, scale to millions\n\n## Footer\n\nWe protect your data.More on Security\n\n  * SOC2 Type 2 Certified\n  * HIPAA Compliant\n\nTwitter\n\nGitHub\n\nDiscord\n\nYoutube\n\n###### Product\n\n  * Database\n\n  * Auth\n\n  * Functions\n\n  * Realtime\n\n  * Storage\n\n  * Vector\n\n  * Pricing\n\n  * Special Announcement\n\n###### Resources\n\n  * Support\n\n  * System Status\n\n  * Become a Partner\n\n  * Integrations\n\n  * Experts\n\n  * Brand Assets / Logos\n\n  * Security and Compliance\n\n  * DPA\n\n  * SOC2\n\n  * HIPAA\n\n###### Developers\n\n  * Documentation\n\n  * Changelog\n\n  * Contributing\n\n  * Open Source\n\n  * SupaSquad\n\n  * DevTo\n\n  * RSS\n\n###### Company\n\n  * Blog\n\n  * Customer Stories\n\n  * Careers\n\n  * Company\n\n  * Terms of Service\n\n  * Privacy Policy\n\n  * Acceptable Use Policy\n\n  * Support Policy\n\n  * Service Level Agreement\n\n  * Humans.txt\n\n  * Lawyers.txt\n\n  * Security.txt\n\n\u00a9 Supabase Inc\n\nWe only collect analytics essential to ensuring smooth operation of our\nservices. Learn more\n\nLearn more\n\n", "frontpage": false}
