{"aid": "40002269", "title": "Backdoor in XZ Utils That Almost Happened", "url": "https://www.schneier.com/blog/archives/2024/04/backdoor-in-xz-utils-that-almost-happened.html", "domain": "schneier.com", "votes": 2, "user": "chmaynard", "posted_at": "2024-04-11 14:02:36", "comments": 0, "source_title": "Backdoor in XZ Utils That Almost Happened - Schneier on Security", "source_text": "Backdoor in XZ Utils That Almost Happened - Schneier on Security\n\n# Schneier on Security\n\n### Search\n\nPowered by DuckDuckGo\n\n### Subscribe\n\nHomeBlog\n\n## Backdoor in XZ Utils That Almost Happened\n\nLast week, the internet dodged a major nation-state attack that would have had\ncatastrophic cybersecurity repercussions worldwide. It\u2019s a catastrophe that\ndidn\u2019t happen, so it won\u2019t get much attention\u2014but it should. There\u2019s an\nimportant moral to the story of the attack and its discovery: The security of\nthe global internet depends on countless obscure pieces of software written\nand maintained by even more obscure unpaid, distractible, and sometimes\nvulnerable volunteers. It\u2019s an untenable situation, and one that is being\nexploited by malicious actors. Yet precious little is being done to remedy it.\n\nProgrammers dislike doing extra work. If they can find already-written code\nthat does what they want, they\u2019re going to use it rather than recreate the\nfunctionality. These code repositories, called libraries, are hosted on sites\nlike GitHub. There are libraries for everything: displaying objects in 3D,\nspell-checking, performing complex mathematics, managing an e-commerce\nshopping cart, moving files around the internet\u2014everything. Libraries are\nessential to modern programming; they\u2019re the building blocks of complex\nsoftware. The modularity they provide makes software projects tractable.\nEverything you use contains dozens of these libraries: some commercial, some\nopen source and freely available. They are essential to the functionality of\nthe finished software. And to its security.\n\nYou\u2019ve likely never heard of an open-source library called XZ Utils, but it\u2019s\non hundreds of millions of computers. It\u2019s probably on yours. It\u2019s certainly\nin whatever corporate or organizational network you use. It\u2019s a freely\navailable library that does data compression. It\u2019s important, in the same way\nthat hundreds of other similar obscure libraries are important.\n\nMany open-source libraries, like XZ Utils, are maintained by volunteers. In\nthe case of XZ Utils, it\u2019s one person, named Lasse Collin. He has been in\ncharge of XZ Utils since he wrote it in 2009. And, at least in 2022, he\u2019s had\nsome \u201clongterm mental health issues.\u201d (To be clear, he is not to blame in this\nstory. This is a systems problem.)\n\nBeginning in at least 2021, Collin was personally targeted. We don\u2019t know by\nwhom, but we have account names: Jia Tan, Jigar Kumar, Dennis Ens. They\u2019re not\nreal names. They pressured Collin to transfer control over XZ Utils. In early\n2023, they succeeded. Tan spent the year slowly incorporating a backdoor into\nXZ Utils: disabling systems that might discover his actions, laying the\ngroundwork, and finally adding the complete backdoor earlier this year. On\nMarch 25, Hans Jansen\u2014another fake name\u2014tried to push the various Unix systems\nto upgrade to the new version of XZ Utils.\n\nAnd everyone was poised to do so. It\u2019s a routine update. In the span of a few\nweeks, it would have been part of both Debian and Red Hat Linux, which run on\nthe vast majority of servers on the internet. But on March 29, another unpaid\nvolunteer, Andres Freund\u2014a real person who works for Microsoft but who was\ndoing this in his spare time\u2014noticed something weird about how much processing\nthe new version of XZ Utils was doing. It\u2019s the sort of thing that could be\neasily overlooked, and even more easily ignored. But for whatever reason,\nFreund tracked down the weirdness and discovered the backdoor.\n\nIt\u2019s a masterful piece of work. It affects the SSH remote login protocol,\nbasically by adding a hidden piece of functionality that requires a specific\nkey to enable. Someone with that key can use the backdoored SSH to upload and\nexecute an arbitrary piece of code on the target machine. SSH runs as root, so\nthat code could have done anything. Let your imagination run wild.\n\nThis isn\u2019t something a hacker just whips up. This backdoor is the result of a\nyears-long engineering effort. The ways the code evades detection in source\nform, how it lies dormant and undetectable until activated, and its immense\npower and flexibility give credence to the widely held assumption that a major\nnation-state is behind this.\n\nIf it hadn\u2019t been discovered, it probably would have eventually ended up on\nevery computer and server on the internet. Though it\u2019s unclear whether the\nbackdoor would have affected Windows and Mac, it would have worked on Linux.\nRemember in 2020, when Russia planted a backdoor into SolarWinds that affected\n14,000 networks? That seemed like a lot, but this would have been orders of\nmagnitude more damaging. And again, the catastrophe was averted only because a\nvolunteer stumbled on it. And it was possible in the first place only because\nthe first unpaid volunteer, someone who turns out to be a national security\nsingle point of failure, was personally targeted and exploited by a foreign\nactor.\n\nThis is no way to run critical national infrastructure. And yet, here we are.\nThis was an attack on our software supply chain. This attack subverted\nsoftware dependencies. The SolarWinds attack targeted the update process.\nOther attacks target system design, development, and deployment. Such attacks\nare becoming increasingly common and effective, and also are increasingly the\nweapon of choice of nation-states.\n\nIt\u2019s impossible to count how many of these single points of failure are in our\ncomputer systems. And there\u2019s no way to know how many of the unpaid and\nunappreciated maintainers of critical software libraries are vulnerable to\npressure. (Again, don\u2019t blame them. Blame the industry that is happy to\nexploit their unpaid labor.) Or how many more have accidentally created\nexploitable vulnerabilities. How many other coercion attempts are ongoing? A\ndozen? A hundred? It seems impossible that the XZ Utils operation was a unique\ninstance.\n\nSolutions are hard. Banning open source won\u2019t work; it\u2019s precisely because XZ\nUtils is open source that an engineer discovered the problem in time. Banning\nsoftware libraries won\u2019t work, either; modern software can\u2019t function without\nthem. For years security engineers have been pushing something called a\n\u201csoftware bill of materials\u201d: an ingredients list of sorts so that when one of\nthese packages is compromised, network owners at least know if they\u2019re\nvulnerable. The industry hates this idea and has been fighting it for years,\nbut perhaps the tide is turning.\n\nThe fundamental problem is that tech companies dislike spending extra money\neven more than programmers dislike doing extra work. If there\u2019s free software\nout there, they are going to use it\u2014and they\u2019re not going to do much in-house\nsecurity testing. Easier software development equals lower costs equals more\nprofits. The market economy rewards this sort of insecurity.\n\nWe need some sustainable ways to fund open-source projects that become de\nfacto critical infrastructure. Public shaming can help here. The Open Source\nSecurity Foundation (OSSF), founded in 2022 after another critical\nvulnerability in an open-source library\u2014Log4j\u2014was discovered, addresses this\nproblem. The big tech companies pledged $30 million in funding after the\ncritical Log4j supply chain vulnerability, but they never delivered. And they\nare still happy to make use of all this free labor and free resources, as a\nrecent Microsoft anecdote indicates. The companies benefiting from these\nfreely available libraries need to actually step up, and the government can\nforce them to.\n\nThere\u2019s a lot of tech that could be applied to this problem, if corporations\nwere willing to spend the money. Liabilities will help. The Cybersecurity and\nInfrastructure Security Agency\u2019s (CISA\u2019s) \u201csecure by design\u201d initiative will\nhelp, and CISA is finally partnering with OSSF on this problem. Certainly the\nsecurity of these libraries needs to be part of any broad government\ncybersecurity initiative.\n\nWe got extraordinarily lucky this time, but maybe we can learn from the\ncatastrophe that didn\u2019t happen. Like the power grid, communications network,\nand transportation systems, the software supply chain is critical\ninfrastructure, part of national security, and vulnerable to foreign attack.\nThe U.S. government needs to recognize this as a national security problem and\nstart treating it as such.\n\nThis essay originally appeared in Lawfare.\n\nTags: backdoors, cybersecurity, economics of security, hacking, Linux,\nmalware, open source, social engineering, SSH\n\nPosted on April 11, 2024 at 7:01 AM \u2022 14 Comments\n\n  * Two clicks for more privacy: The Facebook Like button will be enabled once you click here. No data is loaded from Facebook until you enable the button. Click the [i] button for more information.\n\nnot connected to Facebook\n\n  * Two clicks for more privacy: The Tweet button will be enabled once you click here. No data is loaded from Twitter until you enable the button. Click the [i] button for more information.\n\nnot connected to Twitter\n\n  * If you click to activate the share buttons, data will be loaded from a third party, allowing them to track your visit to schneier.com. For more details click the [i] button.\n\n### Comments\n\nAnonymous \u2022 April 11, 2024 7:32 AM\n\nDoesn\u2019t \u201csupply chain\u201d imply you pay someone to get something in return? No\none\u2019s paying anyone.\n\nAnd it\u2019s not your supply chain, it\u2019s a guy\u2019s code. His.\n\nChris Becke \u2022 April 11, 2024 7:42 AM\n\nDo we really believe that this was the first such attack to succeed?\n\nSimon Tatham \u2022 April 11, 2024 8:41 AM\n\nA \u201cnational security\u201d single point of failure? Critical \u201cnational\u201d\ninfrastructure?\n\nSurely \u201cglobal\u201d in both cases? The victims of the attack wouldn\u2019t just have\nbeen the USA. Likely the USA weren\u2019t even the only intended victims of the\nattack.\n\nWho? \u2022 April 11, 2024 8:59 AM\n\n@ Bruce\n\n> Programmers dislike doing extra work. If they can find already-written code\n> that does what they want, they\u2019re going to use it rather than recreate the\n> functionality. These code repositories, called libraries, are hosted on\n> sites like GitHub.\n\nIt is not so simple as just lazy development. Most of that code has passed\nyears, even decades, of audits and patching on production environments. It is\nbetter using a code that has been tested on real production environments than\nwriting something new from scratch.\n\nWho? \u2022 April 11, 2024 9:00 AM\n\nA short, single-word, outline of my previous post?\n\nCOBOL.\n\nWinter \u2022 April 11, 2024 9:08 AM\n\n> Programmers dislike doing extra work. If they can find already-written code\n> that does what they want, they\u2019re going to use it rather than recreate the\n> functionality.\n\nI wholeheartedly support @Who?\n\n> Most of that code has passed years, even decades, of audits and patching on\n> production environments.\n\nI would even go further. Most of the value of a code base is in the debugging\nthat it has received.\n\n> Battle-tested trumps shiny-new.\n\nAs Brian Kernighan put it:\n\n> \u201cDebugging is twice as hard as writing the code in the first place.\n> Therefore, if you write the code as cleverly as possible, you are, by\n> definition, not smart enough to debug it.\u201d\n\nWinter \u2022 April 11, 2024 9:10 AM\n\n@Chris Becke\n\n> Do we really believe that this was the first such attack to succeed?\n\nNo. At least, I have yet to see a comment claiming to believe this.\n\nErdem Memisyazici \u2022 April 11, 2024 9:18 AM\n\nThat\u2019s not how any of this works.\n\nIn open source often a contributor is from the organization using the project.\nThis gives the organization some access and control and often those are decent\nprogrammers.\n\nWhen government is using an open source product they do what is called a code\nreview where every line of code is scrutinized by a team of security experts\nbefore the library is used and only stable versions are utilized. Deemed safe\nversions are posted on a list for everyone else to use.\n\nThere are periodic vulnerability advisories issued again by the IT security\ndepartment on more recent versions of open source products, what CVEs are out\nthere etc.\n\nArticle reads like click-bait.\n\nWho? \u2022 April 11, 2024 9:28 AM\n\n@ Bruce\n\n> Like the power grid, communications network, and transportation systems, the\n> software supply chain is critical infrastructure, part of national security,\n> and vulnerable to foreign attack. The U.S. government needs to recognize\n> this as a national security problem and start treating it as such.\n\nI hate to say it, but the answer to this question is something you do not want\nto hear. The only answer is supporting open source and free software\ndevelopers around the world. Pay them for the work they are doing building the\npillars of our cyberinfrastructure.\n\nAnd I am saying paying them, not U.S. developers, but to anyone that develops\nsoftware around the world, so people gets motivated to continue their work.\n\njefferson \u2022 April 11, 2024 10:06 AM\n\n@ Winter:\n\n> Battle-tested trumps shiny-new.\n\n...but it\u2019s easy to confuse mere existence with a \u201cbattle\u201d. Lots of people\nhave used the xz library, but that doesn\u2019t mean it\u2019s come \u201cunder attack\u201d. It\nprobably has, but I don\u2019t really know. There\u2019s likely a lot of stuff that\u2019s\nbeen floating around GitHub for a decade or more, and might even look very\nprofessional, but is obscure enough that nobody\u2019s seriously considered\nsecurity.\n\nA project by \u201csome guy\u201d can look a lot like an open-source project by a team\nof top programmers from a major company. In either case, they\u2019re usually very\nclear they have no responsibility whatsoever to anyone. If someone finds the\ncode and decides to use it in an important product, that user should take some\nresponsibility.\n\nWho? \u2022 April 11, 2024 10:15 AM\n\n> How many other coercion attempts are ongoing? A dozen? A hundred? It seems\n> impossible that the XZ Utils operation was a unique instance.\n\nAnother question that should be answered is how many coercion attempts have\nbeen successful and we do not know it.\n\nTimH \u2022 April 11, 2024 10:37 AM\n\n@jefferson:\n\n> If\n>\n> someone\n\n>\n> finds the code and decides to use it in an important product, that\n>\n> user\n\n>\n> should take some responsibility.\n\nIf your\n\nsomeone\n\nregards themselves as a\n\nuser\n\n, then they\u2019ll consider themselves a victim of any security issues in their\nlibrary code, and won\u2019t take responsibility.\n\nYog \u2022 April 11, 2024 10:51 AM\n\nThis incident also illustrates the dangers in making security critical\nsoftware like OpenSSH vulnerable to attack by adding local patches which drag\nin a lot of less rigorously developed libraries. This is what Red Hat, Debian\nand their derivatives did. OpenSSH itself is not at fault. Other Linux\ndistributions like Alpine, Slackware, Void and Gentoo along with the BSDs,\nwhich didn\u2019t add the offending patches, were not vulnerable.\n\nThe monoculture which has absorbed most of the Linux world must share some of\nthe blame here, by providing a single point of failure on a massive scale.\n\nClive Robinson \u2022 April 11, 2024 10:54 AM\n\n@ Bruce,\n\nYour paragraph,\n\n> \u201cThe fundamental problem is that tech companies dislike spending extra money\n> even more than programmers dislike doing extra work. If there\u2019s free\n> software out there, they are going to use it\u2014and they\u2019re not going to do\n> much in-house security testing. Easier software development equals lower\n> costs equals more profits. The market economy rewards this sort of\n> insecurity.\u201d\n\nEncapsulates most of the problem, but leaves out a couple of things.\n\nFirstly the original driver of these problems,\n\n\u201cTime to Market\u201d\n\nThe argument via the observing of the likes of Microsoft was \u201ccompetition\nkilling\u201d by being \u201cfirst out the door\u201d and as a few around here who were there\ncan confirm in Microsoft\u2019s case their software was rarely if ever all there or\nall functional and promised fixes never happened and became\n\n\u201cA wish for a future release\u201d.\n\nSecondly as I mentioned to @Winter just the other day Microsoft was a thief in\nall sorts of ways. Much of their code was actually stolen or taken from other\nplaces.\n\ncourts even eventually found them guilty of doing so. Yet Microsoft carried\non.\n\nAfter all why spend money on what is \u201cmarket research\u201d just steal it from your\ncompetitors work.\n\nCourts even eventually found Microsoft guilty of doing so.\n\nYet Microsoft carried on, thus the question,\n\n\u201cWhy?\u201d\n\nThe simple answer is because Microsoft knew that the time to court and final\njudgment was usually measured in years. With two sometimes three product\ncycles a year the offending code/ideas could be sufficiently sanitised, and\nthe competitor in effect put out of business in that time.\n\nSo to compete with Microsoft you either had to be too niche or play the sane\ngame as Microsoft. So we have the industry the way Microsoft wanted it because\nthe legal process is at best defective when it comes to time.\n\nBut an important point to note is nobody pays for breakages with software.\nMicrosoft drove the faux-lease idea to avoid any liabilities for there bad\ncode.\n\nThe only real way to stop this nonsense or at least put a drag on it is\n\u201cconsumer liability\u201d legislation. If Microsoft have to pay for breakages they\ncause then they will take more care than they ever have done.\n\nHow you get past the faux-clauses in the EULA\u2019s and over paid corporate\nlawyers is another matter. Which in times past legislators were happy to find\nsolutions for. But now with billion dollar corporate lobbying...\n\nSubscribe to comments on this entry\n\n## Leave a comment Cancel reply\n\n\u2190 In Memoriam: Ross Anderson, 1956-2024\n\nSidebar photo of Bruce Schneier by Joe MacInnis.\n\nPowered by WordPress Hosted by Pressable\n\n### About Bruce Schneier\n\nI am a public-interest technologist, working at the intersection of security,\ntechnology, and people. I've been writing about security issues on my blog\nsince 2004, and in my monthly newsletter since 1998. I'm a fellow and lecturer\nat Harvard's Kennedy School, a board member of EFF, and the Chief of Security\nArchitecture at Inrupt, Inc. This personal website expresses the opinions of\nnone of those organizations.\n\n### Related Entries\n\n  * In Memoriam: Ross Anderson, 1956-2024\n  * US Cyber Safety Review Board on the 2023 Microsoft Exchange Hack\n  * XZ Utils Backdoor\n  * Ross Anderson\n  * Security Vulnerability in Saflok's RFID-Based Keycard Locks\n\n### Featured Essays\n\n  * The Value of Encryption\n  * Data Is a Toxic Asset, So Why Not Throw It Out?\n  * How the NSA Threatens National Security\n  * Terrorists May Use Google Earth, But Fear Is No Reason to Ban It\n  * In Praise of Security Theater\n  * Refuse to be Terrorized\n  * The Eternal Value of Privacy\n  * Terrorists Don't Do Movie Plots\n\nMore Essays\n\n### Blog Archives\n\n  * Archive by Month\n  * 100 Latest Comments\n\n#### Blog Tags\n\n  * 3d printers\n  * 9/11\n  * A Hacker's Mind\n  * Aaron Swartz\n  * academic\n  * academic papers\n  * accountability\n  * ACLU\n  * activism\n  * Adobe\n  * advanced persistent threats\n  * adware\n  * AES\n  * Afghanistan\n  * air marshals\n  * air travel\n  * airgaps\n  * al Qaeda\n  * alarms\n  * algorithms\n  * alibis\n  * Amazon\n  * Android\n  * anonymity\n  * Anonymous\n  * antivirus\n  * Apache\n  * Apple\n  * Applied Cryptography\n  * artificial intelligence\n\nMore Tags\n\n### Latest Book\n\nMore Books\n\n", "frontpage": false}
