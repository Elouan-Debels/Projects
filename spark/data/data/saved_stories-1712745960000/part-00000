{"aid": "39987028", "title": "Please Don't Use Puppet", "url": "https://ilya-sher.org/2017/06/09/please-dont-use-puppet/", "domain": "ilya-sher.org", "votes": 1, "user": "greenSunglass", "posted_at": "2024-04-10 04:43:11", "comments": 0, "source_title": "Please don\u2019t use Puppet", "source_text": "Please don\u2019t use Puppet \u2013 Ilya's blog\n\nSkip to content\n\nSearch\n\nClose\n\n# Ilya's blog\n\n## Systems and software engineering\n\nSystem administration\n\n# Please don\u2019t use Puppet\n\nJune 9, 2017 Ilya Sher2 Comments\n\n## Thinking process behind choosing a tool\n\nThinking process behind choosing a tool does not get the attention it\ndeserves. While there are many discussions of the form tool X vs tool Y, there\nis very little discussion of how one should choose between tools or in\npresumable absence of alternatives, whether one should use the only candidate,\ntool X. This post will cover few things to keep in mind when selecting a tool\nby highlighting few common problems and fallacies. Puppet will be used as an\nexample tool for consideration.\n\n### Focusing on positive parts only\n\nWhen considering a product or a tool, too often positive aspects are\noverestimated and negative aspects that influence TCO (Total Cost of\nOwnership) are underestimated or neglected. There are several cognitive biases\nand logical fallacies involved. Cognitive biases and logical fallacies can be\navoided to some extent just by being aware. I will be referring to these\nthrough the post to help you, the reader, become more aware of your thought\nprocess which will hopefully improve it and consequently the process of\ndecision making on your part.\n\n#### Marketing pushes to see the positive\n\nWe all know that marketing focuses on positive aspects of a product and\nneglects to mention downsides. This is specifically mentioned in \u201cFalse\nadvertising\u201d article under \u201cOmitting information\u201d.\n\nFor example, the fact that it\u2019s not convenient to manage Puppet modules\n(proof: existence of a tool to do just that) will not appear in marketing\nmaterials. You might think that the existence of Librarian-puppet is on the\ncontrary, makes management of these modules easier. It does but it also brings\nmore complexity to the system. New problems and bugs instead of inhuman manual\nmanagement of modules.\n\n#### This post will focus on the negative\n\nWhile there is more than enough focus on positive aspects of products, this\npost will be highlighting the negative aspects in order to strike some\nbalance. There is plenty of marketing materials but it\u2019s harder to find a list\nof problems that you only discover when you are neck-deep into the\ntool/product. These problems will be listed here. Note that this can not be\nexhaustive list because different situations reveal different problems and\nthis post is only based on experience of several of my friends and mine.\n\nListing the problems of a tool touches Availability heuristic cognitive bias:\nthe easier you recall something the more \u201cimportant\u201d it is. You are bombarded\nby marketing materials which are all positive. When considering a tool, your\nnatural flow of thought is \u201cHow easily can I remember positive sides of the\ntool?\u201d and it\u2019s easy, because you were probably brainwashed already by how\ngood the tool is. Then \u201cHow easily can I remember negative sides of the tool?\u201d\nis much harder. This is not the kind of information that will be pushed to you\nby the people behind the tool, they have no interest in doing so. Their money\ngoes to advertise how good the tool is, not how bad it is. You can balance\nyour rosy impressions of any tool or product with looking at GitHub issues,\ndigging StackOverflow for the downsides, or reading posts like this one.\n\n### Please, assume that X is the wrong tool for your needs.\n\nAs opposed to \u201cyeah, looks good, let\u2019s use it\u201d, this approach leads to more\nthoughtful tool selection process. Please read Prove your tool is the right\nchoice.\n\n### \u201cEverybody uses X\u201d\n\n\u201cEverybody uses X\u201d thought might have been planted in your brain by marketing\nefforts. Please analyze the source of that thought carefully. Maybe you have\nheard from some of your friends and/or colleagues about the product and made a\ngeneralization? Maybe people are just stuck with it? Maybe that\u2019s what they\nknow? Did you search for alternatives? Did you try to disprove \u201cEverybody uses\nX\u201d?\n\n### \u201cEverybody uses X, therefore it\u2019s good\u201d\n\nWhether this thought was planted by marketing or not, no, there is no logical\nconnection between the first and the second clauses.\n\nIf a lot of people use something, it becomes better as there is more feedback\nand contributors. It is often implied that therefore X is good. Improvement\nover time or with user base does not mean X is good enough for any particular\nuse right now.\n\nDid you communicate with the people that use X? Did they tell you it was a\ngood decision? Beware of Choice-supportive bias when you talk to them. Which\nalternatives did they consider? Are they able to articulate downsides? Every\nsolution has downsides, being able to recognize these increases credibility of\nthe opinion about X.\n\n### \u201cEverybody uses X, we should use X\u201d\n\nYes, if you consider the value of \u201cthen we can blog about it and be part of\nthe hype, possibly getting some traction and traffic\u201d. This might have some\nestimated value which should be weighted against the cost incurred by choosing\notherwise unneeded or inferior tool or technology. You can point your bosses\nto this paragraph, along with your estimation of the costs of using tool X vs\nbetter alternatives (which might be just not using it and coding yourself the\nneeded functionality for example, the comparison is valid for both X vs Y and\nX vs without X).\n\nNo, \u201cWe should use X\u201d does not logically follow from \u201cEverybody uses X\u201d.\nBeware of conformity bias.\n\n### \u201cCompany C uses X\u201d\n\nThis piece of information, when served by vendor of X implies that company C\nknows better and you should use X too.\n\nCompany C is big and respectable company with smart engineers. The vendor of X\nwill gladly list big and reputable companies that use X. That\u2019s the use of\n\u201cArgument from authority\u201d.\n\nAgain, there is no straight logical path between \u201cC uses X\u201d and \u201cwe should use\nX too\u201d.\n\nChances are that company C is vastly different from your company and their\ncircumstances and situation are different from yours.\n\nCompany C can also make mistakes. You are unlikely to see a blog post from\nvendor of X that is titled \u201cCompany C realized their mistake and migrated from\nX\u201d.\n\n### Claims of success with tool X\n\nTreat claims of successful usage of tool X with caution. Searching quickly for\n\u201cmeasuring project success\u201d reveals the following dimensions to be looked at\nwhen estimating a success of a project:\n\n  * Cost\n  * Scope\n  * Quality\n  * Time\n  * Team satisfaction\n  * Customer satisfaction\n\nThe claims of successful usage of tool X carry almost no information regarding\nwhat really happens. \u201cWe are using Puppet successfully\u201d might mean (when taken\nto extreme) that for 100 servers and one deploy per day the following applies:\n\n  * Cost: There is dedicated team of five costly operations people that work just on Puppet because it\u2019s complex.\n  * Scope: Puppet covers 80% of the needs, this might be the only dimension looked into when claiming a success.\n  * Quality, Team satisfaction: This team is constantly cursing because of bugs, modules or Puppet upgrades issues such as Upgrade to puppet-mysql 3.6.0 Broke My Manifest (fixed in just two months!) or puppet 4.5.0 has introduced a internal version of dig, that is not compatible to stdlib\u2019s version oopsie.\n\nEnjoy the list of regression bugs. It\u2019s hard to blame Puppet developers for\nthese bugs because these kinds of issues are natural for projects of this size\nand complexity. I suggest that creating your own domain-specific language,\nwhich is not a programming language for a configuration management tool is a\nbad idea. I\u2019ll elaborate about this point in a bit, in the \u201cPuppet DSL\u201d\nsection.\n\n  * Time: Took 6 moths of the above team to implement Puppet. Unpredictable time to implement any feature because of complexity and unexpected bugs along the way.\n  * Customer satisfaction: Given all of the above it\u2019s hard to believe in any kind of satisfaction with what\u2019s going on.\n\nIt\u2019s also worth to keep in mind that any shown success, real success, does not\nmean that same solution will be equally applicable to your situation, because\nit\u2019s almost certainty different on one or more dimensions: time, budget, scope\n(problem you are solving), skills, requirements.\n\n### \u201cBut X also provides feature F\u201d\n\nI am sure that the advertisements will mention all the important features as\nwell as \u201ccool\u201d features. Do you really need F?\n\nWhen choosing a tool the thought \u201cBut X also provides feature F\u201d might be\ndangerous if F is not something you immediately need. One might think that F\nmight be needed later. This might be the case but what are the odds, what\u2019s\nthe value of F to you, how much will it cost to implement using another tool\nor write yourself? Also, consider the \u201chorizon\u201d. If you might need feature F\nin 3 years, in many situations this should be plainly ignored. In 3 years\nthere might be another tool for F or you might switch from X to something else\nfor other reasons by then.\n\nSuppose there is another tool X2 which is alternative to X. X2 does not\nprovide F but it\u2019s estimated TCO over a year is 50% less than F. You should\nconsider the costs because it might be that X2 for the first year and then\nswitching to X, including the switching costs can be cheaper.\n\n### Putting tools before needs\n\n\u201cSo, there is new trendy hypy tool X. How can we use it?\u201d is typically a bad\nstart. At the very least it should be \u201cSo, there is new trendy hypy tool. Do\nwe have any problems where X would be a better alternative?\u201d\n\nIdeally the approach would be \u201cWe have problem P, which alternative solutions\ndo we have?\u201d. P might be some inefficiency or desired functionality.\nSolutions, once again, do not have to mean existing tools.\n\n## Puppet \u2013 the good parts\n\nI will quickly go over a few good parts because I want this post at least to\ntry to be objective.\n\n### Convergence\n\nConvergence is an approach that says one should define the desired state, not\nthe steps to be taken to get there. The steps are abstracted away and on each\nrun the system will try to achieve the desired state as closely as possible.\n\nI do agree that declaring a resource such as file, user, package or service\nand it\u2019s desired state is a good approach. It\u2019s concise and it\u2019s usually\nsimpler than specifying the operations that would lead to the desired state,\nlike regular scripts do. This idea manifests in many other tools too: Chef,\nAnsible, CloudFormation, Terraform.\n\n### Appropriate in some situations\n\n  * Think about a startup where someone does part time systems engineering job, not a professional. As Guy Egozy pointed out, there are situations such as startups with limited resources and basic needs where using a configuration management tools might make more sense than in other situations.\n  * Urgent demo with all defaults if you have a good control of the tool and you know that you need some very specific functionality, say wordpress+mysql demo tomorrow, it is probably worth to prepare the demo with Puppet or Chef. There is still a danger of course that the module you were using a month ago have now changed and you need to invest additional time to make things work. Or maybe the module is just broken now.\n\n### Multiple platforms support\n\nIn my experience the chances that you will be running same applications on say\nWindows and Linux are pretty slim. The overlap of installed software on\ndifferent platforms is likely to be infrastructure tooling only (monitoring,\ngraphing, logging). Is it really worth the price?\n\n## Puppet DSL\n\n### Puppet class\n\nPuppet DSL has a concept of \u201cclass\u201d which has nothing to do with classes in\nprogramming languages. It least in retrospective it was not such a good idea,\nespecially when considering operations guys trying to explain about Puppet\nclasses to developers.\n\n### Limited DSL limitations\n\n#### Acknowledged as a problem by facts\n\nLimitations of DSL in my opinion were acknowledged by actions taken by\nPuppet\u2019s developers and contributors:\n\n  * stdlib tremendous growth: wc -l load_vars.rb, the only file in stdlib repo at 2011, gives 56 lines of code. In year 2017, wc -l $(find lib/puppet/parser/functions -name '*.rb') gives 5325 lines of code.\n  * each and map: Adding each and map in version 4.0.0: Added on 2014-04-08 according to GitHub. First puppet release was on 2006-01-03 (version 0.9.3). This means that it took 9 years to implement a loop, \u201cIn earlier versions of Puppet, when there were no iteration functions and lambdas weren\u2019t supported, you could achieve a clunkier form of iteration\u201d (same Puppet documentation page).\n  * Lambdas: Adding Lambdas in Puppet 3 as experimental feature, what a novel idea from 1936! Implemented in many languages for years.\n\n#### Limited DSL is not a great idea!\n\nI do understand why limited DSL can be aesthetically and mathematically\nappealing. The problem here is that life is more complex than limited DSL.\nWhat could be 10 lines of real code turns into 50 lines of ugly copy+paste\nand/or hacks around the DSL limitations.\n\nIt sounds reasonable that at the time when CFengine and Puppet were created\nthere were not enough examples of shortcomings of limited DSLs and their\nclashes with real life. Today we have more:\n\n  * Puppet \u2013 DSL failure admitted by actions, as discussed above.\n  * Ansible \u2013 just looks bad . Some features look like they were torn from a programming language and forced into YAML.\n  * Terraform \u2013 often generated because well ... life. This one is more of a configuration language by design. This approach has pros and cons when applied to infrastructure.\n  * CloudFormation \u2013 99% configuration format and 1% language, that\u2019s why it\u2019s generated for all except trivial cases. You do have the alternative of not generating CloudFormation input file but provide custom resources which use AWS Lambda functions instead. They will do some of the work. While this fits CloudFormation model perfectly, and makes CloudFormation much more powerful, I would really prefer a script over inversion of control and additional AWS service (Lambda) which I have to use \u2013 one more thing that can go wrong or just be unavailable when needed the most.\n\nI do not agree that Terraform should be limited the way it is, but in my\nopinion, Terraform and CloudFormation are more legitimately limited while\nPuppet and Ansible are just bad design. This limitation by design causes\ncomplex workarounds which are costly and sometimes fragile, not to mention\nmental well being of the systems engineers that are working with Puppet.\n\nWe can all stop now creating domain specific languages for configuration\nmanagement which were not built on top of real programming languages. Except\nfor a few cases, that\u2019s a bad idea. We can admit it instead of perpetuating\nthe wishful thinking that the reality is simple and limited DSL can deal with\nit somehow.\n\n## Puppet modules\n\n### Dependencies between Puppet modules\n\nPlainly headache. Modules have dependencies on other modules and so on.\nFinding compatible modules\u2019 versions is a hard problem. That\u2019s why we have\nLibrarian-puppet. As I mentioned above, it has it\u2019s own issues.\n\nThere are also issues that Librarian-puppet can not solve, which are inherent\nto system of this scale, complexity and number of contributors. Let\u2019s say you\nhave module APP1 that depends on module LIB and module APP2 that also depends\non LIB. Pinning version of module LIB because APP1 has a bug can prevent you\nfrom upgrading module APP2 which in newer versions depends on newer LIB. This\nis not imaginary scenario but real life experience.\n\n### Breakage of Puppet modules\n\nAnother aspect is that in this complex environment it\u2019s somewhere between hard\nand impossible for any module maintainer to make sure his/her changes do not\nbreak anything. Therefore, they do break:\n\n  * Custom nginx.conf template is no longer working\n  * Changes from Validate_ to datatypes is not backward compatible with Puppet 3.8.7\n  * Nginx location as exported resource not working anymore\n\nPopular community modules deal with so many cases and operating systems that\nbreakage of some functionality is inevitable.\n\n### Community modules\n\nThere is this idea that is kind of in the air: \u201cyou have community modules for\neverything, if you are not using them you are incompetent and wasting your\ntime and money\u201d.\n\nThis could come from 3 sources:\n\n  * Marketing\n  * People that use community modules for simple cases and they work fine\n  * People that underestimate the amount of maintenance work required to make community modules work for your particular case.\n\nThe feedback that I\u2019ve got several times from different sources is that if you\nare doing anything serious with your configuration management tool, you should\nwrite your own modules, fitting community modules to your needs is too costly.\n\n## Graph dependencies model problems\n\nDo you know people who think in dependency graphs? It looks like most people\nthat I know are much more comfortable thinking about sequence of items or\noperations to perform in most cases. Thinking about dependency graphs such as\nabout packages\u2019 versions compatibility usually comes with recognizable\nsignificant mental effort, often with curses.\n\nPuppet team admitted (again, by actions) this is a problem and introduced\nordering configuration and made \u201cmanifest\u201d ordering the default at some point.\nNote that this ordering is only for resources without explicit dependencies\nand within one manifest.\n\nGraphs are somewhat implicit. This causes surprise and consequential WTFs.\nMessages about dependencies errors are not easily understood.\n\n  * \u201cDependencies are also arguably the most maligned feature of Puppet\u201d \u2013 openshift.com.\n\n## Marketing\n\n  * Puppet usage is compared to manual performance of the same tasks \u2013 \u201cGetting rid of the manual deployments\u201d. This is clearly a marketing trick: comparing your tool to the worst possible alternative, not other tools which are similar to yours.\n  * Puppet is compared to bash scripts. Why not Python or Ruby?\n  * \u201cAutomate!\u201d is all over Puppet site. Implies that Puppet is a good automation tool.\n  * Top 5 success stories / case studies use Puppet Enterprise? Coincidence? I think not\n\n## Thanks\n\nMany thanks for guidance to Konstantin Nazarov (@racktear). We met at\nDevOpsDays Moscow 2017 where he offered free guidance lessons for improving\nspeech and writing skills. In reality, lessons also include productivity tips\nwhich help me a lot. Feel free to contact Konstantin, he might have a free\nweekly slot for you.\n\nHave a productive career!\n\n### Share this:\n\n  * Facebook\n  * Twitter\n  * LinkedIn\n  * Reddit\n  * Email\n\nLike Loading...\n\n## 2 thoughts on \u201cPlease don\u2019t use Puppet\u201d\n\n  1. Ant says:\n\nJune 9, 2017 at 9:31 am\n\nAs always a great rant, my friend \u2013 because it\u2019s well researched and based on\nfirst-hand experience. There\u2019s a reason why cognitive biases exist. In the\nsame way there\u2019s a reason for DSLs. No language is perfect and each one is a\nreflection of our world-view. You\u2019re right when you say that reality will\nalways be wider than a specific domain. Still we need convenient abstractions\nto reason and communicate effectively. We need to remember that infrastructure\nas code is also about documenting and sharing knowledge. And that\u2019s where\ndeclarative DSLs shine. With all their limitations.\n\nLikeLike\n\nReply\n\n     * Ilya Sher says:\n\nJuly 20, 2020 at 9:36 am\n\nCompletely valid insight!\n\nLikeLike\n\nReply\n\n### Leave a comment Cancel reply\n\nNext Generation Shell is a modern programming language for DevOps. Join our\nDiscord or visit the official website.\n\n## Follow me on Twitter\n\nMy Tweets\n\n## RSS\n\nRSS - Posts\n\n## Recent Posts\n\n  * Type Casting in TypeScript\n  * Feedback Essentials\n  * AWS SDK pagination \u2013 disregard for Developer Experience\n  * Empty Arrays for Cleaner Code\n  * Naming in Software \u2013 Practical Guide\n  * gRPC + REST API on AWS\n  * The Case for Concise Posts\n  * Event Loop for Beginners\n  * AWS CDK Opinionated Pipeline \u2013 Where is What?\n  * AWS CDK \u2013 Proposed Slogans\n\n## Categories\n\nAWS bashing-bash Browsers Code Google Humor Management Marketing bullshit NGS\nPhilosophy Programming Rant Security Snippets System administration UI\nUncategorized Unique features Writing WWW\n\n## Archives\n\n  * November 2023\n  * October 2023\n  * July 2023\n  * April 2023\n  * March 2023\n  * January 2023\n  * December 2022\n  * April 2022\n  * March 2022\n  * February 2022\n  * November 2021\n  * October 2021\n  * September 2021\n  * March 2021\n  * December 2020\n  * October 2020\n  * September 2020\n  * August 2020\n  * July 2020\n  * January 2020\n  * October 2019\n  * May 2019\n  * September 2018\n  * July 2018\n  * June 2018\n  * April 2018\n  * March 2018\n  * October 2017\n  * September 2017\n  * August 2017\n  * July 2017\n  * June 2017\n  * April 2017\n  * March 2017\n  * February 2017\n  * January 2017\n  * December 2016\n  * October 2016\n  * September 2016\n  * July 2016\n  * June 2016\n  * May 2016\n  * April 2016\n  * March 2013\n  * September 2012\n  * August 2012\n  * February 2011\n  * November 2010\n  * October 2009\n  * August 2009\n  * July 2009\n  * June 2009\n\nBlog at WordPress.com.\n\nBack to top\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * Ilya's blog\n    * Already have a WordPress.com account? Log in now.\n\n  *     * Ilya's blog\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\n%d\n\n", "frontpage": false}
