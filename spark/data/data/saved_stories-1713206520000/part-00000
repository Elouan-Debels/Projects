{"aid": "40039809", "title": "Biome 1.7: Migrate from ESLint with one command", "url": "https://biomejs.dev/blog/biome-v1-7/", "domain": "biomejs.dev", "votes": 8, "user": "conaclos", "posted_at": "2024-04-15 12:40:23", "comments": 0, "source_title": "Biome v1.7", "source_text": "Biome v1.7 | Biome\n\nSkip to content\n\nBiome\n\nDocs Blog Playground\n\nDiscord GitHub X Mastodon\n\n# Biome v1.7\n\nVictorien Elvinger & Biome Core Team, Biome Maintainers\n\nApril 15, 2024\n\nToday we\u2019re excited to announce the release of Biome v1.7!\n\nThis new version provides an easy path to migrate from ESLint and Prettier. It\nalso introduces experimental machine-readable reports for the formatter and\nthe linter, new linter rules, and many fixes.\n\nUpdate Biome using the following commands:\n\n    \n    \n    npm install --save-dev --save-exact @biomejs/biome@latest\n    \n    npx @biomejs/biome migrate\n\n## Migrate from ESLint with a single command\n\nSection titled Migrate from ESLint with a single command\n\nThis release introduces a new subcommand biome migrate eslint. This command\nwill read your ESLint configuration and attempt to port their settings to\nBiome.\n\nThe subcommand is able to handle both the legacy and the flat configuration\nfiles. It supports the extends field of the legacy configuration and loads\nboth shared and plugin configurations! The subcommand also migrates\n.eslintignore.\n\nGiven the following ESLint configuration:\n\n.eslintrc.json\n\n    \n    \n    {\n    \n    \"extends\": [\"plugin:unicorn/recommended\"],\n    \n    \"plugins\": [\"unicorn\"],\n    \n    \"ignore_patterns\": [\"dist/**\"],\n    \n    \"globals\": {\n    \n    \"Global1\": \"readonly\"\n    \n    },\n    \n    \"rules\": {\n    \n    \"eqeqeq\": \"error\"\n    \n    },\n    \n    \"overrides\": [\n    \n    {\n    \n    \"files\": [\"tests/**\"],\n    \n    \"rules\": {\n    \n    \"eqeqeq\": \"off\"\n    \n    }\n    \n    }\n    \n    ]\n    \n    }\n\nAnd the following Biome configuration:\n\nbiome.json\n\n    \n    \n    {\n    \n    \"linter\": {\n    \n    \"enabled\": true,\n    \n    \"rules\": {\n    \n    \"recommended\": true\n    \n    }\n    \n    }\n    \n    }\n\nRun biome migrate eslint --write to migrate your ESLint configuration to\nBiome. The command overwrites your initial Biome configuration. For example,\nit disables recommended. This results in the following Biome configuration:\n\nbiome.json\n\n    \n    \n    {\n    \n    \"organizeImports\": { \"enabled\": true },\n    \n    \"linter\": {\n    \n    \"enabled\": true,\n    \n    \"rules\": {\n    \n    \"recommended\": false,\n    \n    \"complexity\": {\n    \n    \"noForEach\": \"error\",\n    \n    \"noStaticOnlyClass\": \"error\",\n    \n    \"noUselessSwitchCase\": \"error\",\n    \n    \"useFlatMap\": \"error\"\n    \n    },\n    \n    \"style\": {\n    \n    \"noNegationElse\": \"off\",\n    \n    \"useForOf\": \"error\",\n    \n    \"useNodejsImportProtocol\": \"error\",\n    \n    \"useNumberNamespace\": \"error\"\n    \n    },\n    \n    \"suspicious\": {\n    \n    \"noDoubleEquals\": \"error\",\n    \n    \"noThenProperty\": \"error\",\n    \n    \"useIsArray\": \"error\"\n    \n    }\n    \n    }\n    \n    },\n    \n    \"javascript\": { \"globals\": [\"Global1\"] },\n    \n    \"overrides\": [\n    \n    {\n    \n    \"include\": [\"tests/**\"],\n    \n    \"linter\": { \"rules\": { \"suspicious\": { \"noDoubleEquals\": \"off\" } } }\n    \n    }\n    \n    ]\n    \n    }\n\nThe subcommand needs Node.js to load and resolve all the plugins and extends\nconfigured in the ESLint configuration file. For now, biome migrate eslint\ndoesn\u2019t support configuration written in YAML.\n\nWe have a dedicated page that lists the equivalent Biome rule of a given\nESLint rule. We handle some ESLint plugins such as TypeScript ESLint, ESLint\nJSX A11y, ESLint React, and ESLint Unicorn. Some rules are equivalent to their\nESLint counterparts, while others are inspired. By default, Biome doesn\u2019t\nmigrate inspired rules. You can use the CLI flag --include-inspired to migrate\nthem.\n\n## Migrate from Prettier with a single command\n\nSection titled Migrate from Prettier with a single command\n\nBiome v1.6 introduced the subcommand biome migrate prettier.\n\nIn Biome v1.7, we add support of Prettier\u2019s overrides and attempts to convert\n.prettierignore glob patterns to globs supported by Biome.\n\nDuring the migration, Prettier\u2019s overrides is translated to Biome\u2019s overrides.\nGiven the following .prettierrc.json\n\n.prettierrc.json\n\n    \n    \n    {\n    \n    \"useTabs\": false,\n    \n    \"singleQuote\": true,\n    \n    \"overrides\": [\n    \n    {\n    \n    \"files\": [\"*.json\"],\n    \n    \"options\": { \"tabWidth\": 2 }\n    \n    }\n    \n    ]\n    \n    }\n\nRun biome migrate prettier --write to migrate your Prettier configuration to\nBiome. This results in the following Biome configuration:\n\nbiome.json\n\n    \n    \n    {\n    \n    \"formatter\": {\n    \n    \"enabled\": true,\n    \n    \"formatWithErrors\": false,\n    \n    \"indentStyle\": \"space\",\n    \n    \"indentWidth\": 2,\n    \n    \"lineEnding\": \"lf\",\n    \n    \"lineWidth\": 80,\n    \n    \"attributePosition\": \"auto\"\n    \n    },\n    \n    \"organizeImports\": { \"enabled\": true },\n    \n    \"linter\": { \"enabled\": true, \"rules\": { \"recommended\": true } },\n    \n    \"javascript\": {\n    \n    \"formatter\": {\n    \n    \"jsxQuoteStyle\": \"double\",\n    \n    \"quoteProperties\": \"asNeeded\",\n    \n    \"trailingComma\": \"all\",\n    \n    \"semicolons\": \"asNeeded\",\n    \n    \"arrowParentheses\": \"always\",\n    \n    \"bracketSpacing\": true,\n    \n    \"bracketSameLine\": false,\n    \n    \"quoteStyle\": \"single\",\n    \n    \"attributePosition\": \"auto\"\n    \n    }\n    \n    },\n    \n    \"overrides\": [\n    \n    {\n    \n    \"include\": [\"*.json\"],\n    \n    \"formatter\": {\n    \n    \"indentWidth\": 2\n    \n    }\n    \n    }\n    \n    ]\n    \n    }\n\nThe subcommand needs Node.js to load JavaScript configurations such as\n.prettierrc.js. biome migrate prettier doesn\u2019t support configuration written\nin JSON5, TOML, or YAML.\n\n## Emit machine-readable reports\n\nSection titled Emit machine-readable reports\n\nBiome is now able to output JSON reports detailing the diagnostics emitted by\na command.\n\nFor instance, you can emit a report when you lint a codebase:\n\nTerminal window\n\n    \n    \n    biome lint --reporter=json-pretty .\n\nFor now, we support two report formats: json and json-pretty.\n\nNote that the report format is experimental, and it might change in the\nfuture. Please try this feature and let us know if any information needs to be\nadded to the reports.\n\n## Check git staged files\n\nSection titled Check git staged files\n\nBiome v1.5 added the --changed to format and lint git tracked files that have\nbeen changed.\n\nToday we are introducing a new option --staged which allows you to check only\nfiles added to the Git index (staged files). This is useful for checking that\nthe files you want to commit are formatted and linted:\n\nTerminal window\n\n    \n    \n    biome check --staged .\n\nThis is handy for writing your own pre-commit script. Note that unstaged\nchanges on a staged file are not ignored. Thus, we still recommend using a\ndedicated pre-commit tool.\n\nThanks to @castarco for implementing this feature!\n\n## Linter\n\nSection titled Linter\n\n### New nursery rules\n\nSection titled New nursery rules\n\nSince Biome v1.6, we added several new rules. New rules are incubated in the\nnursery group. Nursery rules are exempt from semantic versioning.\n\nThe new rules are:\n\n  * nursery/noConstantMathMinMaxClamp\n  * nursery/noDoneCallback\n  * nursery/noDuplicateElseIf\n  * nursery/noEvolvingAny\n  * nursery/noFlatMapIdentity\n  * nursery/noMisplacedAssertion\n\n### Promoted rules\n\nSection titled Promoted rules\n\nOnce stable, a nursery rule is promoted to a stable group The following rules\nare promoted:\n\n  * complecity/noExcessiveNestedTestSuites\n  * complexity/noUselessTernary\n  * correctness/useJsxKeyInIterable\n  * performance/noBarrelFile\n  * performance/noReExportAll\n  * style/noNamespaceImport\n  * style/useNodeAssertStrict\n  * suspicious/noDuplicateTestHooks\n  * suspicious/noExportsInTest\n  * suspicious/noFocusedTests\n  * suspicious/noSkippedTests\n  * suspicious/noSuspiciousSemicolonInJsx\n\n## Miscellaneous\n\nSection titled Miscellaneous\n\n  * By default, Biome searches a configuration file in the working directory and parent directories if it doesn\u2019t exist. Biome provides a CLI option --config-path and an environment variable BIOME_CONFIG_PATH that allows which can be used to override this behavior. Previously, they required a directory containing a Biome configuration file. For example, the following command uses the Biome configuration file in ./config/.\n\nTerminal window\n\n    \n        biome format --config-path=./config/ ./src\n\nThis wasn\u2019t very clear for many users who are used to specifying the\nconfiguration file path directly. They now accept a file, so the following\ncommand is valid:\n\nTerminal window\n\n    \n        biome format --config-path=./config/biome.json ./src\n\n  * You can now ignore React imports in the rules noUnusedImports and useImportType by setting javascript.jsxRuntime to reactClassic.\n\n  * Biome applies specific settings to well-known files. It now recognizes more files and distinguishes between JSON files that only allow comments and JSON files that allow both comments and trailing commas.\n\n  * In the React ecosystem, files ending in .js are allowed to contain JSX syntax. The Biome extension is now able to parse JSX syntax in files that are associated with the JavaScript language identifier.\n\n  * useExhaustiveDependencies now supports Preact.\n\nSee the changelog for more details.\n\n## What\u2019s Next?\n\nSection titled What\u2019s Next?\n\nWe have started work on the CSS formatter and linter. Early implementation\ntowards a plugin system is also underway. Some of our contributors have\nstarted preliminary work for GraphQL and YAML. Any help is welcome!\n\nIf Biome is valuable to you or your company, consider donating monthly to our\nOpen Collective. You can also sponsor us on GitHub. This is important for the\nsustainability of the project.\n\nFollow us on our Twitter and join our Discord community.\n\nEdit page\n\n", "frontpage": false}
