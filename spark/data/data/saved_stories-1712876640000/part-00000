{"aid": "40004367", "title": "Show HN: Annotate: Create walkthrough guides in the style of the Stripe docs", "url": "https://annotate.dev", "domain": "annotate.dev", "votes": 1, "user": "tip_of_the_hat", "posted_at": "2024-04-11 17:01:46", "comments": 2, "source_title": "Annotate | Craft walkthroughs that clarify code", "source_text": "Annotate | Craft walkthroughs that clarify code\n\n# Craft walkthroughs that clarify code\n\nAnnotate makes it easy for devrels, educators, and engineers to explain code\nstep-by-step. Write, edit, and publish code walkthroughs. Embed directly\ninside your application.\n\nGet started\n\n# Learn OAuth 2.0 by Building Your Own OAuth Client\n\nAlex YakubovskyMar 23, 2024\n\nOAuth is a standard protocol that allows users to securely share their\ninformation, such as email addresses from their Google account, with your\nwebsite's server, without exposing their Google login credentials.\n\nThis guide will show you how to create an OAuth client by implementing Login\nwith Google using TypeScript and Express. If you're unfamiliar with these\ntechnologies, don't worry! This walkthrough is designed to be straightforward,\nguiding you through each step of integrating OAuth. Get the full code sample\non GitHub.\n\nAt a high level, here's how OAuth works:\n\n  1. User Chooses to Log in with Google: A user visits your website and clicks on a Log in with Google button.\n\n  2. Your Website Asks Google for Permission: Your website redirects the user to Google with a client ID that identifies your website to Google.\n\n  3. Google Seeks User Consent: Google displays a consent screen asking if the user agrees to share their Google details (like email and name) with your website.\n\n  4. User Consents and Receives a Code: Upon user agreement, Google redirects the user back to your website with an authorization code in the URL's query parameter.\n\n  5. Exchange Codes with Google: Your website's server sends this authorization code and a client secret to Google, verifying your website server's identity. Google then sends an access token back.\n\n  6. Your Website's Server Gets the User's Info: With this access token, your website's server can now ask Google for the user's information, like email and name. You then use this data to authenticate the user into your service.\n\n## Setting Up Your OAuth Credentials\n\nTo start, you need Google to issue you a CLIENT_ID and CLIENT_SECRET. These\ntokens confirm that requests are originating from your server. Visit Google's\nauthentication setup guide for detailed steps on obtaining these tokens.\n\nIt's important to keep your CLIENT_SECRET secure and only accessible within\nyour server's code. A best practice is to use environment variables to manage\ncredentials, avoiding hard-coded values.\n\nWith the credentials set up, you can start implementing the OAuth client!\n\n## User Chooses to Log in with Google\n\nWhen users visit your site, they'll see the option to Log in with Google. This\nfeature is implemented through a straightforward HTML anchor (<a>) element,\ndirecting the user's browser to /oauth/google.\n\n## Redirecting to Google for User Consent\n\nWhen the web browser requests your /oauth/google endpoint, your server\nresponds by redirecting the user to Google. This redirection requires\nappending specific query parameters (?key=value) to the URL. Below, each\nparameter is explained.\n\nThe response_type=code parameter indicates that you're using the Authorization\nCode grant type, suited for server-based applications like this demo. OAuth\nalso supports other grant types for different scenarios, such as machine-to-\nmachine communication and single-page applications without a server.\n\nThe parameter client_id=<your client id> tells the OAuth provider what\napplication is initiating the request.\n\nThe redirect_uri=http://localhost:3000/oauth/google/callback parameter\nspecifies where Google should redirect users after they've logged into their\nGoogle account and consented to share their information with your application.\nThis URL carries additional details necessary to finalize the OAuth process,\nwhich you'll see later on.\n\nYou must register your redirect URIs in Google's developer console (where you\nobtained your CLIENT_ID and CLIENT_SECRET). This step prevents attackers from\nexploiting the OAuth process to gain unauthorized access to or redirect users'\nsensitive information.\n\nThe scope=email parameter specifies the data your server intends to access\nabout the user, in this case, their email. When users are redirected to\nGoogle, they'll be asked to consent to share this information with your\nservice.\n\nGoogle offers a range of scopes for accessing various services, including\nreading the user\u2019s emails. Be aware that requesting access to sensitive data,\nsuch as the user's emails, might require your service to undergo an audit by\nGoogle.\n\nstate is an optional query parameter that can hold any string value, but is\ntypically set to a randomly generated string for a security check. When users\nare redirected back to your redirect_uri, this parameter comes back with the\nsame value originally sent to Google. Your server then checks if this string\nmatches the one it originally sent. If they don't match, the OAuth process is\nstopped. This step protects against Cross-Site Request Forgery (CSRF) attacks\nby asserting that your website (rather than an attacker's) initiated the OAuth\nflow.\n\nNext, construct the URL for redirecting the user to Google's authentication\npage. By setting the Set-Cookie header, you store the state variable as a\ncookie in the user's browser. When Google redirects the user back to your\nwebsite, you'll verify that the state stored in the cookie matches the state\nthat Google includes in the query parameters.\n\n## Google Seeks User Consent\n\nThe user is now at Google's consent screen, where they choose their Google\naccount and agree to share the data specified by the scope parameter from\nbefore. Upon confirmation, Google instructs the browser to redirect to the\nredirect_uri you specified, appending code and state as query parameters to\nthe URL.\n\n## Exchanging Codes with Google\n\nThe browser redirects to http://localhost:3000/oauth/google/callback and makes\na call to your /oauth/google/callback endpoint. Here, you extract the code and\nstate from the query parameters. You then check that the state returned by\nGoogle matches the state you initially generated, ensuring the request's\nintegrity.\n\nFollowing this verification, use the exchangeCodeForToken function to swap the\ncode provided by Google for an access token.\n\nTo make the exchange, you make a POST request to Google's token endpoint;\nhttps://oauth2.googleapis.com/token. Below is an explanation about each part\nof the request.\n\nThe token endpoint requires the request body to be in application/x-www-form-\nurlencoded format, which is structured as key1=value1&key2=value2, mirroring\nthe format of URL query parameters. Using new\nURLSearchParams({...}).toString() simplifies the creation of this formatted\nstring.\n\ngrant_type=authorization_code: This parameter tells Google of your intent to\nexchange the previously received code for an access token.\n\ncode=<code received from Google>: The code you received from Google in the\nrequest.\n\nredirect_uri=http://localhost:3000/oauth/google/callback: As with the initial\nrequest to Google, you include the redirect_uri parameter again. Google\nverifies that it matches the original redirect_uri used when the code was\nissued, serving as an additional security check. It's important to note that\nthis request does not attempt to redirect the user to redirect_uri; the\nparameter is only used for verification purposes.\n\nclient_id=<your client id> and client_secret=<your client secret>: Your server\nidentifies itself to Google with the client_id and confirms its identity by\nincluding the client_secret. This lets Google know that the request comes\ndirectly from your server, not an imposter's.\n\nYou may wonder why the client_secret wasn't part of the initial user redirect\nto Google's consent screen. Including it in the URL would expose our\nclient_secret to users, risking its capture by attackers. An attacker could\npotentially mimic our site, deceiving users into sharing sensitive\ninformation. By keeping the client_secret for server-to-server communication,\nyou safeguard it from exposure.\n\nYou receive a JSON response containing an access_token key. This token lets\nyou request user information from Google, such as their email address.\n\n## Your Website's Server Gets the User's Info\n\nUse the getUserInfo helper function, passing in the newly acquired\naccessToken.\n\nInside getUserInfo, send a request to Google's userinfo endpoint, attaching\nthe accessToken with a Bearer prefix in the Authorization HTTP header. A\nsuccessful response comes back as JSON with the user's email.\n\nFor the demo, the server simply return the userInfo received from Google. In\nan actual application, this email could be used to authenticate the user,\ncreating a session for your service.\n\n## Jargon\n\nThis guide uses informal terms like \"user,\" \"the server,\" and \"Google\" for\nsimplicity. However, in OAuth documentation, you'll encounter standardized\nnames for these entities.\n\n  * Resource Owner: The entity whose data you're accessing, referred to as \"the user.\" This is who owns the email address you're attempting to acquire.\n\n  * User Agent: Known in the guide as \"the browser.\" It's the interface through which the resource owner interacts with your application. Other examples include mobile apps and CLI terminals.\n\n  * OAuth Provider: In the example, this role was filled by Google. The OAuth provider facilitates the OAuth authentication flow, managing your CLIENT_ID and CLIENT_SECRET, and hosting the consent screen. Facebook, Microsoft, and GitHub are other examples.\n\n  * Client: This term describes the web server. It's the entity seeking access to the resource owner's data.\n\n  * Authorization Server: A component of Google that issues the authorization code and allows you to exchange that code for an access_token.\n\n  * Resource Server: The part of Google that returns user information, such as email, provided you have a valid access_token.\n\n## Conclusion and Next Steps\n\nYou've built an OAuth client using the authorization code grant type. However,\nshould you develop your own OAuth client from scratch? Generally, no. Subtle\nbugs or novel exploits can introduce serious security risks. Instead, opting\nfor well-tested, open-source OAuth clients is a safer choice.\n\nUnderstanding the inner workings of an OAuth client is important. It gives you\nknowledge about the configuration options available in open-source libraries,\nhelps in troubleshooting OAuth-related issues, and makes learning other OAuth\nflows like refresh, PKCE, and implicit a breeze. You're also in a great\nposition to learn about OpenID Connect (OIDC); a protocol built atop of OAuth.\n\nIn the next walkthrough, you'll explore OIDC\u2014what problems it addresses and\nthe minimal code adjustments needed to support it. Stay tuned!\n\n## Craft your own walkthroughs\n\nWant to create educational walkthroughs like this one? Head over\nhttps://annotate.dev and create an account. Free for individuals and an\naffordable plan for teams!\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\nimport express from \"express\";\n\nimport crypto from \"crypto\";\n\nconst PORT = 3000;\n\nconst CLIENT_ID = process.env.CLIENT_ID as string;\n\nconst CLIENT_SECRET = process.env.CLIENT_SECRET as string;\n\nconst app = express();\n\napp.use(express.static(\"static\"));\n\napp.get(\"/oauth/google\", (req, res) => {\n\nconst params = new URLSearchParams();\n\nparams.set(\"response_type\", \"code\");\n\nparams.set(\"client_id\", CLIENT_ID);\n\nparams.set(\"redirect_uri\", \"http://localhost:3000/oauth/google/callback\");\n\nparams.set(\"scope\", \"email\");\n\nconst state = crypto.randomBytes(16).toString(\"hex\");\n\nparams.set(\"state\", state);\n\nconst url =\n`https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n\nres.set(\"Set-Cookie\", `oauth_state=${state}; HttpOnly; Secure; SameSite=Lax`);\n\nres.redirect(url);\n\n});\n\napp.get(\"/oauth/google/callback\", async (req, res) => {\n\nconst { code, state } = req.query;\n\nconst oauthState = getCookie(\"oauth_state\", req.headers.cookie as string);\n\nif (state !== oauthState) {\n\nreturn res.status(400).send(\"Invalid state\");\n\n}\n\n## How it works\n\nCreate a walkthrough in three easy steps.\n\n1\n\n### Upload\n\nUpload or copy your code sample that you want to explain into Annotate.\n\n2\n\n### Annotate\n\nHighlight code and add markdown notes for clarity. Guide readers through your\ncode with a step-by-step walkthrough.\n\n3\n\n### Publish\n\nMake your walkthrough public. Share a unique URL or embed it directly into\nyour application.\n\n## Embed inside your React application in under a minute\n\nAnnotate seamlessly embeds into any React application. SSR and RSC compatible.\n\n# Embed a Walkthrough in under a Minute with `@annotate-dev/react`\n\nAlex YakubovskyApr 8, 2024\n\nEasily embed interactive walkthroughs into your Next.js, Remix, or React\napplication with @annotate-dev/react. The library includes TypeScript typings\nand supports React Server Components.\n\n## Install the Annotate React SDK\n\nIn the root of your React app, run npm install @annotate-dev/react to install\nthe SDK.\n\n## Fetch your walkthrough data\n\nFor client side only React applications, fetch your walkthrough data by\ncalling the getWalkthroughData function inside a useEffect hook. When using a\nframework like Next.js or Remix, call getWalkthroughData on the server side.\n\n## Render the walkthrough component\n\nWrap the WalkthroughView component in an element with a defined width and\nheight. This is required because WalkthroughView will use the full dimensions\nof its container.\n\nAfter you have fetched the walkthrough data, render the WalkthroughView\ncomponent and pass the data as a prop.\n\n## (Optional) Display a Loading State\n\nThe @annotate-dev/react library includes a <Skeleton /> component to represent\na loading state. You can optionally render this Skeleton while fetching your\nwalkthrough data, providing a visual indicator to users during data loading.\n\n99\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\nimport {\n\nWalkthroughView,\n\ngetWalkthroughData,\n\nSkeleton,\n\ntype WalkthroughData\n\n} from '@annotate-dev/react'\n\nexport default function MyComponent() {\n\nconst [data, setData] = useState<WalkthroughData | null>(null);\n\nuseEffect(() => {\n\ngetWalkthroughData(\"<your walkthrough id>\").then(walkthroughData =>\nsetData(walkthroughData))\n\n}, []);\n\nreturn (\n\n<div style={{ width: 1280, height: 800}}>\n\n{ data ?\n\n<WalkthroughView data={data} />\n\n: <Skeleton />\n\n}\n\n</div>\n\n)\n\n}\n\nDeveloper relations\n\n## Turn passers-by into users\n\nGet passive readers to find their aha! moment quick. Create walkthroughs that\nclarify how to build with your product's API. Simplify the learning process\nand boost conversion rates.\n\nGet started\n\nEducators\n\n## Create material that your students love\n\nAnnotate code from a single line to entire blocks. Create explanations that\nmatch your students' learning pace\u2014from in-depth analysis of a single line to\na quick overview of a code section. Help your students understand better, in\nthe way that works best for them.\n\nGet started\n\n## Pricing\n\n### Free\n\nIdeal for individuals\n\n$0\n\nGet started\n\n  * Publish unlimited walkthroughs\n  * Unlimited viewers\n  * hosted on annotate.dev\n  * Limited support\n\n### Pro\n\nIdeal for teams\n\n$40/mo\n\nGet started\n\n  * Everything in free\n  * Embeddable or hosted on annotate.dev\n  * Includes 3 seats\n  * $10/mo for additional seats\n  * Priority support\n\n## Contact us\n\nHave any thoughts, questions or concerns? We'd love to hear from you.\n\n", "frontpage": false}
