{"aid": "39988109", "title": "Why Lucia might be the best authentication library for SvelteKit", "url": "https://omrecipes.dev/blog/lucia-best-auth-library-sveltekit", "domain": "omrecipes.dev", "votes": 1, "user": "segbedji", "posted_at": "2024-04-10 07:53:47", "comments": 0, "source_title": "Why Lucia might be the best authentication library for SvelteKit", "source_text": "Why Lucia might be the best authentication library for SvelteKit\n\nOm Recipes\n\nChangelog Roadmap Pricing Start Shipping Now!\n\n# Why Lucia might be the best authentication library for SvelteKit\n\nI've spent quite some time researching and working with various authentication\nlibraries and services for SvelteKit. Either as part of the work we do at our\nSvelte agency or for side projects I've worked on. All these experiences have\nbrought me to Lucia, a SvelteKit authentication library I've been using for a\nwhile now. And I firmly believe that, at this moment, Lucia is the best one\nout there.\n\nI've spent quite some time researching and working with various authentication\nlibraries and services for SvelteKit. Either as part of the work we do at our\nSvelte agency or for side projects I've worked on. I've tried many of them,\nfrom self-hosted to third-party services, and open-source libraries, and, I\neven rolled my own auth at some point.\n\nAll these experiences have brought me to Lucia, a SvelteKit authentication\nlibrary I've been using for a while now. And I firmly believe that, currently,\nLucia is the best one out there .\n\nBut before I dive into Lucia's details, let's first talk about what makes a\ngood authentication library.\n\n## What makes a good authentication library?\n\nNote\n\nThis is a non-exhaustive list of characteristics I look for when reaching for\nan authentication library. This doesn't mean that libraries/services that\ndon't meet these criteria are bad, but I consider that they are not the best\nfit for my needs.\n\nCriteria may vary depending on the types of projects you're building, the\nscale of your application, the legal and regulatory requirements that you have\nto account for, etc.\n\nBut I do feel like the following criteria are a good starting point for anyone\nlooking to build a secure authentication system for their SvelteKit\napplication.\n\n### Data Ownership\n\nThis is the first thing I check whenever I have to decide which authentication\nlibrary to use. I want to make sure that the user's data is owned by me\n(meaning that I have full control over it). The last thing I'd want would be\nto have to make requests to a third-party service to get access to the user's\ndata.\n\nWhile this is made easy these days through SDKs, I still personally prefer\nfull control and ownership of the data.\n\nThese criteria already rule out a lot of authentication services like Auth0,\nOkta, Clerk, etc.\n\n### Ease of integration and setup\n\nI would rather not fight my authentication library to make it work. What needs\nto be done to get the user authenticated and authorized should be clear and\neasy to understand.\n\n### Flexibility and customization\n\nWhile this might seem like a contradiction with the previous criteria, it's a\ngood thing. The ability to customize the authentication process to fit your\nspecific needs is a key factor in building a secure and user-friendly\napplication.\n\nWhether it's how and where (MySQL, SQLite, Postgres, serverless database,\netc...) you want to store the user's data or custom logic you would like to\nadd before or after the authentication process, this is a good criterion to\ncheck.\n\n### Great documentation\n\nWithout some good documentation, all the criteria above will be difficult to\nachieve. Excellent documentation will help you understand how to use the\nlibrary, what it does, and how to customize it to your needs.\n\n### Open Source\n\nThis is a little subjective, but I think it's important to consider the open-\nsource nature of the library. If it's open source, it means that the code is\navailable for anyone to view, modify, and contribute to. This can be a good\nthing if you're looking to build a community around your project and get\nfeedback from other developers.\n\n### Ecosystem and community\n\nUses cases change and vary over time and depending on the project you're\nbuilding. Today you might be building an email and password authentication\nsystem with a SQLite database, but the next day, you might want to integrate\nOAuth 2.0 with Bitbucket or GitHub. Or you might want to use a different\ndatabase, like Postgres or MongoDB.\n\nIt's essential that the authentication library you choose is well-maintained\nand has a strong community behind it. This will ensure that you have access to\nthe latest features and bug fixes and that you can easily find help and\nsupport if you run into any issues.\n\n## Now what is Lucia?\n\nLucia is an open-source authentication library for TypeScript applications. It\ngives you the utilities and tools you need to build a secure and user-friendly\nauthentication system for your applications.\n\nNote\n\nLucia is built and primarily maintained by Pilcrow .\n\nLucia can be considered an agnostic authentication library for JavaScript,\nTypeScript, and Node.js applications. The documentation has guides for how to\nuse it with SvelteKit, Next.js, Astro, Nuxt, Express, and more . But you get\nthe primitives and building blocks to build your authentication system in any\nJavaScript framework.\n\nIt also offers the advantage of working on most JavaScript runtimes, including\nNode.js, Deno, Bun, and Cloudflare Workers.\n\nOut of the box, Lucia has support for various ranges of databases and ORMs,\nlike MySQL, Postgres, SQLite, MongoDB, Prisma, Drizzle ORM, and more.\n\nIts primary authentication method focus is session-based, but it also has\nsupport for OAuth 2.0 with various providers.\n\n### How does it work?\n\nThere are, in my opinion, two main parts to how Lucia works:\n\n  * Database adapters : These are the database drivers that allow Lucia to connect to your database. Lucia uses these to create session cookies, invalidate sessions, and more. Before the v3 release , adapters were also used to directly create and manage user accounts in the database. Now this process is totally separated from Lucia itself, and you have full control over it.\n  * Session management : Lucia uses sessions to keep track of the user's authentication state. Sessions are stored in the database, and their ID is stored in the cookies. These session IDs can then be used on every request to identify the user and authorize them to various parts of your application.\n\n## The ecosystem\n\nOne of the major improvements that was brought by Lucia v3 is the surrounding\necosystem. They are now separate packages that abstract various parts of the\nauthentication process. Arctic provides OAuth 2.0 and OpenID Connect support\nfor major providers like Google , Facebook, GitHub , etc...\n\nOslo gives you several utilities for various authentication needs like\ncreating, parsing, and validating JWT tokens, password hashing, cookies\nmanagement, etc...\n\nMoreover, there is also a very active community on Discord around the library.\n\n## Integrating Lucia for email and password authentication in SvelteKit\n\nNow, let's briefly go through how to integrate Lucia for email and password\nauthentication in SvelteKit.\n\nWe'll start by creating a new SvelteKit project (with TypeScript), and\ninstalling the necessary dependencies for Lucia to work.\n\nTo keep things simple, we will use SQLite as our database, and Drizzle ORM as\nour ORM to connect and make queries to the database.\n\npnpx create-svelte@latest lucia-email-password\n\ncode loading...\n\nBefore continuing, let's also add `oslo` as an optimized dependency in our\nVite configuration.\n\ncode loading...\n\n### Database setup\n\nLet's now set up our database connection with Drizzle ORM, and create a basic\nschema for the database.\n\ncode loading...\n\nMake sure to add the SQLITE_DB_URL environment variable to your .env file. For\nme, it looks like this:\n\nSQLITE_DB_URL=src/lib/server/db/sqlite.db\n\nFurthermore, make sure to add the src/lib/server/db/sqlite.db file to your\n`.gitignore` file.\n\nNow, let's create the database schema.\n\ncode loading...\n\nThis is quite a simple schema. We have a users table with the email and the\nhashed password, and a sessions table with the user ID and the session ID. We\nalso make sure to add timestamps to the tables.\n\nFurthermore, we can now create a basic model for creating a user, getting a\nuser by email, etc...\n\ncode loading...\n\nBefore having our schema applied to the DB, we need to configure Drizzle (Kit)\nto run migrations. I won't go over the details of how to do that here, but you\ncan find more information in the Drizzle documentation .\n\nOnce all that is done, you should be able to run pnpm push:sqlite\n--config=src/lib/server/db/drizzle.config.ts to directly schema changes to the\ndatabase, or pnpm drizzle-kit generate:sqlite\n--config=src/lib/server/db/drizzle.config.ts to generate the schema files for\nyou.\n\n### Authentication setup with Lucia\n\nNow that we have our database set up, we can start integrating Lucia for email\nand password authentication.\n\nFirst, let's create the configuration for Lucia. We'll use the @lucia-\nauth/adapter-sqlite adapter, which is a SQLite adapter for Lucia.\n\ncode loading...\n\nThis code tells Lucia how the tables in the database are named, and how to map\nthe attributes to the user and session objects.\n\nYou want to make sure to also set up the types for User and Session in your\nSvelteKit locals types for proper type safety.\n\nBefore we're able to use Lucia to sign up and log in users, we also need to\nset up checking the session cookie, invalidating or updating the locals with\nthe proper value for the user and the session. This is done in the server\nhandle hook of our SvelteKit application .\n\nAgain, to keep this article short, I will not go over the details of how to do\nthat, but the overview steps are:\n\n  1. Get the session ID from the session cookie.\n  2. If there is no session ID, set the user and session locals to null and continue with the request.\n  3. If there is a session ID, with a valid and fresh session, create a new session cookie with the session ID.\n  4. If there is no session, create a blank session cookie.\n  5. Set the user and session locals to the user and session objects.\n  6. Continue with the request.\n\nFrom there, we can use the user and session locals to sign up and login users,\nand handle the authentication flow.\n\nThe signup flow looks like this:\n\n  1. The user submits the signup form with their email and password.\n  2. We do the necessary checks to make sure the email is valid, and the password meets the required criteria.\n  3. We hash the password and create a new user in the database.\n  4. We create a new session for the user and set the session ID in the session cookie.\n  5. This will automatically set the user and session locals with the user and session objects (from the handle hook).\n  6. We can now redirect the user to the home page.\n\nThe login flow looks like this:\n\n  1. The user submits the login form with their email and password.\n  2. We do the necessary checks to make sure the email is valid, and the password meets the required criteria.\n  3. We verify the user's password by hashing it and comparing it to the hashed password in the database.\n  4. If the password is valid, we create a new session for the user and set the session ID in the session cookie.\n  5. This will automatically set the user and session locals with the user and session objects (from the handle hook).\n  6. We can now redirect the user to the home page.\n\nThat's it! With Lucia, we can easily handle authentication in our SvelteKit\napplication and protect our routes and pages with a session-based\nauthentication system.\n\nNote\n\nIf you're looking for a more complete and detailed code example for email and\npassword authentication with Lucia, you can check out our recipe on that .\nWith a few steps, you can easily have a fully functional email and password\nauthentication system in your SvelteKit application.\n\nAnd there's more!\n\nBy purchasing the lifetime license for Om Recipes , you also get access to a\nwide range of recipes and tutorials on how to build various types of\napplications with SvelteKit and Lucia.\n\nThis includes email and password authentication with email verification,\npassword reset, OAuth 2.0 with GitHub, Google, Twitter, Stripe integration,\nand much more.\n\nApril 3, 2024\n\nJA\n\nJustin Ahinon\n\n@iamsegbedji\n\nOur latest recipes\n\nStripe integration with subscriptions\n\nLearn how to integrate Stripe with SvelteKit and Lucia Auth to create a\nsubscription-based website.\n\nOAuth with Twitter\n\nUse Twitter OAuth 2.0 to authenticate users in your SvelteKit app\n\nOAuth with GitHub\n\nAuthenticate your users with GitHub OAuth 2.0 in your SvelteKit app\n\nOAuth with Google\n\nUse Google OAuth 2.0 to authenticate users in your SvelteKit app\n\nSupabase + Drizzle\n\nThis recipe integrates Supabase with Drizzle in a SvelteKit application.\n\nRecipes Status\n\n\u00a9 2024 Om Recipes. All rights reserved.\n\n", "frontpage": false}
