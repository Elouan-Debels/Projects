{"aid": "39982242", "title": "Microsoft vs. AOL Chat Wars(2014)", "url": "https://www.nplusonemag.com/issue-19/essays/chat-wars/", "domain": "nplusonemag.com", "votes": 1, "user": "nalinidash", "posted_at": "2024-04-09 18:04:01", "comments": 0, "source_title": "Chat Wars | David Auerbach", "source_text": "Chat Wars | Issue 19 | n+1 | David Auerbach\n\n  * Issue 19\n  * Real Estate\n\n## The Intellectual Situation\n\n### Ukraine, Putin, and the West\n\nThe Editors\n\n### The Concert Hall\n\nThe Editors\n\n## Politics\n\n### The Accidental Neoliberal\n\nJedediah Purdy\n\n## Fiction and Drama\n\n### The Summer Before The\n\nBenjamin Kunkel\n\n### Two Scenes\n\nNell Zink\n\n## Essays\n\n### Chat Wars\n\nDavid Auerbach\n\n### Santa Claus Aa Rahe Hai\n\nSrinath Perur\n\n### The Help Desk\n\nKristin Dombek\n\n### Endangered Speakers\n\nRoss Perlin\n\n## Reviews\n\n### New Trends in Office Design\n\nNikil Saval\n\n### Net Neutrality\n\nAndrew Jacobs\n\n### Across the Park\n\nSophie Pinkham\n\nEssays\n\nDavid Auerbach\n\n# Chat Wars\n\nMicrosoft vs. AOL\n\nPublished in Issue 19 : Real Estate\n\nPublication date Spring 2014\n\n#### Tags\n\n  * Science and Technology\n  * The Internet\n\n#### Share and Save\n\n  * Twitter\n  * Facebook\n  * Instapaper\n\nAdam Ferris, CA1. 2013.\n\nIn the summer of 1998 I graduated from college and went to work as a\nprogrammer at Microsoft in Redmond, Washington. I was put on the group that\nwas building MSN Messenger Service, Microsoft\u2019s instant messaging app. The\nterrible name came from Marketing, which had become something of a joke for\nalways picking the clunkiest and least imaginative product names. Buddy List?\nC U C Me? MSN Messenger? No, MSN Messenger Service. I\u2019ll call it Messenger for\nshort.\n\nAt the time the big players in instant messaging were AOL Instant Messenger\n(AIM), Yahoo, and ICQ. AIM had tens of millions of users; AOL had become the\ncountry\u2019s biggest dial-up provider in the mid-\u201990s by blitzing everyone\u2019s\nmailboxes with CD-ROMs, and all AOL users instantly became AIM users. Yahoo\nand ICQ each had millions of users. Those were big numbers for the 1990s.\n\nIt was a large project: on the desktop program (\u201cclient\u201d), we had to create a\nsleek user interface to let people see their buddies when they came online,\nallow them to change the color of the font in a cool way, and so on. That is,\nwe had to create a program that would do everything the other chat programs\ncould, then add a few wrinkles of our own. The server-side team had to notify\nusers about the comings and goings of other users, so that if your buddy\nGordon logged on, the server would tell your client that he was there (we, on\nthe client side, had to take the notification and display it to the user\nproperly). The server side also had to integrate our functionality with\nHotmail, which had tens of millions of users and which Microsoft had acquired\nin 1997. It was imperative that every Hotmail user be able to log on to\nMessenger with a Hotmail address and password as seamlessly as possible. This\nwas not simple.\n\nThe initial team consisted of about ten people, though it gradually expanded\nto several times that size. On the client side we\u2019d meet to discuss what\nneeded to be done, what kinds of features we wanted, what we could do and\ncouldn\u2019t do. Then we\u2019d go and do it. I was 20 years old, the youngest person\non the team, and very green. I was given little chunks of the project to work\non at first, then bigger ones. I worked on the instant messaging windows: the\n\u201ctype your message here\u201d window and the \u201ctranscript\u201d window above it. I added\nbetter font control and helped make the client work with non-Latin character\nsets like Chinese/Japanese/Korean, Indic, Hebrew/Arabic (right-to-left, a\nparticular pain). I managed when the windows would pop up, how they could be\nmoved around, and how scrolling worked in them (scroll bars were very buggy in\nWindows!). Handling shutdown was a pain, making sure the windows closed down\nneatly and all the program\u2019s resources were cleaned up properly without the\nprogram crashing.\n\nAfter we finished the user part of the program, we had some downtime while\nwaiting for the server team to finish the Hotmail integration. We fixed every\nbug we could find, and then I added another little feature just for fun. One\nof the problems Microsoft foresaw was getting new users to join Messenger when\nso many people already used the other chat programs. The trouble was that the\nprograms, then as now, didn\u2019t talk to one another; AOL didn\u2019t talk to Yahoo,\nwhich didn\u2019t talk to ICQ, and none of them, of course, would talk to\nMessenger. AOL had the largest user base, so we discussed the possibility of\nadding code to allow Messenger to log in to two servers simultaneously,\nMicrosoft\u2019s and AOL\u2019s, so that you could see your Messenger and AIM buddies on\na single list and talk to AIM buddies via Messenger. We called it \u201cinterop.\u201d\n\nThis wasn\u2019t elegant, but it wasn\u2019t that complicated, either. A program talks\nto a server using a well-defined protocol, which is a set of coded\ninstructions sent to and from the server. HTTP (hypertext transfer protocol),\nused to request and transmit web pages, is one of the most common protocols in\nexistence. It is built on top of TCP/IP (transmission control\nprotocol/internet protocol), the underlying protocol of the internet itself.\nInternet companies run servers that speak these and other protocols. Some\nprotocols, like HTTP and TCP/IP, are public, documented, and spoken by\neveryone, but some are private/proprietary and undocumented. AIM\u2019s protocol,\nknown as OSCAR (for Open System for CommunicAtion in Realtime), was in the\nlatter group. I didn\u2019t have the \u201ckey\u201d to decode it. But what my boss and I\ncould do was sign up for an AIM account and then watch the communications\nbetween the AIM client and the server using a network monitor, a development\ntool used to track network communications in and out of a computer. That way\nwe could see the protocol that AIM was using. A sample message looked like\nthis, with the hexadecimal representation of the binary on the left and the\nASCII character translation of the binary on the right:\n\n2A 02 EE FA 00 B0 00 0E 00 06 00 00 9B 7D BD 28 *............}.(\n\n33 41 35 36 35 43 38 37 00 03 00 03 00 28 0D 52 3A565C87.....(.R\n\n45 41 4C 52 65 67 72 65 73 73 6F 72 00 00 00 03 EALRegressor....\n\n00 01 00 02 00 10 00 0F 00 04 00 00 00 18 00 03 ................\n\n00 04 3E 4C BE 8C 00 01 00 00 00 05 00 68 00 02 ..>L.........h..\n\n00 08 75 73 2D 61 73 63 69 69 00 03 00 02 65 6E ..us-ascii....en\n\n00 01 00 48 69 2E 2E 20 41 6E 79 62 6F 64 79 3F ...Hi.. Anybody?\n\nMuch of the message was opaque, but in the middle was one of my text messages.\n\u201cHi... Anybody?\u201d I would write into my AIM chat box and press return, and then\non my network trace I would see my \u201cHi... Anybody?\u201d Some of the protocol was\nalways changing, but some was always the same. Our client took the surrounding\nboilerplate and packaged up text messages in it, then sent it to the AOL\nservers. Did AOL notice that there were some odd messages heading their way\nfrom Redmond? Probably not. They had a hundred million users, and after all I\nwas using their own protocol. I didn\u2019t even send that many messages. My\nprogram manager and I thought this little stunt would be deemed too dubious by\nmanagement and taken out of the product before it shipped. But management\nliked the feature. On July 22, 1999, Microsoft entered the chat markets with\nMSN Messenger Service. Our AOL \u201cinterop\u201d was in it.\n\nAs people downloaded the client to try it out, they thought it was cool:\neverything worked, it had better international support, it integrated with\nHotmail, and, look at this, you could use two services with one program and\nstill talk to your AOL chat buddies! Our lark was paying off.\n\nOf course no one had warned AOL, and they weren\u2019t happy. They pretty quickly\nstarted blocking Messenger from connecting to their servers; they\u2019d disconnect\nthe user and pop up an instant message saying, \u201cUse an authorized AOL client\nat this link: [web URL].\u201d But AOL could only block Messenger if they could\nfigure out that the user was using Messenger and not AIM. As long as Messenger\nsent exactly the same protocol messages to the AOL servers, AOL wouldn\u2019t be\nable to detect that Messenger was an impostor. So I took the AIM client and\nchecked for differences in what it was sending, then changed our client to\nmimic it once again. They\u2019d switch it up again; they knew their client, and\nthey knew what it was coded to do and what obscure messages it would respond\nto in what ways. Every day it\u2019d be something new. At one point they threw in a\nnew protocol wrinkle but cleverly excepted users logging on from Microsoft\nheadquarters, so that while all other Messenger users were getting an error\nmessage, we were sitting at Microsoft and not getting it. After an hour or two\nof scratching our heads, we figured it out.\n\nMicrosoft and AOL were both, obviously, giant companies, and soon the press\ngot hold of the story. On July 24, the New York Times put it on the front\npage: \u201cIn Cyberspace, Rivals Skirmish Over Messaging.\u201d It was like reading\nabout a boxing match that you yourself were in. AOL kept blocking us, wrote\nthe paper of record. \u201cBut Microsoft refused to roll over. Late Friday, the\nsoftware giant said it had revised its MSN Messenger program to circumvent\nAmerica Online\u2019s roadblock. Within hours, America Online answered that\nchallenge with a new block.\u201d\n\nI framed the article. My name wasn\u2019t in it, but it didn\u2019t matter. That was me!\n\nThis was, as I say, 1999. Just two decades after launching MS-DOS, its first\noperating system, Microsoft was one of the biggest companies in the world. We\nhad 30,000 employees worldwide, about 10,000 of them in Redmond. The campus\nwas about the same size as Yale.\n\nWhat was Microsoft\u2019s secret? They were, and are, essentially a software\ncompany. While hobbyists in the 1970s were trying to figure out how to build a\ncomputer small enough to fit in your home, Bill Gates and his partner Paul\nAllen were figuring out how to write software for when the hobbyists finally\nfigured it out. In 1980, they partnered with IBM to make an operating system,\nMS-DOS (for Microsoft Disk Operating System), for the first mass-manufactured\npersonal computer. A few years later they partnered with Apple to give early\nApple PC users functioning programs, including Microsoft Word. Gates and\nAllen\u2019s insight was simply that PCs were going to be a big deal, and people\nwould want software for the new machines.\n\nBy licensing Microsoft to provide the operating system for PCs, IBM\nessentially handed them a license to print money. The margins on software were\nfar greater than on hardware, because the physical manufacturing process was\nnegligible\u2014producing disks was cheap and trivial next to microprocessors and\nperipherals. And since Microsoft was the only company producing the operating\nsystem needed to run, ultimately, all software on PCs in the 1980s, it had a\nlock on guaranteed sales of the ballooning PC industry. IBM wasn\u2019t the only\nhardware maker in town\u2014far from it\u2014but Microsoft was the only MS-DOS maker.\n\nMicrosoft\u2019s rise did not go unnoticed or uncontested. In 1984, Apple debuted\nthe Macintosh. After the Lisa, which came out the year before and cost\n$10,000, the Mac was the first PC to use an operating system with a graphical\nuser interface (GUI), building on research done at Xerox PARC and elsewhere.\nThe company bought ad time during the Super Bowl to trumpet this revolution in\ncomputing, and in truth they weren\u2019t exaggerating. Until the Macintosh, almost\neverything had been text; now you could see a visual representation of the\ninside of the computer\u2014a \u201cmetaphorical desktop,\u201d as it was called. When I saw\nit at age 7, I found it dazzling, but at the time computers weren\u2019t quite\npowerful enough to make the GUI necessary. I used PCs myself back then and was\nperfectly fine with typing at the MS-DOS command prompt. But toward the end of\nthe \u201980s, home computers became fast enough to make multitasking (running more\nthan one program simultaneously) increasingly valuable, and it was clear that\nGUIs promised far more user-friendliness than text command lines.\n\nMicrosoft thought so too, and in 1985 they released the first iteration of\nWindows (with, importantly, some elements licensed from Apple). It was\nbasically a clickable list version of the files on the computer, resembling\ntoday\u2019s Windows Explorer, plus some other \u201cwindows\u201d displaying executable\nfiles (a calculator, for example). It was an improvement over the MS-DOS\ncommand prompt, but a far cry from the different folders displayed so\nelegantly on the Macintosh. In 1987, Microsoft released Windows 2.0. This was\nstill clunky, but already better, with overlapping windows and some other\nuseful functions. Apple could see which way things were headed, and in 1988\nthey sued Microsoft for copyright infringement.\n\nThe suit failed. Windows was similar to the Mac operating system, but hardly\nidentical. The appeals court wrote, \u201cAlmost all the similarities spring either\nfrom the license [for the initial Windows] or from basic ideas and their\nobvious expression. . . . Illicit copying could occur only if the works as a\nwhole are virtually identical.\u201d\n\nThe initial decision came down in 1992 and was affirmed on appeal in 1994. It\nwas a serious blow to Apple during its Steve Jobs\u2013less slump. Hampered by poor\nmanagement, overpriced computers, and a protectionist attitude toward the\nMacintosh brand, maintaining that only Apple could make Macintosh hardware,\nthe company saw its market share decline throughout the decade, eventually\nprompting the return of the exiled Jobs and setting the stage for Apple\u2019s\nresurgence. Windows, of course, conquered the world, never attaining the\nelegance or unification of Mac OS, but working well enough that the Macintosh\npremium was more than most wanted to pay. In Windows 95, the first post-\nlawsuit release of the operating system, Microsoft went ahead and incorporated\nApple\u2019s famous trash can, impishly refashioned as a \u201crecycle bin.\u201d For a good\nlong while, Windows could not be stopped.\n\nGates and Allen were skilled coders, but the history of software is littered\nwith people just as smart or smarter who did not end up as billionaires. Their\nstrength was on the business side. For years they remained a small company,\nbut you didn\u2019t need to be big to make software back then. The programs were\nsimple, and they were all that was available, so you could charge a premium\nfor them. The amount of person-hours that goes into a $50 piece of software\ntoday dwarfs that of a $50 item of software thirty years ago. In 1983, a word\nprocessor so primitive it advised users to put little stickers on their\nkeyboards so they\u2019d know which functions correlated to which keys retailed for\n$289. For this price it offered a tiny fraction of what most freeware can do\ntoday. It was a different world.\n\nIn this world, Microsoft stood out. They worked fast, they were aggressive,\nand they were very cagey. Their strength was never in innovation per se, but\nin appropriation, improvement, and integration. One slogan that you would hear\nat the company was that Microsoft made \u201cbest-in-class\u201d products. A less\ncharitable way to put this would be to say that upon entering a market,\nMicrosoft would make a product that was better enough than the best out there,\nand then take over the market. So the quality of Microsoft\u2019s offerings closely\ntracked the quality of existing offerings.\n\nLotus\u2019s spreadsheet software 1-2-3 was a good product in the 1980s and early\n1990s; consequently Microsoft Excel, which debuted in 1985, became the\nstandout of Microsoft\u2019s nascent Office suite. Word processors like WordPerfect\nand WordStar were less formidable; as a result, Microsoft Word was\nconsiderably less stellar than Excel. And in the absence of any dominant email\nprograms, Microsoft Outlook was buggy and slow, and remained that way well\ninto the early 2000s. Microsoft was far too efficient to waste time improving\na project beyond what was needed to defeat their competitors. In the late \u201990s\nI got a chance to tour the legendary Massachusetts computer company Digital\nEquipment Corporation (DEC, later bought by Compaq), and the difference in\nculture was remarkable. There were people at DEC who had been working on\nthreading (the manner in which operating systems manage concurrent sets of\nlinear processor instructions) for twenty years. Half the people had PhDs in\ntheir areas of specialty. Corners were never cut to release something earlier.\n\nAh, I thought. This is why Microsoft won.\n\nMicrosoft certainly tried to innovate with new products from time to time.\nClippy, the little paper clip that popped up occasionally in Microsoft Word,\nwas an innovation. Microsoft Bob, a yellow dog in dark glasses who showed up\nin Windows 95 to see if you needed help, was an innovation. Cairo, the\n\u201crevolutionary\u201d new operating system from the 1990s, would have been an\ninnovation had it ever shipped. But as a whole the company was more\ncomfortable entering existing markets and besting competitors. And in the\nabsence of a clear target, planning could become fuzzy and tentative. You see\nthis in the reticence to engage wholeheartedly with the internet in the 1990s:\nno one was making gobs of money yet, so who was Microsoft to follow? It wasn\u2019t\nas if Microsoft (and everyone else) didn\u2019t see that there was money to be\nmade; Microsoft just wasn\u2019t about to create the mechanism to do so on its\nown.^1\n\nBy 1999, Microsoft was poised between financial security and an obscure\nfuture. The Windows and Office behemoths ensured the company\u2019s dominance of\nthe desktop operating system and business applications markets for as long as\nthe PC remained a going concern. Even when the US v. Microsoft antitrust trial\nwas at its peak, in 1999\u20132000, it was hard to see how a feasible antitrust\nremedy could actually address the problems. Sure enough, the plan to split\nMicrosoft into two monopolies, one for Windows and one for Office, wouldn\u2019t\nhave helped a bit, even if it made it past the appellate court that overturned\nthe initial judge\u2019s ruling and attacked him for trashing Microsoft to the\npress. The whole case ended up a bizarre and political sideshow, which I\u2019m not\nsure had more than a negligible impact on the state of the tech industry\u2014other\nthan ensuring that future tech companies kept a far larger battery of lawyers\nand lobbyists close by.\n\nOne interesting thing did emerge (at least for me, as an employee of the\ncompany) in the antitrust discovery process: I learned that before I arrived,\na war over the future took place at the highest levels of Microsoft, between\nthe \u201cdoves\u201d and the \u201chawks.\u201d The \u201cdoves\u201d wanted to embrace other internet\ncompanies, like Netscape (which had the best early browser) and even AOL to an\nextent, and share power with them; the \u201chawks\u201d wanted to clamp down and try to\nmake Microsoft the provider of internet services. The real bone of contention\nwas Windows: here was the most profitable thing in the history of computers.\nBut a truly aggressive internet strategy would have meant thinking about a\nworld without Windows. This was too difficult. \u201cI don\u2019t want to be remembered\nas the guy who destroyed one of the most amazing businesses in history,\u201d one\nsenior executive wrote of Windows during this argument. In the end the hawks\nwon and most of the doves left Microsoft. Then the hawks lost.\n\nTo understand what happened next in the Messenger war it may be helpful to\nhave some sense of how computers and computer programs work.\n\nComputers are best seen as a series of abstraction layers, one on top of the\nother. Each layer is more complicated than the next down, and assembles the\nprevious layer\u2019s pieces into more complex, high-level structures. At the\nbottom you have the hardware itself: the central processing unit (CPU). The\nCPU consists of more than a billion transistors arranged to execute a\nparticular \u201cassembly\u201d code that is native to that CPU. Assembly is the lowest\nlayer of coding, where you are telling the CPU exactly what to do. And what\nyou can tell it to do is often pretty limited: store this number here,\nretrieve this number from there, add or subtract these two numbers, and branch\nto different bits of code depending on some condition or other. In different\ncontexts, these operations can take on different meanings, such as printing\ntext onto a screen or sending something across a network, but the overall\nlevel of structure is very primitive. Analyzing and manipulating data is\nextremely tedious in Assembler.\n\nIn the early days of PCs, many programmers did code directly in Assembler.\nPrograms were small enough and performance was critical enough that one needed\nto micromanage everything at that level. But as computers got larger and more\ncomplex, it became unfeasible to code in assembly. And needing to learn a\ndifferent assembly language for every computer (Apple II, Macintosh, PC) was\nhorrendously inefficient. Better to use a higher-level, CPU-independent\nlanguage. All the languages you read about today, from C++ to Java to Ruby to\nPerl, are higher-level languages. They have far more instructional\n\u201cprimitives\u201d that allow you to designate pieces of code as \u201cfunctions\u201d and\nabstract over them through \u201cinterfaces.\u201d A program called a compiler then\ntakes the code written in these languages and translates it into the assembly\ncode for a particular specified processor, so you can have C++ code that\ncompiles for the PC, or for Linux, or for the Macintosh.\n\nHere\u2019s some assembly for a \u201cHello world!\u201d program (one that just displays\n\u201cHello world!\u201d and exits) in MS-DOS PC assembly, which I\u2019ve borrowed from\nWikipedia:\n\n.model small .stack 100h .data msg db \u2018Hello world!$\u2019 .code start: mov ah, 09h\n; Display the message lea dx, msg int 21h mov ax, 4C00h ; Terminate the\nexecutable int 21h end start\n\nAnd here it is in C:\n\nint main() { printf(\u201cHello world!\\n\u201d); return 0 }\n\nHaving a compiler turn the C into assembly, as you might expect, saves a\nprogrammer a vast amount of time. It also allows for far greater levels of\ncode reuse, since you can parameterize functions to take different inputs and\nhandle them accordingly. But you lose some control with a higher-level\nlanguage. Assembly lets you know exactly where every bit of information is\ngoing. As you go up the great chain of languages, you lose more and more\ncontrol over the management of the guts of the computer, which is taken over\nby compilers, interpreters, and virtual machines. These programs are\nexceedingly good at managing things automatically, and they don\u2019t make\nmistakes (unlike humans), but they have their limits. They do not know the\noverall intent of a program. If you pile on too many abstraction layers,\nperformance can suffer. The downfall of Microsoft\u2019s Vista operating system,\nwhich needed to be restarted almost from scratch in order to ship three years\nlate, came because it was written in a new language of Microsoft\u2019s own design,\ncalled C#, that did not offer sufficient micromanagement to make Vista run\nquickly enough. Like Java, C# was considerably higher level than C or C++, and\nthe code responsible for taking care of the lower-level nastiness just\ncouldn\u2019t perform optimally. So they scrapped the C# code and started over in\nC++. Lesson learned.\n\nA \u201clanguage\u201d like C++, Java, or Python consists of a certain number of\ncommands, not more than a few hundred, and a certain number of numerical and\nlogical operators, like + and && (for logical AND). Many languages offer the\nsame basic functionality sets; where they differ is in the methods they\nprovide for structuring programs, as well as the amount of abstraction they\nprovide from the underlying computer fundamentals.\n\nSo what was Messenger? It was about a hundred thousand lines of code, in C++,\nimplementing everything from pop-up notifications when a buddy logged in, to\nuninstallation code to remove the program if people hated it, to code to allow\nyou to save IM windows as text files for later, to code to talk to the\nMessenger servers (and, for a while, the AOL servers). In its early years, it\nwas a small, efficient, lean little program.\n\nI no longer have access to the Messenger code, which remains the private\nintellectual property of Microsoft. So instead, here is a piece of the open-\nsource C code for the chat program Pidgin. This function, update_typing_icon,\nis called when the program needs to update the \u201ctyping indicator\u201d that tells\nyou whether your buddy is currently typing a message or not.\n\nstatic void\n\nupdate_typing_icon(PidginConversation *gtkconv)\n\n{\n\nPurpleConvIm *im = NULL;\n\nPurpleConversation *conv = gtkconv->active_conv;\n\nchar *message = NULL;\n\nif (purple_conversation_get_type(conv) PURPLE_CONV_TYPE_IM)\n\nim = PURPLE_CONV_IM(conv);\n\nif (im NULL)\n\nreturn;\n\nif (purple_conv_im_get_typing_state(im) PURPLE_NOT_TYPING) {\n\nupdate_typing_message(gtkconv, NULL);\n\nreturn;\n\n}\n\nif (purple_conv_im_get_typing_state(im) PURPLE_TYPING) {\n\nmessage = g_strdup_printf(_(\"\\n%s is typing...\"),\n\npurple_conversation_get_title(conv));\n\n} else {\n\nassert(purple_conv_im_get_typing_state(im_==PURPLE_TYPED);\n\nmessage = g_strdup_printf(_(\"\\n%s has stopped typing\"),\n\npurple_conversation_get_title(conv));\n\n}\n\nupdate_typing_message(gtkconv, message);\n\ng_free(message);\n\n}\n\nThe function takes a parameter called gtkconv that contains information about\nthe chat session (PidginConversation) being updated. The italicized portion of\nthe code is the most important. It calls a function called\npurple_conv_im_get_typing_state, passing it to the chat session in question.\nThat function then returns one of three possible values: PURPLE_NOT_TYPING,\nPURPLE_TYPING, or PURPLE_TYPED. A user interface function,\nupdate_typing_message, is then called to change what message is displayed on\nthe screen. In the case of PURPLE_TYPING, a message with \u201c[Buddy name] is\ntyping\u201d is shown. If PURPLE_TYPED, meaning that text has been entered but your\nbuddy hasn\u2019t typed anything for a bit, \u201c[Buddy name] has stopped typing\u201d is\nshown. And if no text has been entered and the buddy isn\u2019t typing\n(PURPLE_NOT_TYPING), then no message is shown at all.\n\nMost of the other functions that this function calls are also part of the\nPidgin program, separated into modular chunks so that each can be isolated,\ntested, and perhaps reused. One exception is the g_strdup_printf function,\nwhich creates the string containing the message to be displayed.\ng_strdup_printf is part of the open-source GNOME user interface library;\nbecause what it does is sufficiently generic, it was considered helpful to\ninclude in a popular package of generic user interface code.\n\nAll this C code is compiled into assembly by a C compiler, which can then run\nnatively on the processor for which the compiler was designed.\n\nThe messenger war was a rush. Coming in each morning to see whether the client\nstill worked with AOL was thrilling. I\u2019d look through reams of protocol\nmessages to figure out what had changed, fix the client, and try to get an\nupdate out the same day. I felt that I was in an Olympic showdown with some\nunnamed developers over at AOL. I had no idea who my adversaries were, but I\nhad been challenged and I wanted to win.\n\nAOL tried different tactics. At one point they seemed to be identifying the\nMicrosoft client because it wasn\u2019t downloading a huge chunk of advertising\nthat the AOL client downloaded. So I changed our client to download it all\n(and then throw it away). They put in mysterious messages that didn\u2019t seem to\naffect their client but broke ours because we weren\u2019t expecting them. One day,\nI came in to see this embedded in a message from the AOL server: \u201cHI. \u2013MARK.\u201d\nIt was a little communication from engineer to engineer, underneath the\ncorporate, media, and PR worlds that were arguing over us. I felt some\nsolidarity with him even though we were on opposing sides.\n\nAOL was putting out absurd propaganda about how Microsoft was behaving like an\nevil hacker by asking for your AOL password. This wasn\u2019t true, but we weren\u2019t\nallowed to respond except through our PR department. My team was completely\nsealed off from the outside world\u2014except for our code, of course.\n\nAnd then AOL stopped blocking us. It was strange to encounter sudden silence,\nand while I wanted to believe we\u2019d won, AOL had been too loud and obstreperous\nto give up without a word.\n\nMaybe a week after the blocks had stopped, I came in to work to find that\nMessenger had been blocked again, but this time it was different. The AOL\nserver was sending a huge chunk of new gobbledygook that I could not\nunderstand. It looked approximately like this:\n\n:\n\n00000040 2A 02 77 9C 01 28 00 01 ........*.w..(..\n\n00000050 00 13 00 00 80 0E A6 1B 00 FF 00 0B 01 18 83 C4 ................\n\n00000060 10 4F 8D 94 24 E4 FE FF FF 8B EC 03 AA F8 00 00 .O..$...........\n\n00000070 00 90 90 90 90 8B 82 F0 00 00 00 8B 00 89 82 4E ...............N\n\n00000080 00 00 00 8B 4D 04 03 8A F4 00 00 00 8D 82 42 00 ....M.........B.\n\n00000090 00 00 89 45 10 B8 10 00 00 00 89 45 0C C9 FF E1 ...E.......E....\n\n000000A0 00 01 00 20 00 00 00 00 00 00 00 04 00 00 00 00 ................\n\n000000B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n000000C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n000000D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n000000E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n000000F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n00000100 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n00000110 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n00000120 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n00000130 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n\n00000140 00 00 00 00 00 00 00 00 00 00 00 00 00 00 19 10 ................\n\n00000150 08 11 29 EC FF FF 44 00 00 00 00 00 00 00 FF 00 ..)...D.........\n\n00000160 00 00 08 01 00 00 00 00 00 00 90 47 40 00 F8 E9 ...........G@...\n\n00000170 EA FE FF FF 00 00\n\nThe first couple of lines here are the standard AOL instant message protocol\nheader, but starting with that \u201c90 90 90 90\u201d bit, it became incomprehensible,\nbearing no relation to anything the AOL servers had ever sent their client or\nour client. The vast expanse of double zeros in the middle was also very\nmysterious, since a bunch of zeros couldn\u2019t contain much meaning.\n\nOur client just ignored it, but the AOL client responded to this gobbledygook\nwith a shorter version of the same gobbledygook. I didn\u2019t know what it was. It\nwas maddening. After staring at it for half a day, I went over to Jonathan, a\nbrilliant server engineer on our team, and asked what he thought. He looked at\nit for a few minutes and said, \u201cThis is code.\u201d As in, actual x86 assembly\ncode. The repeated 90s were what tipped him off: they signify an empty\ninstruction in x86 Assembler.\n\nThe pieces then came together. Normally, these protocol messages sent from the\nserver to the client are read and understood as data, not as code. But AOL\u2019s\nclient had a security bug in it, called a buffer overflow. The buffer is a\nplace where a program temporarily stores data while running some operation.\nHowever, it\u2019s all too easy in lower-level languages to allow in more input\nthan the buffer can actually accommodate. In this case, very large protocol\nmessages could flood it, overwriting the client code and arbitrarily\ncontrolling the functioning of the client program\u2014this is why it\u2019s called a\nbuffer overflow, and it\u2019s a huge security hole, since it gives the server\ncontrol of the client PC. In the wrong hands, the server can choose to shut\ndown or corrupt or do other terrible things to your computer. AOL knew about\nthis bug in their program and now they were exploiting it! That was what all\nthose double zeros were for\u2014they were just filling up space in the program\u2019s\nbuffer until they hit the end of the AOL client\u2019s buffer and started\noverwriting executable code with the remainder of the protocol message. AOL\nwas causing the client to look up a particular address in memory and send it\nback to the server. This was tricky, vastly trickier than anything they\u2019d done\nso far. It was also a bit outside the realm of fair play: exploiting a\nsecurity hole in their own client that our client didn\u2019t have!\n\nIf I could go back in time, I wouldn\u2019t have given up, but I was out of my\ndepth, and I told the team that I wasn\u2019t sure how to get around this, at least\nnot without a fair bit more time and resources.\n\nSomeone had the bright idea of telling the press about the buffer overflow,\nfiguring that if people knew that AOL\u2019s client could and in fact was executing\nwhatever a server sent to it, AOL would be forced to patch their client and\ncould no longer use it to determine that Messenger was an impostor.\n\nHere I only know what happened from the outside, since this wasn\u2019t my\ndepartment. According to security expert Richard M. Smith, a certain \u201cPhil\nBucking\u201d of \u201cBucking Consulting\u201d sent him a message, alerting him to the\nbuffer overflow in the AOL client:\n\n> Mr. Smith,\n>\n> I am a developer who has been working on a revolutionary new instant\n> messaging client that should be released later this year. Because of that, I\n> have followed with interest the battle between AOL and Microsoft and have\n> been trying to understand exactly what AOL is doing to block MS and how MS\n> is getting around the blocks, etc. Up until very recently, it\u2019s been pretty\n> standard stuff, but now I fear AOL has gone too far.\n>\n> It appears that the AIM client has a buffer overflow bug. By itself this\n> might not be the end of the world, as MS surely has had its share. But AOL\n> is now *exploiting their own buffer overflow bug* to help in its efforts to\n> block MS Instant Messenger.\n\nAnd so on. Getting the name of MSN Messenger Service wrong was a nice touch,\nbut the rest of it is embarrassingly inept. This developer of a revolutionary\nnew app takes time out from his coding not to promote his app but to take\nsides in the Microsoft-AOL war? Really? The email also includes a trace of the\nbuffer overflow message itself, which I still remember vividly from the hours\nI spent staring at it, but the recipient paid more attention to the human\nlanguage than the protocol messages. And if Phil Bucking\u2019s text wasn\u2019t\nsuspicious enough, he\u2019d also sent the message (via a Yahoo account, ha ha)\nfrom one of Microsoft\u2019s computers at a Microsoft IP address, and the IP\naddress showed up in the email headers. In geekspeak, this is what\u2019s called a\nface-palm.\n\nSmith immediately accused Microsoft of sending the email. Microsoft fessed up.\nSo the news story didn\u2019t become the buffer overflow (a tough sell, probably),\nbut Microsoft\u2019s attempt to bad-mouth AOL under a fake identity (an easier\nsell). People on various security forums ascertained that the buffer overflow\nwas real and inveighed further against AOL, but the press wasn\u2019t paying\nattention. The buffer overflow persisted into several later versions of AOL\u2019s\nclient.\n\nSo we gave up. I licked my wounds and proceeded on to far more dreary years on\nMSN Messenger Service, eventually getting buried so deeply in internal company\npolitics that I was no longer able to do anything resembling useful work. The\nwriting was on the wall when I heard one team manager scream, \u201cI have the\nworst morale scores in the company and I don\u2019t give a shit, because they can\nonly go up!\u201d\n\nThose were the years of Microsoft\u2019s long, slow decline, which continues to\nthis day. The number of things wrong with the company was extraordinary, but\nthey can be summed up by the word bureaucracy. Early on at Microsoft\u2014and even\nlater, when we first started Messenger\u2014you could just do things. You had a\ngood idea, you ran it by your boss, you tried it, and if it worked, in it\nwent. After a while, you had to run everything by a hundred people, and at\nsome point the ball would get dropped\u2014and you\u2019d never hear back. There was the\ninfamous internal review system called \u201cstack rank\u201d that pitted teams against\none another and people within each team against one another, too. There was an\nincredible thirst for \u201cheadcount\u201d within a department, so managers would lobby\naggressively for independent groups to come under their control. Thus the\nburgeoning NetDocs, which was intended to be an internet-based document-\nediting suite, gobbled up a number of small groups in the late \u201990s. But\nNetDocs got eaten by Office, which then proceeded to kill it, thus leaving the\ndoor open for Google to debut Google Docs in the mid-2000s. And on it went.\nMultiyear projects with hundreds of engineers died without the public ever\nhearing a word. It continues.\n\nI left for Google, but not without making one last mistake. I told my boss at\nMicrosoft I was leaving to work for our direct competitor, and he threatened\nto sue me. I packed up my things in a box and quit the same day, without\nsaying goodbye to my coworkers. At least Steve Ballmer didn\u2019t throw a chair\nacross the room, as he did when Windows architect Mark Lucovsky told Ballmer\nthat he was leaving for Google. Microsoft was hemorrhaging hundreds of top\nengineers to Google at the time, and the combination of the talent loss plus\nthe insult to the executives\u2019 egos made for very bad blood. Still, they didn\u2019t\nsue me.\n\nDespite my ignominious defeat at the hands of AOL\u2019s diabolical mastermind of\nchat, Messenger did pretty well. We acquired tens of millions of users,\nmillions online at any one time. At some point we put ads into the client,\nwhich made some money. I don\u2019t think we turned a profit, but we weren\u2019t a big\ngroup, so we weren\u2019t costing Microsoft much either. I added emoticons to the\nclient in 2000\u2014it was the first American chat program to turn a colon and a\nclose-parenthesis into an actual smiley face (I say first American because the\nSouth Koreans, who loved chat more than anyone, may have preceded us)\u2014and\npeople loved it. We added internet phone calls to the client, which was cool\nand raised a bit of revenue on international calls. After I went over to the\nserver side, I helped redesign the server architecture with a very sharp\ndevelopment lead who taught me a lot, as had my original mentor on the client.\n\nMessenger puttered along for many years in limbo. It was unusual in being\nunkillable (because of all its users) and unassimilable by Windows or Office\n(because it was part of Microsoft\u2019s internet strategy), which led, I believe,\nto it never amounting to anything. Taken on its own, it was a success, but a\nsuccess on which Microsoft was unable to capitalize. Attempts to integrate it\nwith other projects either fell prey to internecine executive warfare or else\ncollapsed into consumer indifference. Despite Microsoft\u2019s purchase of Skype,\nMessenger is still going today, a little Methuselah wandering in the Microsoft\nproduct mausoleum.\n\nYears later at a party I met one of the AOL engineers who\u2019d worked against me.\nWe had a huge laugh over it. He\u2019d left AOL just as I\u2019d left Microsoft, and I\ncomplimented him on the genius of the buffer-overrun exploit, even as I\nbemoaned my loss. It had been a great game, I said. He agreed.\n\n  1. Of note is the single major product success of late Microsoft: the Xbox gaming console. While the Xbox has yet to turn more than a tiny overall profit since its introduction in 2001, it has established itself as a stalwart of the gaming world. This could occur for two reasons: first, unlike anything having to do with the internet, it was completely isolated from the Windows and Office empires, and so did not run afoul of those groups; and second, there were clear, existing, profitable models to copy\u2014Nintendo\u2019s and Sony\u2019s\u2014and Microsoft was willing to lose billions of dollars in re-creating that model. For the last time, they caught up to their competitors in short order and equaled them, at the cost of turning no profit themselves. \u21a9\n\nIf you like this article, please subscribe or leave a tax-deductible tip below\nto support n+1.\n\n$\n\nUSD\n\nPlease enter an amount between $1-$100,000.\n\n### More from Issue 19\n\ncard-default flavor-issue type-magazine term-issue-19 format-pullquote tax-\nissue featured-article-featured\n\nThey looked like some army of the damned, out to fight zombies\u2014but in fact\nthey were facing down their own police.\n\nIssue 19 Real Estate\n\n  * Ukraine, Putin, and the West\n  * The Editors\n\ncard-default flavor-issue type-magazine term-issue-19 format-pullquote tax-\nissue featured-\n\nDon\u2019t worry, we weren\u2019t feeling or thinking anything about what we heard\u2014we\nwere only sitting here, trying not to cough.\n\nIssue 19 Real Estate\n\n  * The Concert Hall\n  * The Editors\n\ncard-default flavor-issue type-magazine term-issue-19 format-with_image tax-\nissue featured-\n\nIssue 19 Real Estate\n\n  * The Accidental Neoliberal\n  * Jedediah Purdy\n\ncard-default flavor-issue type-magazine term-issue-19 format-pullquote tax-\nissue featured-\n\nWhat offended her here was the flicker of pride in his supposed giving-up.\n\nIssue 19 Real Estate\n\n  * The Summer Before The\n  * Benjamin Kunkel\n\ncard-default flavor-issue type-magazine term-issue-19 format-with_image tax-\nissue featured-article-featured\n\nIssue 19 Real Estate\n\n  * Two Scenes\n  * Nell Zink\n\ncard-default flavor-issue type-magazine term-issue-19 format-pullquote tax-\nissue featured-\n\nWhat is a slum anyway? He has a concise answer: \u201cHouse owned by people, land\nowned by government.\u201d\n\nIssue 19 Real Estate\n\n  * Santa Claus Aa Rahe Hai\n  * Srinath Perur\n\ncard-default flavor-issue type-magazine term-issue-19 format-with_image tax-\nissue featured-\n\nIssue 19 Real Estate\n\n  * The Help Desk\n  * Kristin Dombek\n\ncard-default flavor-issue type-magazine term-issue-19 format-with_image tax-\nissue featured-\n\nIssue 19 Real Estate\n\n  * Endangered Speakers\n  * Ross Perlin\n\ncard-default flavor-issue type-magazine term-issue-19 format-pullquote tax-\nissue featured-\n\nWhat is the way of life implied by our contemporary standing revolution?\n\nIssue 19 Real Estate\n\n  * New Trends in Office Design\n  * Nikil Saval\n\ncard-default flavor-issue type-magazine term-issue-19 format-pullquote tax-\nissue featured-article-featured\n\nBroadband providers have an incentive to use their control of the network to\ndisadvantage their competition.\n\nIssue 19 Real Estate\n\n  * Net Neutrality\n  * Andrew Jacobs\n\ncard-default flavor-issue type-magazine term-issue-19 format-pullquote tax-\nissue featured-\n\nThe other Sophie and I were an embattled minority in the mid-\u201990s, when the\nlandscape was littered with Jennifers and Jessicas.\n\nIssue 19 Real Estate\n\n  * Across the Park\n  * Sophie Pinkham\n\ncard-default flavor-issue type-magazine term-issue-19 format-pullquote tax-\nissue featured-\n\nThe machine we live in is not a rage machine, but an affect machine.\n\nIssue 19 Real Estate\n\n  * Letters\n\n### More by this Author\n\ncard-default flavor-author type-online-only term-online-only format-with_image\ntax-online-only featured-\n\nOnline Only\n\n  * Confirmation Bias\n  * David Auerbach\n\ncard-default flavor-author type-magazine term-issue-13 format-pullquote tax-\nissue featured-\n\nComputers are near-omnipotent cauldrons of processing power, but they\u2019re also\nstupid.\n\nIssue 13 Machine Politics\n\n  * The Stupidity of Computers\n  * David Auerbach\n\nn+1\n\nn+1 is a print and digital magazine of literature, culture, and politics\npublished three times a year. We also post new online-only work several times\neach week and publish books expanding on the interests of the magazine.\n\n### Email Newsletter\n\nGet n+1 in your inbox.\n\n### Follow Us\n\n  * Twitter\n  * Instagram\n  * Facebook\n\nCopyright \u00a9 2024 n+1 Foundation\n\nTerms & Conditions | Privacy Policy\n\n", "frontpage": false}
