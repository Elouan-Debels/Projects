{"aid": "39982233", "title": "Spam: Unintended Consequences of Open Source Sustainability Platforms", "url": "https://blog.phylum.io/digital-detritus-unintended-consequences-of-open-source-sustainability-platforms/", "domain": "phylum.io", "votes": 2, "user": "louislang", "posted_at": "2024-04-09 18:03:15", "comments": 0, "source_title": "Digital Detritus: Unintended Consequences of Open Source Sustainability Platforms", "source_text": "Digital Detritus: Unintended Consequences of Open Source Sustainability\nPlatforms\n\nDiscord Sign Up Free\n\nApr 9, 2024 11 min read Research\n\n# Digital Detritus: Unintended Consequences of Open Source Sustainability\nPlatforms\n\nPerverse incentives - a situation made worse by incentivizing the wrong\nbehavior. Real-world examples abound, like the Cobra effect or the Great Hanoi\nRat Massacre, and now it has come to open source software. Right now, open\nsource repositories are being polluted with thousands of dubious packages\npublished by opportunistic actors exploiting a protocol having the noble\nintent of compensating open source developers for their contributions to the\ngreater good. Join us as we take a look at this developing situation.\n\nProtect yourself from software supply chain attacks\n\nFree Github App\n\n## Buy Me a Coffee Tea\n\nOpen Source Software (OSS) ecosystems\u2014platforms like PyPI and npm\u2014are\nundeniably the backbone of modern software development, enabling the easy\ndistribution and discovery of countless tools and applications. Powering these\necosystems are remarkable and often unpaid developers who contribute their\ntime and expertise to develop and freely distribute software and source code\nthat powers everything from small personal projects to large-scale enterprise\nsolutions. Not only does this collaborative model democratize software\ndevelopment, but it also fosters innovation and increases development\nvelocity.\n\nGiven a system so heavily dependent on unpaid volunteers, one might ask:\nwithout financial benefit, what keeps the maintainers working and interested\nin their projects? The answer to this question is vital, especially when a\npackage is a critical component of other important software.\n\nTo address this issue, initiatives, like Buy Me a Coffee and GitHub sponsors,\nare a good step in the right direction but often fall significantly short of\nmost OSS developer financial requirements. Other platforms like Tidelift\npartner with open source maintainers, providing more significant compensation\nprovided they adopt and maintain high-security development practices. The\nmoney comes from Tidelift enterprise customers who expect such partnerships to\nprovide more trust, safety, and reliability in the open source packages they\ndepend upon.\n\nThere are also other burgeoning attempts to address this problem, bringing us\nto our topic today. The Tea protocol is a web3 platform whose stated goal is\ncompensating open source package maintainers, but instead of cash rewards,\nthey are rewarded with TEA tokens, a cryptocurrency.\n\nThe Tea protocol white paper outlines a decentralized system that rewards open\nsource developers for their contributions in a way that\u2019s proportional to the\nvalue they provide\u2014or in their words they allow developers \u201cto capture the\nvalue they create\u201d. At a high level, the system works by having developers\nregister their projects with Tea. The Tea protocol then analyzes the entire\ndependency graph of open source projects to dynamically determine each\nproject\u2019s \u201cProof of Contribution\u201d\u2014its \u201cteaRank\u201d or overall value to the\necosystem. It then distributes rewards as TEA tokens to a project\u2019s\n\u201ctreasury\u201d.\n\nOther parties besides developers participate in the Tea protocol via different\nmechanisms. Project supporters stake TEA tokens on projects they want to\nsupport. \u201cTea tasters\u201d, assumed expert code reviewers, audit projects,\n\u201cstaking their tea\u201d as a show of support and vouching for the validity and\ncorrectness of the project\u2019s claims, e.g. functionality, security, license\naccuracy, and so on. The end goal here is the creation of a robust economy\naround open source software that accurately and proportionately rewards\ndevelopers based on the value of their work through complex web3 mechanisms,\nprogrammable incentives, and decentralized governance.\n\nThe project is undeniably noble in heart and novel in approach. However, it\nraises the question: will bringing web3 and cryptocurrency dynamics to the\nheart of open source lead to its intended outcomes - just compensation for\nopen source software developers who meaningfully contribute to the greater\ngood, and thus increased trust in open source - or will unintended\nconsequences follow?\n\n## A Sharp Uptick in npm Publications\n\nLet\u2019s rewind for a minute to share how we learned about the Tea protocol in\nthe first place. One of our core missions here at Phylum is to defend\ndevelopers from malware. We ingest and analyze every package published to open\nsource ecosystems, including npm. Over the past few months, we\u2019ve seen a\nsignificant uptick in new package publications to npm. That is, new packages,\nnot new versions of existing packages but completely new packages not\npreviously seen in the ecosystem. The following graph shows that starting\naround mid-to-end February of 2024, new package publications steadily\nincreased towards the beginning of March 2024, then skyrocketed, peaking at\nover 7x the number of new daily packages typically seen.\n\nNew package publications to npm per day.\n\nWe started investigating this anomaly and found that coincident with this\nincrease in new package publications, our systems were also flagging\nsignificant amounts of what we consider spam publications to npm. In the\ncontext of open source software, by \u201cspam\u201d we mean a non-malicious package\npublished by a user with intentions other than providing utility or meaningful\nfunctionality to other users. Numerous varieties of spam abound in open source\necosystems, and one way that we classify spam is by its apparent intentions.\n\nAs we started looking into these thousands of spam packages, they fit into\nseveral campaigns that followed a particular pattern. The package names were\neither two to four random words joined with hyphens or an un-hyphenated\nportmanteau of two Latin words chosen from the Lorem Ipsum corpus. For\nexample,\n\n  * character-successful-water-arm\n  * upward-hollow-touch\n  * young-web3-fireplace\n  * eiuseaque\n  * utperspiciatis\n  * recusandaemolestiae\n\nThese packages, and several thousand more like them, are based on one of a\nhandful of existing packages that the actors have cloned, provided a new\nrandom name for, changed only necessary metadata, and republished. There were\na few interesting things we noticed early on in the investigation.\n\nOne was the vast number of dependencies many of these packages had that were\nclearly from the same campaign--we're talking on the order of thousands of\ndependencies. In other words, they were building a huge interconnected network\nof packages. An artificially created network like this introduces a dangerous\nrisk from a malware defense perspective because of the transitive dependency\nproblem. A single poison pill in this rat\u2019s nest of package dependencies could\nspell disaster for any external legitimate package that accidentally reaches\ninto the nest and names one of those packages as a dependency. However, we\nhave yet to find anything overtly malicious in the network.\n\nAnother strange thing we noticed was that nearly every package had an\nassociated and unique GitHub account with a like-named repo. Strangely, many\nof the repositories were effectively empty with nothing more than a minimal\nreadme and a file named tea.yaml. Here is an example tea.yaml from the stay-\nincluding repository:\n\n    \n    \n    # <https://tea.xyz/what-is-this-file> --- version: 1.0.0 codeOwners: - '0x16f50--REDACTED--' quorum: 1\n\nAt first, it seemed innocuous. But this tea.yaml pattern persisted, and we\nbegan investigating the Tea protocol on tea.xyz. Further digging on GitHub\nrevealed a script in a commit by a user named ylmin (who lists their name as\nJack--remember that name) that appears to be tied to the publication of the\nrandom words and Latin campaigns. In it you can see they have a collection of\nnpm API keys they cycle through and publish these packages through a proxy\nagent. We also found a file containing a map of npm API keys to published\npackage names. We then began to suspect that the Tea protocol had incentivized\na massive automated crypto farming campaign.\n\n## Spam, spam, spam, beans, spam\n\nSpam, even at high volumes, is not new to open source ecosystems, especially\nnpm. However, automated sustained spamming of this volume for months on end is\nrare and does nothing but cause heavy strain on the ecosystem itself,\ndegrading the performance of the ecosystem for genuine users and straining\nopen source security researchers.\n\nWe then took a step back from one particular campaign and looked at Tea-\nrelated packages as a whole. As of publication, there are over 14 thousand\npackages registered with the Tea protocol across all open source ecosystems,\nthe majority of which were in npm. Manually checking every package is\ninfeasible, but based on the naming schemes and patterns of the packages\nregistered and some spot-checking, while some are legitimate, it\u2019s clear that\nnearly all of them are spam. And, many separate campaigns are attempting to do\nthe same thing.\n\nThe following plot shows how significant these campaigns are in the npm\necosystem.\n\nNew package publications to npm, including Tea and transitive Tea packages.\n\nUnder normal conditions, npm sees approximately 500-1000 new packages\npublished daily. At the height of this crypto farming effort, around the start\nof March, we can see the number of Tea-registered packages published to npm\nexceeded the normal daily volume of total new packages published!\n\nSince then, we have seen the spammers releasing packages at an even higher\nrate listing their own Tea-registered package as a dependency. These are not\nregistered on Tea, but released on npm in an effort to increase their Tea\npackage\u2019s \u201cteaRank\u201d, thus making it more valuable in The tea ecosystem.\n\n## The Total Counts\n\nThese numbers are still increasing but as of our last count, we see 13,375 npm\npackages have been registered in Tea. We\u2019ve also seen 53,513 transitive tea\npackages. For comparison, we count 238 packages on PyPI registered to tea, 301\non rubygems, and 141 on crates. Currently, the spam problem appears limited to\nnpm.\n\n## Gaming the System\n\nWe joined the Discord server to see what was going on there and it\u2019s pretty\nclear the challenge/reward structure is having some unintended consequences.\nFor example:\n\nUsers who \u201cdon\u2019t know jack\u201d about software development are probably not very\ngood candidates to build well-designed open source software projects.\n\nFair enough, some of the challenges do not require development skills such as\n\u201csigning up for tea\u201d or \u201cverifying your email address\u201d, but the challenges\nwith the largest point rewards definitely do. Here\u2019s a snapshot of the some of\nthe challenges.\n\nRewards for tasks in the \"Earl Grey\" challenge.Rewards for tasks in the\n\"Jasmine\" challenge.\n\nFinally a voice of reason! Programming knowledge is indeed required to create\nan OSS project. But why let something like that deter you?\n\nOr better yet...\n\nOne user, named Jack, even asked the same question we're asking!\n\nAbout a week prior to that, we also saw Jack complaining that they were unable\nto claim their reward from a particular project. In the discussion with the\nmoderators, we noticed them cropping out the names of the projects they were\ntrying to claim rewards for.\n\nA screenshot from Jack during the reward claiming discussion. Notice the top\nis cropped where the project name usually is.\n\nCurious about this strange behavior, we dug a bit and were able to track the\nTea address provided to the project associated with that address.\n\nThe Tea address provided in Jack's discussion leads to the npm package \"far-\nweb3-neck!\"\n\nWe took a look at the package on npm.\n\nfar-web3-neck's npm landing page. Notice it has 7,721 dependents. Must be some\npackage!\n\nThis is clearly part of the \"random-words\" campaign. We then followed that\npackage to GitHub.\n\nfar-web3-neck's GitHub repo.\n\nJack! You're ylmin, and you're behind the random-words and Latin campaigns!\nAre you asking about the spam packages in the Tea Discord server because\nyou're worried they're catching on? Or are you trying to call out the other\ncampaigns while silently running your own?\n\nAs an aside, Jack's GitHub network is populated by other GitHub users who also\ncontribute to the publication of packages belonging to the random-words and\nLatin campaigns. This appears to be a fake account like all the rest and it's\nhighly likely whoever is actually behind this is using hundreds, possibly even\nthousands of fake GitHub and npm accounts to accomplish this high volume\npublication of spam.\n\nThe point here isn't necessarily to call out Jack and the names of actors\nperpetrating this spam campaign--but it was quite a coincidence to stumble\ninto the very actor creating the packages that originally sent us down this\nrabbit hole. Instead, the point here is to show that there are strong\nincentives created by the Tea protocol and their reward system to heavily\npollute the open source ecosystems, with npm taking the brunt of it.\n\n## Some Considerations\n\nBefore we wrap up, there are a few other things worth considering in light of\nthis massive spam campaign.\n\n  1. This is not the first time tea has had to deal with abuse. In late February, Connor Tumbleson wrote about a different type of abuse open source maintainers were having to deal with as a result of the Tea protocol. To their defense, tea responded the following day with a list of safeguards they were going to implement to prevent that particular kind of abuse.\n  2. The Tea protocol is not even live yet. These users are farming points from the \u201cIncentivized Testnet,\u201d apparently with the expectation that having more points in the Testnet will increase their odds of receiving a later airdrop. It\u2019s also worth noting that while Testnet TEA tokens have no value, Testnet points \u201care planned to become redeemable by eligible persons for blockchain tokens and/or other benefits at a later time.\u201d If we are seeing this volume of spam for tokens of no value and points that may be worth something later, imagine the lengths bad actors will go to when these are actually worth something.\n  3. As different challenges conclude and new ones begin, it is likely that the same actors, along with others, will seek novel ways to exploit the system in order to maximize their token and point counts. The specific manifestations of these exploits in future challenges within the open source ecosystems remain to be seen. However, if history is any indication, we strongly suspect that these actions will ultimately prove more detrimental than beneficial.\n\n## Final Thoughts\n\nAs we stated earlier, the Tea protocol outlined in their white paper is an\ninnovative attempt to address the long-standing problem of open source\ndeveloper sustainability and compensation. It acknowledges the limitations of\nrelying on voluntary contributions and proposes a reward system to motivate\ndevelopers. However, the protocol\u2019s safeguards against spam, abuse, and gaming\nappear underdeveloped in its current state.\n\nThe countermeasures discussed, such as manual review by \"tea tasters\" and\nslashing rewards for bad actors, may not be sufficient to address the full\nscope of the problem. The reliance on human reviewers introduces scalability\nconcerns and potential misalignment of incentives, and the teaRank algorithm\nitself seems vulnerable to external manipulation. Nothing as far as we can see\nprevents a single actor who has automated spam production also exploit the\nprotocol as a tea taster, harvesting rewards for auditing their own spam under\na different account. It is the 21st-century version of raising cobras or rats.\n\nMoreover, short-term challenges designed to increase user engagement, may\nunintentionally encourage the very behaviors the system aims to prevent.\nRewarding the most active users based on Incentivized Testnet points has\nalready incentivized spam and the creation of fake packages, completely\nundermining the goal of fostering diverse, stable, well-maintained projects.\nAfter all, developing robust software is a gradual process that requires\ncareful planning, steady maintenance, and continual improvement.\n\nIt's also important to recognize that wherever there is potential for\nfinancial gain, especially if it can be achieved fraudulently with low risk\nand potentially high reward, bad actors will seek to exploit the system. As\nlong as there are incentives to behave badly, malicious actors will find ways\nto circumvent safeguards, creating a constant \u201cwhack-a-mole\u201d battle between\nsecurity measures and those seeking to exploit vulnerabilities.\n\nAs the Tea protocol develops, it is crucial to enhance its anti-abuse measures\nand continuously refine its incentive structures to ensure they drive the\ndesired behaviors without encouraging gaming or spam. Otherwise, spam farmers\nwill dilute the compensation due to the software developers that was\noriginally intended.\n\n#### Phylum Research Team\n\nHackers, Data Scientists, and Engineers responsible for the identification and\ntakedown of software supply chain attackers.\n\n## Subscribe to our research\n\nKeep up with the latest software supply chain attacks\n\n### You might also like...\n\n## Malicious npm Package Caught Hijacking ERC20 Contracts to Drain USDT\n\nMar 29, 2024\n\n## Typosquatting Campaign Targets Python Developers\n\nMar 28, 2024\n\n## An Introduction to Open-Source Software Supply Chain Risk\n\nMar 20, 2024\n\nPhylum \u00a9 2024\n\n", "frontpage": false}
