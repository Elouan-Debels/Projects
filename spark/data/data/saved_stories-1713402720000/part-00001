{"aid": "40068893", "title": "Building a Local LLM Agent with Speech Recognition and TTS Support", "url": "https://richardkelley.io/dendron/tutorial_intro/", "domain": "richardkelley.io", "votes": 1, "user": "rck", "posted_at": "2024-04-17 19:10:24", "comments": 0, "source_title": "Dendron Tutorial Introduction - Dendron", "source_text": "Dendron Tutorial Introduction - Dendron\n\nSkip to content\n\n# Building a Local Chat Agent with Dendron\n\nDendron is a Python library for building applications using behavior trees to\nstructure and coordinate the execution of one or more large transformer-based\nneural network models. I'm going to assume that you have some idea of what\ntransformer-based neural nets are, and in this introductory tutorial I'll show\nyou how to use behavior trees to do \"structured programming\" with those\nmodels. So that we are all starting from a similar place, let's begin by\ngiving a high-level description of how behavior trees work before we dive into\nimplementing one using Dendron.\n\n## A Quick Overview of Behavior Trees\n\nA behavior is a discrete unit of action performed in the world. If this\ndefinition feels ambiguous, that's because it is: in some applications an\nindividual behavior is a coarse thing; in others a very fine unit of\nexecution. Examples of behaviors are transcribe a segment of audio data into\nEnglish language text or Look at this image and output the string \"yes\" if it\ncontains a puppy or generate a string of text based on the given chat history.\nYou'll need to understand your individual problem and solution spaces to\ndecide what the natural behaviors are in your case. To solve most problems\nrequires more than one behavior: a sequence of actions, or perhaps an attempt\nat multiple possible actions until one succeeds, or something still more\ncomplicated. Once you have multiple behaviors, you have to decide how to\nstructure their interactions. A behavior tree is a particular framework for\nthinking about how behaviors should interact.\n\nIn a behavior tree, we represent a collection of behaviors as a tree, in which\nindividual behaviors are the leaf nodes and the interior nodes of the tree\ncontain the logic that coordinates the behaviors. To make the tree do\nsomething, we tick the root node. The root then propagates that tick down the\ntree. Each node in the tree knows what to do when it is ticked. Once a node is\ndone performing the actions associated with its tick operation, it returns a\nstatus back to its parent: either SUCCESS or FAILURE, or less commonly RUNNING\nto indicate that the node is still going. The tick signal flows through the\ntree according to the logic implemented by the tree's interior nodes.\n\nAn example of a behavior tree (in fact, the behavior tree that you will have\nbuilt by the end of this tutorial) can be seen below. You can click to zoom\nthe image:\n\nThis tree implements a chat agent that listens to a human via a microphone,\ntranscribes the audio using a transformer-based speech recognition model,\ngenerates responses to the human via a large language model that has been\ntuned for chat, and replies using text-to-speech via a third transformer-based\nmodel. Using still another model, the tree also analyzes the human's input and\ndetermines, based on the human's words, if it is time for the agent to say\ngoodbye and end the chat.\n\nNote\n\nIf you are reading the tree from left to right and thinking that it looks a\nlittle backwards, good! Read on: you'll see why it is arranged that way in\nPart 2 of the tutorial. The tree and its notation will be fully explained by\nthe end of Part 4 of the tutorial.\n\n## Getting Started and Moving Forward\n\nI'm going to assume that you have installed Dendron and its requirements. If\nyou haven't yet, run\n\n    \n    \n    pip install dendron\n\nin your Python environment, or check out this link for details.\n\nOnce you have Dendron installed, you can move on to building a behavior tree\nwith a single node.\n\nMade with Material for MkDocs\n\n", "frontpage": false}
