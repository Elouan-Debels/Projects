{"aid": "39981675", "title": "Show HN: Gundam EVOLUTION revived only 4 months past EOS \u2013 Side 7 Project", "url": "https://1379.tech/the-making-of-side-7-gundam-evolution-private-server-project/", "domain": "1379.tech", "votes": 1, "user": "Gamemaster1379", "posted_at": "2024-04-09 17:19:02", "comments": 0, "source_title": "The Making of Side 7 | GUNDAM EVOLUTION Private Server Project", "source_text": "The Making of Side 7 | GUNDAM EVOLUTION Private Server Project\n\n# The Making of Side 7 | GUNDAM EVOLUTION Private Server Project\n\n#### Matthew Stanley\n\nApr 3, 2024 \u2022 8 min read\n\nLogo Design by Gendo Ashina (Discord handle @gendo.); 3D render of logo by\nDwheim ( www.youtube.com/@dwheim )\n\nOn September 20th, 2022, the live-service first-person hero shooter \"GUNDAM\nEVOLUTION\" was launched. A little over a year later, on November 29th, 2023,\nit abruptly reached its end of life. As a passionate enthusiast of hero\nshooters and the Gundam franchise, the game's discontinuation deeply saddened\nme. Despite its management flaws, I genuinely enjoyed playing it. Naively, I\npondered, \"I've never developed a private server before, but with my backend\nweb development experience, how difficult could it be?\" With this aspiration,\nI embarked on the journey. Although I lacked comprehensive knowledge in server\ndevelopment, my background in backend web development was a starting point.\nFortuitously, the creators of \"GUNDAM EVOLUTION\" provided a timely notice\nabout the game's end of service (EOS), affording me ample opportunity to start\ncapturing game data packets. This early start laid the groundwork for what\nwould eventually evolve into Side 7.\n\nCrafting the Initial Prototype\n\nIn the realm of software development, I've always been pragmatic, believing\nthat many people will be dismissive of an \"idea guy\". To get others attention,\nthere needs to be substance of substance. There needs to be at least a\nprototype to prove the dedication to the idea's to fruition. With this\nmindset, I embarked on creating the first prototype, hoping to attract other\ndevelopers by showcasing tangible progress.\n\nThe straightforward approach would have involved intercepting the game's\nnetwork functions to reroute traffic. However, this method posed two\nsignificant challenges: my lack of experience in creating such intercepts and\nthe potential conflict with the game's anti circumvention measures.\n\nTo avoid these issues, I opted for a development-only solution using MITM\nproxy scripts to intercept and modify the game's official URLs to redirect to\nlocalhost. Initially, this method faced obstacles, particularly with the\ngame's resistance to HTTP redirections from its original HTTPS setup. To\nresolve this, I configured my local environment and mitmproxy to operate\nsecurely over HTTPS, ensuring smooth redirection.\n\nDeveloping the prototype involved scripting hardcoded responses based on the\nMITM logs, a task that proved to be painstakingly difficult. The game's error\nhandling was rudimentary at best, offering little to no guidance on debugging,\nas errors were often non-descriptive HTTP status codes following a freeze.\nThus, refining the prototype's API involved a tedious cycle of hypothesis,\ntesting, and numerous game restarts, each time navigating through the game's\nlengthy intro and login sequences.\n\nAfter four months of diligent data collection and integration, I launched the\nfirst publicized test, just 1 month and 20 days before the game's scheduled\nend of service. This preliminary test marked a significant achievement,\ndemonstrating the game's operational capabilities on our independent master\nserver. At this juncture, users could customize settings and mobile suits, and\naccess queues and \"offline\" modes like training and tutorials, despite the\nabsence of a live matchmaking system, game servers, or other players. Although\nnot fully interactive, this milestone underscored the success in establishing\na master server entirely our own.\n\nGame Server Discovery\n\nArmed with a functional prototype, I felt emboldened to seek collaboration for\nreviving this beloved game. My outreach to various Unreal Engine modding\ncommunities garnered significant interest from modders possessing a wide range\nof skills. While many lacked the availability for a full-time commitment,\ntheir contributions edged us closer to a deeper understanding of the game.\nThanks to the support from the UEDumper community, we managed to bypass\nadditional security measures. This success facilitated the use of a\nspecialized version of the renowned UE modding tool, RE-UE4SS, modified for\nour purposes with the help of a community member. This tool granted\nunprecedented access to in-game memory objects and enabled console commands, a\npowerful feature typically off-limits in multiplayer games.\n\nIntent on preserving the game's integrity rather than exploiting it, I delved\ninto exploring the console commands at my disposal. An attempt to use a basic\nUE4 command to open a game map unexpectedly resulted in a 401 Unauthorized\nError. This error revealed that the action of opening an official game map\nattempted to register my game client as a server, a process swiftly blocked\nwithout official authorization. Although initially thwarted, this discovery\nhinted at a deeper layer of potential within our project.\n\nDespite the official servers' rejection, our master server prototype offered a\nglimmer of hope. If we could mimic the expected server response, we might\novercome this hurdle. With assistance from the UEDumper community, we analyzed\na memory dump of the game, enabling us to craft a mock response that prevented\nthe client from crashing during its unauthorized server registration attempt.\nFurther investigation unveiled an intriguing anomaly: my game client was\nattempting to bind itself to UDP port 7777, suggesting that our game client\ncould, under certain conditions, attempt to behave like a game server.\n\n> my game client was attempting to bind itself to UDP port 7777\n\nGame clients don't need to bind ports like that? Unless...this wasn't just a\ngame client?\n\nI now have a game client trying to bind a server port, and I have console\naccess. The next best course of action here is to stand up a second game\nclient and try connecting.\n\nGame client #1 is set up to operate as a server.\n\nMeanwhile, Game client #2, after #1 is set up, is given a simple command. open\nIP:PORT, targeting the IP of the first game client.\n\nCue test milestone #2, 15 days before End of Service:\n\nGame Client #2 connecting to Game client #1, now acting as a server\n\nTo those familiar with game private servers, setting up a master server might\nseem straightforward; the real challenge lies in configuring the game servers.\nAlthough UE4's source code is accessible, the specific modifications for\n\"GUNDAM EVOLUTION\" are not. We might manage to decode the packet compression\nand encryption, but accurately replicating the physics interactions and other\nbackend processes without direct reference could take years of speculation and\nstill fall short of the original gameplay experience. Ideally, establishing a\nnew UE4 server from the ground up would be more practical than retrofitting a\ngame client into a server\u2014an endeavor fraught with complications. Unless....\n\n\u2753\n\nGUNDAM EVOLUTION's game client included the entirety of the game server code\nin the client.\n\nHowever, a pivotal discovery emerged during this test. Employing the open MAP\ncommand allowed the client to attempt a connection to another client modified\nto function as a server. This makeshift server successfully loaded the correct\nmap, though with glaring issues: incorrect team names, the connecting player\ndefaulting to spectator mode, and the inadvertent activation of Training Mode.\nDespite these flaws, the game operated: gates opened, timers counted down, and\nrounds concluded in draws due to the absence of active players. Remarkably, in\nthe second round, the new \"client\" transitioned into an active player, albeit\nwith significant bugs, such as the inability to capture points due to not\nbeing assigned a team. Nonetheless, this anomaly confirmed that core physics\ninteractions and player abilities were functioning as intended, mirroring the\nofficial game's behavior.\n\nNormally, the game doesn't utilize open/connect commands, suggesting that our\napproach bypassed certain initializations, hence the erratic game state. At\nthis juncture, it became increasingly apparent that the game client could\npotentially serve a dual role in the ecosystem of game client, master server,\nand game server, acting as a critical component on both ends of the spectrum.\n\nRecruiting a team\n\nEmpowered by the breakthroughs, I returned to the Unreal Engine modding\ncommunity with a second technical demonstration. This time, I showcased a\nfunctional proof-of-concept for both a master server and a game server, aiming\nto attract a developer capable of deconstructing the game further to transform\nit into a genuinely playable platform. As the game's closure loomed, it became\ncrucial to also build a dedicated community. To this end, I established a\nDiscord server and appointed an early and passionate supporter from my social\nmedia discussions as a community director, allowing me to concentrate on\ndevelopment while he advocated for the project's revival.\n\nVery quickly, the forming community stepped up and took it upon itself to\nround out and handle community efforts, such as creating logos, promotional\nvideos, livestreaming development progress, and\n\nI successfully enlisted an engineer with expertise in reverse engineering\ndesktop applications by the name of Samuel Siviero . Although unfamiliar with\n\"GUNDAM EVOLUTION,\" his knowledge of Unreal Engine and interest in our\nprogress proved invaluable. His skills quickly overcame the game's security\nmeasures, enabling us to redirect the game client to a new network address\nwithout relying on makeshift mitmproxy solutions. This breakthrough\nsignificantly accelerated our debugging process. Over the course of a month,\nthrough meticulous examination of SDK and kismet analyzer dumps, alongside\nstrategic runtime injections, hook implementations, asset swaps, and API\nenhancements, we reached a pivotal milestone just nine days post-service\ntermination:\n\nOur game client functioned as an authentic player, integrated into a team on a\nheavily modified client-now-serving-as-server setup. This achievement marked\nthe culmination of our efforts, assembling all the necessary elements to\nrecreate the complete \"GUNDAM EVOLUTION\" experience. The following month was\nspent in collaboration with my developer colleague, overhauling the API\nservice entirely. We refined our injection methods and sought external\nconsultation to navigate the challenges posed by the game's executable, which\nwas packed by HyperTech CrackProof, which we had previously managed through\ntimed DLL injections after launch.\n\nLaunching the Initial Playtest\n\nFollowing a thorough overhaul of our platform, we assembled a select group\nfrom our burgeoning community to conduct the inaugural private server\nplaytest. This event featured a finely tuned API coupled with a hastily\nmodified game client, together facilitating a custom lobby for gameplay.\nTraditionally, the game supported a competitive queue, a casual queue, and\ncustom lobbies. For simplicity and focus, our playtest exclusively utilized\ncustom lobbies.\n\nCustomarily, players would create a new lobby, automatically generating an\n8-digit code for others to join. In celebration of our maiden game session,\noccurring 37 days after the game's shutdown, we implemented a unique lobby\ncode of 0000 0001. This special session was hosted on my home HTPC, powered by\nan aged Intel i7-4770k processor and running Windows 10. Despite the makeshift\narrangement, we successfully completed a full 12-player match, marking a\ntriumphant first playtest.\n\nPrivate Beta\n\nFollowing our inaugural playtest's success, the first quarter of 2024 marked a\nphase dedicated to refining our infrastructure. Samuel and I focused on\nresolving API edge cases to enhance stability and prevent client crashes.\nDuring this period, we also welcomed a seasoned infrastructure developer to\nour team, William Turner, whose expertise enabled us to streamline our hosting\nsolutions, notably transitioning our game server operations to Linux. This\nshift not only improved our server efficiency but also set the stage for\nexpanding our hosting capabilities in preparation for a wider release.\nAdditionally, we assembled a content team tasked with creating in-game assets\nand producing a release trailer to herald the game's comeback.\n\nOver the next three months, we engaged our private beta testers in a rigorous\nschedule of playtests, integrating new hosts and meticulously analyzing game\nperformance across various hardware setups. Over 500 matches were played, many\nfilled with instances of crashes, bugs, and various anomalies, our collective\nefforts culminated in a significant milestone: the March 28th, 2024, end-of-\nquarter release. This launch saw the presence of more than 25 game servers,\nhosted by our committed community, and introduced a new in-game icon to\ncommemorate the revival of \"GUNDAM EVOLUTION.\"\n\nPublic Alpha\n\nTrailer by Dwheim ( https://www.youtube.com/@dwheim )\n\nCurrent Community and Progress Update\n\nAs of this writing, our community has surpassed 4700 members, experiencing a\nsurge of over 1200 new members within just five days following our public\nannouncement. Our servers are bustling, hosting over 1600 games on the Side 7\ninfrastructure, indicating a robust and engaged player base.\n\nThe stability of lobby and menu interactions has been a highlight, with games\nproceeding smoothly in-match. At present, the team has already fixed a slew of\nin-menu lobby interactions and has mitigated a number of in-game crashes\nresulting from abrupt player disconnections. These are few maong many of the\nseveral quality of life improvements we are committed to implementing in the\nnear future.\n\nWhile a dedicated project website is still under development, interested\nparties and potential new members can find us and join the growing community\nvia our Discord server at: https://discord.gg/side7\n\n## Sign up for more like this.\n\nEnter your email\n\nSubscribe\n\n## Project GEVO\n\nProject GEVO is a reverse engineering effort of the game GUNDAM EVOLUTION in\nan effort to bring it a second life after it was shutdown on its End of\nService date on November 29th, 2023. The project takes a clean room approach\nto reverse engineering the coordinator service using packet\n\nMatthew Stanley Dec 9, 2023 \u2022 1 min read\n\n## Twitch Plays Four Swords Adventure\n\nIn 2014, I became aware of the social experiment that was TwitchPlaysPokemon.\nAs an enthusiast of both games and novelty coding projects, I was fascinated\nby the idea and was eager to see it re-imagined in other genres. Many games\nfollowed Twitch Plays Pokemon. Most of which were simple adaptations\n\nMatthew Stanley Dec 1, 2020 \u2022 5 min read\n\n## Gamemaster's Improved Vanilla HUD v1.2 Release\n\nDownload 1.2 Changes -Update for Tough Break -Refactor Mannpower HUD elements\n\nMatthew Stanley Dec 15, 2018 \u2022 1 min read\n\nMatthew Stanley \u00a9 2024\n\nPowered by Ghost\n\n", "frontpage": false}
