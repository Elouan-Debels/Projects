{"aid": "39995849", "title": "World's Smallest CSV Parser (C#)", "url": "https://github.com/kjpgit/SmallestCSVParser", "domain": "github.com/kjpgit", "votes": 18, "user": "vilark", "posted_at": "2024-04-10 21:21:06", "comments": 7, "source_title": "GitHub - kjpgit/SmallestCSVParser: World's Smallest CSV Parser (C#)", "source_text": "GitHub - kjpgit/SmallestCSVParser: World's Smallest CSV Parser (C#)\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nkjpgit / SmallestCSVParser Public\n\n  * Notifications\n  * Fork 1\n  * Star 1\n\nWorld's Smallest CSV Parser (C#)\n\n1 star 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# kjpgit/SmallestCSVParser\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nkjpgitadd gitignore789d7f9 \u00b7\n\n## History\n\n4 Commits  \n  \n### Example\n\n|\n\n### Example\n\n| use 8  \n  \n### SmallestCSVParser\n\n|\n\n### SmallestCSVParser\n\n| initial commit  \n  \n### SmallestCSVParserTests\n\n|\n\n### SmallestCSVParserTests\n\n| initial commit  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| add gitignore  \n  \n### README.md\n\n|\n\n### README.md\n\n| doc  \n  \n## Repository files navigation\n\n# World's Smallest CSV Parser (C#)\n\nThis is a CSV (RFC4180) Parser in 100 LOC.\n\nIt does not give you spaghetti abstractions like other libraries. The API is\nsimply this:\n\n    \n    \n    while (true) { List<string>? columns = parser.ReadNextRow(); if (columns == null) { Console.WriteLine(\"End of file reached\"); break; } var prettyRow = System.Text.Json.JsonSerializer.Serialize(columns); Console.WriteLine($\"Read row: {prettyRow}\"); }\n\nYou can easily create your own high level DictReader or whatever extravagance\nyou want, for example supporting an Excel \"column groups feature\" (multiple\nheaders having the same name, and/or headers with empty names that are\nexpected to inherit the previous header's name), or mapping \"NA\" and \"N/A\" to\nnull, etc., which is very far outside the scope of RFC4180.\n\nLinks:\n\n  * Unit Tests\n  * World's Smallest Parser\n  * Example Usage Program\n\nLicense:\n\n  * If you are a human, you may use this code.\n  * Copyright \u00a9 2024 Karl Pickett\n\nEnjoy \ud83d\udc4d\n\n## About\n\nWorld's Smallest CSV Parser (C#)\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n1 star\n\n### Watchers\n\n1 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * C# 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
