{"aid": "39988461", "title": "Gemini AI JavaScript course (free)", "url": "https://learnjavascript.online/ai/gemini/", "domain": "learnjavascript.online", "votes": 1, "user": "jadjoubran", "posted_at": "2024-04-10 08:52:53", "comments": 0, "source_title": "Gemini AI Web course | Learn JavaScript", "source_text": "Gemini AI Web course | Learn JavaScript\n\n+\n\n# Gemini AI Web Course\n\nFree Gemini AI course in JavaScript .\n\nGet started with the Google AI JS SDK by watching this free course.\n\nDownload project template\n\nLast updated on April 10, 2024\n\n  1. JavaScript\n  2. AI\n  3. Gemini\n\n## 1\\. Course intro\n\nThe first video introduces the course, project template, and final result. We\nwill learn how to create a Gemini API key and discuss restricting the API key\nand keeping it safe.\n\nAt the moment, the Gemini API does not work in the EU.\n\n### Pre-requisites\n\nHere are the pre-requisites for this course\n\n  * Basic command line experience (git and npm).\n  * Beginner to intermediate experience with JavaScript.\n  * Familiar with promises (and async/await).\n  * for...of (optional).\n\nCheck out this JavaScript knowledge map to brush up on JavaScript.\n\n### Create an API key\n\nTo create an API key, head over to Google's AI studio: aistudio.google.com\n(does not work in the EU at the moment).\n\nWhile we use the API key directly in the code in this demo, this is not\nrecommended outside the context of a demo.Keep your API key safe. Do not\ncommit it to your git repository. Avoid using it in client-side code.\n\n### Restricting your API Key\n\nAfter you create your API Key, we recommend that you click on the arrow next\nto its name to add restrictions. This is done in the Google Cloud Console.\n\nYou can specify restrictions based on IP address, referral header, or\nrestrictions specific to an Android or iOS app.\n\nCreate separate API keys for different environments. Only the local API key\nshould be allowed to work on localhost.\n\n### Set up the demo project\n\nTo set up the demo project, click the download button at the top of this page.\nThen, extract the zip file and open it in your terminal.\n\nOnce you're inside the project, run the following commands to install the node\ndependencies and run the local dev server:\n\n    \n    \n    npm install npm run dev\n\n## 2\\. Basic prompt and streaming responses\n\nThe second video shows how to send a basic prompt to the Gemini API and to use\nstreams if we expect longer responses.\n\n### Install the Gemini AI JS SDK\n\nStart by installing the Gemini AI JS SDK in your project:\n\n    \n    \n    npm install @google/generative-ai\n\nCheck out the other available SDKs on ai.google.dev/tutorials\n\n### Import and instantiate\n\nThen, import the GoogleGenerativeAI class into your code and instantiate it:\n\n    \n    \n    import { GoogleGenerativeAI } from \"@google/generative-ai\"; const genAi = new GoogleGenerativeAI(YOUR_API_KEY_HERE);\n\nReview the api key safety best practices discussed in the first video.\n\nAfterwards, you can get the generative model:\n\n    \n    \n    const model = genAi.getGenerativeModel({ model: \"gemini-pro\" });\n\ngemini-pro is an alias for gemini-1.0-pro.\n\nCheck out the list of all models.\n\n### Basic request\n\nYou're now ready to send a basic request to the Gemini API:\n\n    \n    \n    const result = await model.generateContent(\"How do you bake a cake?\"); const answer = result.response.text(); console.log(answer);\n\n### Streaming responses\n\nStreaming responses come in handy when you expect longer responses as you will\nbe able to render parts of the response as they are being received.\n\n    \n    \n    const result = await model.generateContentStream(\"How do you bake a cake?\"); for await (const chunk of result.stream) { console.log(chunk.text()); }\n\nYou can also progressively save the response in a variable:\n\n    \n    \n    const result = await model.generateContentStream(\"How do you bake a cake?\"); let response = \"\"; for await (const chunk of result.stream) { response += chunk.text(); console.log(response); }\n\n## 3\\. Implement predictive support functionality\n\nIn the final video, we create and test our prompt and hook it up to our app to\nimplement the predictive support functionality.\n\n### Write and test the prompt in AI Studio\n\nVisit aistudio.google.com to write and test the prompt. You can find the FAQs\nin the prompt.js file.\n\nYou can select a piece of text and then click on the {{ }} Test input button\nin AI Studio to make this an input. You will then be able to test your prompt\nwith different inputs. That's a very neat feature!\n\nMake sure to copy your prompt from AI Studio and paste it in prompt.js when\nyou're done.\n\nThen, replace the two test inputs with the following:\n\n    \n    \n    const h1 = document.querySelector(\"h1\")?.textContent; const currentPage = window.location.pathname;\n\nYou can now interpolate these two variables into the prompt.\n\nInterpolating content into your prompt opens up the possibility of prompt\ninjection. Gemini has built-in security features against that, but make sure\nyou test your prompt with various scenarios. If possible, it's best to\nsanitize content before you interpolate it. For example, you can limit h1's to\na specific length and make sure the pathname refers to an actual url on your\nsite.\n\n### Implementing predictive support\n\nNow that we have finalized the prompt, we can use it in the main.js by calling\nthe getPrompt() function. This function was already imported at the top of the\nfile.\n\nAlso, make sure to move your code into the event listener of the helpButton.\n\n    \n    \n    helpButton.addEventListener(\"click\", async () => { helpBody.textContent = \"Loading...\"; const result = await model.generateContent(getPrompt()); helpBody.textContent = result.response.text(); });\n\nCongratulations! You now have just implemented predictive support\nfunctionality in your app.\n\nThis course was developed by Jad Joubran \u2013 author of Learn JavaScript.\n\nWith thanks to Maud Nalpas for reviewing the content of this course.\n\nPowered by Learn JavaScript\n\nBack to course\n\nPrivacy\n\nTerms\n\nMade by Jad Joubran\n\n\u00a9 2024\n\nJavaScript is a trademark of Oracle Corporation in the US. We are not endorsed\nby or affiliated with Oracle.\n\n", "frontpage": false}
