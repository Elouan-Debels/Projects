{"aid": "40002664", "title": "An Interview and Survey Study on How Rust Developers Use Unsafe Code", "url": "https://arxiv.org/abs/2404.02230", "domain": "arxiv.org", "votes": 2, "user": "PaulHoule", "posted_at": "2024-04-11 14:36:38", "comments": 0, "source_title": "\"Against the Void\": An Interview and Survey Study on How Rust Developers Use Unsafe Code", "source_text": "[2404.02230] \"Against the Void\": An Interview and Survey Study on How Rust\nDevelopers Use Unsafe Code\n\nSkip to main content\n\nWe gratefully acknowledge support from the Simons Foundation, member\ninstitutions, and all contributors. Donate\n\n> cs > arXiv:2404.02230\n\n# Computer Science > Software Engineering\n\narXiv:2404.02230 (cs)\n\n[Submitted on 2 Apr 2024]\n\n# Title:\"Against the Void\": An Interview and Survey Study on How Rust\nDevelopers Use Unsafe Code\n\nAuthors:Ian McCormack, Tomas Dougan, Sam Estep, Hanan Hibshi, Jonathan\nAldrich, Joshua Sunshine\n\nView a PDF of the paper titled \"Against the Void\": An Interview and Survey\nStudy on How Rust Developers Use Unsafe Code, by Ian McCormack and 5 other\nauthors\n\nView PDF HTML (experimental)\n\n> Abstract:The Rust programming language is an increasingly popular choice for\n> systems programming, since it can statically guarantee memory safety without\n> automatic garbage collection. Rust provides its safety guarantees by\n> restricting aliasing and mutability, but many key design patterns, such as\n> cyclic aliasing and multi-language interoperation, must bypass these\n> restrictions. Rust's \\texttt{unsafe} keyword enables features that\n> developers can use to implement these patterns, and the Rust ecosystem\n> includes useful tools for validating whether \\texttt{unsafe} code is used\n> correctly. However, it is unclear if these tools are adequate for all use\n> cases. To understand developers' needs, we conducted a mixed-methods study\n> consisting of semi-structured interviews followed by a survey. We\n> interviewed 19 Rust developers and surveyed 160 developers\\unicode{x2013}all\n> of whom engaged with \\texttt{unsafe} code. We found that 77% of survey\n> respondents and a majority of interview participants were motivated to use\n> \\texttt{unsafe} code because they were unaware of a safe alternative.\n> Developers typically followed best-practices such as minimizing and\n> localizing their use of \\texttt{unsafe} code, but only 23% were always\n> certain that their encapsulations were sound. Limited tooling support for\n> inline assembly and foreign function calls prevented developers from\n> validating \\texttt{unsafe} code, and differences between Rust and other\n> languages made foreign functions difficult to encapsulate. Verification\n> tools were underused, and developers rarely audited their dependencies. Our\n> results indicate a pressing need for production-ready tools that can\n> validate the most frequently used \\texttt{unsafe} features.\n\nComments:| 12 pages with references, preprint  \n---|---  \nSubjects:| Software Engineering (cs.SE)  \nACM classes:| D.2  \nCite as:| arXiv:2404.02230 [cs.SE]  \n(or arXiv:2404.02230v1 [cs.SE] for this version)  \nhttps://doi.org/10.48550/arXiv.2404.02230arXiv-issued DOI via DataCite  \n  \n## Submission history\n\nFrom: Ian McCormack [view email] [v1] Tue, 2 Apr 2024 18:36:21 UTC (139 KB)\n\nFull-text links:\n\n## Access Paper:\n\nView a PDF of the paper titled \"Against the Void\": An Interview and Survey\nStudy on How Rust Developers Use Unsafe Code, by Ian McCormack and 5 other\nauthors\n\n  * View PDF\n  * HTML (experimental)\n  * TeX Source\n  * Other Formats\n\nview license\n\nCurrent browse context:\n\ncs.SE\n\n< prev | next >\n\nnew | recent | 2404\n\nChange to browse by:\n\ncs\n\n### References & Citations\n\n  * NASA ADS\n  * Google Scholar\n  * Semantic Scholar\n\na export BibTeX citation Loading...\n\n## BibTeX formatted citation\n\n\u00d7\n\nData provided by:\n\n### Bookmark\n\n# Bibliographic and Citation Tools\n\nBibliographic Explorer (What is the Explorer?)\n\nLitmaps (What is Litmaps?)\n\nscite Smart Citations (What are Smart Citations?)\n\n# Code, Data and Media Associated with this Article\n\nCatalyzeX Code Finder for Papers (What is CatalyzeX?)\n\nDagsHub (What is DagsHub?)\n\nGotit.pub (What is GotitPub?)\n\nPapers with Code (What is Papers with Code?)\n\nScienceCast (What is ScienceCast?)\n\n# Demos\n\nReplicate (What is Replicate?)\n\nHugging Face Spaces (What is Spaces?)\n\nTXYZ.AI (What is TXYZ.AI?)\n\n# Recommenders and Search Tools\n\nInfluence Flower (What are Influence Flowers?)\n\nConnected Papers (What is Connected Papers?)\n\nCORE Recommender (What is CORE?)\n\n  * Author\n  * Venue\n  * Institution\n  * Topic\n\n# arXivLabs: experimental projects with community collaborators\n\narXivLabs is a framework that allows collaborators to develop and share new\narXiv features directly on our website.\n\nBoth individuals and organizations that work with arXivLabs have embraced and\naccepted our values of openness, community, excellence, and user data privacy.\narXiv is committed to these values and only works with partners that adhere to\nthem.\n\nHave an idea for a project that will add value for arXiv's community? Learn\nmore about arXivLabs.\n\nWhich authors of this paper are endorsers? | Disable MathJax (What is MathJax?)\n\n  * About\n  * Help\n\n  * Contact\n  * Subscribe\n\n  * Copyright\n  * Privacy Policy\n\n  * Web Accessibility Assistance\n  * arXiv Operational Status Get status notifications via email or slack\n\n", "frontpage": false}
