{"aid": "40067162", "title": "Comparing the Popover API and the <dialog> element", "url": "https://blog.logrocket.com/comparing-popover-api-dialog-element/", "domain": "logrocket.com", "votes": 1, "user": "ssernikk", "posted_at": "2024-04-17 16:43:48", "comments": 0, "source_title": "Comparing the Popover API and the <dialog> element", "source_text": "Comparing the Popover API and the <dialog> element - LogRocket Blog\n\n###### Advisory boards aren\u2019t only for executives. Join the LogRocket Content\nAdvisory Board today \u2192\n\n  * Blog\n\n    * Dev\n    * Product Management\n    * UX Design\n    * Podcast\n  * Features\n  * Solutions\n\n    * Solve User-Reported Issues\n    * Find Issues Faster\n    * Optimize Conversion and Adoption\n\n  * Start Monitoring for Free\n  * Sign In\n\n2023-09-14\n\n3343\n\n#html\n\nRahul Chhodde\n\n177974\n\n109\n\nSep 14, 2023 \u22c5 11 min read\n\n# Comparing the Popover API and the <dialog> element\n\nRahul Chhodde I'm a software developer with over seven years of experience in\ndifferent web technologies.\n\nTable of contents\n\n  * Understanding how dialogs work\n\n  * Diving into the HTMLDialogElement API\n\n  * Understanding how popovers work\n\n  * Exploring the Popover API\n\n  * When to use dialogs vs. popovers\n\n  * Checking browser support for the Popover and HTMLDialogElement APIs\n\n  * Conclusion\n\nIntroducing Galileo AI\n\nLogRocket\u2019s Galileo AI watches every session, surfacing impactful user\nstruggle and key behavior patterns.\n\nREAD THE BLOG POST\n\n## See how LogRocket's AI-powered error tracking works\n\n### no signup required\n\nCheck it out\n\nclose this \u2715\n\nOne of the most recent additions to web standards is the Popover API, which\nappears somewhat similar to the HTMLDialogElement API. In certain instances,\nthe distinction between these two can be rather unclear, making it confusing\nfor developers to choose the right one for a given task.\n\nThis article aims to address the key similarities and differences between the\nPopover and HTMLDialogElement APIs. We will briefly describe each API, cover\nsome of their different use cases, implement the APIs to create some common\nutilities seen on the web, and discuss when to use each API.\n\n## Understanding how dialogs work\n\nA dialog UI pattern can serve as a means to display information to users and\ngather their input. \u201cDialog\u201d here describes the communication process where\nthe app requests user input using this particular element. The user may need\nto respond before proceeding with the app, or they can choose to dismiss the\ndialog.\n\nTo craft dialogs that are semantically rich and accessible for the web, the\nHTML standard supports the HTMLDialogElement API. This API enables the\ncreation of purposeful dialogs with improved accessibility.\n\nThe <dialog> element provided by the API is specifically designed for\ncomponents that require user interaction or input, and it can operate in both\nmodal and non-modal manners.\n\n### Exploring modal dialogs\n\nIn a modal dialog, users need to handle the dialog first before they can\ncontinue using the app. This means they can\u2019t do anything else in the app\nuntil they close or cancel the dialog.\n\nModal dialogs are usually used for important tasks like confirming actions or\nshowing errors, which need the user\u2019s complete focus.\n\nA common example of modal dialogs is a newsletter subscription prompt. The\nmodal behavior is particularly useful in this case for grabbing the user\u2019s\nfull attention, as shown in this example from Dribbble:\n\nAnother excellent example, though less common, is when a website presents a\ndialog asking the user for permission to show ads. Here\u2019s an example from the\nHow-To Geek website:\n\nIn this scenario, the user\u2019s access to the app or website is restricted until\nthey include it in their ad blocker program\u2019s whitelist.\n\n### Exploring non-modal dialogs\n\nNon-modal dialogs allow users to keep using the app even when the dialog is\nopen. This makes them less bothersome for users, but it also means they might\nnot immediately notice the dialog.\n\nThey\u2019re typically used for features like tooltips or menus that don\u2019t need all\nof the user\u2019s focus.\n\n## Over 200k developers use LogRocket to create better digital experiences\n\nLearn more \u2192\n\nInterestingly, dialogs with non-modal behavior are frequently categorized as\npopovers. This is where the distinction between dialogs and popovers starts to\nblur, making it difficult for developers to choose between the two.\n\nFor a clearer perspective, you may think of the dialog vs. popover debate as\nmodals vs. non-modals.\n\nA frequent situation where non-modal dialogs come into play is with the\ncookie-consent banners often seen on websites and apps these days:\n\nThe recommended way to create and control dialogs in HTML is to use the\n<dialog> element in conjunction with its HTMLDialogElement API. This approach\ngives the element an inherent dialog role, which allows the browser to\naccurately interpret the element and provide appropriate accessibility\nfeatures.\n\nIn the upcoming segment, we will go over the specifics of the dialog API and\nsee how to use it to create comprehensive and functional dialogs.\n\n## Diving into the HTMLDialogElement API\n\nConstructing a functional HTML dialog requires a solid understanding of how to\nstructure the markup correctly and utilize the HTMLDialogElement API for\nvarious dialog-related tasks.\n\nFurthermore, there are certain new CSS features available that can be employed\nto style, optimize, and enhance accessibility for HTML dialogs.\n\nWe will address the process of declaring a dialog through markup, adding\nfunctionality to it using JavaScript, and enhancing its appearance with CSS,\none step at a time.\n\n### Structuring your markup for dialogs\n\nWhen you add the <dialog> element to your HTML, it will not appear immediately\non the frontend as a proper dialog. To make it visible, you can add the open\nattribute to it:\n\n    \n    \n    <dialog id=\"dialog\" open> <p>...</p> </dialog>\n\nThe result, which you can see below, doesn\u2019t quite look like a dialog at the\nmoment. It currently operates as a non-modal dialog and also lacks a close\nbutton:\n\nTo enhance the functionality of this dialog, you can employ the\nHTMLDialogElement API to programmatically manage its display, closure, and\ninteraction using JavaScript.\n\n### Leveraging JavaScript with the HTMLDialogElement API\n\nWe can create both modal and non-modal dialogs using the JavaScript\ncapabilities of the HTMLDialogElement API. The JavaScript support within this\nAPI offers various methods, events, and properties to effectively handle the\nbehaviors and functionalities of the dialog element.\n\nHere are some JavaScript methods supported by the API to manage different\nstates of the dialog element:\n\n  * show(): Opens the dialog non-modally\n  * showModal(): Opens the dialog modally\n  * close(): Closes the dialog and optionally returns a value to the caller\n\nIt also supports specific events that you can listen to whenever the dialog\ncloses:\n\n  * The close event fires when the dialog closes\n  * The cancel event fires when the user cancels the dialog by pressing the Escape key\n\nSome instance properties are also available with the API, which are listed\nbelow:\n\n  * open: A boolean value that indicates whether the dialog is open (true) or closed (false)\n  * returnValue: A property that can be used to set or get the return value for the dialog element\n\n### Styling your dialog with CSS pseudo-selectors\n\nA modal dialog is supposed to perform critical tasks and therefore appears on\nthe top layer of the stacking context, which means you can\u2019t manage its\nstacking using the CSS z-index property. Instead, it will always appear on top\nof every element that is not in the top layer.\n\nNote that the stacking of the elements in the top layer is managed in last-in,\nfirst-out (LIFO) order. This means that the last element that is added to the\ntop layer will be the topmost element.\n\nOn the other hand, non-modal dialogs let you control stacking with CSS. The\ncomparison is shown in the example below:\n\nWith the HTMLDialogElement API, we have access to dialog-specific CSS pseudo-\nselectors, which can be used to apply styles or target specific dialog\ncomponents.\n\nWhen a dialog behaves modally, it should display a full-screen click trap in\nthe background. This indicates that the rest of the application is currently\ninactive.\n\nThe ::backdrop pseudo-element, which is also used in user-agent styles to\nprovide a pre-existing default click trap for modal dialogs, can be used to\ncustomize the click trap appearance:\n\n    \n    \n    .my-modal::backdrop { background: hsl(240deg 50% 50% / 25%); }\n\nWe can also use the :modal CSS class to ensure that the dialog we are\ntargeting exhibits modal behavior and style it accordingly:\n\n    \n    \n    .my-dialog:modal { ... }\n\n### Implementing the HTMLDialogElement API\n\nYou can start implementing the HTMLDialogElement API by getting a reference to\na button element that triggers the dialog. When the user interacts with the\nbutton, you can execute the Dialog.show() method. This will cause the dialog\nto show up when the button is clicked:\n\n    \n    \n    const openDialogBtn = document.querySelector(\"#open-dialog-btn\"); const dialog = document.querySelector(\"#dialog\"); openDialogBtn?.addEventListener(\"click\", () => { dialog?.show(); });\n\nAt this point, the dialog is non-modal, which means that the user can still\ninteract with the rest of the application while the dialog is open.\n\nIf you want to make the dialog modal, you can use the Dialog.showModal()\nmethod instead of Dialog.show(). This will cause the dialog to operate in a\nmodal behavior, which means that the user will not be able to interact with\nthe rest of the application until the dialog is closed:\n\n    \n    \n    openDialogBtn?.addEventListener(\"click\", () => { dialog?.showModal(); });\n\nClosing dialog elements can be readily achieved by utilizing Dialog.close(),\nas shown below. This method constitutes an explicit dismissal:\n\n    \n    \n    closeDialogBtn?.addEventListener(\"click\", () => { dialog?.close(); });\n\nSoft dismissal of dialogs is not natively supported by the HTMLDialogElement\nAPI. The Popover API provides a superior way to create non-modal dialogs with\nsoft dismissal capabilities.\n\nBoth triggering and dismissing, whether softly or explicitly, are much simpler\nusing the Popover API than the dialog API. We will discuss this topic further\nin the next section.\n\nHere is a demonstration of both modal and non-modal dialogs, implemented based\non the explanations given earlier:\n\nThe modal dialog is neatly centered thanks to the applied user agent styles.\nThe non-modal counterpart, on the other hand, does not quite achieve centered\nalignment and is visible around its anchor or trigger.\n\nFeel free to fork this code, try to fix the non-modal positioning, or create\nyour own variations of dialog elements.\n\nAs we previously discussed, dialog elements are suitable for presenting users\nwith important action-related information. However, for less crucial\nscenarios, we now have the newly introduced Popover API. Let\u2019s explore it in\nthe next section.\n\n## Understanding how popovers work\n\nA popover can be any transient window-like component that emerges when\ntriggered within a webpage or app. Usually, this happens when a user interacts\nwith an element that serves as the trigger for the popover. It is typically\nused to provide additional information or functionality to the user.\n\nThe Popover API provides the advantage of utilizing in-browser features to\ncreate accessible and native popover utilities. We will discuss more about the\nAPI later on.\n\nPopovers exhibit non-modal behavior and are not suitable for elements\ndisplaying modal properties. They are frequently used for tasks such as:\n\n  * Displaying tooltips or help text\n  * Opening action or context menus featuring a range of choices\n  * Initiating non-modal dialogs for actions like toast notifications, hover cards, fly-outs, etc.\n  * Providing context-related information during application tours or onboarding processes\n\nTooltips that appear when hovering over buttons or icons, or are added when a\nnew feature is introduced, are good examples of non-modal popovers. These\nunobtrusive popovers provide quick insights without disrupting the user\u2019s\nflow, like this Unsplash popover shown below:\n\nAnother practical use case of popovers is providing context-specific\ninformation. For instance, when a user clicks on a term or phrase within an\narticle, a popover might appear, offering a brief definition or explanation.\n\nThese popovers are designed to enhance the user\u2019s understanding without taking\nthem away from the main content, like this example from the Grammarly website:\n\nNow, let\u2019s delve further into the Popover API, exploring its capabilities and\nfunctionalities in more detail.\n\n## Exploring the Popover API\n\nTo handle non-modal behavior beyond dialogs in web browsers, the HTML standard\nhas introduced popover attributes with the corresponding Popover API.\n\nUnlike the HTMLDialogElement API, the Popover API doesn\u2019t involve creating a\nnew element tag in the markup. Instead, it utilizes different attributes that\ncan be added to various elements. These attributes establish a relationship\nbetween the popover and its triggering element.\n\nThe HTMLDialogElement API is specifically linked to dialogs. In contrast, the\nPopover API can be attached to any element to provide it with a non-modal\nbehavior.\n\nThis new approach may eliminate the need for an external library in the future\nto achieve non-modal behavior. It also enhances the user experience by\nincorporating native semantics and providing relevant information in a non-\nmodal manner.\n\nBy default, popovers created using this approach have a light-dismissing\nbehavior that can also be controlled through API features.\n\nAs mentioned before, popovers exhibit non-modal behavior. Popovers generated\nusing the Popover API strictly adhere to this non-modal behavior and are\nplaced at the top-most layer in the stacking context. This implies that they\nwill consistently appear above other elements, irrespective of their z-index\nproperty.\n\n### Using the popover attribute\n\nThe popover attribute is a global attribute that designates an element as a\npopover element. It can take one of two values: auto or manual.\n\nThe default value of this attribute is auto, which indicates that the popover\nwill automatically display when the user interacts with the triggering\nelement.\n\nThe manual value indicates that the popover will only be shown when the user\nexplicitly clicks on the triggering component.\n\n### Using the popovertarget attribute\n\nThe popovertarget attribute is used to specify which element will trigger the\npopover. The ID of the trigger element must be in the same tree as the element\nwith the popover attribute. The popover will be displayed relative to the\ntriggering element, like so:\n\n### Using the popovertargetaction attribute\n\nThe popovertargetaction attribute is used to specify the action that will be\nperformed when the popover is triggered. It can take one of three values:\n\n  * show \u2014 Interacting with the triggering element will display the popover\n  * hide \u2014 Interacting with the triggering element will hide the popover\n  * toggle \u2014 Interacting with the triggering element will display the popover if it is hidden and hide it if it is displayed\n\nBelow, you can interact with two triggering elements. The Show popover button\nuses the show value, while the Hide popover button uses the hide value:\n\n### Exploring JavaScript support in the Popover API\n\nIn terms of JavaScript support, there are three instance properties that prove\nuseful for acquiring the attribute values discussed earlier:\n\n  * popover \u2014 Facilitates retrieving and setting an element\u2019s popover state using JavaScript, which can be either auto or manual. It serves not only for functional purposes but also for feature detection, reflecting the value of the popover global HTML attribute\n  * popoverTargetElement \u2014 Enable getting and setting the popover element controlled by the corresponding control triggers. They correspond to the JavaScript counterparts of the popovertarget HTML attribute\n  * popoverTargetAction \u2014 Employed to obtain and modify the action to be executed (hide, show, or toggle) on the popover element under the control of the respective button. They mirror the value of the popovertargetaction HTML attribute\n\nIn addition, the API supports three instance methods:\n\n  * hidePopover() \u2014 Conceals a popover element by removing it from the top layer and applying the display: none style\n  * showPopover() \u2014 Reveals a popover element by adding it to the top layer\n  * togglePopover() \u2014 Toggles a popover element between its visible and hidden states\n\nFurthermore, two instance events are available for use with the API:\n\n  * beforetoggle \u2014 Triggered just prior to a popover element\u2019s state transition between showing and being hidden, or vice versa\n  * toggle \u2014 Fired just after a popover element\u2019s state changes between showing and being hidden, or vice versa\n\n### The popover-specific CSS\n\nPopover elements \u2014 specifically, those that use the popover attribute \u2014 are\nintended to be displayed above other elements. Thus, like modal dialog\nelements, they are placed in the top layer of the stacking context.\n\nSince we\u2019ve previously addressed the finer points of stacking with top-layer\nelements, there\u2019s no need to reiterate them here.\n\nWith the Popover API, we have the :popover-open CSS pseudo-class that enables\nyou to target a popover element when it\u2019s in an open state:\n\n    \n    \n    .tooltip:popover-open { /* Do something */ }\n\nAs popover elements reside at the topmost level of the stacking context, they\nalso support the ::backdrop pseudo-element. This feature can be highly\nadvantageous for emulating effects such as lightbox image galleries,\nintroduction tooltips during app tours, walkthroughs, onboarding, and more:\n\n    \n    \n    .lightbox::backdrop { /* Do something */ }\n\n### Implementing the Popover API\n\nThe Popover API imparts popover behavior through its attributes. However,\nunlike the HTMLDialogElement API, it does not inherently include the\nassociated semantics. Thus, it becomes your responsibility to incorporate\nsemantics into your popovers by utilizing distinct role attributes.\n\nFor example, when creating a custom <select> list box, you would include the\nrole attribute with the value listbox to indicate that the element functions\nas a list box. You should also apply appropriate ARIA states and properties,\nwhich will signal the browser to identify it as such:\n\n    \n    \n    <div role=\"listbox\" aria-labelledby=\"...\" aria-activedescendant=\"...\" popover> ... </div>\n\nAlternatively, if an element possesses sufficient inherent semantics, you can\nsimply add the popover attribute. Let\u2019s take the <dialog> element as an\nexample to illustrate how easily we can trigger and dismiss it using the\nPopover API.\n\nWe can easily establish a functional dialog using the aforementioned popover\nattributes, as discussed earlier, to mimic a cookie-consent box:\n\n    \n    \n    <dialog id=\"cookie-box\" popover=\"manual\"> ... <button id=\"accept-cookies\" popovertarget=\"cookie-box\" popovertargetaction=\"hide\">Accept Cookies</button> <button id=\"close-cookie-box\" popovertarget=\"cookie-box\" popovertargetaction=\"hide\">Close</button> </dialog> <button id=\"open-cookie-box\" popovertarget=\"cookie-box\" popovertargetaction=\"show\">Open Cookie box</button>\n\nAfter tweaking the position and appearance of the dialog element with CSS, we\nare good to add more functionality to our cookie-consent box. Check how\nflawlessly the trigger and dismissal of the dialog popover work in the demo\nbelow:\n\nTypically, websites display the cookie-consent box in an initially opened\nstate. You can achieve this in JavaScript by obtaining a reference to the\ndialog box and subsequently utilizing the Popover.showPopover() method:\n\n    \n    \n    const cookieBox = document.querySelector(\"#cookie-box\"); cookieBox.showPopover();\n\nYou may now take it a step further by defining actions and setting up event\nlisteners to incorporate additional functionalities into the cookie-consent\nbox. Here\u2019s how the final demonstration looks:\n\nAs an assignment, consider expanding on this example to create a comprehensive\ncookie-consent feature.\n\nWith your current understanding of dialogs and popovers, you may venture into\ndeveloping something new too. Some ideas include a basic image lightbox, a\nsimple tooltip, or any other idea that comes to mind when considering a\npopover-like interaction.\n\n## When to use dialogs vs. popovers\n\nYou now possess a sufficient technical understanding of dialogs and popovers.\nHowever, there are a few additional non-technical aspects you should consider\nwhen choosing between dialogs and popovers. Take the following factors into\naccount:\n\n  * User context: If a user is already engaged in a complex task, a dialog may cause less disruption than a popover. However, if the user is starting a task, a popover may be a better way to provide additional information without interrupting their flow\n  * User experience: If the user is acquainted with the task or interaction, a popover might suffice. Conversely, if the user is unfamiliar with the task or interaction, a dialog could be a superior method for delivering lucid instructions and gathering essential input\n  * Platform: Certain platforms, such as mobile devices, are more sensitive to modal windows. In such cases, opting for a popover over a dialog might be a better idea\n\nKeeping these in mind can help you determine whether a dialog or popover is\nbest for your needs.\n\n## Checking browser support for the Popover and HTMLDialogElement APIs\n\nThe Popover API is presently in an experimental phase across most browsers,\nexcept for Chrome 116+ and the Safari 17 technical preview. However, it is\nexpected to be available in most major browsers soon. You can refer to CanIUse\nfor more details about its support.\n\nThe HTMLDialogElement API is now well-supported and available in nearly all\nmodern web browsers. You can find additional information about support for\n<dialog> elements on CanIUse.\n\n## Conclusion\n\nThe difference between dialogs and popovers can be subtle and challenging to\ndiscern. In this guide, we talked about both their differences and\nsimilarities. For example, non-modal dialogs can work like popovers, and the\nPopover API can be used flexibly with <dialog> elements.\n\nWe also explored some UI patterns that are similar to these two concepts and\ncompleted some coding exercises. As the popover feature is still in its early\nstages, it may continue to evolve, potentially making the distinction between\nthese two APIs clearer.\n\nI hope you found the explanations helpful. Feel free to share any thoughts,\nsuggestions, or ideas you might have.\n\n## Get set up with LogRocket's modern error tracking in minutes:\n\n  1. Visit https://logrocket.com/signup/ to get an app ID\n  2. Install LogRocket via npm or script tag. LogRocket.init() must be called client-side, not server-side\n\n     * npm\n     * Script tag\n    \n        $ npm i --save logrocket // Code: import LogRocket from 'logrocket'; LogRocket.init('app/id');\n    \n        // Add to your HTML: <script src=\"https://cdn.lr-ingest.com/LogRocket.min.js\"></script> <script>window.LogRocket && window.LogRocket.init('app/id');</script>\n\n  3. (Optional) Install plugins for deeper integrations with your stack:\n\n     * Redux middleware\n     * NgRx middleware\n     * Vuex plugin\n\nGet started now\n\n### Share this:\n\n  * Click to share on Twitter (Opens in new window)\n  * Click to share on Reddit (Opens in new window)\n  * Click to share on LinkedIn (Opens in new window)\n  * Click to share on Facebook (Opens in new window)\n\n  * #html\n\n## Stop guessing about your digital experience with LogRocket\n\nGet started for free\n\n#### Recent posts:\n\n#### Using aoi.js to build a bot on Discord\n\nExplore how the aoi.js library makes it easy to create Discord bots with\nuseful functionalities for frontend applications.\n\nRahul Padalkar\n\nApr 17, 2024 \u22c5 9 min read\n\n#### Web Components adoption guide: Overview, examples, and alternatives\n\nEvaluate Web Components, a set of standards that allow you to create custom\nHTML tags for more reusable, manageable code.\n\nElijah Asaolu\n\nApr 16, 2024 \u22c5 11 min read\n\n#### Using AWS Lambda and CloudFront to optimize image handling\n\nLeverage services like AWS Lambda, CloudFront, and S3 to handle images more\neffectively, optimizing performance and providing a better UX.\n\nNitish Sharma\n\nApr 12, 2024 \u22c5 12 min read\n\n#### Building web-based terminal components with Termino.js\n\nExplore Termino.js, an open source library for integrating web-based terminals\ninto applications, in this introduction article.\n\nChibuike Nwachukwu\n\nApr 11, 2024 \u22c5 6 min read\n\nView all posts\n\n### Leave a ReplyCancel reply\n\n\u00d7\n\nHey there, want to help make our blog better?\n\nLoading Comments...\n\n", "frontpage": false}
