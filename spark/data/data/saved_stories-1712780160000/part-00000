{"aid": "39990963", "title": "How I Use LLMs to Program", "url": "https://probablydance.com/2024/04/09/how-i-use-llms-to-program/", "domain": "probablydance.com", "votes": 3, "user": "ibobev", "posted_at": "2024-04-10 14:14:05", "comments": 0, "source_title": "How I use LLMs to program", "source_text": "How I use LLMs to program | Probably Dance\n\n# Probably Dance\n\nI can program and like games\n\n### How I use LLMs to program\n\n#### by Malte Skarupke\n\nStudies have shown that LLMs help novice programmers more than experienced\nprogrammers. This matches my experience. At work I see that interns or new\nhires have some LLM window open almost all the time. I use them maybe once a\nweek. But you could say the same thing about Stack Overflow. I used it all the\ntime when I started programming. Now I use it occasionally. While it\u2019s easy to\npoint at their obvious issues, I think they are also clearly a net-positive on\naverage. So how do LLMs help me?\n\n## Big plus: Languages that I don\u2019t use as often\n\nI don\u2019t often write SQL statements. I can obviously write the simple ones, but\nSQL is a language that has all the features you could ever possibly want, and\nI don\u2019t know how to use them and don\u2019t know how to google for them. So I ask a\nLLM. Similarly for javascript/css/html programming. I used to hate doing web\nfrontend work, now it\u2019s not so bad because LLMs can help me get out of the\ntricky edge cases.\n\nI have also used LLMs to translate functionality from one language to another.\nE.g. if I know what a function is called in C++ but I can\u2019t find an equivalent\none in the standard library of another language, an LLM will often do a decent\nfirst pass of rewriting the C++ function in the other language.\n\n## Small minus: The code is overly generic\n\nLLMs should probably ask for more information more often. At the moment\nthey\u2019re a highly motivated programmer who doesn\u2019t know enough but who can\nprovide you with a piece of code that should work in most contexts. It won\u2019t\ntell you that though, it\u2019ll pretend that it gave you a good solution.\n\nSo for example when I ask it \u201cI have this complicated SQL statement but I need\nto bring in information from one more table\u201d it\u2019ll give me back a nested\nselect statement. I have to prompt it again and ask \u201cisn\u2019t there a way to do\nthis with a join?\u201d before it tells me that there is a kind of JOIN statement\nthat does exactly what I want. Similarly for javascript it likes to just\nregister global callbacks that listen to every mouseenter event on any element\nin the page.\n\nThis works fine for most languages. It leads to problems in strict languages\nlike Rust. When someone asks me for help in LLM-assisted Rust code, usually we\nfirst have to ask \u201cbut what is this actually trying to do\u201d a few times to undo\nthe unnecessary genericness (RefCell) of the LLM code.\n\nIt also is going to lead to problems in the long term where you have a lot of\ncode that\u2019s overly broad. When you have too many pieces of code that register\nbroad callbacks \u201cjust in case\u201d or do nested SQL statements \u201cjust in case\u201d you\ncan\u2019t build a mental model of what actually happens in your code base.\n\n## Neutral: It can fix its own mistakes\n\nOne thing I keep on forgetting to do is to ask it to fix its own mistakes.\nAfter writing the above, I realized I could just ask it how to avoid the\nglobal javascript callbacks. It told me about \u201cmutation observers,\u201d which are\na kind of global observer that allow me to attach my other observers to only\nthe nodes that I want. Which is better, maybe?\n\nIn general I find that you can ask it a few times \u201cthis part bothers me, can\nyou do it better?\u201d to get better quality. I wish it just did this on its own,\nbut it is good that it\u2019s happy to rewrite it for you as often as you ask.\n(though if you ask three times and there is no improvement, that means the LLM\njust can\u2019t do what you\u2019re asking)\n\n## Big plus: It can help you get unstuck\n\nLLMs are undaunted. You can ask them any tricky question and they\u2019ll provide\nan answer. Sometimes the answer is not bad and you immediately see how to make\nprogress. Often the answer is pretty bad, but that doesn\u2019t mean it\u2019s useless.\nIt still helps in at least two ways:\n\n  * Rubber duck debugging. LLMs are pretty good for this. Often it helps me to just explain the problem, because it forces me to actually clearly state the problem. Also if the LLM comes back with an answer that\u2019s totally unrelated, I have to go back and be even more clear. And then once I can clearly state the problem, the solution sometimes presents itself.\n  * They provide another perspective. It\u2019s not always a great perspective, but when you\u2019re solving tricky problems you have to look at them from different angles, and LLMs are great at providing more angles. Even if I don\u2019t go with any of the ideas that the LLM provided, it often helps me think of a good approach. I especially appreciate when the LLM provides me with something that\u2019s simpler than what I thought of, which it does surprisingly often.\n\n## Small minus: It does not hold back even when producing garbage\n\nE.g. there is this infamous example:\n\n> ceiling is being raised. cursor's copilot helped us write \"superhuman code\"\n> for a critical feature. We can read this code, but VERY few engineers out\n> there could write it from scratch.\n>\n> Took lots of convincing too. \"come on, this must be possible, try harder\".\n> and obviously- done... pic.twitter.com/rPHOUFbEyw\n>\n> \u2014 Atai Barkai (@ataiiam) March 5, 2024\n\nThis is mostly nonsense where they wrote something that is much too\ncomplicated and then used AI to do... something with it. Any experienced\nprogrammer would have stopped halfway through writing this and thought \u201cno,\nthis is getting too messy, there must be another way.\u201d But an AI will happily\nwrite this for you, and then you have to unhappily live with it.\n\n## Big plus: It knows all algorithms and libraries\n\nEven the first early version of ChatGPT, which produced terrible code, was\nimpressive when it came to one area: It understood what you wanted in a way\nthat no search engine could. LLMs have only gotten better there. I love that I\ncan ask \u201cI have a problem that\u2019s shaped like this and it feels like there\nshould be a data structure or algorithm that could help here\u201d and it\u2019ll\nunderstand what I want and point me towards relevant algorithms. The first\nanswer is almost never what I want, but I also love that I can have a\nconversation. It usually goes like this:\n\n> me: I have the following problem: ... What algorithm or data structure can\n> help with that?\n>\n> LLM: Have you considered X or Y?\n>\n> me: Well yes, obviously those are the first things I thought of, but they\n> don\u2019t work because of this part of the problem that I just told you about.\n>\n> LLM: Oh I\u2019m so sorry, you\u2019re right. How about Z then?\n>\n> me: I had heard about Z before but don\u2019t really know about it. I thought it\n> had the following problem: ...?\n>\n> LLM: Oh that can be overcome by doing Z* or with this other approach\n\nAnd back and forth like that a few times. I love that it just knows this stuff\nand can point me at all the interesting things that exist. I also love that\nsometimes the first answer is \u201cno there is no good algorithm here because this\nis actually really hard and you probably want to just go with this simple,\npartial solution that\u2019s at least easy to understand.\u201d\n\n## Small minus: It read the experts but it\u2019s not an expert itself\n\nFor any algorithm there is the simple straightforward thing that everyone\nuses, then there is slightly more complicated solution that is useful\nsometimes, and then there are a dozen really complicated solutions that only\nexist because someone needed to publish a paper and they found one specialized\nbenchmark where their solution artificially looks good. Nobody actually uses\nthem.\n\nMuch of the value of experts is that they can tell you which things you have\nto pay attention to and which things you can safely ignore. LLMs can not be\ntrusted when it comes to that. They will believe the claims of the paper\nauthors and confidently tell you all the benefits that certain methods have.\nIf you believe the LLM, you\u2019ll have to spend a lot of time, possibly days,\nrediscovering all the reasons why nobody is using this algorithm in practice.\n\nThe LLM makes this mistake in all directions. It will never tell you \u201cI don\u2019t\nknow\u201d or \u201cI\u2019m not confident.\u201d Instead it will tell you confidently that the\nsimple solution is good when you should use something more complicated, and it\nwill also confidently tell you that the complicated solution is good when you\nshould never be using it. You just have to take that into account.\n\n## Big plus: It\u2019s competent for simple tasks\n\nThis is obvious but it\u2019s worth pointing out. The output of LLMs is usually\nhigh quality. If you ask it to explain, say \u201chow do heat pumps work?\u201d and\nmaybe ask some follow up question, it\u2019ll do a better job than 99% of the\npopulation. This is also true of code. Of course most of the population\ndoesn\u2019t program so that 99% number is irrelevant, but for simple problems it\ndoes a better job than many professional programmers would. Sure, there will\nbe bugs and you may have to adapt the code (depending on how you asked) but\nit\u2019ll be competent. LLMs would pass coding interviews.\n\nAnd while I could usually nitpick and find improvements, there are a lot of\nplaces where you have to solve the kinds of simple problems that LLMs are good\nat solving, and where it\u2019s fine to use code at LLM quality, unmodified.\n\n## Small minus: I have no idea how to use LLMs for maintenance\n\nUnfortunately I don\u2019t spend most of my days writing code. I spend most of my\ndays maintaining code. Meaning debugging and refactoring and adding small\nfeatures to existing programs. LLMs just don\u2019t fit into that. Maybe that\u2019s\njust expected because it\u2019s \u201cgenerative AI\u201d and if I don\u2019t need to generate\nmuch code, it can\u2019t help.\n\nIt sure would be nice though if I could point it at a directory of files and\nsay \u201cI need to change the following types, which will change some interfaces.\nCan you update all necessary files and point out any place where I need to pay\nattention?\u201d But I currently would have no confidence that it would do a good\njob at that.\n\n## You need to be more of a critic, editor and reviewer\n\nSo when you use LLMs to generate new code, you mostly need to be a critic with\ngood taste. You need to know when the quality of the LLM is appropriate. When\nis it OK to use overly generic code? Can you voice what bothers you and ask it\nto do better? Usually you have to ask the question \u201cbut what do we actually\nneed to do here\u201d a few times.\n\nWhen you ask for advice on algorithms, the LLM will enthusiastically tell you\nthat something is a great idea, and when you tell it that it\u2019s not, it will\nenthusiastically tell you that you\u2019re right and that it was a terrible idea.\nSo you can\u2019t rely on it for critical thinking. You can only use it to\nenumerate options.\n\nWhen working with junior devs who use LLMs, code review is slightly easier\nbecause on average they write better code, but there are new failure modes.\nThey don\u2019t have the necessary experience to know when to accept the output of\nthe LLM and when to doubt it. You need to watch out even more for code that\nwas written without a mental model of how the existing code works.\n\nOn average LLMs are a clear positive. They\u2019re not good enough yet where\nthey\u2019ll make you hugely more productive, but they\u2019re already good enough where\nyou\u2019d miss out if you weren\u2019t at least using them occasionally. Use one of the\npaid options, they\u2019re much better than the free options. I hear Claude Opus is\ncurrently best. (I haven\u2019t done comparisons) You just have to get experience\nwith where they\u2019re good and where they\u2019re bad, and I\u2019m hoping that sharing my\nexperience can help you with that.\n\n### Share this:\n\n  * Twitter\n  * Facebook\n\nLike Loading...\n\n### Related\n\nLearning D Part 1: IDE and LibrariesOctober 3, 2012In \"Programming\"\n\nIdeas for a Programming LanguageNovember 2, 2014In \"Programming\"\n\nThe Curious Failure of Functional Programming for Parallel\nApplicationsSeptember 7, 2014In \"Programming\"\n\nPublished: April 9, 2024\n\nFiled Under: Programming\n\nTags: ai : artificial-intelligence : chatgpt : LLM\n\n### Leave a comment Cancel reply\n\nThis site uses Akismet to reduce spam. Learn how your comment data is\nprocessed.\n\n\u00ab Previous Post\n\n#### Recent Posts\n\n  * How I use LLMs to program\n  * Transform Matrices are Great and You Should Understand Them\n  * Two Kids Put Me on a Two Sleep Schedule\n  * Beautiful Branchless Binary Search\n  * Fine-grained Locking with Two-Bit Mutexes\n\n#### Archives\n\n  * April 2024\n  * October 2023\n  * September 2023\n  * April 2023\n  * December 2022\n  * September 2022\n  * June 2022\n  * February 2022\n  * January 2022\n  * October 2021\n  * July 2021\n  * April 2021\n  * January 2021\n  * November 2020\n  * October 2020\n  * August 2020\n  * July 2020\n  * June 2020\n  * May 2020\n  * April 2020\n  * March 2020\n  * January 2020\n  * December 2019\n  * September 2019\n  * August 2019\n  * June 2019\n  * April 2019\n  * March 2019\n  * June 2018\n  * May 2018\n  * April 2018\n  * January 2018\n  * December 2017\n  * November 2017\n  * October 2017\n  * September 2017\n  * August 2017\n  * February 2017\n  * January 2017\n  * December 2016\n  * November 2016\n  * June 2016\n  * April 2016\n  * March 2016\n  * February 2016\n  * December 2015\n  * September 2015\n  * July 2015\n  * June 2015\n  * May 2015\n  * February 2015\n  * January 2015\n  * December 2014\n  * November 2014\n  * October 2014\n  * September 2014\n  * August 2014\n  * June 2014\n  * May 2014\n  * April 2014\n  * March 2014\n  * February 2014\n  * January 2014\n  * October 2013\n  * September 2013\n  * August 2013\n  * May 2013\n  * February 2013\n  * January 2013\n  * December 2012\n  * November 2012\n  * October 2012\n  * August 2012\n  * July 2012\n  * April 2012\n  * March 2012\n  * February 2012\n  * January 2012\n  * October 2011\n  * September 2011\n  * August 2011\n  * July 2011\n  * June 2011\n  * May 2011\n\n#### Categories\n\n  * Children\n  * Games\n  * Links\n  * Math\n  * Politics and Economics\n  * Programming\n  * Uncategorized\n\n#### Meta\n\n  * Register\n  * Log in\n  * Entries feed\n  * Comments feed\n  * WordPress.com\n\nBlog at WordPress.com.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * Probably Dance\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * Probably Dance\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\n%d\n\n", "frontpage": false}
