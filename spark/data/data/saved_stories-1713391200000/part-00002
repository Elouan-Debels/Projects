{"aid": "40066502", "title": "Mapping parcel lockers with OpenStreetMap and DuckDB", "url": "https://honeycombmaps.com/blog/tutorial-mapping-parcel-lockers-with-osm-and-duckdb-part-1", "domain": "honeycombmaps.com", "votes": 2, "user": "fhk", "posted_at": "2024-04-17 15:58:25", "comments": 0, "source_title": "Tutorial: Mapping parcel lockers with OpenStreetMap and DuckDB (Part 1)", "source_text": "Tutorial: Mapping parcel lockers with OpenStreetMap and DuckDB (Part 1)\n\nHoneycomb Maps\n\n# Tutorial: Mapping parcel lockers with OpenStreetMap and DuckDB (Part 1)\n\n#### Table of contents\n\n  * Prologue: Explore Overture and OpenStreetMap as potential data sources\n  * Step 1: Download data from OpenStreetMap\n  * Step 2: Use DuckDB to convert GeoJSON data to table data for analysis\n  * Extend your analysis\n\nBy Carston Hernke \u00b7 April 11, 2024\n\nParcel lockers, which allow users to pick up (and often drop-off) packages at\nan automated kiosk, have grown in popularity in recent years. They offer\nbenefits for both customers and delivery companies:\n\n  * For customers, parcel lockers can be a convenient way to securely receive packages when they won't be home when a courier makes deliveries.\n  * For delivery companies, parcel lockers reduce costs by lowering the number of stops couriers need to make and reducing costs associated with undeliverable packages.\n\nWe recently posted an interactive Honeycomb Map of all of the parcel lockers\nin Berlin, Germany. Here is an embedded version of the map, which uses\nHoneycomb Data Explorer to allow you to filter the data by operator:\n\nThis tutorial (Part 1) will guide you through using OpenStreetMap and DuckDB\nto find and organize data about parcel lockers in Berlin. While the tutorial\nis focused on parcel lockers in Berlin, the techniques and data sources\ndescribed can be applied to many types of infrastructure worldwide.\n\nPart 2 (coming soon!) will show you how to use Honeycomb to build an\ninteractive map of this data.\n\n## Prologue: Explore Overture and OpenStreetMap as potential data sources\n\nWhen starting any data project, the initial step is often exploring what data\nis available. In this section, I describe how I investigated two open data\nsources - Overture Maps and OpenStreetMap. If you are just interested in how\nto fetch the parcel locker data, you can skip ahead to the next section.\n\nFor this project I was interested in public sources of parcel locker locations\nthat had licensing which allowed commercial reuse. Even though parcel locker\nlocations are by-definition public, none of the large locker operators in\nBerlin (DHL Packstation and Amazon) publish lists of their locker locations.\nRather than getting first-party data directly from operators, I decided to\nexplore public data sources.\n\n### Overture Maps\n\nThe first data source I explored was the Overture Maps Foundation. Overture\nMaps is a relatively new collaborative map data project with data contributed\nby partners including Meta, Amazon, and Microsoft.\n\nOverture\u2019s data consists of five different themes:\n\n  * Base land and water\n  * Administrative boundaries\n  * Buildings\n  * Places\n  * Transportation.\n\nI was hopeful parcel lockers would be part of the places theme, which includes\nPOIs like gas stations, grocery stores, and restaurants.\n\nOverture does not provide an easy-to-use interface for exploring their data.\nInstead, they publish very large files to object storage along with\ndocumentation to read them. The March 2024 release is located at\ns3://overturemaps-us-west-2/release/2024-03-12-alpha.0 and organized in a\nseries of parquet files.\n\nRather than downloading these files directly, I chose to use DuckDB running on\nmy Macbook to query the data. DuckDB runs locally on my computer, parsing\nqueries and then fetching only the data that is required from the remote\nsource. This means that, although the remote files are many gigabytes large,\nDuckDB will only read a small part of them.\n\nFirst, start the command-line (CLI) version of DuckDB:\n\n    \n    \n    # start duckdb from the macos terminal duckdb\n\nNote: The command to start the DuckDB CLI (command line interface) might be\nslightly different on your computer. Take a look at the DuckDB documentation\nfor more complete instructions. However, once you get the DuckDB CLI started,\nthe SQL commands used in the rest of the tutorial are universal.\n\nWith DuckDB running, run the following commands to set up the DuckDB instance\nto read the remote Overture data files:\n\n    \n    \n    -- set up duckdb to query overture data INSTALL spatial; LOAD spatial; LOAD httpfs; set s3_region = 'us-west-2';\n\nNext, I was interested in finding whether parcel delivery lockers were\ncontained inside the Overture places data. Unfortunately, providing a list of\ncategories available is listed as a 'TODO' in the official documentation.\n\nHowever, since you have access to the data, you can find a list of available\ncategories by running a query to select distinct category names:\n\n    \n    \n    -- sql query to select distinct category names and save them to a csv file COPY ( SELECT DISTINCT categories.main FROM read_parquet( 's3://overturemaps-us-west-2/release/2024-03-12-alpha.0/theme=places/type=*/*', filename = true, hive_partitioning = 1 ) ) to 'categories.csv' WITH (FORMAT CSV, DELIMITER ',');\n\nThis query should take a minute or two to complete and will result in a CSV\nfile which is saved to the folder you are currently in. You can then open this\nfile in any spreadsheet software (Excel, Numbers, Google Sheets) and look for\na potential parcel locker category.\n\nUnfortunately, there is no parcel_locker category. When I ran this, the\nclosest I could find was \u2018post_office\u2019 (a parcel locker could be considered a\ntype of private post office, right?).\n\nIf you want to take a closer look at the locations in the \u2018post_office\u2019\ncategory, you can run a query for all of the places with a main category of\npost_office:\n\n    \n    \n    -- sql query to select all the overture places which have a category of 'post_office' -- the results will include separate latitude and longitude columns -- the results will be saved to a csv file COPY ( SELECT type, *, ST_X(ST_GeomFromWkb(geometry)) AS longitude, ST_Y(ST_GeomFromWkb(geometry)) AS latitude FROM read_parquet( 's3://overturemaps-us-west-2/release/2024-03-12-alpha.0/theme=places/type=*/*', filename = true, hive_partitioning = 1 ) WHERE categories.main = 'post_office' ) TO 'post_offices.csv' WITH (FORMAT CSV);\n\nThis query will probably take a few minutes or more to run, depending on the\nspeed of your internet connection. After it finishes, you can check how many\nrows are in the CSV file which was just created:\n\n    \n    \n    SELECT COUNT(*) FROM 'post_offices.csv';\n\n107k post offices around the world - pretty cool!\n\nAt this point, I dropped this data into Honeycomb to do a visual check of\nwhether this data included some parcel lockers near my apartment, or whether\nit\u2019s just \u2018classic\u2019 post offices. Unfortunately, after looking at the data,\nit\u2019s just regular post offices (at least in the US and Germany). So it looks\nlike we will not be able to get the data needed for this project from\nOverture.\n\n### Open Street Map\n\nThe second data source I investigated for parcel locker data was OpenStreetMap\n(OSM). OpenStreetMap is a community-maintained worldwide map.\n\nI have used OpenStreetMap data in previous jobs, and I found that data quality\ndepends on the number of contributors in an area. In dense urban areas with a\ntradition of support for open-source software (like Berlin, Germany) the\nquality is often phenomenal, with individual trees mapped along with their\nspecific species. However, in other places with fewer community contributors\nthe data can be more limited.\n\nTo find whether the location of parcel lockers was available from\nOpenStreetMap, I started by trying to find a locker near my apartment. I went\nto openstreetmap.org, typed in my address, and then clicked on \u2018Layers\u2019 > \u2018Map\nData\u2019 so that I could see every individual object on the map.\n\nYou can follow a similar process to try and identify whether places of\ninterest near you are present in OpenStreetMap.\n\nIn this case, OSM has the DHL packstation near me. And it looks like parcel\nlockers have their own amenity tag in OSM, parcel_locker. It looks like\nOpenStreetMap has the data we need to make a map of all parcel lockers in\nBerlin.\n\n## Step 1: Download data from OpenStreetMap\n\nWe know that OpenStreetMap (OSM) has data about parcel lockers. The next step\nis to search for all parcel lockers in Berlin within the OSM data.\n\nOSM has its own API for querying data, called the Overpass API. The Overpass\nAPI has its own query language, called OverpassQL.\n\nPersonally I find the syntax for OverpassQL to be a bit complicated, however,\nthere is a great online tool called Overpass Turbo that can generate an\nOverpassQL query for you. Overpass Turbo will then run the query against\npublicly available Overpass servers and display the results on a map.\n\nHere is a OverpassQL query that Overpass Turbo generated for me:\n\n    \n    \n    /* This has been generated by the overpass-turbo wizard. The original search was: \u201camenity=parcel_locker\u201d */ [out:json][timeout:25]; // gather results nwr[\"amenity\"=\"parcel_locker\"]({{bbox}}); // print results out geom;\n\nCopy and paste this query into Overpass Turbo and click 'Run'.\n\nAfter running this query with the map centered on Berlin, I got the following\nmap of 749 parcel lockers in Berlin:\n\nThis looks like the exact data we are looking for!\n\nYou can easily download the Overpass Turbo results as a file by clicking\n\u2018Export\u2019 > \u2018Data\u2019 > \u2018GeoJSON\u2019 > \u2018Download\u2019.\n\nYou should now have a GeoJSON file containing the locations of 749 parcel\nlockers in the Berlin (and Brandenburg) area.\n\n## Step 2: Use DuckDB to convert GeoJSON data to table data for analysis\n\nGeoJSON, being an extension of JSON, is a hierarchical data structure which is\nbuilt on sets of key-value (name-value) pairs. In our parcel locker GeoJSON\nfile, each parcel locker is represented by a GeoJSON \u2018Feature\u2019, which has both\ngeometry data and a set of properties such as \u2018Operator\u2019 and \u2018Name\u2019.\n\nGeoJSON is a popular format for exchanging geospatial data in web\napplications, however, it is not a common format for data analysis. GeoJSON\ncan\u2019t be opened in a tool like Excel or Google Sheets because it is not a\ntabular format - each feature may have a different number of properties, or\neven nested properties.\n\nHowever, for this project we want our data in a tabular format so we can do\nbasic analysis like counting the number of lockers that each operator\nmaintains. To do this we will use DuckDB along with the DuckDB Spatial\nExtension.\n\nFirst, start the CLI version of DuckDB:\n\n    \n    \n    # start duckdb from the macos terminal duckdb\n\nWith the DuckDB CLI running, install and load the spatial extension:\n\n    \n    \n    -- duckdb sql commands to install and load the spatial extension INSTALL spatial; LOAD spatial;\n\nNext, load the GeoJSON data from the previous step into a table using the\nST_Read() function from the DuckDB Spatial Extension. This function uses the\nGDAL translator library behind-the-scenes to easily convert GeoJSON to a\nDuckDB table. This type of syntax is known as Create Table As Select (CTAS).\n\n    \n    \n    CREATE TABLE lockers AS SELECT * from ST_READ('berlin_parcel_lockers.geojson');\n\nYou can then see which columns have been created from the GeoJSON file by\nusing the DESCRIBE TABLE command:\n\n    \n    \n    DESCRIBE TABLE lockers;\n\nBy default, DuckDB only shows 40 rows of results. To show more, use the\n.maxrows command:\n\n    \n    \n    .maxrows 100\n\nNow you should be able to see all the columns. Because GeoJSON features may\nhave different properties, DuckDB has created a column for every property that\nexists in one of the GeoJSON features. Most rows have null values for the\nmajority of properties.\n\nNow, create a new table that only contains core parcel locker information.\nThis query also uses the Create Table As Select (CTAS) syntax that you used\nabove.\n\n    \n    \n    CREATE TABLE lockers_clean AS ( SELECT brand, name, opening_hours, operator, parcel_pickup, parcel_mail_in, ST_X(ST_Centroid(geom)) AS longitude, ST_Y(ST_Centroid(geom)) AS latitude FROM lockers );\n\nThe query above selects relevant columns and creates separate longitude and\nlatitude columns. The geometry data is wrapped in the ST_Centroid() function\nbecause some of the parcel lockers are modeled as polygons in OSM rather than\npoints. For the purpose of this analysis, we are just interested in the point\nof the parcel locker, rather than the polygon outline.\n\nFrom here, copy the clean table to either a CSV or Parquet file:\n\n    \n    \n    -- duckdb sql query to copy data to a CSV file COPY lockers_clean TO 'lockers_clean.csv' WITH (FORMAT CSV); -- duckdb sql query to copy data to a Parquet file COPY lockers_clean TO 'lockers_clean.parquet' WITH (FORMAT PARQUET, COMPRESSION ZSTD);\n\nThis data can then be pulled into various analysis tools, including Excel,\nGoogle Sheets, Tableau, or geospatial tools like Kepler.gl.\n\nParquet is an alternative table data format that is highly efficient to read\nand write. Parquet allows you to store larger amounts of data in smaller\nfiles. However, unlike CSV, it is not human-readable, meaning that you cannot\nopen it in text editors or software like Excel.\n\nHoneycomb supports both CSV and Parquet data. In Part 2 of this series (coming\nsoon), I will show you how to create a high-perfomance interactive map of this\ndata using Honeycomb Maps.\n\n## Extend your analysis\n\nWhile the amount of data in this tutorial was relatively small (749 lockers),\nthis technique can form the basis for much deeper analysis. OpenStreetMap\nprovides data worldwide, although coverage and quality can vary.\n\n  * For logistics companies: This data could be combined with internal company data, for example the location of packages that could not be delivered successfully, to build a strategy for efficiently deploying new parcel lockers.\n  * For e-commerce businesses: This data could be used to evaluate shipping providers based on their locker coverage.\n  * For local governments: This data can inform zoning and land use strategy, for example whether to permit parcel locker locations on public land.\n\nOpenStreetMap and Overture also provide a wealth of open data related to many\nother types of places, including bike parking, different types of stores,\nadministrative boundaries, and much more. They can be a great resource for\ncompanies which are looking to incorporate external data without relying on a\npaid data provider.\n\nIf you\u2019re working on these topics as well, it would be great to get in touch!\nYou can find me on LinkedIn, or send me an email at carston@mapsanddata.com.\n\nWant to try out Honeycomb? Check out Our Paris Demo App.\n\nBack to the blog\n\nHoneycomb Maps\n\n\u00a9 2024 Maps and Data LLC. All rights reserved.\n\n###### Products\n\n  * Honeycomb Zone Manager\n  * Honeycomb Data Explorer\n  * Honeycomb Base\n\n###### Resources\n\n  * Blog\n  * Honeycomb Base Documentation\n\n###### Company\n\n  * Home\n  * Contact us\n\n", "frontpage": false}
