{"aid": "39991219", "title": "Show HN: Clace \u2013 Nginx Unit alternative \u2013 app server for internal apps", "url": "https://github.com/claceio/clace", "domain": "github.com/claceio", "votes": 1, "user": "ajayvk", "posted_at": "2024-04-10 14:40:25", "comments": 0, "source_title": "GitHub - claceio/clace: Clace is a platform for hypermedia driven web tools. Clace makes self-hosting web-apps easy", "source_text": "GitHub - claceio/clace: Clace is a platform for hypermedia driven web tools.\nClace makes self-hosting web-apps easy\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nclaceio / clace Public\n\n  * Notifications\n  * Fork 1\n  * Star 72\n\nClace is a platform for hypermedia driven web tools. Clace makes self-hosting\nweb-apps easy\n\nclace.io/\n\n### License\n\nApache-2.0 license\n\n72 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# claceio/clace\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n26 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nakclaceMoved passwd helpere5ab0c1 \u00b7\n\n## History\n\n334 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Updated to go 1.22.2  \n  \n### cmd/clace\n\n|\n\n### cmd/clace\n\n| Moved passwd helper  \n  \n### examples\n\n|\n\n### examples\n\n| Updated title  \n  \n### internal\n\n|\n\n### internal\n\n| Moved passwd helper  \n  \n### pkg/api\n\n|\n\n### pkg/api\n\n| Moved types to types package  \n  \n### plugins\n\n|\n\n### plugins\n\n| Moved types to types package  \n  \n### tests\n\n|\n\n### tests\n\n| Added support for structured template layout  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Updated type module to star to avoid name conflict  \n  \n### .goreleaser.yaml\n\n|\n\n### .goreleaser.yaml\n\n| Fix build tag include  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Updated Clace to ClaceIO  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Added makefile  \n  \n### README.md\n\n|\n\n### README.md\n\n| Updated title  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| Added security policy file  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Bump google.golang.org/protobuf from 1.32.0 to 1.33.0 (#20)  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Bump google.golang.org/protobuf from 1.32.0 to 1.33.0 (#20)  \n  \n## Repository files navigation\n\nHypermedia Driven Web Tools Platform\n\n### Menu\n\n  * Overview\n  * Features\n\n    * Development Features\n    * Deployment Features\n  * Roadmap\n  * Setup\n\n    * Build from source\n    * Initial Configuration\n    * Start Service\n    * Loading Apps\n  * Documentation\n  * Getting help\n  * Contributing\n\n## Overview\n\nClace is an Apache-2.0 licensed project building a platform to develop and\ndeploy hypermedia driven web apps for internal tools. For running multiple web\napplications on a single machine, Clace provides functionality which usually\nrequires stitching together multiple services: reverse proxy like nginx/caddy\n(for domain/path based routing, TLS certs, static file serving), application\nserver like uwsgi/gunicorn with micro-framework like flask (for API handling)\nand deployment infrastructure like containers/VMs/k8s (for isolation across\napps, versioning and staged deployments, gitops). For internal tools, Clace\nprovides similar functionality in a single lightweight binary.\n\nThe project implements a server in Go and uses Starlark (a dialect of Python)\nfor application configuration. The applications can call out to plugins\nimplemented in Go. The plugin boundary (Starlark to Go) allows the\nspecification of sandboxing rules which are enforced by the platform. As long\nas the application stays within the original rules, further application\nupdates can be done without requiring any admin approval.\n\nThis repo hosts the source code for Clace server and client. The source for\nthe documentation site clace.io is in the docs repo.\n\n## Features\n\n### Development Features\n\nThe development features supported currently by Clace are:\n\n  * Hypermedia driven backend API design, simplifying UI development.\n  * Automatic error handling support\n  * Dynamic reload using SSE (Server Sent Events) for all application changes, backend and frontend.\n  * Automatic creation of ECMAScript modules using esbuild.\n  * Automatic download for JavaScript and CSS dependencies.\n  * Support for TailwindCSS and DaisyUI watcher integration.\n  * Template caching and automatic reload on changes.\n\n### Deployment Features\n\nThe deployment features supported currently by Clace are:\n\n  * Backend app code runs in a security sandbox, with allowlist based permissions.\n  * No build step, the development artifacts are ready for production use.\n  * Support for github integration, apps being directly deployed from github code.\n  * Database backed file system, for atomic version updates and rollbacks.\n  * Zero downtime application updates.\n  * Support for application data persistance using SQLite\n  * OAuth and SSO based authentication\n  * Scalable backend, all performance critical code is in Go, only application handler code is in Starlark.\n  * Support for domain based and path based routing at the app level.\n  * Virtual filesystem with content hash based file names backed by SQLite database, enabling aggressive static content caching.\n  * Brotli compression for static artifacts, HTTP early hints support for performance.\n  * Automatic SSL certificate creation based on certmagic.\n  * Staging mode for app updates, to verify whether code and config changes work on prod before making them live.\n  * Preview app creation support, for trying out code changes.\n\n## Roadmap\n\nClace is early in its development. The feature roadmap for Clace is:\n\n  * All plugins are internal (built into Clace binary) currently. The plan is to move to an external plugin model, plugins being loaded dynamically using go-plugin.\n  * SQLite is used for metadata storage currently. Support for postgres and other systems is planned.\n  * Support for workflow jobs, which would have a form based interface with limited customizability, but with support for triggered and scheduled execution.\n  * UI interface for Clace admin operations.\n  * Record replay based automatic integration test creation. Record all responses at the plugin boundary and use that to replay integration test scenarios. This is speculative currently, depending on the how the external plugin model is implemented.\n  * Distributed agent model, where the Clace server does the initial routing but the actual application execution happens on remote worker nodes.\n\n## Setup\n\n### Build from source\n\nTo install a release build, follow steps in the installation docs.\n\nTo install from source:\n\n  * Ensure that a recent version of Go is available, version 1.21.0 or newer\n  * Checkout the Clace repo, cd to the checked out folder\n  * Build the clace binary and place in desired location, like $HOME\n\n    \n    \n    # Ensure go is in the $PATH mkdir $HOME/clace_source && cd $HOME/clace_source git clone -b main https://github.com/claceio/clace && cd clace go build -o $HOME/clace ./cmd/clace/\n\n### Initial Configuration\n\nTo use the clace service, you need an initial config file with the service\npassword and a work directory. The below instructions assume you are using\n$HOME/clhome/clace.toml as the config file and $HOME/clhome as the work\ndirectory location.\n\n  * Create the clhome directory\n  * Create the clace.toml file, and create a randomly generate password for the admin user account\n\n    \n    \n    export CL_HOME=$HOME/clhome && mkdir $CL_HOME $HOME/clace password > $CL_HOME/clace.toml\n\nThis will print a random password on the screen, note that down as the\npassword to use for accessing the applications.\n\n### Start Service\n\nTo start the service, the CL_HOME environment variable has to point to the\nwork directory location and the CL_CONFIG_FILE env variable should point to\nthe config file.\n\n    \n    \n    export CL_HOME=$HOME/clhome export CL_CONFIG_FILE=$CL_HOME/clace.toml $HOME/clace server start\n\nAdd the exports to your shell profile file. The service logs will be going to\n$CL_HOME/logs. To get the logs on the console also, you can add -c -l DEBUG to\nthe server start command.\n\nThe service will be started on https://localhost:25223 by default (HTTP port\n25222).\n\n### Loading Apps\n\nTo create an app, run the Clace client\n\n    \n    \n    $HOME/clace app create --approve /disk_usage $HOME/clace_source/clace/examples/disk_usage/\n\nThis will create an app at /disk_usage with the example disk_usage app. The\ndisk_usage app provides a web interface for looking at file system disk usage,\nallowing the user to explore the sub-folders which are consuming most disk\nspace.\n\nTo access the app, go to https://127.0.0.1:25223/disk_usage. Use admin as the\nusername and use the password previously generated. Allow the browser to\nconnect to the self-signed certificate page. Or connect to\nhttp://127.0.0.1:25222/disk_usage to avoid the certificate related warning.\n\n## Sample App\n\nTo create an app with a custom HTML page which shows a listing of files,\ncreate an directory ~/fileapp with file app.star file containing:\n\n    \n    \n    load(\"exec.in\", \"exec\") def handler(req): ret = exec.run(\"ls\", [\"-l\"]) if ret.error: return {\"Error\": ret.error, \"Lines\": []} return {\"Error\": \"\", \"Lines\": ret.value} app = ace.app(\"File Listing\", custom_layout=True, pages = [ace.page(\"/\")], permissions = [ace.permission(\"exec.in\", \"run\", [\"ls\"])] )\n\nand file index.go.html containing:\n\n    \n    \n    <!doctype html> <html> <head> <title>File List</title> </head> <body> <h1>File List</h1> {{ .Data.Error }} {{ range .Data.Lines }} {{.}} <br/> {{end}} </body> </html>\n\nRun clace app create --auth-type=none --approve /files ~/fileapp. The app is\navailable at https://localhost:25223/files.\n\n## Documentation\n\nClace docs are at https://clace.io/docs/. For doc bugs, raise a GitHub issue\nin the docs repo.\n\n## Getting help\n\nPlease use Github Discussions for discussing Clace related topics. Please use\nthe bug tracker only for bug reports and feature requests.\n\n## Contributing\n\nPRs welcome for bug fixes. Commit messages should reference bugs.\n\nFor feature enhancements, please first file a ticket with the feature label\nand discuss the change before working on the code changes.\n\nThe Google go style guide is used for Clace. For application behavior related\nfixes, refer the app unit test cases. Those test run as part of regular unit\ntests go test ./.... For API related changes, Clace uses the commander-cli\nlibrary for automated CLI tests. To run the CLI test, run CL_HOME=.\ntests/run_cli_tests.sh from the clace home directory.\n\nThanks for all contributions!\n\n## About\n\nClace is a platform for hypermedia driven web tools. Clace makes self-hosting\nweb-apps easy\n\nclace.io/\n\n### Topics\n\ngolang security self-hosted webapp devops-tools starlark htmx\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n72 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases 14\n\nRelease v0.5.1 Latest\n\nApr 4, 2024\n\n\\+ 13 releases\n\n## Contributors 2\n\n  * akclace Ajay Kidave\n  * dependabot[bot]\n\n## Languages\n\n  * Go 97.1%\n  * JavaScript 1.6%\n  * Other 1.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
