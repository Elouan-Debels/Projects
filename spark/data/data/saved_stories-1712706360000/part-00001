{"aid": "39982011", "title": "PS1 Programming Course with MIPS Assembly and C", "url": "https://pikuma.com/courses/ps1-programming-mips-assembly-language", "domain": "pikuma.com", "votes": 11, "user": "ibobev", "posted_at": "2024-04-09 17:43:57", "comments": 5, "source_title": "PlayStation Programming with MIPS Assembly and C", "source_text": "PlayStation Programming with MIPS Assembly and C\n\n# PS1 Programming with MIPS Assembly & C\n\n##### Learn to program games for the original Sony PlayStation console using\nMIPS assembler & the C programming language\n\n$99.99\n\nENROLL NOW FREE PREVIEW\n\n14-day money back guarantee\n\nThis course includes:\n\n  * 25 hours on-demand video content\n  * Lifetime access\n  * Downloadable resources and exercises\n  * Certificate on completion\n  * Access on mobile and desktop\n  * Secure checkout via Credit Card or PayPal\n  * 14-day money back guarantee\n  * Last updated April 2024\n\n(0%)\n\n$99.99\n\nENROLL NOW FREE PREVIEW\n\n## What you'll learn\n\nThis course is a deep dive into the world of PlayStation programming! We'll\nexplore the PS1 hardware, understand its sub-components, and learn how to code\ngames using MIPS assembler & the C programming language. We'll also learn how\nto use the official Sony Psy-Q libraries on a modern development toolchain to\nbe more productive and push faster 3D polygons out of our console.\n\nWe are about to enter the 5th generation of 32-bit consoles. This era brings\nwith it many technology milestones, such as the adoption of CPUs based on RISC\narchitecture and a preference for coding using a high-level language instead\nof writing games using plain assembly. We will start by learning the basics of\nMIPS assembly and evolve to use a C compiler with the official Psy-Q library\nto develop our final project.\n\n## The tools you'll need\n\nThe original development toolchain was designed for Windows/PC, so you can\neither use the original 32-bit library on a 32-bit operating system (Windowx\nXP), or you can use a modern C compiler with Visual Studio Code on a 64-bit\noperating system (Windows 11). Emulating a Windows system on macOS or Linux is\nalso possible!\n\n## Is this course for you?\n\nThis is a self-contained course teaching concepts from the ground up. However,\nit is expected from students a basic understanding of coding (if-else, loops,\nfunctions).\n\nIf you like retro programming & want to learn more about the early days of 3D\ngames, then this course is definitely for you!\n\n## About the instructor\n\nGustavo Pezzi is a university lecturer in London, UK. He has won multiple\neducation awards as a teacher and is also the founder of pikuma.com.\n\nGustavo teaches fundamentals of computer science and mathematics; his academic\npath includes institutions such as Pittsburg State University, City University\nof London, and University of Oxford.\n\n## Course content\n\n25 hours total length \u2022 32 Chapters \u2022 Last updated April 2024\n\n  * Motivations & Learning Outcomes\n  * How to Take This Course\n\n  * The PS1 in the History of Game Consoles\n  * A New Player Enters the Game\n  * What is your favorite PS1 Game?\n\n  * PS1 Hardware Overview\n  * The MIPS Processor\n  * What is ISA?\n  * MIPS Memory & Endianness\n  * PS1 Memory Map\n  * Quiz: PS1 Hardware\n\n  * CPU Registers & Load Instructions\n  * Store, Add, & Subtract\n  * Jump & Branch Instructions\n  * Exercise: Our First MIPS Code\n  * MIPS Syntax Rules\n  * Installing the ARMIPS Assembler\n  * Assembling our Code\n  * The PSX-EXE File Format\n  * Quiz: MIPS Instructions\n\n  * Step-by-Stey Execution\n  * Different PlayStation Emulators\n  * Fixing Off-by-One Error\n  * MIPS Pseudo-Instructions\n\n  * MIPS Pipeline\n  * Delay Slots\n  * Exercise: Factorial\n  * Quiz: MIPS Pipeline\n\n  * Writing a Factorial Subroutine\n  * Negative Numbers\n  * Sign Extension\n  * Logical Instructions\n  * Bitshifting Instructions\n  * Quiz: Subroutines\n\n  * Examples of CISC & RISC Machines\n  * CISC vs. RISC Instructions\n  * Quiz: CISC vs. RISC\n\n  * The PS1 Graphics System\n  * Drawing Primitives\n  * GPU Packets\n  * Finding Packet Information\n  * Sending Packets to GP1\n  * Sending Packets to GP0\n  * Clearing the Display Area\n  * Quiz: GPU Packets\n\n  * Drawing Flat-Shaded Triangles\n  * Drawing Flat-Shaded Quads\n  * Drawing Gouraud-Shaded Polygons\n  * Flat-Shaded Triangle Subroutine\n  * Stack & Stack Pointer\n  * Stack Parameters\n  * The MIPS ABI\n  * Stack & Heap Space\n  * Exercise: Drawing Polygons\n\n  * Variables\n  * Variable Alignment\n  * Vector Alignment\n  * Quiz: Memory Alignment\n\n  * Copying Image Data to VRAM\n  * Multiplication & Division with Bitshifting\n  * 24BPP Display Mode\n  * Quiz: Copying Data to VRAM\n\n  * Moving Away from Assembly\n  * The Psy-Q Development System\n  * Installing Tools on Windows 11\n  * Installing Tools on Windows XP\n  * Compiling a Simple Psy-Q Project\n\n  * Double-Buffer Screen\n  * Psy-Q Integer Data Types\n  * Psy-Q Primitive Data Types\n  * Ordering Tables\n  * Primitive Buffer\n  * Sorting Primitives into the OT\n  * Sorting a Gouraud Quad in the OT\n  * More About Ordering Tables\n  * Quiz: Ordering Tables\n\n  * A Review of 3D Projection\n  * Vertices & Face Indices\n  * The GTE Coprocessor\n  * Basic 3D Transformations\n  * Quiz: 3D Graphics Review\n\n  * The RotTransPers Function\n  * Coding a Rotating 3D Cube\n  * Normal Clip\n  * Exercise: Cube Faces as Quads\n\n  * Review of Floating-Point Numbers\n  * Fixed-Point Number Representation\n  * Coding a Bouncing Cube\n  * Exercise: Drawing the Floor\n  * Different Transform Matrix per Object\n  * Quiz: Fixed-Point Math\n\n  * GTE Register Set\n  * Inline GTE Instructions\n  * RTPT vs. RTPS\n  * Quiz: Inline GTE Instructions\n\n  * Reading Joypad State\n  * LIBETC Joypad Constant Names\n  * Reading Joypad via a BIOS Function\n  * The PlayStation BIOS\n  * Joypad Header File & Implementation\n  * Quiz: Joypad Input\n\n  * Header Files & Implementation Files\n  * Breaking our Project Apart\n  * Header Files for OT Functions\n  * Header Files for Display Functions\n  * Quiz: Header Files & Implementation Files\n\n  * Camera Space\n  * Look-At Transformation\n  * Look-At Function\n  * Coding the Look-At Camera Model\n  * Quiz: Camera Transformation\n\n  * CD-ROM\n  * Generating an ISO on Windows XP\n  * Generating an ISO on Windows 11\n  * A Function to Read Files from the CD\n  * CD-ROM Access via a BIOS Function\n  * Understanding the MODEL.BIN File\n  * Dynamically Allocating Buffers\n  * Heap Initialization on Windows 11\n  * Interpreting Bytes as Numbers\n  * Handling Different Order of Bytes\n  * Reading Vertices & Faces from the CD\n  * Quiz: CD-ROM Access\n\n  * UV Coordinates, TPAGE, & CLUT\n  * Installing TIM Tool\n  * TIM File Format\n  * Reading TIM File from the CD\n  * Textured Cube Faces\n  * Wobbly Textures\n  * Polygon Jitter\n  * TPAGE Limitations & Techniques\n  * Quiz: Textured Polygons\n\n  * Introduction to our Final Project\n  * Importing Project Assets\n  * PRM File Layout\n  * Reading Object Name from File\n  * Reading Vertices & Normals from File\n  * Handling Different Types of Primitives\n  * Reading Primitives from File\n  * Drawing Flat-Shaded Object Faces\n  * Using sizeof with Variable Name\n  * Quiz: PRM File Layout\n\n  * CMP File Layout\n  * Reading Number of Textures from File\n  * Reading TIM Sizes from File\n  * A Function to Extract LZSS Data\n  * Texture Structs\n  * Uploading CMP Textures to VRAM\n  * Global Texture Store Array\n  * Rendering Textured 3D Objects\n  * TSB & CBA\n  * Quiz: CMP File Layout\n\n  * Loading Multiple CMP Files\n  * Exercise: A Linked List of Objects\n  * Linked List Implementation\n  * Handling Joypad Press & Release\n  * Quiz: Multiple 3D Objects\n\n  * [Pending Peer Review]\n\n  * [Pending Peer Review]\n\n  * [Pending Peer Review]\n\n  * [Pending Peer Review]\n\n  * [Pending Peer Review]\n\n  * Conclusion & Next Steps\n\n## How is this course different?\n\nLearning how to create games for the original PlayStation is a great excuse to\nexplore really hardcore computer science topics. As we learn different aspects\nof the 32-bit generation of consoles, we'll touch important concepts like\nalgorithms, data structures, data compression, machine architecture, fixed-\npoint math, computer graphics, and much (much!) more.\n\nMany new games try to imitate the style and the visuals of old PS1 era using a\nmodern game engine. This is no imitation! We'll be flipping bits on the OG\nPlayStation.\n\nMany people are surprised that the first part of the course uses MIPS\nassembly. Using an assembler in the early stages of our course allows us to\nreally understand the low-level aspects of the console & really grok how data\nflow inside the machine.\n\nWe'll then move away from assembly and climb one layer of abstraction up.\nWe'll work with a C compiler paired with the official Sony Psy-Q library. This\nis where we'll really glue all the concepts that we learned before to\nconsolidate our knowledge with a final big project.\n\nAt the end of the course, you'll have all the tools and the skills you need to\ngrow and evolve on your own. You'll have a working project running on the\nPlayStation console and a deep understanding of the theory that underpins the\ndevelopment of PS1 games.\n\n73% of our students come back for another course\n\nWe don't offer discounts on our courses. Ever.\n\n## What students are saying\n\n0.00\n\n5 star| 0.0%  \n---|---  \n4 star| 0.0%  \n3 star| 0.0%  \n2 star| 0.0%  \n1 star| 0.0%  \n  \nVIEW MORE REVIEWS...\n\n## Other similar courses\n\n### NES Programming with 6502 Assembly\n\n22 hours\n\n  * Learn 6502 Assembly programming games for the Nintendo Entertainment System.\n\n### Atari 2600 Programming with 6502 Assembly\n\n18 hours\n\n  * Learn 6502 Assembly programming and create games for the Atari 2600 console.\n\n### Raycasting Engine Programming with C\n\n18 hours\n\n  * Write a raycasting engine with textures and sprites using the C programming language.\n\nThis course includes:\n\n  * 25 hours on-demand video content\n  * Lifetime access\n  * Downloadable resources and exercises\n  * Certificate on completion\n  * Access on mobile and desktop\n  * Secure checkout via Credit Card or PayPal\n  * 14-day money back guarantee\n  * Last updated April 2024\n\n(0%)\n\n$99.99\n\nENROLL NOW FREE PREVIEW\n\n$99.99\n\nENROLL NOW\n\n0%\n\n25h content\n\n14-day refund\n\nPIKUMA\n\n116-A Mile End Road London - United Kingdom E1 4UN\n\nAbout\n\n  * About\n  * Courses\n  * Testimonials\n  * Blog\n\nSupport\n\n  * Refunds\n  * FAQ\n\nContact\n\n  * info@pikuma.com\n  * pikuma\n  * @pikuma\n\nLegal\n\n  * Privacy Policy\n  * Terms & Conditions\n\nCopyright \u00a9 Pikuma 2024. PikumaTM is a registered trademark. All rights\nreserved.\n\nPrivacy Policy \u00b7 Terms & Conditions\n\n", "frontpage": true}
