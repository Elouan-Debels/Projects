{"aid": "39988993", "title": "Double-Entry Bookkeeping as a Directed Graph", "url": "https://matheusportela.com/double-entry-bookkeeping-as-a-directed-graph", "domain": "matheusportela.com", "votes": 11, "user": "mportela", "posted_at": "2024-04-10 10:13:23", "comments": 2, "source_title": "Double-Entry Bookkeeping as a Directed Graph \u00b7 Matheus Portela", "source_text": "Double-Entry Bookkeeping as a Directed Graph \u00b7 Matheus Portela\n\n# Double-Entry Bookkeeping as a Directed Graph\n\n08 Apr 2024\n\n## My Journey into Accounting\n\nIn the past couple of years, I\u2019ve been working in billing and payments at\nJustworks. This experience introduced me to the world of bookkeeping and\naccounting in ways I didn\u2019t expect: I took a course and read a textbook in\naccounting, adopted plain text accounting for my personal finances, and worked\nin a double-entry ledger system.\n\nBeing such a fundamental part of the human experience, accounting has been\naround for literally millenia. It fostered mathematical and language\ndevelopment. In some cultures, it even predates written language. For this\nreason, it\u2019s not surprising that accounting uses a very particular vocabulary\nand set of concepts that can be intimidating to a newcomer. Credits and\ndebits. Assets and liabilities. Balance sheet. Ledgers and journals.\n\nIt took me a while to get used to these things. But once I did, I realized\nthey aren\u2019t that difficult. Maybe it is just a matter of finding the right way\nto explain them.\n\nThis series of articles is my attempt to capture some of my \u201ca-ha\u201d moments\nwhile learning accounting. Hopefully, it will help someone out there grasp\nthese ideas in a more intuitive and modern way.\n\nIn this first article, we\u2019ll start with the basics: bookkeeping.\n\nDisclaimer: in this article, I\u2019ll simplify some concepts and use slightly\ndifferent terminology than traditional accounting for didactic purposes. If\nyou\u2019re an accountant, please bear with me.\n\n## Bookkeeping Without Ledgers\n\nAt its core, accounting is about keeping track of countable things over time.\nSome of the oldest documents archelogists have found register quantities in\nold societies: food, animals, people, money. Nowadays, accounting is usually\ninterested in tracking money whereas other areas (such as inventory management\nor the census bureau) count the rest. For the rest of this article, we\u2019ll\nfocus on money.\n\nLet\u2019s start with a very simple example. Imagine you\u2019re in a small town with\ntwo people: Alice and Bob. Alice has $100 in her pocket and Bob has $50 as of\nJanuary 1st, 2024. We\u2019ll record this data in a table as follows:\n\n    \n    \n    | Person | Amount | | ------ | ------ | | Alice | $100 | | Bob | $50 |\n\nIf nothing changes, our job is done. We just need to go around town and ask\neach person how much money they have, tabulate the data, and store it in a\nsafe place. Badabing, badaboom!\n\nBut money is meant to be spent. Alice is studying for her finals and needs to\nbuy a book. She notices Bob has one copy and proposes to buy it from him for\n$20. Bob is happy to sell her the book he hasn\u2019t used in a while and cash in\nthe extra $20. Great deal!\n\nNow that money has changed hands, we need to update our records. Alice spent\n$20 and Bob received the same amount. Let\u2019s update our table.\n\n    \n    \n    | Person | Amount | | ------ | ------ | | Alice | $80 | | Bob | $70 |\n\nBefore proceeding, let\u2019s name a few things. In our records, Alice and Bob are\naccounts, i.e., places where money is stored. The amount of money in each\naccount is called a balance. Saying that Alice has $80 is the same as saying\nthat the Alice account\u2019s balance is $80 as of February 1st, 2024.\n\n> Definition 1: Account\n>\n> A place where money is stored.\n\n> Definition 2: Balance\n>\n> The amount of money in an account at a given point in time.\n\nEvery month, we can go around town, ask people how much money they have and\nwrite it down. We\u2019re basically creating a snapshot of the town\u2019s financial\nsituation monthly. (Surely, most people will be annoyed by this breach of\nprivacy and I would probably be arrested for stalking but let\u2019s ignore this\nfor now.)\n\nWhat kinds of questions can we answer with this data? Actually, many!\n\n  * How much money does each person have?\n  * How much money has each person spent or gained over time?\n  * Who has the most money?\n  * Who has the least money?\n  * How much money is there in total in the town?\n\nOur records are simple but useful.\n\nNow, consider Alice comes to us one day and asks \u201cHow come I have $80? I\nthought I had more!\u201d Unfortunately, all we can answer is \u201cThat\u2019s what I have\nwritten down\u201d with our current data. We can\u2019t tell, for instance, whether\nAlice initially had $0 and received $80 or if she had $10,000 and spent\n$9,920.\n\nWhy is this so?\n\nWell, we\u2019re only keeping track of the current balance of each account. Because\nwe erase the old balance and replace it with a new one, we don\u2019t know exactly\nwhat happened to that balance over time. We lose the changes that happened\nbetween snapshots are lost.\n\nCould we do better?\n\nOf course! Accountants have dealt with this problem for centuries and they\nhave a solution: ledgers.\n\n## Bookkeeping with Single-Entry Ledgers\n\nLet\u2019s now think how we could keep track of the historical changes in a\nsystematic way. One way to do this is to write down each update as it happens,\nnot only the balance in a certain date.\n\nTo do this, we\u2019ll change the table a little bit. For example, we write down\nthat on January 1st, 2024, Alice had $100.\n\n    \n    \n    | Account | Description | Date | Amount | Balance | | ------- | --------------- | ---------- | ------ | ------- | | Alice | Opening balance | 2024-01-01 | $100 | $100 |\n\nWe added some columns to the table:\n\n  * Description: A human-readable explanation of the transaction (e.g. what it is about, who got paid, a reference number, etc).\n  * Date: When the transaction happened. Besides ordering transactions, this field can be used to group transactions by period (e.g. monthly reports). It can be enhanced with time information (e.g. hour, minute, second) if needed.\n  * Balance: The balance of the account after the transaction. This field is redundant but it\u2019s useful when inspecting the data.\n\nSo far, so good.\n\nNow, let\u2019s take a look at how we can write down that Alice bought the book\nfrom Bob.\n\n    \n    \n    | Account | Description | Date | Amount | Balance | | ------- | --------------- | ---------- | ------ | ------- | | Alice | Opening balance | 2024-01-01 | $100 | $100 | | Alice | Bought book | 2024-02-01 | -$20 | $80 |\n\nThis is different... Instead of just updating the existing balance, we\u2019re\nadding a new row with the transaction details. The new columns we added\nearlier are helpful in understanding what happened to the account. We know\nthat Alice had $100, then spent $20 when buying the book, and now has $80.\n\nTime for more definitions: each row in this table is called an entry and the\nwhole table is called a ledger.\n\n> Definition 3: Entry\n>\n> A record of a transaction that happened to an account.\n\n> Definition 4: Ledger\n>\n> A collection of entries for an account.\n\nSo far, we\u2019ve updated only Alice\u2019s ledger. Let\u2019s take a look at Bob\u2019s:\n\n    \n    \n    | Account | Description | Date | Amount | Balance | | ------- | --------------- | ---------- | ------ | ------- | | Bob | Opening balance | 2024-01-01 | $50 | $50 | | Bob | Sold book | 2024-02-01 | $20 | $70 |\n\nNow we have a ledger for each account. Great!\n\nThis system we implemented right now is called a single-entry bookkeeping\nsystem. Each account has its own ledger and we write down entries that affect\none account at a time. This is a simple system that works well for small\nbusinesses or personal finances.\n\nLedgers are sometimes called journal or book because, in the past, they were\nphysical books where accountants would write down transactions. In the modern\nworld, though, they\u2019re usually stored in a database.\n\nA 1926 handwritten ledger. Notice the accountant calculated the cash and bank\nbalances daily. Source: Business Case Analysis.\n\nAn important characteristic of a ledger is that the data is immutable. Once an\nentry is written, it cannot be changed at all because we want to preserve the\nledger\u2019s full history. No more erasing or scribbling over entries.\n\nThis raises the question: what happens if we make a mistake?\n\nHere\u2019s an example. Say the correct price for the book is $30 but we wrote down\n$20. If we were in a mutable system, we could just update the amount in the\noriginal entry as follows:\n\n    \n    \n    | Account | Description | Date | Amount | Balance | | ------- | --------------- | ---------- | ------ | ------- | | Alice | Opening balance | 2024-01-01 | $100 | $100 | | Alice | Bought book | 2024-02-01 | -$30 | $70 |\n\nThere are many problems with this approach though. We lose the history of the\noriginal amount. We can\u2019t tell that we made a mistake and corrected it. We\nalso can\u2019t tell if the original amount was correct and we made a mistake in\nthe correction.\n\nCould we do better?\n\nYes! Instead of updating the original entry, we can write a new entry to\ncancel the old one and write a new one with the correct amount. Let\u2019s see how\nthis looks:\n\n    \n    \n    | Account | Description | Date | Amount | Balance | | ------- | --------------- | ---------- | ------ | ------- | | Alice | Opening balance | 2024-01-01 | $100 | $100 | | Alice | Bought book | 2024-02-01 | -$20 | $80 | | Alice | Correct book price | 2024-02-01 | $20 | $100 | | Alice | Bought book | 2024-02-01 | -$30 | $70 |\n\nThe end result is the same as updating an entry in-place: the balance is $70.\nHowever, we can now see that we made a mistake and corrected it. We can also\nsee the original amount and the reason for the correction. This gives us an\naudit trail of changes.\n\nIn a way, a ledger is similar to event sourcing in Computer Science. In event\nsourcing, we store events that happened in the system and use them to compute\nthe current state of the system. This is in contrast to storing just the state\nof the system and updating it in-place. Event sourcing has many benefits, like\nbeing able to replay events or to rebuild the state of the system at any point\nin time.\n\nIf our system only cares about a single account at a time, a single-entry\nledger system is enough. Think of a personal finance app that you use to keep\ntrack of your money or a gym that tracks how much their members paid for the\nservice. However, financial systems are usually more complex than that and\ntransactions typically involve multiple accounts at once.\n\nFor these complex scenarios, accountants developed a more robust system:\ndouble-entry bookkeeping.\n\n## Bookkeeping with Double-Entry Ledgers\n\nLet\u2019s revisit the example of Alice buying the book from Bob and see the\nledgers for both accounts:\n\n    \n    \n    | Account | Description | Date | Amount | Balance | | ------- | ------------------ | ---------- | ------ | ------- | | Alice | Opening balance | 2024-01-01 | $100 | $100 | | Alice | Bought book | 2024-02-01 | -$20 | $80 | | Account | Description | Date | Amount | Balance | | ------- | ------------------ | ---------- | ------ | ------- | | Bob | Opening balance | 2024-01-01 | $50 | $50 | | Bob | Sold book | 2024-02-01 | $20 | $70 |\n\nDid you notice how the transactions are related to each other? The $20 Alice\nspent is the same $20 Bob received. We know that but the system doesn\u2019t since\nwe\u2019re not explicitly stating this relationship in our ledgers. It could be the\ncase the Alice bought the book from Bob and Bob received the money from\nCharlie. We can\u2019t tell the difference when reading the ledgers.\n\nA first step in making this relationship explicit is to group related entries\ninto a transaction. Let\u2019s add the Transaction column to our table:\n\n    \n    \n    | Account | Transaction | Description | Date | Amount | Balance | | ------- | ---------- | ------------------ | ---------- | ------ | ------- | | Alice | 1 | Opening balance | 2024-01-01 | $100 | $100 | | Alice | 3 | Book sale | 2024-02-01 | -$20 | $80 | | Account | Transaction | Description | Date | Amount | Balance | | ------- | ---------- | ------------------ | ---------- | ------ | ------- | | Bob | 2 | Opening balance | 2024-01-01 | $50 | $50 | | Bob | 3 | Book sale | 2024-02-01 | $20 | $70 |\n\nIn this example, we have the following transactions:\n\n  * Transaction 1: Alice\u2019s opening balance.\n  * Transaction 2: Bob\u2019s opening balance.\n  * Transaction 3: Alice bought a book from Bob.\n\nNow, we explicitly state that the $20 Alice spent is the same $20 Bob\nreceived. No more ambiguity.\n\n> Definition 5: Transaction\n>\n> A group of related entries that affect different accounts.\n\nThe difference between our current system and the previous one is that we\u2019re\nnow grouping related entries into transactions. Since each transaction affects\nmultiple accounts, we can now see how money flows between accounts. By adding\ntransactions to the tables, we are now working with a double-entry bookkeeping\nsystem.\n\nTraditionally, accountants would use two columns to represent the flow of\nmoney between accounts: credits and debits. When money leaves an account, the\namounts goes in the credit column. Incoming money appears in the debit column.\n\n> Definition 6: Credit\n>\n> An entry that represents money leaving an account.\n\n> Definition 7: Debit\n>\n> An entry that represents money entering an account.\n\n(Pro-tip: Ignore what you know about credit and debit cards for now.)\n\nWhen Alice pays Bob $20, we say Alice\u2019s account is credited $20 and Bob\u2019s\naccount is debited $20. Let\u2019s represent this in our table:\n\n    \n    \n    | Account | Transaction | Description | Date | Debit | Credit | | ------- | ---------- | ------------------ | ---------- | ----- | ------ | | Alice | 1 | Opening balance | 2024-01-01 | $100 | | | Alice | 3 | Bought book | 2024-02-01 | | $20 | | Account | Transaction | Description | Date | Debit | Credit | | ------- | ---------- | ------------------ | ---------- | ----- | ------ | | Bob | 2 | Opening balance | 2024-01-01 | $50 | | | Bob | 3 | Sold book | 2024-02-01 | $20 | |\n\nI wanted to make a few of points before continuing our journey.\n\nFirst, the goal of double-entry bookkeeping is to reduce mistakes, especially\nthe ones that are hard to notice. Remember that, for centuries, accountants\nwere using pen and paper to keep track of insane amounts of money. Small\nmistakes could lead to big problems. Writing debits and credits in different\ncolumns, as we did above, reduces the chance of making mistakes. Your hand is\nliterally moved to different places on the paper when writing debits and\ncredits.\n\nReal world accounting journals wouldn\u2019t even put these columns side-by-side.\nInstead, they would be in different parts of the page. In fact, accounting\njournals were symmetrical: the left side was for debits and the right side,\nfor credits. Something like this:\n\n    \n    \n    Debit Alice's account Credit ------------------------------------------------------------------------------- ------------------------------------------------------------------------------- | Date | Description | $ | | Date | Description | $ | | ---------- | --------------- | ---- | | ---------- | --------------- | ---- | | 2024-01-01 | Opening balance | $100 | | | | | | | | | | 2024-02-01 | Bought book | $20 |\n\nThis format is commonly referred to as a T-account (an analogy to the same:\nthe top with the account name, the left side with debits, and the right side\nwith credits). For this reason, many accountants will refer to debits as\nentries that go on the left side and credits as the ones that go on the right\nside.\n\nGeneral Post Office T-account as instituted by Benjamin Franklin. Source:\nSmithsonian National Post Museum.\n\nComputer systems don\u2019t need to use this format, though, as it doesn\u2019t\nnecessary prevent software bugs. Instead, it is common to have a single amount\ncolumn and another column to indicate whether the amount is a debit or a\ncredit. For example:\n\n    \n    \n    | Account | Transaction | Description | Date | Type | Amount | | ------- | ---------- | ------------------ | ---------- | ------ | ------ | | Alice | 1 | Opening balance | 2024-01-01 | Debit | $100 | | Alice | 3 | Bought book | 2024-02-01 | Credit | $20 |\n\nSecond, notice how we\u2019re using a positive number even when money is leaving\nAlice\u2019s account. Historically, accountants don\u2019t like negative numbers in the\nbooks as they only became popular much later in Europe. Computer systems are\nvery good with negative numbers, though. Instead of having two columns, we\ncould just use a single column and adopt a convention in which credits are\nnegative and debits are positive, or vice-versa. For example:\n\n    \n    \n    | Account | Transaction | Description | Date | Amount | | ------- | ---------- | ------------------ | ---------- | ------ | | Alice | 1 | Opening balance | 2024-01-01 | $100 | | Alice | 3 | Bought book | 2024-02-01 | -$20 |\n\nIf you pay close attention to this last example, this is exactly what we were\ndoing before. The difference is that now we understand that the amount is\nnegative because it\u2019s a credit. (Technically, using negative numbers for\ncredits might be a limitation if we\u2019re trying to undo a credit entry without\ncreating a debit entry but we don\u2019t need to be that picky for now.)\n\nFinally, I\u2019m not a big fan of old nomenclature for tradition\u2019s sake. We could\nrename credits as outgoing money and debits as incoming money without losing\nprecision. In my opinion, this is a bit less confusing.\n\n    \n    \n    | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | ------------------ | ---------- | -------- | -------- | | Alice | 1 | Opening balance | 2024-01-01 | $100 | | | Alice | 3 | Bought book | 2024-02-01 | | $20 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | ------------------ | ---------- | -------- | -------- | | Bob | 2 | Opening balance | 2024-01-01 | $50 | | | Bob | 3 | Sold book | 2024-02-01 | $20 | |\n\nSweet!\n\nA fundamental principle of double-entry bookkeeping is that the total amount\nof money in the system remains the same after each transaction. A particular\naccount can increase or decrease its balance over time but the sum of all\nbalances must remain constant. Nothing is lost, nothing is created, everything\nis transacted. It is a closed system.\n\n> Definition 6: Double-Entry Ledger\n>\n> A system of accounting where each transaction is recorded one or more\n> entries. The amount of money leaving accounts is equal to the amount of\n> money entering other accounts in every transaction.\n\nOk, you might be thinking: \u201cWait a minute, these opening balances go against\nwhat you just said!\u201d and you\u2019re right. Transactions 1 and 2 change the total\namount of money in the system from $0 to $150. We should do better than\nstating a rule only to break it in the very next sentence.\n\nLet\u2019s assume all of the money that Alice and Bob have comes from a bank. Then,\nlet\u2019s create an account for this bank and use this account as the other side\nof the opening balance transactions.\n\n    \n    \n    | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Bank | 1 | Alice's opening balance | 2024-01-01 | | $100 | | Bank | 2 | Bob's opening balance | 2024-01-01 | | $50 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Alice | 1 | Opening balance | 2024-01-01 | $100 | | | Alice | 3 | Bought book | 2024-02-01 | | $20 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Bob | 2 | Opening balance | 2024-01-01 | $50 | | | Bob | 3 | Sold book | 2024-02-01 | $20 | |\n\nIn this example, we don\u2019t care where the opening balances come from exactly.\nWe just need to make sure money is coming from somewhere. The bank account is\na kind of phony account that is there just to help us follow the rules. In\naccounting terms, it is called a contra account to the other accounts. The\nimportant thing is that all transactions are balanced, i.e., \u201ccredits equal\ndebits\u201d.\n\n> Definition 7: Contra Account\n>\n> An account that is used to offset another account. It is used to keep the\n> accounting equation in balance.\n\nOur system is now complete. We have a double-entry ledger system that keeps\ntrack of money flowing between accounts. We can answer many questions about\nthe financial situation of Alice and Bob and we have a clear audit trail of\nall transactions that happened.\n\nLet\u2019s consider a more complex example. When Alice buys the book, she\naccidentally uses the wrong credit card and needs to pay $2 in foreign\nexchange fees. Bob, on the other hand, pays $2 in sales taxes to the\ngovernment, $1 in credit card fees. How do we keep track of this?\n\nThe secret in double-entry bookkeeping is to use accounts for everything. As\nwe did before, we model this flow by creating new accounts: one for the credit\ncard company and another for the tax authority. Then, when creating the\ntransaction, we add new entries as necessary.\n\n    \n    \n    | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Bank | 1 | Alice's opening balance | 2024-01-01 | | $100 | | Bank | 2 | Bob's opening balance | 2024-01-01 | | $50 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Alice | 1 | Opening balance | 2024-01-01 | $100 | | | Alice | 3 | Bought book | 2024-02-01 | | $20 | | Alice | 3 | Foreign exchange fee | 2024-02-01 | | $2 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Bob | 2 | Opening balance | 2024-01-01 | $50 | | | Bob | 3 | Sold book | 2024-02-01 | $20 | | | Bob | 3 | Sales tax | 2024-02-01 | | $2 | | Bob | 3 | Credit card fee | 2024-02-01 | | $1 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | CC | 3 | Alice's credit card fee | 2024-02-01 | $2 | | | CC | 3 | Bob's credit card fee | 2024-02-01 | $1 | | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Tax | 3 | Bob's sales tax | 2024-02-01 | $2 | |\n\nWe modified transaction 3 as follows:\n\n  * Alice pays $20 to Bob and $2 to the credit card company.\n  * Bob receives $20 from Alice, pays $2 to the tax authority, and $1 to the credit card company.\n  * The credit card company receives $2 from Alice and $1 from Bob.\n  * The tax authority receives $2 from Bob.\n\nNotice that transaction 3 has more than two entries. It has eight entries, to\nbe precise. This is perfectly fine! We can have as many entries as we need to\nrepresent the flow of money between accounts as long as the transaction is\nbalanced, i.e., credits = debits.\n\nIt is a common mistake to think that double-entry bookkeeping limits\ntransactions to two entries at a time. The technique is called \u201cdouble-entry\u201d\nnot because there are only two entries but because each transaction has two\nsides: one side where money leaves an account and another side where money\nenters another account. I guess \u201cmany-entry bookkeeping\u201d doesn\u2019t sound as\ngood.\n\n## Double-Entry Bookkeeping is a Directed Graph\n\nI hope these concepts are clear so far. We have accounts, entries,\ntransactions, incoming money, and outgoing money. With practice, you\u2019ll be\nable to read and write these tables with ease.\n\nBut I have a confession to make: I\u2019m a visual person. I like to draw and see\nthings when I\u2019m learning. So I started to think: how can we visualize this\ndata in a way that makes sense to me? After using double-entry bookkeeping for\na while in my personal finances and trying to come with a visualization for my\nledgers, it finally clicked: we\u2019re modeling money flow as a directed graph.\n\nThink about this: An account is a node in the graph, a credit entry is an\noutgoing edge with an amount of money leaving this node whereas a debit is an\nincoming edge with money flowing to another node. A transaction, then, groups\nand enforces a condition on a set of edges: the outgoing edges must have the\nsame sum of money as the incoming edges.\n\nLet\u2019s take a look at the example we\u2019ve been using so far. First, we start with\nAlice\u2019s and Bob\u2019s accounts and the money they stored in the bank:\n\nA few comments on this graph:\n\n  * An account is a round node with the account name.\n  * A transaction is a square node with the transaction number.\n  * A credit entry goes from an account to a transaction.\n  * A debit entry goes from a transaction to an account.\n  * The entry\u2019s amount of money is written on the edge.\n  * An account\u2019s balance is the sum of the amounts of the incoming edges minus the sum of the amounts of the outgoing edges.\n\nWe can see that transaction 1 moves $100 from the bank to Alice. Transaction 2\nmoves $50 from the bank to Bob. The total amount of money in the system is\n$150.\n\nThen, Alice buys a book from Bob:\n\nWe can see that transaction 3 moves $20 from Alice to Bob. Hence, Alice has\n$80 and Bob, $70.\n\nWe haven\u2019t added fees and taxes yet. Let\u2019s do this:\n\nOof, that\u2019s a lot of edges! Transaction 3 is very complex as it conflates what\nAlice is paying Bob with the fees and taxes they pay to other parties. We\ncould make this easier by splitting this transaction into two smaller ones:\n\n    \n    \n    | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Bank | 1 | Alice's opening balance | 2024-01-01 | | $100 | | Bank | 2 | Bob's opening balance | 2024-01-01 | | $50 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Alice | 1 | Opening balance | 2024-01-01 | $100 | | | Alice | 3 | Bought book | 2024-02-01 | | $22 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Bob | 2 | Opening balance | 2024-01-01 | $50 | | | Bob | 3 | Sold book | 2024-02-01 | $19 | | | Bob | 4 | Sales tax | 2024-02-01 | | $2 | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | CC | 3 | Transaction fee | 2024-02-01 | $3 | | | Account | Transaction | Description | Date | Incoming | Outgoing | | ------- | ---------- | -------------------------- | ---------- | -------- | -------- | | Tax | 4 | Bob's sales tax | 2024-02-01 | $2 | |\n\nAnd as a graph:\n\nWe simplified the transactions a little bit:\n\n  * Alice sees $22 leaving her account but Bob only receives $19. The remaining $3 goes to the credit card company.\n  * Bob pays sales taxes in a different transaction.\n\nRegardless of how we model the transactions, the account balances are the\nsame. Alice has $78, Bob has $69, the tax authority has $2, and the credit\ncard company has $3. It is the accountant\u2019s job to decide how to group\ntransactions and entries in a way that makes sense for the business as the\nbookkeeping system is flexible enough to accommodate different needs.\n\nThese simple examples show how we can visualize money flow in a double-entry\nbookkeeping system as a directed graph. The graph grows over time as new\ntransactions are added but it\u2019s properties remain the same. In my opinion,\nunderstanding bookkeeping as a graph is a powerful way to reason about many\naccounting concepts. Suddenly, things as balance sheets, income statements,\nand cash flow statements are just visualizations of this graph. Categories\nsuch as assets, liabilities, equity, income, and expenses are just groups of\nnodes in the graph and it is quite easy to understand whether credits or\ndebits increase their balances. It\u2019s a way to make accounting more intuitive\nand less intimidating to me!\n\nWe could go on and on with this example, adding more complexity to the\ntransactions, creating new accounts, and visualizing the graph as it grows.\nBut I think we did a great job today and should take a well-deserved break.\n\n## Takeaways\n\nIn this article, we\u2019ve covered the basics of bookkeeping. We started with a\nsimple system that only kept track of balances, evolved it into a single-entry\nand, later, into a double-entry ledger system that models money flow between\naccounts. We\u2019ve seen how to represent transactions as entries in a ledger and\nhow to group related entries into transactions. Finally, we\u2019ve seen how to\nvisualize a double-entry ledger as a directed graph.\n\nIn the next article, we\u2019ll dive deeper into basic accounting concepts and see\nhow they relate to the graph representation we\u2019ve seen here.\n\n## Resources\n\nWhen studying these concepts, I found the following resources particularly\nhelpful:\n\n  * Accounting & Financial Statement Analysis: Complete Training: A crash course in accounting in Udemy. It was my introduction to the topic and I highly recommend it.\n  * Mastering Accounting by George Bright and Michael Herbert: A textbook that covers accounting from the basics to more advanced topics. Another great resource to deepen my understanding of accounting.\n  * Beancount\u2019s documentation has a great explanation of accounting as a graph over time. It was a big inspiration for this article.\n  * Modern Treasury has a great series of articles that explain accounting concepts for developers. It is another big inspiration.\n  * This particular thread on Hacker News. Some comments are gold!\n  * Plain text accounting is a small but engaged community that uses plain text files and command-line tools to keep track of their finances. I use hledger for my personal finances.\n\n", "frontpage": true}
