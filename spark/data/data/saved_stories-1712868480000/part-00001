{"aid": "40002779", "title": "Serverless Functions, Made Simple", "url": "https://www.openfaas.com/", "domain": "openfaas.com", "votes": 1, "user": "udev4096", "posted_at": "2024-04-11 14:46:09", "comments": 0, "source_title": "Home", "source_text": "Home | OpenFaaS - Serverless Functions Made Simple\n\n## Serverless Functions, Made Simple.\n\n## OpenFaaS\u00ae makes it simple to deploy both functions and existing code to\nKubernetes\n\nDeploy to production with OpenFaaS Standard and Enterprise\n\n# Anywhere\n\n## Deploy your functions on-premises or in the cloud, with portable OCI\nimages.\n\n# Any code\n\n## Write functions in any language, and bring your existing microservices\nalong too.\n\n# Any scale\n\n## Pro features scale your functions to meet demand, and down to zero when\nidle.\n\n## Run your code anywhere with the same unified experience.\n\nYou can deploy OpenFaaS anywhere you have Kubernetes\n\nOur templates follow best practices meaning you can write and deploy a new\nfunction to production within a few minutes, knowing it will scale to meet\ndemand.\n\nOpenFaaS Pro then builds on our Open Source codebase to bring flexible auto-\nscaling, event-connectors, monitoring, a new dashboard, GitOps and various\nlevels of support.\n\n## Templates that just work\n\nGet code into production within minutes using our templates, or create your\nown.\n\n## Efficient scaling\n\nYour functions can be fine-tuned to scale to match the type of traffic they\nreceive, including to zero to save on costs.\n\n## Event-driven workloads\n\nInvoke functions through events from Apache Kafka, AWS SQS, Postgresql, Cron\nand MQTT.\n\nLearn about OpenFaaS Pro\n\n## Solutions\n\n## A sandbox for your customer's code\n\nWith OpenFaaS Enterprise, you can take code snippets from your customers and\nuse them to extend your platform.\n\nYou can use the Function Builder API to turn source code into functions, which\ncan be deployed via the OpenFaaS REST API.\n\nNetwork policies, resource limits, a runtime class, read-only filesystem and\ndedicated namespace means their code will be as isolated as possible.\n\nWho's doing this already? Waylay (for custom functions for industrial IoT),\nPatchworks (customer extensions for e-commerce), LivePerson (for customer\nextensions) and Cognite (for custom ML/data-science functions).\n\n## ETL and data-pipelines\n\nOpenFaaS Pro autoscaling can be fine-tuned to match the execution pattern of\nyour functions, and to retry failed invocations.\n\nThrough JetStream for OpenFaaS, you can fan out to many thousands of\nexecutions, executing in parallel and scaling automatically.\n\nML models can be deployed as functions, and scaled, even if they run for a\nlong time.\n\nSee also: Exploring the Fan out and Fan in pattern with OpenFaaS\n\n## Kubernetes, made usable\n\nOpenFaaS enriches Kubernetes with scaling, queueing, monitoring and event\ntriggers, so your team can focus on shipping features.\n\nCustomers have told us that even from early on, they were shipping new\nfunctionality to production within hours.\n\nFunctions can be run on-demand, or on a schedule, and can be triggered by\nevents from your existing systems like Apache Kafka or AWS. If you invoke them\nasynchronously, you'll also get to benefit from retries without writing any\nadditional code.\n\nDeel migrated from AWS Lambda to Kubernetes, only to find that their code\nwould no longer scale how they needed. They reached out to us, and we wrote up\na reference architecture.\n\nLearn more: Generate PDFs at scale on Kubernetes using OpenFaaS and Puppeteer\n\n## One function, many clouds\n\nDoes your product need to run on multiple different clouds? Perhaps you're\nconsidering writing an abstraction layer to cover your bases?\n\nWhen faced with this question, Waylay.io built their low-code platform with\nOpenFaaS.\n\nOpenFaaS functions are built as OCI images, which means they're portable, and\nintegrate well with teams who use containers or Kubernetes already.\n\nSee also: Low-code automation with OpenFaaS\n\n## We speak your language\n\nFunctions can be written in any language, and are built into portable OCI\nimages.\n\nWe have official templates available for: Go, Java, Python, C#, Ruby, Node.js,\nPHP, or you can write your own.\n\nYou can even bring along your existing microservices written with custom\nframeworks like Express.js, Vert.x, Flask, ASP.NET Core, FastAPI and Django.\n\nFind templates in the store or build your own.\n\n    \n    \n    $ faas-cli new --lang java11 java-fn\n\nHandler.java\n\n    \n    \n    package com.openfaas.function; import com.openfaas.model.IHandler; import com.openfaas.model.IResponse; import com.openfaas.model.IRequest; import com.openfaas.model.Response; public class Handler implements com.openfaas.model.IHandler { public IResponse Handle(IRequest req) { Response res = new Response(); res.setBody(\"Hello, world!\"); return res; } }\n    \n    \n    $ faas-cli template store pull golang-middleware $ faas-cli new --lang golang-middleware go-fn\n\nhandler.go\n\n    \n    \n    package function import ( \"fmt\" \"io\" \"net/http\" ) func Handle(w http.ResponseWriter, r *http.Request) { var input []byte if r.Body != nil { defer r.Body.Close() body, _ := io.ReadAll(r.Body) input = body } w.WriteHeader(http.StatusOK) w.Write([]byte(fmt.Sprintf(\"Body: %s\", string(input)))) }\n    \n    \n    $ faas-cli template store pull python3-http $ faas-cli new --lang python3-http python3-fn\n\nmain.py\n\n    \n    \n    def handle(event, context): return { \"statusCode\": 200, \"body\": \"Hello from OpenFaaS!\" }\n    \n    \n    $ faas-cli new --lang node18 javascript-fn\n\nhandler.js\n\n    \n    \n    \"use strict\" module.exports = async (event, context) => { const result = { status: \"Received input: \" + JSON.stringify(event.body) }; return context .status(200) .succeed(result); }\n    \n    \n    $ faas-cli template store pull bash-streaming $ faas-cli new --lang bash-streaming bash-fn\n\nhandler.sh\n\n    \n    \n    #!/bin/sh for i in $(seq 1 100) do sleep 0.001 echo \"Hello\" $i done\n    \n    \n    $ faas-cli new --lang dockerfile ruby\n\nDockerfile\n\n    \n    \n    FROM ruby:2.7-alpine WORKDIR /home/app COPY . . RUN bundle install EXPOSE 8080 CMD [\"ruby\", \"main.rb\"]\n\n## Thank you to our sponsors\n\n# platinum Tier\n\nBecome an individual or corporate sponsor via GitHub:\n\nBecome a sponsor\n\n### Start your Serverless Journey\n\n### Understand the use-cases for functions and learn at your own pace with the\nOpenFaaS handbook: Serverless For Everyone Else.\n\nGET THE EBOOK\n\n### Run OpenFaaS in Production\n\nOpenFaaS Pro is a commercially licensed version of OpenFaaS meant for\nproduction use.\n\nYou'll gain access to new features to make your team more efficient and\nproductive.\n\nVIEW PRICING\n\nRead the documentation\n\nFollow @OpenFaaS on Twitter\n\nContribute on GitHub\n\nOpenFaaS \u00ae was founded by Alex Ellis and is hosted by OpenFaaS Ltd. OpenFaaS\nLtd. is a registered company in England & Wales with number: 11076587,\nregistered address: Peterborough UK.\n\nFeatured on\n\n", "frontpage": false}
