{"aid": "39981349", "title": "A 23-byte \"hello, world\" program assembled with DEBUG.EXE in MS-DOS", "url": "https://github.com/susam/hello", "domain": "github.com/susam", "votes": 8, "user": "thunderbong", "posted_at": "2024-04-09 16:52:50", "comments": 0, "source_title": "GitHub - susam/hello: A 23-byte \u201chello, world\u201d program assembled with DEBUG.EXE in MS-DOS", "source_text": "GitHub - susam/hello: A 23-byte \u201chello, world\u201d program assembled with\nDEBUG.EXE in MS-DOS\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nsusam / hello Public\n\n  * Notifications\n  * Fork 5\n  * Star 147\n\nA 23-byte \u201chello, world\u201d program assembled with DEBUG.EXE in MS-DOS\n\n### License\n\nMIT license\n\n147 stars 5 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# susam/hello\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nsusamFix description in the Assemble section0237f86 \u00b7\n\n## History\n\n15 Commits  \n  \n### ALT\n\n|\n\n### ALT\n\n| Add examples that do not depend on DOS services  \n  \n### CHANGES.md\n\n|\n\n### CHANGES.md\n\n| Mention the use of xxd in changelog  \n  \n### HELLO.ASM\n\n|\n\n### HELLO.ASM\n\n| Use RET instead of INT 21 to terminate program  \n  \n### HELLO.COM\n\n|\n\n### HELLO.COM\n\n| Use RET instead of INT 21 to terminate program  \n  \n### HELLO.TXT\n\n|\n\n### HELLO.TXT\n\n| Use RET instead of INT 21 to terminate program  \n  \n### LICENSE.md\n\n|\n\n### LICENSE.md\n\n| Add program  \n  \n### README.md\n\n|\n\n### README.md\n\n| Fix description in the Assemble section  \n  \n## Repository files navigation\n\n# Programming \"Hello, World\" in MS-DOS\n\nThe program HELLO.COM was developed on MS-DOS Version 6.22 using the DOS\nprogram named DEBUG.EXE. It is exactly 23 bytes in length. It can be used to\nprint the string \"hello, world\" followed by newline to standard output.\n\n## Assemble\n\nHere is the complete DEBUG.EXE session that creates a \"hello, world\" program:\n\n    \n    \n    C:\\>debug -A 1165:0100 MOV AH, 9 1165:0102 MOV DX, 108 1165:0105 INT 21 1165:0107 RET 1165:0108 DB 'hello, world', D, A, '$' 1165:0117 -G hello, world Program terminated normally -N HELLO.COM -R CX CX 0000 :17 -W Writing 00017 bytes -Q C:\\>HELLO hello, world C:\\>\n\nNote that the N (name) command specifies the name of the file where we write\nthe binary machine code to. Also, note that the W (write) command expects the\nregisters BX and CX to contain the number of bytes to be written to the file.\nWhen DEBUG.EXE starts, BX is already initialized to 0, so we only set the\nregister CX to 17 (decimal 23) with the R CX command above.\n\nThe debugger session inputs are archived in the file named HELLO.TXT, so the\nbinary file named HELLO.COM can also be created by running the following DOS\ncommand:\n\n    \n    \n    DEBUG < HELLO.TXT\n\nThe binary executable file can be created on a Unix or Linux system using the\nprintf command as follows:\n\n    \n    \n    echo B4 09 BA 08 01 CD 21 C3 68 65 6C 6C 6F 2C 20 77 6F 72 6C 64 0D 0A 24 | xxd -r -p > HELLO.COM\n\n## Unassemble\n\nHere is a disassembly of HELLO.COM to confirm that it has been written\ncorrectly:\n\n    \n    \n    C:\\>DEBUG -N HELLO.COM -L -U 100 116 117C:0100 B409 MOV AH,09 117C:0102 BA0801 MOV DX,0108 117C:0105 CD21 INT 21 117C:0107 C3 RET 117C:0108 68 DB 68 117C:0109 65 DB 65 117C:010A 6C DB 6C 117C:010B 6C DB 6C 117C:010C 6F DB 6F 117C:010D 2C20 SUB AL,20 117C:010F 776F JA 0180 117C:0111 726C JB 017F 117C:0113 64 DB 64 117C:0114 0D0A24 OR AX,240A -D 100 116 117C:0100 B4 09 BA 08 01 CD 21 C3-68 65 6C 6C 6F 2C 20 77 ......!.hello, w 117C:0110 6F 72 6C 64 0D 0A 24 orld..$\n\n## Run\n\nTo run this program on MS-DOS, simply enter the following command at the\ncommand prompt:\n\n    \n    \n    HELLO\n\n## INT 20 vs. RET\n\nAnother way to terminate a .COM program is to simply use the instruction INT\n20. This consumes two bytes in the machine code: CD 20.\n\nWhile producing the smallest possible executable is not the goal of this\nproject, this project indulges in a little bit of size reduction by using the\nRET instruction to terminate the program. This consumes only one byte: C3.\nThis works because when a .COM file starts, the register SP contains FFFE. The\nstack memory locations at offset FFFE and FFFF contain 00 and 00,\nrespectively. Further, the memory address offset 0000 contains the instruction\nINT 20.\n\n    \n    \n    C:\\>DEBUG HELLO.COM -R SP SP FFFE : -D FFFE 117C:FFF0 00 00 -U 0 1 117C:0000 CD20 INT 20\n\nAs a result, executing the RET instruction pops 0000 off the stack at FFFE and\nloads it into IP. This results in the intstruction INT 20 at offset 0000\ngetting executed which leads to program termination.\n\nWhile both INT 20 and RET lead to successful program termination both in DOS\nas well as while debugging with DEBUG.EXE, there is some difference between\nthem which affects the debugging experience. Terminating the program with INT\n20 allows us to run the program repeatedly within the debugger by repeated\napplications of the G debugger command. But when we terminate the program with\nRET, we cannot run the program repeatedly in this manner. The program runs and\nterminates successfully the first time we run it in the debugger but the stack\ndoes not get reinitialized with zeros to prepare it for another execution of\nthe program within the debugger. Therefore when we try to run the program the\nsecond time using the G command, the program does not terminate successfully.\nIt hangs instead. It is possible to work around this by reinitializing the\nstack with the debugger command E FFFE 0 0 before running G again.\n\n## License\n\nThis is free and open source software. You can use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of it, under the terms of\nthe MIT License. See LICENSE.md for details.\n\nThis software is provided \"AS IS\", WITHOUT WARRANTY OF ANY KIND, express or\nimplied. See LICENSE.md for details.\n\n## More\n\nThe example presented in this document relies on INT 21 which is a DOS\nservice. See the ALT subdirectory for example programs that do not rely on DOS\nservices. These additional examples also show how to create boot sector\nprograms that print \"hello, world\" on booting the computer.\n\nThere is also a 5-byte reboot program available at github.com/susam/reboot.\n\n## About\n\nA 23-byte \u201chello, world\u201d program assembled with DEBUG.EXE in MS-DOS\n\n### Topics\n\ndos asm hello-world x86 ms-dos\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n147 stars\n\n### Watchers\n\n5 watching\n\n### Forks\n\n5 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * susam Susam\n  * berlincount Andreas 'count' Kotes\n\n## Languages\n\n  * Assembly 97.5%\n  * DIGITAL Command Language 2.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
