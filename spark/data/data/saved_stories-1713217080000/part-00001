{"aid": "40041976", "title": "An Open-Source Implementation of Apple Code Signing and Notarization", "url": "https://gregoryszorc.com/blog/2022/08/08/achieving-a-completely-open-source-implementation-of-apple-code-signing-and-notarization/", "domain": "gregoryszorc.com", "votes": 4, "user": "tosh", "posted_at": "2024-04-15 15:36:54", "comments": 0, "source_title": "Gregory Szorc's Digital Home | Achieving A Completely Open Source Implementation of Apple Code Signing and Notarization", "source_text": "Gregory Szorc's Digital Home | Achieving A Completely Open Source Implementation of Apple Code Signing and Notarization\n\n  * Home\n  * Blog\n  * Notes\n  * Work\n  * Skills\n  * Thoughts\n  * Resume\n\n## Achieving A Completely Open Source Implementation of Apple Code Signing and\nNotarization\n\nAugust 08, 2022 at 08:08 AM | categories: Apple, Rust\n\nAs I've previously blogged in Pure Rust Implementation of Apple Code Signing\n(2021-04-14) and Expanding Apple Ecosystem Access with Open Source, Multi\nPlatform Code signing (2022-04-25), I've been hacking on an open source\nimplementation of Apple code signing and notarization using the Rust\nprogramming language. This takes the form of the apple-codesign crate /\nlibrary and its rcodesign CLI executable. (Documentation / GitHub project /\ncrates.io).\n\nAs of that most recent post in April, I was pretty happy with the relative\nstability of the implementation: we were able to sign, notarize, and staple\nMach-O binaries, directory bundles (.app, .framework bundles, etc), XAR\narchives / flat packages / .pkg installers, and DMG disk images. Except for\nthe known limitations, if Apple's official codesign and notarytool tools\nsupport it, so do we. This allows people to sign, notarize, and release Apple\nsoftware from non-Apple operating systems like Linux and Windows. This opens\nup new avenues for Apple platform access.\n\nA major limitation in previous versions of the apple-codesign crate was our\nreliance on Apple's Transporter tool for notarization. Transporter is a Java\napplication made available for macOS, Linux, and Windows that speaks to\nApple's servers and can upload assets to their notarization service. I used\nthis tool at the time because it seemed to be officially supported by Apple\nand the path of least resistance to standing up notarization. But Transporter\nwas a bit wonky to use and an extra dependency that you needed to install.\n\nAt WWDC 2022, Apple announced a new Notary API as part of the App Store\nConnect API. In what felt like a wink directly at me, Apple themselves even\ncalls out the possibility for leveraging this API to notarize from Linux! I\nknew as soon as I saw this that it was only a matter of time before I would be\nable to replace Transporter with a pure Rust client for the new HTTP API. (I\nwas already thinking about using the unpublished HTTP API that notarytool\nuses. And from the limited reversing notes I have from before WWDC it looks\nlike the new official Notary API is very similar - possibly identical to -\nwhat notarytool uses. So kudos to Apple for opening up this access!)\n\nI'm very excited to announce that we now have a pure Rust implementation of a\nclient for Apple's Notary API in the apple-codesign crate. This means we can\nnow notarize Apple software from any machine where you can get the Rust crate\nto compile. This means we no longer have a dependency on the 3rd party Apple\nTransporter application. Notarization, like code signing, is 100% open source\nRust code.\n\nAs excited as I am to announce this new feature, I'm even more excited that it\nwas largely implemented by a contributor, Robin Lambertz / @roblabla! They\nfiled a GitHub feature request while WWDC 2022 was still ongoing and then\nsubmitted a PR a few days later. It took me a few months to get around to\nreviewing it (I try to avoid computer screens during summers), but it was a\nfantastic PR given the scope of the change. It never ceases to bring joy to me\nwhen someone randomly contributes greatness to open source.\n\nSo, as of the just-released 0.17 release of the apple-codesign Rust crate and\nits corresponding rcodesign CLI tool, you can now rcodesign notary-submit to\nspeak to Apple's Notary API using a pure Rust client. No more requirements on\n3rd party, proprietary software. All you need to sign and notarize Apple\napplications is the self-contained rcodesign executable and a Linux, Windows,\nmacOS, BSD, etc machine to run it on.\n\nI'm stoked to finally achieve this milestone! There are probably thousands of\ncompanies and individuals who have wanted to release Apple software from non-\nmacOS operating systems. (The existence and popularity of tools like fastlane\nseems to confirm this.) The historical lack of an Apple code signing and\nnotarization solution that worked outside macOS has prevented this. Well, that\nbarrier has officially fallen.\n\nRelease notes, documentation, and (self-signed) pre-built executables of the\nrcodesign executable for major platforms are available on the 0.17 release\npage.\n\n  * ## Categories\n\n    * Apple\n    * Bugzilla\n    * CI\n    * Clang\n    * Docker\n    * Firefox\n    * Git\n    * JavaScript\n    * Mercurial\n    * MozReview\n    * Mozilla\n    * Personal\n    * Programming\n    * Puppet\n    * PyOxidizer\n    * Python\n    * Review Board\n    * Rust\n    * Sync\n    * browsers\n    * build system\n    * code review\n    * compilers\n    * internet\n    * logging\n    * mach\n    * make\n    * misc\n    * movies\n    * packaging\n    * pymake\n    * security\n    * sysadmin\n    * testing\n\nCopyright (c) 2012- Gregory Szorc. All rights reserved. Design by CSS\nTemplates.\n\n", "frontpage": true}
