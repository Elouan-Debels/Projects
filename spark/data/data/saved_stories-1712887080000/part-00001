{"aid": "40006157", "title": "Using Kotlin Multiplatform with KMMBridge and SKIE to Publish a Native Swift SDK", "url": "https://www.powersync.com/blog/using-kotlin-multiplatform-with-kmmbridge-and-skie-to-publish-a-native-swift-sdk", "domain": "powersync.com", "votes": 2, "user": "kobieps", "posted_at": "2024-04-11 19:56:30", "comments": 0, "source_title": "Using Kotlin Multiplatform with KMMBridge and SKIE to publish a native Swift SDK", "source_text": "Using Kotlin Multiplatform with KMMBridge and SKIE to publish a native Swift\nSDK\n\nWe don't use any third-party cookies. We do however use some first-party\ncookies to collect data about how users interact with our website, to help us\nimprove it. To find out more, see our Privacy Policy.\n\nEngineering\n\nApril 11, 2024\n\nApril 11, 2024\n\n(updated)\n\n# Using Kotlin Multiplatform with KMMBridge and SKIE to publish a native Swift\nSDK\n\nManrich van Greunen\n\nTable of Contents\n\nKMP Summary Enter SKIEPublishing with\nKMMBridgeImplementationLearningsProsConsSummaryFootnotes\n\nOur vision at PowerSync is to provide developers with a platform-agnostic sync\nlayer for building local-first apps. We\u2019re starting by expanding our client\nSDK to a range of frameworks, but in the near future we\u2019ll also be adding\nadditional database adapters (starting with MySQL).\n\nWe recently released our Kotlin Multiplatform (KMP) SDK, adding to our growing\nlist of PowerSync SDKs, see here.\n\nSome customers have been requesting support for PowerSync in native Swift, but\nas a small team implementing and shipping a Swift SDK would take some time. In\nthe KMP community, many have faced a similar challenge and have developed a\nhost of tools and approaches we could investigate.\n\n## KMP Summary\n\n(Feel free to skip this section if you\u2019re already familiar with KMP)\n\n  * KMP provides a framework and set of tools to write and maintain code for different platforms, with the flexibility and reliability of native programming.\n  * Kotlin supports compiling to native targets. For iOS, the Kotlin compiler compiles shared- and native-specific code into Objective-C. This gets bundled into an Xcode framework which can then be included when building an iOS app.\n  * A typical KMP developer will most likely not have to write much Swift code, apart from implementing Swift UI. Using UI frameworks like Kotlin Compose, the typical KMP developer might not even need to write any Swift code.\n\n## Enter SKIE\n\n(pronounced as 'sky')\n\nIn teams where iOS developers need to implement iOS- or Swift-specific parts\nof a KMP mobile app, they might find it difficult to use the Objective-C code\nand headers.\n\nThe difficulties might be because of the fact that the code is generated from\nKotlin, which has differences in how objects, classes, enums, function\nparameters, etc. are declared. Or the KMP implementation might be using\nsoftware concepts that are not supported (or maybe not widely supported) in\nSwift. Concepts like flows, sealed classes, async callbacks, etc.\n\nSKIE is a Gradle plugin developed and maintained by Touchlab, headed by KMP\nexpert Kevin Galligan. SKIE hooks into the KMP build pipeline to add and\nmodify the generated Objective-C code that is included in the Xcode Framework.\nThe aim is to improve the Developer Experience (DX) in Swift while preserving\ncore Kotlin code features. It does this using a variety of approaches, which\nincludes creating completionHandler wrappers, transpiling sealed classes into\nequivalent structures in Swift, renaming methods and parameters for better\nIntelliSense, and many more improvements.\n\nIn summary, SKIE promises to provide better DX for Swift developers.\n\n## Publishing with KMMBridge\n\nSince the PowerSync SDK can be added to existing projects to enable local-\nfirst capabilities, we needed a way to build and publish the Xcode framework\nproduced by KMP. Luckily the team at Touchlab also built a toolset called\nKMMBridge to enable this. They\u2019ve also written various guides and provided a\ntemplate project that was very helpful to get us set up.\n\nApart from a few issues with needing GitHub Personal Access Tokens and\nflushing Swift caches that needed to be cleared, we got everything working and\ncould use the PowerSync framework in a standalone Swift app.\n\n## Implementation\n\nUsing SKIE is as simple as applying the Gradle plugin to the module where the\nframework block for native compilations is declared.\n\nFor setting up KMMBridge, we followed this guide which has an accompanying\nGitHub template.\n\nThe basic approach is as follows:\n\n  1. Create a dedicated Gradle module to use the KMP tooling to declare the iOS targets and configure a static framework that exports our core SDK module.\n  2. Configure KMMBridge to use Swift Package Manager (instead of CocoaPods) and publish to our Maven repo hosted on GitHub.\n  3. Set up a GitHub action with the relevant environment variables that calls Touchlab\u2019s KMMBridge action. Given that our PowerSync Kotlin repo uses a custom Gradle plugin to publish to Sonatype Portal, we needed to iron out some issues with the multiple publishing config.\n  4. After publishing, the framework can be added as a Package Dependency in Xcode, then imported in Swift files as any other framework, giving you access to exported code from KMP.\n\n## Learnings\n\nAt the end of implementation, we had a decent sense of the pros and cons of\nthis approach.\n\n### Pros\n\n  1. Write a Kotlin SDK and get Swift support, i.e. less code maintenance.\n  2. Touchlabs are pushing to make SKIE + KMMBridge great (performant and good DX).\n  3. Our team has more experience on the Kotlin/Java side of things, versus Swift.\n\n### Cons\n\n  1. Requires jumping through some config hoops, both for deploying the Swift Package and actually getting it installed in an app. ^[1]\n  2. Not the best Swift DX out of the box (lots of generated code, less Swifty code patterns, and APIs), although these can be improved by using SKIE annotations and guidelines.\n  3. The total bundle size does increase, because the Kotlin standard library is included in the generated library.\n\n## Summary\n\nWeighing up all the above and in light of positive early feedback from\ncustomers, we have decided to continue pursuing using SKIE + KMMBridge for\npublishing our Swift SDK.\n\nOur Swift SDK is currently in closed alpha with select customers \u2014 please get\nin touch on our Discord if you\u2019d like to test it!\n\n## Footnotes\n\n1.\n\nWe found that installing the SDK as an end-user required these steps:\n\n1\\. You\u2019ll need a GitHub Personal Access Token (PAT) with read:packages\npermissions. If you don't have one, create one at\nhttps://github.com/settings/tokens\n\n2\\. Create a ~/.netrc file with the following contents (this is the\nrecommended approach by KMMBridge):\n\n    \n    \n    machine maven.pkg.github.com login [your GitHub username] password [your PAT from step 1]\n\n3\\. Clear Swift caches (typically needed after there were issues while adding\nour Package Dependency, including PAT with incorrect permission, incorrect\nversion or tag, etc.)\n\n    \n    \n    rm -rf ~/Library/Caches/org.swift.swiftpm rm -rf ~/Library/org.swift.swiftpm\n\n4\\. Reset Packages in Xcode File->Packages->Reset Packages\n\n5\\. Clean and Rebuild project\n\n###### Developers\n\nDocsQuickstart GuideSync RulesOpen-Source PackagesRelease NotesSystem\nStatusRoadmap\n\n###### About\n\nBlogPricingCompanyTeamContactSecurityTerms of ServiceAcceptable Use\nPolicyPrivacy Policy\n\n\u00a9 2024 Journey Mobile, Inc.\n\n", "frontpage": false}
