{"aid": "39986945", "title": "REST API testing made easy", "url": "https://github.com/alexschimpf/rest-api-tester", "domain": "github.com/alexschimpf", "votes": 1, "user": "alexschimpf", "posted_at": "2024-04-10 04:25:07", "comments": 0, "source_title": "GitHub - alexschimpf/rest-api-tester: Python REST API Tester", "source_text": "GitHub - alexschimpf/rest-api-tester: Python REST API Tester\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nalexschimpf / rest-api-tester Public\n\n  * Notifications\n  * Fork 0\n  * Star 3\n\nPython REST API Tester\n\n### License\n\nMIT license\n\n3 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# alexschimpf/rest-api-tester\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n12 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nalexschimpfdocs: Updated README.md304fa60 \u00b7\n\n## History\n\n48 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| ci: Second attempt at fixing deploy  \n  \n### rest_api_tester\n\n|\n\n### rest_api_tester\n\n| fix: Fixed content-type check in default_verifier  \n  \n### tests\n\n|\n\n### tests\n\n| deps: Removed ujson dependency  \n  \n### .flake8\n\n|\n\n### .flake8\n\n| fix: Fixed the behavior of update_scenarios_on_fail when handling JSO...  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| breaking: Lots of stuff  \n  \n### .pre-commit-config.yaml\n\n|\n\n### .pre-commit-config.yaml\n\n| chore: Fixed pre-commit hook issues  \n  \n### .releaserc\n\n|\n\n### .releaserc\n\n| ci: Added commitlint checks  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| chore: Release 4.0.4  \n  \n### CONTRIBUTE.md\n\n|\n\n### CONTRIBUTE.md\n\n| chore: Some small cleanup  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| first commit  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| ci: Second attempt at fixing deploy  \n  \n### Manifest.in\n\n|\n\n### Manifest.in\n\n| fix: Fixed package build error  \n  \n### README.md\n\n|\n\n### README.md\n\n| docs: Updated README.md  \n  \n### commitlint.config.js\n\n|\n\n### commitlint.config.js\n\n| breaking: Added ability to add a description for each test case. Now ...  \n  \n### commitlint.parser-preset.js\n\n|\n\n### commitlint.parser-preset.js\n\n| ci: Added commitlint checks  \n  \n### mypy.ini\n\n|\n\n### mypy.ini\n\n| first commit  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| chore: Some small cleanup  \n  \n### package.json\n\n|\n\n### package.json\n\n| chore: Release 4.0.4  \n  \n### requirements.dev.txt\n\n|\n\n### requirements.dev.txt\n\n| deps: Removed ujson dependency  \n  \n### setup.py\n\n|\n\n### setup.py\n\n| deps: Removed ujson dependency  \n  \n## Repository files navigation\n\n# Python REST API Tester\n\n## Installation\n\npip install rest-api-tester\n\n  * This is available for Python3.7+\n\n## About\n\nrest-api-tester makes it easy to create REST API tests for your APIs. Though\nthis tool is written in Python, your APIs need not be. This library provides a\nconsistent way to write API tests and perform the necessary validation. It is\nprimarily built to handle traditional, JSON-based APIs, although it has the\nability to handle other API formats. Also... rest-api-tester can auto-update\nyour scenario files for you when tests fail!\n\n## Tutorial\n\n  1. Create a test cases file named __scenarios__/test_something.json\n\n    \n    \n    { \"create_something\": { \"url\": \"/something\", \"method\": \"POST\", \"status\": 200, \"request\": { \"name\": \"something\" }, \"response\": { \"id\": 1, \"name\": \"something\" } } }\n\n  2. Create a unit test class\n\n    \n    \n    from rest_api_tester.test import TestCase class TestSomething(TestCase): ...\n\n  3. Create a test client implementation (see here for an example)\n\n  4. Set up your test case runner\n\n    \n    \n    import os from rest_api_tester import TestCase, TestCaseRunner <import your TestClient class here> class TestSomething(TestCase): def setUp(self) -> None: test_client = TestClient(base_url='https://myapp.com:5000') path_to_scenarios_dir = os.path.join(os.path.dirname(__file__), '__scenarios__') self.runner = TestCaseRunner( client=test_client, path_to_scenarios_dir=path_to_scenarios_dir, default_content_type='application/json' )\n\n  5. Create your first API test\n\n    \n    \n    class TestSomething(TestCase): ... def test_create_something(self) -> None: result = self.runner.run( path_to_test_cases='test_something.json', test_name='create_something' ) self.verify_test_result(result=result)\n\n  6. Add a more complicated test\n\n    \n    \n    { \"update_something\": { \"description\": \"Make sure PUT /something/{id} returns a 200\", \"url\": \"/something/{id}\", \"method\": \"PUT\", \"status\": 200, \"request\": { \"name\": \"something\", \"alias\": \"???\" }, \"response\": { \"id\": \"???\", \"name\": \"something\", \"alias\": \"???\", \"created_date\": \"???\" } } }\n    \n    \n    import datetime class TestSomething(TestCase): ... def test_update_something(self) -> None: new_alias = 'something_else' something_id = create_something() # assume this function already exists result = self.runner.run( path_to_test_cases='test_something.json', test_name='update_something', # Fill in URL variables at runtime url_params={ 'id': something_id }, # Modify request data at runtime request_json_modifiers={ 'alias': new_alias }, # Modify expected response data at runtime response_json_modifiers={ 'id': something_id, 'alias': new_alias, 'created_date': str(datetime.datetime.now().date()) } ) self.verify_test_result( result=result, # Exclude some response fields from validation excluded_response_paths=[ 'some_response_field_i_can_ignore' ] )\n\n## Summary\n\nrest-api-tester makes API testing easier for APIs based on JSON and plain-text\nformats.\n\n### Scenario Files\n\nTest scenarios are written in external files. A scenario specifies the request\nto be made and expected response details (i.e. content, headers, and status).\n\n### API Client\n\nYou must implement your own client as a subclass of\nrest_api_tester.client.base_client.BaseClient to make the API requests. See\nhere for an example.\n\n### Test Case Runner\n\nTo run your test cases, you must use rest_api_tester.runner.TestCaseRunner.\nThis class parses your test scenario files and uses your client implementation\nto make the necessary API requests. A JSON parser is provided as a default to\nparse your test scenario files. A scenario files can contain one or more test\nscenarios, each with a specific key that can be referenced in code. Custom\nparsers can be created and passed to TestCaseRunner.\n\n### Test Case\n\nAll test cases are built upon python's unittest. Your test case classes should\ninherit from rest_api_tester.test.TestCase. This base class provides the\nfunctionality to verify test results from\nrest_api_tester.runner.TestCaseRunner. To do this, you will pass the test\nresults from TestCaseRunner to TestCase.verify_test_result. The default\nresponse content verifier should work for most cases, but a custom verifier\nfunction can be used via the verifier param.\n\n### Modifying Scenarios at Runtime\n\nIn many instances, URLs, request data, and expected response data need to be\nmodified at runtime. For example, you may create an entity, but its ID or\ncreation date are not known until runtime. Another use case is authentication.\nFor example, you may generate a login cookie at runtime, which can be used to\naugment your request. Thus, your test scenarios need to be augmented. rest-\napi-tester offers various ways to handle such cases.\n\n  1. You can modify scenario URLs at runtime by using url_params from TestCaseRunner.run.\n\n     * If your URL is /something/{id}, you can use url_params={'id': 123} to substitute 123 in for {id}.\n  2. You can modify your scenario request JSON data at runtime by using request_json_modifiers from TestCaseRunner.run.\n\n     * You can provide a dict of JSON paths and, for each, a value.\n     * The JSON path format supported is a simple one that can be easily understood via the test cases here.\n     * Note that this is similar but not quite the same as JsonPath expressions (e.g. https://github.com/json-path/JsonPath)\n     * For example, {'a.[1].b.*c': 3} will modify set item['c'] = 3 for all items of request_json['a'][1]['b'].\n  3. Similarly, you can modify your scenario expected response JSON data at runtime by using response_json_modifiers from TestCaseRunner.run.\n  4. You can also modify request headers and expected response headers at runtime by using request_header_modifiers and response_header_modifiers from TestCaseRunner.run.\n  5. If you want to exclude some response fields from verification, you can use excluded_response_paths from TestCase.verify_test_result\n\n     * This will be a list of the same kind of JSON paths from request_json_modifiers and response_json_modifiers.\n     * This can be useful if certain fields from the response can't be easily known at runtime.\n  6. If you'd like more fine-grained, programmatic control over test scenario data before a test is actually run, you can use test_data_modifier from TestCaseRunner.run.\n\n     * This requires passing a function (or list of functions) which accepts a TestData parameter and returns the modified TestData.\n     * The TestData object contains all the parsed test scenario data before the test has been executed (i.e. the client has made an API call).\n     * This can be used to add authentication headers/cookies that may not be known until runtime.\n\n### Auto-updating Scenario Files on Fail\n\nrest-api-tester can also auto-update your scenario files for you when tests\nfail. For example, if you run your tests, but your response data does not\nmatch, rest-api-tester can automatically update the scenario's expected\nresponse details based on what the actual API response was. This can be done\nin one of the following ways:\n\n  * Setting self.update_scenarios_on_fail = True in TestCase.setup.\n  * Passing update_scenarios_on_fail = True to TestCase.verify_test_result\n\nYou can modify the default behavior of update_scenarios_on_fail by setting\nself.update_scenarios_on_fail_options in TestCase.setUp or by passing\nupdate_scenarios_on_fail_options to TestCase.verify_test_result.\n\nPlease note that scenario files can become corrupted if tests run in parallel\nand update the same file. Corruption can also happen if the tests are force-\nkilled in the middle of writing to scenario files.\n\n## Not Supported\n\n  * APIs based on data formats other than JSON and plain text\n\n    * It's possible other formats could be used, but it would likely require more workaround and effort\n  * File uploads\n  * SOAP\n  * Websockets\n  * RPC\n\n## Examples\n\n  * You can find more advanced API test examples here.\n  * Note: The examples provided are run against a FastAPI server, and thus need Python3.7+ to run.\n\n## About\n\nPython REST API Tester\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n3 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases 12\n\nv4.0.4 Latest\n\nMar 19, 2024\n\n\\+ 11 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * alexschimpf Alex Schimpf\n  * semantic-release-bot Semantic Release Bot\n\n## Languages\n\n  * Python 96.1%\n  * Makefile 2.4%\n  * JavaScript 1.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
