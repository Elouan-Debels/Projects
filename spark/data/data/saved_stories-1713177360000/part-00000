{"aid": "40037104", "title": "Reproducible and minimal source-only tarballs", "url": "https://blog.josefsson.org/2024/04/13/reproducible-and-minimal-source-only-tarballs/", "domain": "josefsson.org", "votes": 2, "user": "pabs3", "posted_at": "2024-04-15 04:34:56", "comments": 0, "source_title": "Reproducible and minimal source-only tarballs", "source_text": "Reproducible and minimal source-only tarballs \u2013 Simon Josefsson's blog\n\nSkip to content\n\nSimon Josefsson's blog\n\nMenu\n\n# Reproducible and minimal source-only tarballs\n\nPosted on 2024-04-13 by simon \u2014 No Comments \u2193\n\nWith the release of Libntlm version 1.8 the release tarball can be reproduced\non several distributions. We also publish a signed minimal source-only\ntarball, produced by git-archive which is the same format used by Savannah,\nCodeberg, GitLab, GitHub and others. Reproducibility of both tarballs are\ntested continuously for regressions on GitLab through a CI/CD pipeline. If\nthat wasn\u2019t enough to excite you, the Debian packages of Libntlm are now built\nfrom the reproducible minimal source-only tarball. The resulting binaries are\nhopefully reproducible on several architectures.\n\nWhat does that even mean? Why should you care? How you can do the same for\nyour project? What are the open issues? Read on, dear reader...\n\nThis article describes my practical experiments with reproducible release\nartifacts, following up on my earlier thoughts that lead to discussion on\nFosstodon and a patch by Janneke Nieuwenhuizen to make Guix tarballs\nreproducible that inspired me to some practical work.\n\nLet\u2019s look at how a maintainer release some software, and how a user can\nreproduce the released artifacts from the source code. Libntlm provides a\nshared library written in C and uses GNU Make, GNU Autoconf, GNU Automake, GNU\nLibtool and gnulib for build management, but these ideas should apply to most\nproject and build system. The following illustrate the steps a maintainer\nwould take to prepare a release:\n\n    \n    \n    git clone https://gitlab.com/gsasl/libntlm.git cd libntlm git checkout v1.8 ./bootstrap ./configure make distcheck gpg -b libntlm-1.8.tar.gz\n\nThe generated files libntlm-1.8.tar.gz and libntlm-1.8.tar.gz.sig are\npublished, and users download and use them. This is how the GNU project have\nbeen doing releases since the late 1980\u2019s. That is a testament to how\nsuccessful this pattern has been! These tarballs contain source code and some\ngenerated files, typically shell scripts generated by autoconf, makefile\ntemplates generated by automake, documentation in formats like Info, HTML, or\nPDF. Rarely do they contain binary object code, but historically that\nhappened.\n\nThe XZUtils incident illustrate that tarballs with files that are not included\nin the git archive offer an opportunity to disguise malicious backdoors. I\nblogged earlier how to mitigate this risk by using signed minimal source-only\ntarballs.\n\nThe risk of hiding malware is not the only motivation to publish signed\nminimal source-only tarballs. With pre-generated content in tarballs, there is\na risk that GNU/Linux distributions such as Trisquel, Guix, Debian/Ubuntu or\nFedora ship generated files coming from the tarball into the binary *.deb or\n*.rpm package file. Typically the person packaging the upstream project never\nrealized that some installed artifacts was not re-built through a typical\nautoconf -fi && ./configure && make install sequence, and never wrote the code\nto rebuild everything. This can also happen if the build rules are written but\nare buggy, shipping the old artifact. When a security problem is found, this\ncan lead to time-consuming situations, as it may be that patching the relevant\nsource code and rebuilding the package is not sufficient: the vulnerable\ngenerated object from the tarball would be shipped into the binary package\ninstead of a rebuilt artifact. For architecture-specific binaries this rarely\nhappens, since object code is usually not included in tarballs \u2014 although for\n10+ years I shipped the binary Java JAR file in the GNU Libidn release\ntarball, until I stopped shipping it. For interpreted languages and especially\nfor generated content such as HTML, PDF, shell scripts this happens more than\nyou would like.\n\nPublishing minimal source-only tarballs enable easier auditing of a project\u2019s\ncode, to avoid the need to read through all generated files looking for\nmalicious content. I have taken care to generate the source-only minimal\ntarball using git-archive. This is the same format that GitLab, GitHub etc\noffer for the automated download links on git tags. The minimal source-only\ntarballs can thus serve as a way to audit GitLab and GitHub download material!\nConsider if/when hosting sites like GitLab or GitHub has a security incident\nthat cause generated tarballs to include a backdoor that is not present in the\ngit repository. If people rely on the tag download artifact without verifying\nthe maintainer PGP signature using GnuPG, this can lead to similar backdoor\nscenarios that we had for XZUtils but originated with the hosting provider\ninstead of the release manager. This is even more concerning, since this\nattack can be mounted for some selected IP address that you want to target and\nnot on everyone, thereby making it harder to discover.\n\nWith all that discussion and rationale out of the way, let\u2019s return to the\nrelease process. I have added another step here:\n\n    \n    \n    make srcdist gpg -b libntlm-1.8-src.tar.gz\n\nNow the release is ready. I publish these four files in the Libntlm\u2019s Savannah\nDownload area, but they can be uploaded to a GitLab/GitHub release area as\nwell. These are the SHA256 checksums I got after building the tarballs on my\nTrisquel 11 aramo laptop:\n\n    \n    \n    91de864224913b9493c7a6cec2890e6eded3610d34c3d983132823de348ec2ca libntlm-1.8-src.tar.gz ce6569a47a21173ba69c990965f73eb82d9a093eb871f935ab64ee13df47fda1 libntlm-1.8.tar.gz\n\nSo how can you reproduce my artifacts? Here is how to reproduce them in a\nUbuntu 22.04 container:\n\n    \n    \n    podman run -it --rm ubuntu:22.04 apt-get update apt-get install -y --no-install-recommends autoconf automake libtool make git ca-certificates git clone https://gitlab.com/gsasl/libntlm.git cd libntlm git checkout v1.8 ./bootstrap ./configure make dist srcdist sha256sum libntlm-*.tar.gz\n\nYou should see the exact same SHA256 checksum values. Hooray!\n\nThis works because Trisquel 11 and Ubuntu 22.04 uses the same version of git,\nautoconf, automake, and libtool. These tools do not guarantee the same output\ncontent for all versions, similar to how GNU GCC does not generate the same\nbinary output for all versions. So there is still some delicate version\npairing needed.\n\nIdeally, the artifacts should be possible to reproduce from the release\nartifacts themselves, and not only directly from git. It is possible to\nreproduce the full tarball in a AlmaLinux 8 container \u2013 replace almalinux:8\nwith rockylinux:8 if you prefer RockyLinux:\n\n    \n    \n    podman run -it --rm almalinux:8 dnf update -y dnf install -y make wget gcc wget https://download.savannah.nongnu.org/releases/libntlm/libntlm-1.8.tar.gz tar xfa libntlm-1.8.tar.gz cd libntlm-1.8 ./configure make dist sha256sum libntlm-1.8.tar.gz\n\nThe source-only minimal tarball can be regenerated on Debian 11:\n\n    \n    \n    podman run -it --rm debian:11 apt-get update apt-get install -y --no-install-recommends make git ca-certificates git clone https://gitlab.com/gsasl/libntlm.git cd libntlm git checkout v1.8 make -f cfg.mk srcdist sha256sum libntlm-1.8-src.tar.gz\n\nAs the Magnus Opus or chef-d\u2019\u0153uvre, let\u2019s recreate the full tarball directly\nfrom the minimal source-only tarball on Trisquel 11 \u2013 replace\ndocker.io/kpengboy/trisquel:11.0 with ubuntu:22.04 if you prefer.\n\n    \n    \n    podman run -it --rm docker.io/kpengboy/trisquel:11.0 apt-get update apt-get install -y --no-install-recommends autoconf automake libtool make wget git ca-certificates wget https://download.savannah.nongnu.org/releases/libntlm/libntlm-1.8-src.tar.gz tar xfa libntlm-1.8-src.tar.gz cd libntlm-v1.8 ./bootstrap ./configure make dist sha256sum libntlm-1.8.tar.gz\n\nYay! You should now have great confidence in that the release artifacts\ncorrespond to what\u2019s in version control and also to what the maintainer\nintended to release. Your remaining job is to audit the source code for\nvulnerabilities, including the source code of the dependencies used in the\nbuild. You no longer have to worry about auditing the release artifacts.\n\nI find it somewhat amusing that the build infrastructure for Libntlm is now in\na significantly better place than the code itself. Libntlm is written in old C\nstyle with plenty of string manipulation and uses broken cryptographic\nalgorithms such as MD4 and single-DES. Remember folks: solving supply chain\nsecurity issues has no bearing on what kind of code you eventually run. A\nclean gun can still shoot you in the foot.\n\nSide note on naming: GitLab exports tarballs with pathnames libntlm-v1.8/\n(i.e.., PROJECT-TAG/) and I\u2019ve adopted the same pathnames, which means my\nlibntlm-1.8-src.tar.gz tarballs are bit-by-bit identical to GitLab\u2019s exports\nand you can verify this with tools like diffoscope. GitLab name the tarball\nlibntlm-v1.8.tar.gz (i.e., PROJECT-TAG.ARCHIVE) which I find too similar to\nthe libntlm-1.8.tar.gz that we also publish. GitHub uses the same git archive\nstyle, but unfortunately they have logic that removes the \u2018v\u2019 in the pathname\nso you will get a tarball with pathname libntlm-1.8/ instead of libntlm-v1.8/\nthat GitLab and I use. The content of the tarball is bit-by-bit identical, but\nthe pathname and archive differs. Codeberg (running Forgejo) uses another\napproach: the tarball is called libntlm-v1.8.tar.gz (after the tag) just like\nGitLab, but the pathname inside the archive is libntlm/, otherwise the\nproduced archive is bit-by-bit identical including timestamps. Savannah\u2019s CGIT\ninterface uses archive name libntlm-1.8.tar.gz with pathname libntlm-1.8/, but\notherwise file content is identical. Savannah\u2019s GitWeb interface provides\nsnapshot links that are named after the git commit (e.g.,\nlibntlm-a812c2ca.tar.gz with libntlm-a812c2ca/) and I cannot find any tag-\nbased download links at all. Overall, we are so close to get SHA256 checksum\nto match, but fail on pathname within the archive. I\u2019ve chosen to be\ncompatible with GitLab regarding the content of tarballs but not on archive\nnaming. From a simplicity point of view, it would be nice if everyone used\nPROJECT-TAG.ARCHIVE for the archive filename and PROJECT-TAG/ for the pathname\nwithin the archive. This aspect will probably need more discussion.\n\nSide note on git archive output: It seems different versions of git archive\nproduce different results for the same repository. The version of git in\nDebian 11, Trisquel 11 and Ubuntu 22.04 behave the same. The version of git in\nDebian 12, AlmaLinux/RockyLinux 8/9, Alpine, ArchLinux, macOS homebrew, and\nupcoming Ubuntu 24.04 behave in another way. Hopefully this will not change\nthat often, but this would invalidate reproducibility of these tarballs in the\nfuture, forcing you to use an old git release to reproduce the source-only\ntarball. Alas, GitLab and most other sites appears to be using modern git so\nthe download tarballs from them would not match my tarballs \u2013 even though the\ncontent would.\n\nSide note on ChangeLog: ChangeLog files were traditionally manually curated\nfiles with version history for a package. In recent years, several projects\nmoved to dynamically generate them from git history (using tools like git2cl\nor gitlog-to-changelog). This has consequences for reproducibility of\ntarballs: you need to have the entire git history available! The gitlog-to-\nchangelog tool also output different outputs depending on the time zone of the\nperson using it, which arguable is a simple bug that can be fixed. However\nthis entire approach is incompatible with rebuilding the full tarball from the\nminimal source-only tarball. It seems Libntlm\u2019s ChangeLog file died on the\nsurgery table here.\n\nSo how would a distribution build these minimal source-only tarballs? I happen\nto help on the libntlm package in Debian. It has historically used the\ngenerated tarballs as the source code to build from. This means that code\ncoming from gnulib is vendored in the tarball. When a security problem is\ndiscovered in gnulib code, the security team needs to patch all packages that\ninclude that vendored code and rebuild them, instead of merely patching the\ngnulib package and rebuild all packages that rely on that particular code. To\nchange this, the Debian libntlm package needs to Build-Depends on Debian\u2019s\ngnulib package. But there was one problem: similar to most projects that use\ngnulib, Libntlm depend on a particular git commit of gnulib, and Debian only\nship one commit. There is no coordination about which commit to use. I have\nadopted gnulib in Debian, and add a git bundle to the *_all.deb binary package\nso that projects that rely on gnulib can pick whatever commit they need. This\nallow an no-network GNULIB_URL and GNULIB_REVISION approach when running\nLibntlm\u2019s ./bootstrap with the Debian gnulib package installed. Otherwise\nlibntlm would pick up whatever latest version of gnulib that Debian happened\nto have in the gnulib package, which is not what the Libntlm maintainer\nintended to be used, and can lead to all sorts of version mismatches (and\nconsequently security problems) over time. Libntlm in Debian is developed and\ntested on Salsa and there is continuous integration testing of it as well,\nthanks to the Salsa CI team.\n\nSide note on git bundles: unfortunately there appears to be no reproducible\nway to export a git repository into one or more files. So one unfortunate\nconsequence of all this work is that the gnulib *.orig.tar.gz tarball in\nDebian is not reproducible any more. I have tried to get Git bundles to be\nreproducible but I never got it to work \u2014 see my notes in gnulib\u2019s\ndebian/README.source on this aspect. Of course, source tarball reproducibility\nhas nothing to do with binary reproducibility of gnulib in Debian itself,\nfortunately.\n\nOne open question is how to deal with the increased build dependencies that is\ntriggered by this approach. Some people are surprised by this but I don\u2019t see\nhow to get around it: if you depend on source code for tools in another\npackage to build your package, it is a bad idea to hide that dependency. We\u2019ve\ndone it for a long time through vendored code in non-minimal tarballs. Libntlm\nisn\u2019t the most critical project from a bootstrapping perspective, so adding\ngit and gnulib as Build-Depends to it will probably be fine. However, consider\nif this pattern was used for other packages that uses gnulib such as\ncoreutils, gzip, tar, bison etc (all are using gnulib) then they would all\nBuild-Depends on git and gnulib. Cross-building those packages for a new\narchitecture will therefor require git on that architecture first, which gets\ncircular quick. The dependency on gnulib is real so I don\u2019t see that going\naway, and gnulib is a Architecture:all package. However, the dependency on git\nis merely a consequence of how the Debian gnulib package chose to make all\ngnulib git commits available to projects: through a git bundle. There are\nother ways to do this that doesn\u2019t require the git tool to extract the\nnecessary files, but none that I found practical \u2014 ideas welcome!\n\nFinally some brief notes on how this was implementated. Enabling\nbootstrappable source-only minimal tarballs via gnulib\u2019s ./bootstrap is\nachieved by using the GNULIB_REVISION mechanism, locking down the gnulib\ncommit used. I have always disliked git submodules because they add extra\nsteps and has complicated interaction with CI/CD. The reason why I gave up git\nsubmodules now is because the particular commit to use is not recorded in the\ngit archive output when git submodules is used. So the particular gnulib\ncommit has to be mentioned explicitly in some source code that goes into the\ngit archive tarball. Colin Watson added the GNULIB_REVISION approach to\n./bootstrap back in 2018, and now it no longer made sense to continue to use a\ngnulib git submodule. One alternative is to use ./bootstrap with --gnulib-\nsrcdir or --gnulib-refdir if there is some practical problem with the\nGNULIB_URL towards a git bundle the GNULIB_REVISION in bootstrap.conf.\n\nThe srcdist make rule is simple:\n\n    \n    \n    git archive --prefix=libntlm-v1.8/ -o libntlm-v1.8.tar.gz HEAD\n\nMaking the make dist generated tarball reproducible can be more complicated,\nhowever for Libntlm it was sufficient to make sure the modification times of\nall files were set deterministically to a timestamp found in the git\nrepository. Interestingly there seems to be a couple of different ways to\naccomplish this, Guix doesn\u2019t support minimal source-only tarballs but rely on\na .tarball-timestamp file inside the tarball. Paul Eggert explained what TZDB\nis using some time ago. The approach I\u2019m using now is fairly similar to the\none I suggested over a year ago.\n\nDoing continous testing of all this is critical to make sure things don\u2019t\nregress. Libntlm\u2019s pipeline definition now produce the generated\nlibntlm-*.tar.gz tarballs and a checksum as a build artifact. Then I added the\n000-reproducability job which compares the checksums and fails on mismatches.\nYou can read its delicate output in the job for the v1.8 release. Right now we\ninsists that builds on Trisquel 11 match Ubuntu 22.04, that PureOS 10 builds\nmatch Debian 11 builds, that AlmaLinux 8 builds match RockyLinux 8 builds, and\nAlmaLinux 9 builds match RockyLinux 9 builds. As you can see in pipeline job\noutput, not all platforms lead to the same tarballs, but hopefully this state\ncan be improved over time. There is also partial reproducibility, where the\nfull tarball is reproducible across two distributions but not the minimal\ntarball, or vice versa.\n\nIf this way of working plays out well, I hope to implement it in other\nprojects too.\n\nWhat do you think? Happy Hacking!\n\nThis entry was posted in general, security and tagged autotools, bootstrap,\ndebian, gitlab, gnu, gnupg, guix, libntlm, pgp, reproducible, sbom, security,\nsignature, supply-chain, trisquel by simon. Bookmark the permalink.\n\n## Leave a Reply Cancel reply\n\n## Primary Sidebar Widget Area\n\n## Tags\n\n3g (3) android (7) crypto (4) debian (40) devuan (4) ed25519 (6) fsdg (4) fsf\n(5) git (5) gitlab (5) gnome (5) gnu (28) gnuk (8) gnupg (17) gnutls (4) gsasl\n(5) guix (6) i9300 (4) ietf (10) key (4) keyring (3) laptop (5) lenovo (4)\nlinux (6) neo (4) openpgp (20) openssh (4) openwrt (6) pgp (5) pureos (9)\nreplicant (7) reproducible (4) rsa (5) ryf (4) s3 (5) sasl (8) security (17)\nsigstore (5) smartcard (6) smartcards (4) ssh (4) sysadmin (3) trisquel (18)\nubuntu (9) yubikey (6)\n\n## Recent Posts\n\n  * Reproducible and minimal source-only tarballs 2024-04-13\n  * Towards reproducible minimal source code tarballs? On *-src.tar.gz 2024-04-01\n  * Apt archive mirrors in Git-LFS 2024-03-18\n  * Trisquel on arm64: Ampere Altra 2024-01-10\n  * Validating debian/copyright: licenserecon 2023-12-29\n  * Classic McEliece goes to IETF and OpenSSH 2023-12-10\n  * Trisquel on ppc64el: Talos II 2023-09-01\n  * Enforcing wrap-and-sort -satb 2023-08-16\n  * Coping with non-free software in Debian 2023-07-11\n  * Streamlined NTRU Prime sntrup761 goes to IETF 2023-05-12\n  * How To Trust A Machine 2023-04-29\n  * A Security Device Threat Model: The Substitution Attack 2023-04-27\n  * Sigstore for Apt Archives: apt-cosign 2023-04-20\n  * More on Differential Reproducible Builds: Devuan is 46% reproducible! 2023-04-17\n  * Sigstore protects Apt archives: apt-verify & apt-sigstore 2023-04-15\n  * Trisquel is 42% Reproducible! 2023-04-10\n  * OpenPGP master key on Nitrokey Start 2023-03-27\n  * Apt Archive Transparency: debdistdiff & apt-canary 2023-02-01\n  * Understanding Trisquel 2023-01-22\n  * Preseeding Trisquel Virtual Machines Using \u201cnetinst\u201d Images 2022-12-30\n  * OpenPGP key on FST-01SZ 2022-12-24\n  * Second impressions of Guix 1.4 2022-12-19\n  * Guix 1.4 on NV41PZ 2022-12-16\n  * Trisquel 11 on NV41PZ: First impressions 2022-12-10\n  * How to complicate buying a laptop 2022-12-10\n  * On language bindings & Relaunching Guile-GnuTLS 2022-10-14\n  * Privilege separation of GSS-API credentials for Apache 2022-09-20\n  * Static network config with Debian Cloud images 2022-08-22\n  * Towards pluggable GSS-API modules 2022-07-14\n  * What\u2019s wrong with SCRAM? 2021-06-08\n  * OpenPGP smartcard with GNOME on Debian 11 Bullseye 2021-05-01\n  * Passive Icinga Checks: icinga-pusher 2019-12-16\n  * OpenPGP smartcard under GNOME on Debian 10 Buster 2019-06-21\n  * Offline Ed25519 OpenPGP key with subkeys on FST-01G running Gnuk 2019-03-21\n  * Installing Gnuk on FST-01G running NeuG 2019-03-21\n  * OpenPGP 2019 Key Transition Statement 2019-03-21\n  * Planning for a new OpenPGP key 2019-03-21\n  * Vikings D16 server first impressions 2017-08-03\n  * OpenPGP smartcard under GNOME on Debian 9.0 Stretch 2017-06-19\n  * GPS on Replicant 6 2017-03-04\n  * Why I don\u2019t Use 2048 or 4096 RSA Key Sizes 2016-11-03\n  * Let\u2019s Encrypt Clients 2015-12-17\n  * Automatic Replicant Backup over USB using rsync 2015-11-28\n  * Combining Dnsmasq and Unbound 2015-10-26\n  * Cosmos \u2013 A Simple Configuration Management System 2015-09-24\n  * SSH Host Certificates with YubiKey NEO 2015-06-16\n  * Scrypt in IETF 2015-05-19\n  * Certificates for XMPP/Jabber 2015-05-12\n  * Laptop decision fatigue 2015-05-11\n  * Laptop indecision 2015-03-25\n  * EdDSA and Ed25519 goes to IETF 2015-03-04\n  * Laptop Buying Advice? 2015-02-24\n  * Replicant 4.2 0003 on I9300 2015-01-14\n  * OpenPGP Smartcards and GNOME 2015-01-02\n  * Dice Random Numbers 2014-11-12\n  * The Case for Short OpenPGP Key Validity Periods 2014-08-26\n  * Wifi on S3 with Replicant 2014-08-10\n  * Replicant 4.2 0002 and NFC on I9300 2014-08-05\n  * Offline GnuPG Master Key and Subkeys on YubiKey NEO Smartcard 2014-06-23\n  * OpenPGP Key Transition Statement 2014-06-23\n  * Creating a small JPEG photo for your OpenPGP key 2014-06-19\n  * Replicant 4.2 on Samsung S3 2014-02-27\n  * Necrotizing Fasciitis 2014-01-05\n  * Replicant 4.0 on Samsung Galaxy S III 2013-11-11\n  * BLURB: Software repository metadata convention 2013-09-24\n  * Portable Symmetric Key Container (PSKC) Library 2012-10-11\n  * Using OATH Toolkit with Dropbox 2012-08-27\n  * Small syslog server 2011-12-12\n  * Unattended SSH with Smartcard 2011-10-11\n  * OpenWRT with Huawei E367 and TP-Link TL-WR1043ND 2011-05-22\n  * Introducing the OATH Toolkit 2011-01-20\n  * On Password Hashing and RFC 6070 2011-01-07\n  * GNU SASL with SCRAM-SHA-1-PLUS 2010-11-17\n  * Debian on Lenovo X201 2010-10-25\n  * GS2-KRB5 using GNU SASL and MIT Kerberos for Windows 2010-09-27\n  * Bridging SASL and GSS-API: GS2 2010-07-13\n  * OpenWRT 10.03 \u201cBackfire\u201d 2010-05-03\n  * GS2-KRB5 in GNU SASL 1.5.0 2010-03-31\n  * Fellowship interview 2010-01-08\n  * Nordic Free Software Award 2009 2009-11-15\n  * Storing OpenPGP keys in the DNS 2009-10-29\n  * Thread Safe Functions 2009-06-23\n  * CACert and GnuTLS 2009-04-16\n  * OpenWRT 8.09 plus Huawei E220 2009-03-05\n  * Redmine on Debian Lenny Using Lighttpd 2008-10-17\n  * FSCONS / Nordic Free Software Award Nomination 2008-10-14\n  * Cyclomatic Code Complexity 2008-10-07\n  * My blog uses Yubikey authentication 2008-06-30\n  * Home Wireless Network 2008-05-08\n  * Real-world Performance Tuning with Callgrind 2008-02-27\n  * IDNA flaws with regard to U+2024 2008-01-14\n  * PAM module for Yubico 2008-01-14\n  * Response to GnuTLS in Exim Debate 2007-11-09\n  * FSCONS 2007-10-23\n  * On TLS-AUTHZ 2007-10-18\n  * Home Audio Server 2007-09-25\n  * GnuTLS v2.0 2007-09-05\n  * Building GnuTLS and GNU SASL without running ./configure 2007-08-21\n  * 1 TeraByte 2007-08-14\n  * OpenMoko first impressions 2007-08-02\n  * OpenMoko Neo1973 order confirmed 2007-07-22\n  * Linksys WRT54G3G + Huawei E600 + OpenWRT Kamikaze = Internet at summer house 2007-07-22\n  * Neo1973 / OpenMoko ordered 2007-07-15\n  * GNU General Public License version 3 2007-06-29\n  * Porting to uClinux 2007-06-07\n  * Libidn now uses Git 2007-05-31\n  * Free-ietf-review 2007-05-30\n  * Youbico 2007-05-24\n  * Hacking Jobo device 2007-04-27\n  * First TLS v1.2 HTTPS browser in the world? 2007-04-19\n  * Buggy IMAP authentication on Nokia 6233 2007-04-17\n  * Jobo Giga Vu Pro Evolution 80GB 2007-04-14\n  * TLS-AUTHZ Patent Concerns 2007-04-11\n  * Boycott scan.coverity.com! 2007-04-02\n  * EnigForm \u2013 HTML/HTTP forms with OpenPGP 2007-04-01\n  * Password-based Authentication Protocol 2007-03-29\n  * New SASL GS2 document published 2007-03-29\n  * Libntlm 0.3.13 2007-03-27\n  * Debian etch on Dell Precision M65 2007-03-24\n  * Announcing krb5dissect 2007-03-14\n  * gitco 2007-03-14\n  * LibIDN 0.6.11 2007-03-13\n  * Cypak LoginKey 2006-10-18\n  * Base encoding 2006-10-17\n  * Update of Kerberos V5 over TLS draft 2006-10-03\n  * Kerberos 5 Credential Cache file format 2006-09-20\n\nCopyright \u00a9 2024 Simon Josefsson's blog. All Rights Reserved.\n\nTheme: Catch Box by Catch Themes\n\nScroll Up\n\n", "frontpage": false}
