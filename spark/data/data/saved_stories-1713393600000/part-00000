{"aid": "40067065", "title": "JSON-editor: generate forms and edit JSON documents using JSON schema", "url": "https://github.com/json-editor/json-editor", "domain": "github.com/json-editor", "votes": 1, "user": "klaussilveira", "posted_at": "2024-04-17 16:37:07", "comments": 0, "source_title": "GitHub - json-editor/json-editor: JSON Schema Based Editor", "source_text": "GitHub - json-editor/json-editor: JSON Schema Based Editor\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\njson-editor / json-editor Public\n\n  * Notifications\n  * Fork 635\n  * Star 4.2k\n\nJSON Schema Based Editor\n\n### License\n\nMIT license\n\n4.2k stars 635 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# json-editor/json-editor\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n16 Branches\n\n87 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ngermanbisurgiMerge pull request #1548 from germanbisurgi/feature/fix-1536Apr\n16, 2024e0ea2de \u00b7 Apr 16, 2024Apr 16, 2024\n\n## History\n\n2,600 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| Correct codecept command in github workflows| Apr 12, 2024  \n  \n### build\n\n|\n\n### build\n\n| Fix css path| Mar 14, 2020  \n  \n### config\n\n|\n\n### config\n\n| Eslint update + fixes| Apr 12, 2024  \n  \n### docs\n\n|\n\n### docs\n\n| Added meta schema example in docs and readme| Apr 10, 2024  \n  \n### src\n\n|\n\n### src\n\n| Added dependency chain check| Apr 16, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| updated test| Apr 16, 2024  \n  \n### .env-dist\n\n|\n\n### .env-dist\n\n| added basic Makefile| Nov 5, 2019  \n  \n### .eslintrc\n\n|\n\n### .eslintrc\n\n| Eslint update + fixes| Apr 12, 2024  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| Add jshint to grunt build process.| Jun 8, 2014  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| updated gitignore| Nov 16, 2023  \n  \n### .npmignore\n\n|\n\n### .npmignore\n\n| codeceptjs output directory added to npm ignore list| Jan 30, 2020  \n  \n### .npmrc\n\n|\n\n### .npmrc\n\n| Hide goofy npm progress bar| Sep 7, 2023  \n  \n### .travis.yml\n\n|\n\n### .travis.yml\n\n| Fix travis settings| Jun 30, 2020  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| Update CHANGELOG.md| Mar 4, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Updated contributing.md| Apr 23, 2021  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Nov 25, 2013  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| updates test config| Sep 30, 2020  \n  \n### README.md\n\n|\n\n### README.md\n\n| Added meta schema example in docs and readme| Apr 10, 2024  \n  \n### README_ADDON.md\n\n|\n\n### README_ADDON.md\n\n| Add languages| Oct 3, 2023  \n  \n### UPGRADING.md\n\n|\n\n### UPGRADING.md\n\n| [skip ci] Fix typo| Feb 13, 2020  \n  \n### codecept.conf.js\n\n|\n\n### codecept.conf.js\n\n| Renamed helper file| Sep 4, 2019  \n  \n### jasmine.json\n\n|\n\n### jasmine.json\n\n| Added jasmine and karma for unit testing| Jul 22, 2019  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| regenerated locks and updated autocomplete test| Apr 12, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| Updated babel, node version to 18 and codeceptjs command option position|\nApr 12, 2024  \n  \n### release-notes.md\n\n|\n\n### release-notes.md\n\n| updated release info| Nov 18, 2021  \n  \n## Repository files navigation\n\n# JSON Editor\n\nFork of the inactive jdorn/json-editor using the updated fork json-\neditor/json-editor. Some pull requests added from the original repo.\n\nJSON Editor takes a JSON Schema and uses it to generate an HTML form. It has\nfull support for JSON Schema version 3 and 4 and can integrate with several\npopular CSS frameworks (bootstrap, spectre, tailwind).\n\nTake a look at this example for a simple form submission case study.\n\n### Online Demo\n\nCheck out an interactive demo: https://json-editor.github.io/json-editor/\n\nOr the JSON-Editor Interactive Playground:\nhttps://pmk65.github.io/jedemov2/dist/demo.html\n\n## Install\n\nInstall package\n\n    \n    \n    npm install @json-editor/json-editor\n\nUsing a CDN\n\n    \n    \n    <script src=\"https://cdn.jsdelivr.net/npm/@json-editor/json-editor@latest/dist/jsoneditor.min.js\"></script>\n\nYou can also access older releases from CDN, using the landing page:\nhttps://www.jsdelivr.com/package/npm/@json-editor/json-editor\n\nFor local usage download the production version or the development version\n\n## Requirements\n\nJSON Editor has no dependencies. It only needs a modern browser (tested in\nChrome and Firefox).\n\n### Optional Requirements\n\nThe following are not required, but can improve the style and usability of\nJSON Editor when present.\n\n  * A compatible JS template engine (Mustache, Underscore, Hogan, Handlebars, Lodash, Swig, Markup, or EJS)\n  * A compatible CSS framework for styling (Spectre, Tailwind, Bootstrap4)\n  * A compatible icon library (Spectre, jQueryUI, Font Awesome 3/4/5)\n  * SCEditor for WYSIWYG editing of HTML or BBCode content\n  * SimpleMDE for editing of Markdown content\n  * Ace Editor for editing code\n  * Jodit Open Source WYSIWYG editor\n  * Autocomplete Accessible autocomplete component\n  * Choices for nicer Select & Array boxes\n  * Select2 for nicer Select boxes\n  * Selectize for nicer Select & Array boxes\n  * Flatpickr lightweight and powerful datetime picker\n  * Signature Pad HTML5 canvas based smooth signature drawing\n  * Vanilla Picker A simple, easy to use vanilla JS color picker with alpha selection\n  * Cleave.js for formatting your <input/> content while you are typing\n  * IMask.js vanilla javascript input mask\n  * math.js for more accurate floating point math (multipleOf, divisibleBy, etc.)\n  * DOMPurify DOM-only, super-fast, uber-tolerant XSS sanitizer. (If you want to use HTML format in titles/headers and descriptions.)\n\n## Usage\n\nIf you learn best by example, check these out:\n\n  * Basic Usage Example - https://json-editor.github.io/json-editor/basic.html\n  * ACE Editor Example - https://json-editor.github.io/json-editor/ace_editor.html\n  * Advanced Usage Example - https://json-editor.github.io/json-editor/advanced.html\n  * CSS Integration Example - https://json-editor.github.io/json-editor/css_integration.html\n  * Base64 Editor Example (Muiltple Upload) - https://json-editor.github.io/json-editor/multiple_upload_base64.html\n  * Choices Editor Example - https://json-editor.github.io/json-editor/choices.html\n  * Cleave.js Editor Example - https://json-editor.github.io/json-editor/cleave.html\n  * Colorpicker Editor Example - https://json-editor.github.io/json-editor/colorpicker.html\n  * Datetime Editor Example - https://json-editor.github.io/json-editor/datetime.html\n  * DescribedBy Hyperlink Editor Example - https://json-editor.github.io/json-editor/describedby.html\n  * iMask.js Editor Example - https://json-editor.github.io/json-editor/imask.html\n  * Radio Button JSON Editor Example - https://json-editor.github.io/json-editor/radio.html\n  * Recursive JSON Editor Example - https://json-editor.github.io/json-editor/recursive.html\n  * Select2 Editor Example - https://json-editor.github.io/json-editor/select2.html\n  * Selectize Editor Example - https://json-editor.github.io/json-editor/selectize.html\n  * Signature Pad Editor Example - https://json-editor.github.io/json-editor/signature.html\n  * Star Rating Editor Example - https://json-editor.github.io/json-editor/starrating.html\n  * Upload Editor Example - https://json-editor.github.io/json-editor/upload.html\n  * WYSIWYG Editor Example - https://json-editor.github.io/json-editor/wysiwyg.html\n  * Meta schema (schema builder) Example - https://json-editor.github.io/json-editor/meta-schema.html\n\nMore examples can be found at the JSON-Editor Interactive Playground\n\nThe rest of this README contains detailed documentation about every aspect of\nJSON Editor. For more under-the-hood documentation, check the wiki.\n\n### Initialize\n\n    \n    \n    const element = document.getElementById('editor_holder'); const editor = new JSONEditor(element, options);\n\n#### Options\n\nOptions can be set globally or on a per-instance basis during instantiation.\n\n    \n    \n    // Set an option globally JSONEditor.defaults.options.theme = 'bootstrap4'; // Set an option during instantiation const editor = new JSONEditor(element, { //... theme: 'bootstrap4' });\n\nHere are all the available options:\n\nOption| Description| Default Value  \n---|---|---  \najax| If true, JSON Editor will load external URLs in $ref via ajax.| false  \najaxBase| Allows schema references to work either with or without cors; set to\nprotocol://host:port when api is served by different host.  \najaxCredentials| If true, JSON Editor will make ajax call with\n[credentials](https://developer.mozilla.org/en-\nUS/docs/Web/API/XMLHttpRequest/withCredentials).| false  \najax_cache_responses| If true, JSON Editor will cache external URLs' schemas\nin localStorage to avoid subsequent ajax calls.| false  \najax_cache_buster| If ajax_cache_responses is enabled, use this string to\ninvalidate stale caches. E.g., this value should be changed when schemas are\nupdated.| Current date in simplied ISO-8601 format (e.g., \"2011-10-05\" for\nOctober 5, 2011).  \ncompact| If true, the label will not be displayed/added.| false  \ndisable_array_add| If true, remove all \"add row\" buttons from arrays.| false  \ndisable_array_delete| If true, remove all \"delete row\" buttons from arrays.|\nfalse  \ndisable_array_delete_all_rows| If true, remove all \"delete all rows\" buttons\nfrom arrays.| false  \ndisable_array_delete_last_row| If true, remove all \"delete last row\" buttons\nfrom arrays.| false  \ndisable_array_reorder| If true, remove all \"move up\" and \"move down\" buttons\nfrom arrays.| false  \nenable_array_copy| If true, add copy buttons to arrays.| false  \ndisable_collapse| If true, remove all collapse buttons from objects and\narrays.| false  \ndisable_edit_json| If true, remove all Edit JSON buttons from objects.| false  \ndisable_properties| If true, remove all Edit Properties buttons from objects.|\nfalse  \narray_controls_top| If true, array controls (add, delete etc) will be\ndisplayed at top of list.| false  \nform_name_root| The first part of the `name` attribute of form inputs in the\neditor. An full example name is `root[person][name]` where \"root\" is the\nform_name_root.| root  \niconlib| The icon library to use for the editor. See the CSS Integration\nsection below for more info.| null  \nremove_button_labels| Display only icons in buttons. This works only if\niconlib is set.| false  \nno_additional_properties| If true, objects can only contain properties defined\nwith the properties keyword unless the property additionalProperties: true is\nspecified in the object schema| false  \nrefs| An object containing schema definitions for URLs. Allows you to pre-\ndefine external schemas.| {}  \nrequired_by_default| If true, all schemas that don't explicitly set the\nrequired property will be required.| false  \nkeep_oneof_values| If true, makes oneOf copy properties over when switching.|\ntrue  \nkeep_only_existing_values| If true, copy only existing properties over when\nswitching.| false  \nschema| A valid JSON Schema to use for the editor. Version 3 and Version 4 of\nthe draft specification are supported.| {}  \nshow_errors| When to show validation errors in the UI. Valid values are\ninteraction, change, always, and never.| \"interaction\"  \nstartval| Seed the editor with an initial value. This should be valid against\nthe editor's schema.| null  \ntemplate| The JS template engine to use. See the Templates and Variables\nsection below for more info.| default  \ntheme| The CSS theme to use. See the CSS Integration section below for more\ninfo.| html  \ndisplay_required_only| If true, only required properties will be included by\ndefault.| false  \nshow_opt_in| If true, NON required properties will have an extra toggable\ncheckbox near the title that determines if the value must be included or not\nin the editor \u0301s value| false  \nprompt_before_delete| If true, displays a dialog box with a confirmation\nmessage before node deletion.| true  \nobject_layout| The default value of `format` for objects. If set to table for\nexample, objects will use table layout if `format` is not specified.| normal  \nenum_source_value_auto_select| Preserve value at Move Up or Down.(No value is\nselected automatically upon deletion.)| true  \nmax_depth| Max depth of the nested properties to be rendered of provided json\nschema. The missing of this option could cause \"maximum call stack size\nexceeded\" in case of object properties with circular references. 0 value means\n\"render all\".| 0  \nuse_default_values| If true default values based on the \"type\" of the property\nwill be used| true  \nurn_resolver| A callback function to resolve an undefined Uniform Resource\nName (URN) for $ref. The function receives a URN and callback to pass back a\nserialized JSON response. The function should return a boolean (true if the\nURN can be resolved; false otherwise).| false  \nuse_name_attributes| If true, control inputs name attributes will be set.|\ntrue  \nbutton_state_mode| If 1, inactive buttons are hidden. If 2, inactive buttons\nare disabled.| 1  \ncase_sensitive_property_search| This property controls whether property\nsearches in an object editor are case-sensitive| true  \n  \n*Note If the ajax property is true and JSON Editor needs to fetch an external url, the api methods won't be available immediately. Listen for the ready event before calling them.\n    \n    \n    editor.on('ready',() => { // Now the api methods will be available editor.validate(); });\n\n### Get/Set Value\n\n    \n    \n    editor.setValue({name: \"John Smith\"}); const value = editor.getValue(); console.log(value.name) // Will log \"John Smith\"\n\nInstead of getting/setting the value of the entire editor, you can also work\non individual parts of the schema:\n\n    \n    \n    // Get a reference to a node within the editor const name = editor.getEditor('root.name'); // `getEditor` will return null if the path is invalid if (name) { name.setValue(\"John Smith\"); console.log(name.getValue()); }\n\n### Validate\n\nWhen feasible, JSON Editor won't let users enter invalid data. This is done by\nusing input masks and intelligently enabling/disabling controls.\n\nHowever, in some cases it is still possible to enter data that doesn't\nvalidate against the schema.\n\nYou can use the validate method to check if the data is valid or not.\n\n    \n    \n    // Validate the editor's current value against the schema const errors = editor.validate(); if (errors.length) { // errors is an array of objects, each with a `path`, `property`, and `message` parameter // `property` is the schema keyword that triggered the validation error (e.g. \"minLength\") // `path` is a dot separated path into the JSON object (e.g. \"root.path.to.field\") console.log(errors); } else { // It's valid! }\n\nBy default, this will do the validation with the editor's current value. If\nyou want to use a different value, you can pass it in as a parameter.\n\n    \n    \n    // Validate an arbitrary value against the editor's schema const errors = editor.validate({ value: { to: \"test\" } });\n\n### Listen for Changes\n\nThe change event is fired whenever the editor's value changes.\n\n    \n    \n    editor.on('change',() => { // Do something }); editor.off('change',function_reference);\n\nYou can also watch a specific field for changes:\n\n    \n    \n    editor.watch('path.to.field',() => { // Do something }); editor.unwatch('path.to.field',function_reference);\n\nOr watch all fields (Similar to the \"onchange\" event, but tracks the field\nchanged)\n\n    \n    \n    const watcherCallback = function (path) { console.log(`field with path: [${path}] changed to [${JSON.stringify(this.getEditor(path).getValue())}]`); // Do something } for (let key in editor.editors) { if (editor.editors.hasOwnProperty(key) && key !== 'root') { editor.watch(key, watcherCallback.bind(editor, key)); } }\n\n### Enable and Disable the Editor\n\nThis lets you disable editing for the entire form or part of the form.\n\n    \n    \n    // Disable entire form editor.disable(); // Disable part of the form editor.getEditor('root.location').disable(); // Enable entire form editor.enable(); // Enable part of the form editor.getEditor('root.location').enable(); // Check if form is currently enabled if(editor.isEnabled()) alert(\"It's editable!\"); // Activate part of the form editor.activate(); // Deactivate part of the form editor.deactivate();\n\n### Destroy\n\nThis removes the editor HTML from the DOM and frees up resources.\n\n    \n    \n    editor.destroy();\n\n## CSS Integration\n\nJSON Editor can integrate with several popular CSS frameworks out of the box.\n\nThe currently supported themes are:\n\n  * barebones\n  * html (the default)\n  * bootstrap3\n  * bootstrap4\n  * bootstrap5\n  * spectre\n  * tailwind\n\nNote: The following themes have NOT been updated to 2.x format and will be\nremoved in final version unless there's someone willing to update those. Old\n1.x themes displays the message \"This is an old JSON-Editor 1.x Theme and\nmight not display elements correctly when used with the 2.x version\" at the\nbottom of the form output.\n\n  * bootstrap2\n  * foundation3\n  * foundation4\n  * foundation5\n  * foundation6\n  * jqueryui\n  * materialize\n\nThe default theme is html, which does not rely on an external framework. This\ndefault can be changed by setting the JSONEditor.defaults.options.theme\nvariable.\n\nIf you want to specify your own styles with CSS, you can use barebones, which\nincludes almost no classes or inline styles.\n\n    \n    \n    JSONEditor.defaults.options.theme = 'spectre';\n\nYou can override this default on a per-instance basis by passing a theme\nparameter in when initializing:\n\n    \n    \n    const editor = new JSONEditor(element,{ schema: schema, theme: 'tailwind' });\n\n### Icon Libraries\n\nJSON Editor also supports several popular icon libraries. The icon library\nmust be set independently of the theme, even though there is some overlap.\n\nThe supported icon libs are:\n\n  * jqueryui\n  * fontawesome3\n  * fontawesome4\n  * fontawesome5\n  * openiconic\n  * spectre\n  * bootstrap\n\nBy default, no icons are used. Just like the CSS theme, you can set the icon\nlib globally or when initializing:\n\n    \n    \n    // Set the global default JSONEditor.defaults.options.iconlib = \"spectre\"; // Set the icon lib during initialization const editor = new JSONEditor(element,{ schema: schema, iconlib: \"fontawesome4\" });\n\nIt's possible to create your own custom themes and/or icon libs as well. Look\nat any of the existing classes for examples.\n\n## JSON Schema Support\n\nJSON Editor fully supports version 3 and 4 of the JSON Schema core and\nvalidation specifications. Some of The hyper-schema specification is supported\nas well.\n\n### $ref and definitions\n\nJSON Editor supports schema references to external URLs and local definitions\nas well as JSON Pointers. Here's an example:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"name\": { \"title\": \"Full Name\", \"$ref\": \"#/definitions/name\" }, \"location\": { \"$ref\": \"http://mydomain.com/geo.json\" }, \"birthday\": { \"$ref\": \"http://mydomain.com/person.json#/definitions/birthdate\" } }, \"definitions\": { \"name\": { \"type\": \"string\", \"minLength\": 5 } } }\n\nLocal references must point to the definitions object of the root node of the\nschema. So, #/customkey/name will throw an exception.\n\nIf loading an external url via Ajax, the url must either be on the same domain\nor return the correct HTTP cross domain headers. If your URLs don't meet this\nrequirement, you can pass in the references to JSON Editor during\ninitialization (see Usage section above).\n\nSelf-referential $refs are supported. Check out examples/recursive.html for\nusage examples.\n\n### hyper-schema links\n\nThe links keyword from the hyper-schema specification can be used to add links\nto related documents.\n\nJSON Editor will use the mediaType property of the links to determine how best\nto display them. Image, audio, and video links will display the media inline\nas well as providing a text link.\n\nHere are a couple examples:\n\nSimple text link\n\n    \n    \n    { \"title\": \"Blog Post Id\", \"type\": \"integer\", \"links\": [ { \"rel\": \"comments\", \"href\": \"/posts/{{self}}/comments/\", // Optional - set CSS classes for the link \"class\": \"comment-link open-in-modal primary-text\" } ] }\n\nMake link download when clicked\n\n    \n    \n    { \"title\": \"Document filename\", \"type\": \"string\", \"links\": [ { \"rel\": \"Download File\", \"href\": \"/documents/{{self}}\", // Can also set `download` to a string as per the HTML5 spec \"download\": true } ] }\n\nShow a video preview (using HTML5 video)\n\n    \n    \n    { \"title\": \"Video filename\", \"type\": \"string\", \"links\": [ { \"href\": \"/videos/{{self}}.mp4\", \"mediaType\": \"video/mp4\" } ] }\n\nThe href property is a template that gets re-evaluated every time the value\nchanges. The variable self is always available. Look at the Dependencies\nsection below for how to include other fields or use a custom template engine.\n\n### if-then-else\n\nThe if-then-else keywords are used to express conditional validation logic\nbased on the evaluation of a specified condition. The if keyword defines a\ncondition, and depending on whether it evaluates to true or false, the schema\nspecified under either the then or else keywords will be applied.\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"street_address\": { \"type\": \"string\" }, \"country\": { \"type\": \"string\", \"default\": \"United States of America\", \"enum\": [ \"United States of America\", \"Canada\" ] }, \"postal_code\": { \"type\": \"string\" } }, \"if\": { \"properties\": { \"country\": { \"const\": \"United States of America\" } } }, \"then\": { \"properties\": { \"postal_code\": { \"pattern\": \"[0-9]{5}(-[0-9]{4})?\" } } }, \"else\": { \"properties\": { \"postal_code\": { \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\" } } } }\n\n### Property Ordering\n\nThere is no way to specify property ordering in JSON Schema (although this may\nchange in v5 of the spec).\n\nJSON Editor introduces a new keyword propertyOrder for this purpose. The\ndefault property order if unspecified is 1000. Properties with the same order\nwill use normal JSON key ordering.\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"prop1\": { \"type\": \"string\" }, \"prop2\": { \"type\": \"string\", \"propertyOrder\": 10 }, \"prop3\": { \"type\": \"string\", \"propertyOrder\": 1001 }, \"prop4\": { \"type\": \"string\", \"propertyOrder\": 1 } } }\n\nIn the above example schema, prop1 does not have an order specified, so it\nwill default to 1000. So, the final order of properties in the form (and in\nreturned JSON data) will be:\n\n  1. prop4 (order 1)\n  2. prop2 (order 10)\n  3. prop1 (order 1000)\n  4. prop3 (order 1001)\n\n### Default Properties\n\nThe default behavior of JSON Editor is to include all object properties\ndefined with the properties keyword.\n\nTo override this behaviour, you can use the keyword defaultProperties to set\nwhich ones are included:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"} }, \"defaultProperties\": [\"name\"] }\n\nNow, only the name property above will be included by default. You can use the\n\"Object Properties\" button to add the \"age\" property back in.\n\n### format\n\nJSON Editor supports many different formats for schemas of type string. They\nwill work with schemas of type integer and number as well, but some formats\nmay produce weird results. If the enum property is specified, format will be\nignored.\n\nJSON Editor uses HTML5 input types, so some of these may render as basic text\ninput in older browsers:\n\n  * color\n  * date\n  * datetime-local\n  * email\n  * month\n  * password\n  * number\n  * range\n  * tel\n  * text\n  * textarea\n  * time\n  * url\n  * week\n\nHere is an example that will show a color picker in browsers that support it:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"color\": { \"type\": \"string\", \"format\": \"color\" } } }\n\n#### String Editors Input Attributes\n\nYou can set custom attributes such as placeholder, class and data- on the\ninput field and on the editor container using the special options keyword\ninputAttributes and containerAttributes.\n\nLike this:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"name\": { \"title\": \"Full Name\", \"options\": { \"inputAttributes\": { \"placeholder\": \"your name here...\", \"class\": \"myclass\" }, \"containerAttributes\": { \"data-container\": \"my-container\", \"class\": \"my-container-class\" } } } } }\n\n#### Specialized String Editors\n\nIn addition to the standard HTML input formats, JSON Editor can also integrate\nwith several 3rd party specialized editors. These libraries are not included\nin JSON Editor and you must load them on the page yourself.\n\nSCEditor provides WYSIWYG editing of HTML and BBCode. To use it, set the\nformat to xhtml or bbcode and set the wysiwyg option to true:\n\n    \n    \n    { \"type\": \"string\", \"format\": \"xhtml\", \"options\": { \"wysiwyg\": true } }\n\nSimpleMDE is a simple Markdown editor with live preview. To use it, set the\nformat to markdown:\n\n    \n    \n    { \"type\": \"string\", \"format\": \"markdown\" }\n\nTo customize the editor, add the configuration in the simplemde option:\n\n    \n    \n    { \"type\": \"string\", \"format\": \"markdown\", \"options\": { \"simplemde\": { \"toolbar\": [ \"bold\", \"italic\", \"heading\", \"|\", \"link\", \"quote\", \"|\", \"preview\", \"fullscreen\", \"guide\" ], \"spellChecker\": false } } }\n\nAce Editor is a syntax highlighting source code editor. You can use it by\nsetting the format to any of the following:\n\n  * actionscript\n  * batchfile\n  * c\n  * c++\n  * cpp (alias for c++)\n  * coffee\n  * csharp\n  * css\n  * dart\n  * django\n  * ejs\n  * erlang\n  * golang\n  * groovy\n  * handlebars\n  * haskell\n  * haxe\n  * html\n  * ini\n  * jade\n  * java\n  * javascript\n  * json\n  * less\n  * lisp\n  * lua\n  * makefile\n  * markdown\n  * matlab\n  * mysql\n  * objectivec\n  * pascal\n  * perl\n  * pgsql\n  * php\n  * python\n  * prql\n  * r\n  * ruby\n  * rust\n  * sass\n  * scala\n  * scss\n  * smarty\n  * sql\n  * stylus\n  * svg\n  * typescript\n  * twig\n  * vbscript\n  * xml\n  * yaml\n  * zig\n\n    \n    \n    { \"type\": \"string\", \"format\": \"yaml\" }\n\nYou can use the hyper-schema keyword media instead of format too if you prefer\nfor formats with a mime type:\n\n    \n    \n    { \"type\": \"string\", \"media\": { \"type\": \"text/html\" } }\n\nYou can enable Ace editor options individually by setting the options.ace in\nschema.\n\n    \n    \n    { \"type\": \"string\", \"format\": \"sql\", \"options\": { \"ace\": { \"theme\": \"ace/theme/vibrant_ink\", \"tabSize\": 2, \"useSoftTabs\": true, \"wrap\": true } } }\n\n### Special editors\n\nJSONEditor features specialized types of editors.\n\n#### Button editor\n\nCreates a button whose click callback can be defined in\nJSONEditor.defaults.callbacks. Options:\n\n  * icon: Renders an icon into the button. Must be supported by the iconLib used.\n  * validated: With true the button is disabled until the whole editor is valid.\n  * action: the name of the callback that will be invoked when the button is clicked.\n\n> Warning For the form to render properly all callbacks used in actions must\n> also be defined in JSONEditor.defaults.callbacks.\n    \n    \n    JSONEditor.defaults.callbacks = { \"button\" : { \"myAction\" : function (jseditor, e) { alert('Button action') } } }\n    \n    \n    { \"format\": \"button\", \"options\": { \"button\": { \"text\": \"Search\", \"icon\": \"search\", \"action\": \"myAction\", \"validated\": true } } }\n\n#### Info editor\n\nDisplays a label and a description text.\n\n    \n    \n    { \"format\": \"info\", \"title\": \"Important:\", \"description\": \"Lorem ipsum dolor\" }\n\n#### Booleans\n\nThe default boolean editor is a select box with options \"true\" and \"false\". To\nuse a checkbox instead, set the format to checkbox.\n\n    \n    \n    { \"type\": \"boolean\", \"format\": \"checkbox\" }\n\n#### Arrays\n\nThe default array editor takes up a lot of screen real estate. The table and\ntabs formats provide more compact UIs for editing arrays.\n\nThe table format works great when every array element has the same schema and\nis not too complex.\n\nThe tabs format can handle any array, but only shows one array element at a\ntime. It has tabs on the left for switching between items.\n\nThe tabs-top format place tabs on the top.\n\nHere's an example of the table format:\n\n    \n    \n    { \"type\": \"array\", \"format\": \"table\", \"items\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" } } } }\n\nFor arrays of enumerated strings, you can also use the select or checkbox\nformat. These formats require a very specific schema to work:\n\n    \n    \n    { \"type\": \"array\", \"uniqueItems\": true, \"items\": { \"type\": \"string\", \"enum\": [\"value1\",\"value2\"] } }\n\nBy default, the checkbox editor (multiple checkboxes) will be used if there\nare fewer than 8 enum options. Otherwise, the select editor (a multiselect\nbox) will be used.\n\nYou can override this default by passing in a format:\n\n    \n    \n    { \"type\": \"array\", \"format\": \"select\", \"uniqueItems\": true, \"items\": { \"type\": \"string\", \"enum\": [\"value1\",\"value2\"] } }\n\n#### Array events\n\nWhen an array item is added, removed, moved up, moved or removed the json\neditor will trigger a relative event.\n\n    \n    \n    editor.on('moveRow', editor => { console.log('moveRow', editor) }); editor.on('addRow', editor => { console.log('addRow', editor) }); editor.on('deleteRow', deletedValue => { console.log('deleteRow', deletedValue) }); editor.on('deleteAllRows', deletedValues => { console.log('deleteAllRows', deletedValues) });\n\n#### Schema loader events\n\nWhen schemas are loaded via a request, the schemaLoaded event is triggered\nindividually for each schema after its loading. Once the loading of all\nschemas is completed, the allSchemasLoaded event is triggered.\n\n    \n    \n    editor.on('schemaLoaded', (payload) => { console.log('schemasLoaded', payload.schemaUrl) console.log('schemasLoaded', payload.schema) }) editor.on('allSchemasLoaded', () => { console.log('allSchemasLoaded') })\n\n#### Objects\n\nThe default object layout is one child editor per row. The grid format will\ninstead put multiple child editors per row. This can make the editor much more\ncompact, but at a cost of not guaranteeing child editor order. This format\nwill stretch columns to fill gaps untill all the 12 columns are filled.\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" } }, \"format\": \"grid\" }\n\nThe grid-strict format instead will respect columns sizes (no stretching) and\nproperties order. It introduces the new grid-break property to breaks the\ncurrent row leaving a 4 colums gap.\n\n    \n    \n    { \"type\": \"object\", \"format\": \"grid-strict\", \"properties\": { \"a\": { \"title\": \"a\", \"type\": \"string\", \"options\": { \"grid_columns\": 4 } }, \"b\": { \"title\": \"b\", \"type\": \"string\", \"options\": { \"grid_columns\": 4, \"grid_break\": true } }, \"c\": { \"title\": \"c\", \"type\": \"string\", \"options\": { \"grid_columns\": 6 } }, \"d\": { \"title\": \"d\", \"type\": \"string\", \"options\": { \"grid_columns\": 6 } } } }\n\nThe categories format groups properties in top-tabbed panels, one for each\nobject or array property plus one that groups all added or other types of\nproperties. Panel tabs titles came from object or array titles and for the\ngrouping panel it defaults to \"Basic\", unless basicCategoryTitle is defined.\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" } }, \"format\": \"categories\", \"basicCategoryTitle\": \"Main\" }\n\nDemo page will look like this:\n\n## Editor Options\n\nEditors can accept options which alter the behavior in some way.\n\n  * titleHidden - If set to true, the editor title will be visually hidden\n  * collapsed - If set to true, the editor will start collapsed (works for objects and arrays)\n  * disable_array_add - If set to true, the \"add row\" button will be hidden (works for arrays)\n  * disable_array_delete - If set to true, all of the \"delete\" buttons will be hidden (works for arrays)\n  * disable_array_delete_all_rows - If set to true, just the \"delete all rows\" button will be hidden (works for arrays)\n  * disable_array_delete_last_row - If set to true, just the \"delete last row\" buttons will be hidden (works for arrays)\n  * disable_array_reorder - If set to true, the \"move up/down\" buttons will be hidden (works for arrays)\n  * disable_collapse - If set to true, the collapse button will be hidden (works for objects and arrays)\n  * disable_edit_json - If set to true, the Edit JSON button will be hidden (works for objects)\n  * disable_properties - If set to true, the Edit Properties button will be hidden (works for objects)\n  * array_controls_top - If set to true, array controls (add, delete etc) will be displayed at top of list (works for arrays)\n  * enum - See Enum options\n  * enum_titles - An array of display values to use for select box options in the same order as defined with the enum keyword. Works with schema using enum values.\n  * expand_height - If set to true, the input will auto expand/contract to fit the content. Works best with textareas.\n  * grid_columns - Explicitly set the number of grid columns (1-12) for the editor if it's within an object using a grid layout.\n  * hidden - If set to true, the editor will not appear in the UI (works for all types)\n  * input_height - Explicitly set the height of the input element. Should be a valid CSS width string (e.g. \"100px\"). Works best with textareas.\n  * input_width - Explicitly set the width of the input element. Should be a valid CSS width string (e.g. \"100px\"). Works for string, number, and integer data types.\n  * remove_empty_properties - If set to true for an object, empty object properties (i.e. those with falsy values) will not be returned by getValue().\n  * has_placeholder_option - If set to true, a placeholder option will be added to the select editor input.\n  * placeholder_option_text - Text displayed in select placeholder option.\n\n    \n    \n    { \"type\": \"object\", \"options\": { \"collapsed\": true }, \"properties\": { \"name\": { \"type\": \"string\" } } }\n\nYou can globally set the default options too if you want:\n\n    \n    \n    JSONEditor.defaults.editors.object.options.collapsed = true;\n\n## InfoText\n\nUsing the option infoText, will create a info button, displaying the text you\nset, on hovering.\n\n    \n    \n    { \"type\": \"string\", \"title\": \"Name\", \"options\": { \"infoText\": \"Your full name\" } }\n\n## Enum options\n\nUsing the option enum, it is possible to modify how enums with format checkbox\n(default) are displayed in the editor. It is an array of objects (described\nbelow), which must be in the same order as defined with the enum keyword.\n\nCurrently, the following is supported:\n\n  * title: Optional Display value shown instead of the enum value\n  * infoText: Optional Creates an info button next to the title, displaying the text you set, on hovering.\n\nIt is possible also to set these options only for some enum values, to skip\none enum value, define an empty object ({}).\n\n    \n    \n    { \"type\": \"array\", \"items\": { \"type\": \"string\", \"enum\": [\"1\", \"2\", \"3\", \"4\"], \"options\": { \"enum\": [ {}, { \"title\": \"Title 2\" }, { \"infoText\": \"InfoText 3\" }, { \"title\": \"Title 4\", \"infoText\": \"InfoText 4\" } ] } } }\n\nIf both options enum_titles[x] and enum[x].title are set for the enum value x,\nthan the title set under enum[x].title will be used.\n\n## Dependencies\n\nSometimes, it's necessary to have one field's value depend on another's.\n\nThe dependency information is fetched from the dependencies field in the\noptions field of the control. The dependencies field should be a map where the\nkeys are the names of the fields depended on and the value is the expected\nvalue. The value may be an array to indicate multiple value possibilities.\nThis uses the internal field value watch system to notify fields of changes in\ntheir dependencies.\n\nHere's an example schema:\n\n    \n    \n    { \"title\": \"An object\", \"type\": \"object\", \"properties\": { \"fieldOne\": { \"title\": \"I should be changed to 'foo'\", \"type\": \"string\", \"enum\": [\"foo\",\"bar\"], \"default\": \"bar\" }, \"depender1\": { \"title\": \"I depend on fieldOne to be 'foo'\", \"type\": \"string\", \"enum\": [\"lorem\",\"ipsum\"], \"options\": { \"dependencies\": { \"fieldOne\": \"foo\" } } }, \"depender2\": { \"title\": \"I depend on fieldOne to be 'bar'\", \"type\": \"string\", \"enum\": [\"dolor\", \"sit\"], \"options\": { \"dependencies\": { \"fieldOne\": \"bar\" } } } } }\n\nKeys can also be an absolute path like root.property.nested_property\n\n    \n    \n    { \"title\": \"Person\", \"type\": \"object\", \"required\": [ \"gender\" ], \"properties\": { \"gender\": { \"title\": \"Gender\", \"type\": \"string\", \"enum\": [ \"female\", \"male\" ] }, \"age\": { \"type\": \"object\", \"properties\": { \"maleSpecificAge\": { \"type\": \"string\", \"title\": \"Male specific age question?\", \"options\": { \"dependencies\": { \"root.gender\": \"male\" } } }, \"femaleSpecificAge\": { \"type\": \"string\", \"title\": \"Female specific age question?\", \"options\": { \"dependencies\": { \"root.gender\": \"female\" } } } } } } }\n\nThe dependencies keyword from the JSON Schema specification is not nearly\nflexible enough to handle most use cases, so JSON Editor introduces a couple\ncustom keywords that help in this regard.\n\nThe first step is to have a field \"watch\" other fields for changes.\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"first_name\": { \"type\": \"string\" }, \"last_name\": { \"type\": \"string\" }, \"full_name\": { \"type\": \"string\", \"watch\": { \"fname\": \"first_name\", \"lname\": \"last_name\" } } } }\n\nThe keyword watch tells JSON Editor which fields to watch for changes.\n\nThe keys (fname and lname in this example) are alphanumeric aliases for the\nfields.\n\nThe values (first_name and last_name) are paths to the fields. To access\nnested properties of objects, use a dot for separation (e.g. \"path.to.field\").\n\nBy default paths are from the root of the schema, but you can make the paths\nrelative to any ancestor node with a schema id defined as well. This is\nespecially useful within arrays. Here's an example:\n\n    \n    \n    { \"type\": \"array\", \"items\": { \"type\": \"object\", \"id\": \"arr_item\", \"properties\": { \"first_name\": { \"type\": \"string\" }, \"last_name\": { \"type\": \"string\" }, \"full_name\": { \"type\": \"string\", \"watch\": { \"fname\": \"arr_item.first_name\", \"lname\": \"arr_item.last_name\" } } } } }\n\nNow, the full_name field in each array element will watch the first_name and\nlast_name fields within the same array element.\n\n### Templates\n\nWatching fields by itself doesn't do anything. For the example above, you need\nto tell JSON Editor that full_name should be fname [space] lname. JSON Editor\nuses a javascript template engine to accomplish this. A barebones template\nengine is included by default (simple {{variable}} replacement only), but many\nof the most popular template engines are also supported:\n\n  * ejs\n  * handlebars\n  * hogan\n  * markup\n  * mustache\n  * swig\n  * underscore >=1.7 (since 1.4.0, see also #332)\n\nYou can change the default by setting JSONEditor.defaults.options.template to\none of the supported template engines:\n\n    \n    \n    JSONEditor.defaults.options.template = 'handlebars';\n\nYou can set the template engine on a per-instance basis as well:\n\n    \n    \n    const editor = new JSONEditor(element,{ schema: schema, template: 'hogan' });\n\nHere is the completed full_name example using the default barebones template\nengine:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"first_name\": { \"type\": \"string\" }, \"last_name\": { \"type\": \"string\" }, \"full_name\": { \"type\": \"string\", \"template\": \"{{fname}} {{lname}}\", \"watch\": { \"fname\": \"first_name\", \"lname\": \"last_name\" } } } }\n\nIt is also possible to set the \"template\" property to a JavaScript callback\nfunction, defined under window.JSONEditor.defaults.callbacks.template. Inside\nthe JavaScript callback, you have access to all the variables defined under\nthe watch property + the current editor.\n\nExample Schema:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"first_name\": { \"type\": \"string\" }, \"last_name\": { \"type\": \"string\" }, \"full_name\": { \"type\": \"string\", \"template\": \"callbackFunction\", \"watch\": { \"fname\": \"first_name\", \"lname\": \"last_name\" } } } }\n\nExample Callback function:\n\n    \n    \n    window.JSONEditor.defaults.callbacks.template = { \"callbackFunction\": (jseditor,e) => { return e.fname + \" \" + e.lname; } };\n\n### Enum Values\n\nAnother common dependency is a drop down menu whose possible values depend on\nother fields. Here's an example:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"possible_colors\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }, \"primary_color\": { \"type\": \"string\" } } }\n\nLet's say you want to force primary_color to be one of colors in the\npossible_colors array. First, we must tell the primary_color field to watch\nthe possible_colors array.\n\n    \n    \n    { \"primary_color\": { \"type\": \"string\", \"watch\": { \"colors\": \"possible_colors\" } } }\n\nThen, we use the special keyword enumSource to tell JSON Editor that we want\nto use this field to populate a drop down.\n\n    \n    \n    { \"primary_color\": { \"type\": \"string\", \"watch\": { \"colors\": \"possible_colors\" }, \"enumSource\": \"colors\" } }\n\nNow, anytime the possible_colors array changes, the dropdown's values will be\nchanged as well.\n\nThis is the most basic usage of enumSource. The more verbose form of this\nproperty supports filtering, pulling from multiple sources, constant values,\netc.. Here's a more complex example (this uses the Swig template engine syntax\nto show some advanced features)\n\n    \n    \n    { // An array of sources \"enumSource\": [ // Constant values [\"none\"], { // A watched field source \"source\": \"colors\", // Use a subset of the array \"slice\": [2,5], // Filter items with a template (if this renders to an empty string, it won't be included) \"filter\": \"{% if item !== 'black' %}1{% endif %}\", // Specify the display text for the enum option \"title\": \"{{item|upper}}\", // Specify the value property for the enum option \"value\": \"{{item|trim}}\" }, // Another constant value at the end of the list [\"transparent\"] ] }\n\nYou can also specify a list of static items with a slightly different syntax:\n\n    \n    \n    { \"enumSource\": [{ // A watched field source \"source\": [ { \"value\": 1, \"title\": \"One\" }, { \"value\": 2, \"title\": \"Two\" } ], \"title\": \"{{item.title}}\", \"value\": \"{{item.value}}\" }] ] }\n\nThe colors examples used an array of strings directly. Using the verbose form,\nyou can also make it work with an array of objects. Here's an example:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"possible_colors\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"text\": { \"type\": \"string\" } } } }, \"primary_color\": { \"type\": \"string\", \"watch\": { \"colors\": \"possible_colors\" }, \"enumSource\": [{ \"source\": \"colors\", \"value\": \"{{item.text}}\" }] } } }\n\nAll of the optional templates in the verbose form have the properties item and\ni passed into them. item refers to the array element. i is the zero-based\nindex.\n\n#### JavaScript callbacks\n\nIt is also possible to use JavaScript callback functions instead of templates\nfor the enumSource properties properties: value, title and filter.\n\nExample Schema:\n\n    \n    \n    { \"type\": \"object\", \"properties\": { \"possible_colors\": { \"type\": \"array\", \"format\": \"table\", \"items\": { \"type\": \"object\", \"properties\": { \"text\": { \"type\": \"string\" } } } }, \"primary_color\": { \"type\": \"string\", \"watch\": { \"colors\": \"possible_colors\" }, \"enumSource\": [{ \"source\": \"colors\", \"filter\": \"enumFilterCB\", \"title\": \"enumTitleCB\", \"value\": \"enumValueCB\" }] } } }\n\nExample JavaScript callbacks:\n\n    \n    \n    window.JSONEditor.defaults.callbacks.template = { \"enumFilterCB\": (jseditor, e) => { if (e.item.text.toLowerCase() == 'red') return \"\"; // \"red\" is not allowed return e.item.text; }, \"enumTitleCB\": (jseditor, e) => e.item.text.toUpperCase(), \"enumValueCB\": (jseditor, e) => e.item.text.toLowerCase() };\n\n#### Sorting\n\nTo sort the dynamic EnumSource, you can set the EnumSource property sort to\neither asc or desc.\n\n### Dynamic Headers\n\nThe title keyword of a schema is used to add user friendly headers to the\nediting UI. Sometimes though, dynamic headers, which change based on other\nfields, are helpful.\n\nConsider the example of an array of children. Without dynamic headers, the UI\nfor the array elements would show Child 1, Child 2, etc.. It would be much\nnicer if the headers could be dynamic and incorporate information about the\nchildren, such as 1 - John (age 9), 2 - Sarah (age 11).\n\nTo accomplish this, use the headerTemplate property. All of the watched\nvariables are passed into this template, along with the static title title\n(e.g. \"Child\"), the 0-based index i0 (e.g. \"0\" and \"1\"), the 1-based index i1,\nextra child variable properties.${PROPERTY_NAME}.enumTitle and the field's\nvalue self (e.g. {\"name\": \"John\", \"age\": 9}).\n\n    \n    \n    { \"type\": \"array\", \"title\": \"Children\", \"items\": { \"type\": \"object\", \"title\": \"Child\", \"headerTemplate\": \"{{ i1 }} - {{ self.name }} (age {{ self.age }}) has a {{ properties.pet.enumTitle }}\", \"properties\": { \"name\": { \"type\": \"string\" }, \"age\": { \"type\": \"integer\" }, \"pet\": { \"title\": \"Pet\", \"type\": \"string\", \"enum\": [ \"pet_1\", \"pet_2\" ], \"options\": { \"enum_titles\": [ \"Dog\", \"Cat\" ] } } } } }\n\n### Custom Template Engines\n\nIf one of the included template engines isn't sufficient, you can use any\ncustom template engine with a compile method. For example:\n\n    \n    \n    const myengine = { compile: template => // Compile should return a render function vars => { // A real template engine would render the template here const result = template; return result; } }; // Set globally JSONEditor.defaults.options.template = myengine; // Set on a per-instance basis const editor = new JSONEditor(element,{ schema: schema, template: myengine });\n\n## Language and String Customization\n\nJSON Editor uses a translate function to generate strings in the UI. A default\nen language mapping is provided.\n\nYou can easily override individual translations in the default language or\ncreate your own language mapping entirely.\n\n    \n    \n    // Override a specific translation JSONEditor.defaults.languages.en.error_minLength = \"This better be at least {{0}} characters long or else!\"; // Create your own language mapping // Any keys not defined here will fall back to the \"en\" language JSONEditor.defaults.languages.es = { error_notset: \"propiedad debe existir\" };\n\nBy default, all instances of JSON Editor will use the en language. To override\nthis default, set the JSONEditor.defaults.language property.\n\n    \n    \n    JSONEditor.defaults.language = \"es\";\n\nYou can also override translations per editor in the it's schema options.\n\n    \n    \n    \"error_const\": { \"type\": \"string\", \"title\": \"error_const\", \"const\": \"test\", \"default\": \"something else\", \"options\": { \"error_messages\": { \"en\": { \"error_const\": \"CUSTOM EN: Value must be the constant value\" }, \"es\": { \"error_const\": \"CUSTOM ES: Value must be the constant value\" } } } }\n\n## Button Customization\n\nAll buttons have classnames in the format json-editor-btntype-*. Using these\nclassnames you can choose if the button should have icon or label hidden. The\nicon is wrapped in an I tag, the label is wrapped in a SPAN tag.\n\nExamples:\n\nHide the icon on \"Object Properties\" button:\n\n    \n    \n    .json-editor-btntype-properties i { display: none; }\n\nHide the text on \"Object Properties\" button:\n\n    \n    \n    .json-editor-btntype-properties span { display: none; }\n\n## Custom Editor Interfaces\n\nJSON Editor contains editor interfaces for each of the primitive JSON types as\nwell as a few other specialized ones.\n\nYou can add custom editors interfaces fairly easily. Look at any of the\nexisting ones for an example.\n\nJSON Editor uses resolver functions to determine which editor interface to use\nfor a particular schema or subschema.\n\nLet's say you make a custom location editor for editing geo data. You can add\na resolver function to use this custom editor when appropriate. For example:\n\n    \n    \n    // Add a resolver function to the beginning of the resolver list // This will make it run before any other ones JSONEditor.defaults.resolvers.unshift(schema => { if(schema.type === \"object\" && schema.format === \"location\") { return \"location\"; } // If no valid editor is returned, the next resolver function will be used });\n\nThe following schema will now use this custom editor for each of the array\nelements instead of the default object editor.\n\n    \n    \n    { \"type\": \"array\", \"items\": { \"type\": \"object\", \"format\": \"location\", \"properties\": { \"longitude\": { \"type\": \"number\" }, \"latitude\": { \"type\": \"number\" } } } }\n\nIf you create a custom editor interface that you think could be helpful to\nothers, submit a pull request!\n\nThe possibilities are endless. Some ideas:\n\n  * A compact way to edit objects\n  * Radio button version of the select editor\n  * Autosuggest for strings (like enum, but not restricted to those values)\n  * Better editor for arrays of strings (tag editor)\n  * Canvas based image editor that produces Base64 data URLs\n\n## Custom Validation\n\nJSON Editor provides a hook into the validation engine for adding your own\ncustom validation.\n\nLet's say you want to force all schemas with format set to date to match the\npattern YYYY-MM-DD.\n\n    \n    \n    // Custom validators must return an array of errors or an empty array if valid JSONEditor.defaults.custom_validators.push((schema, value, path) => { const errors = []; if (schema.format===\"date\") { if (!/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(value)) { // Errors must be an object with `path`, `property`, and `message` errors.push({ path: path, property: 'format', message: 'Dates must be in the format \"YYYY-MM-DD\"' }); } } return errors; });\n\n## Override Editors Methods\n\n    \n    \n    // override class method JSONEditor.defaults.editors.integer.prototype.sanitize = function(value) { return value };\n\nor\n\n    \n    \n    // override object method var path =\"root.integerfield\"; editor.getEditor(path).sanitize = function(value) { return value };\n\n## Support Legacy Browser (not tested)\n\nJSON Editor can be used with browsers that support ES5, but in order to use it\nwith older browsers such as IE, it is necessary to use \"core-js\" as a\npolyfill.\n\n    \n    \n    <script src=\"https://unpkg.com/core-js-bundle@latest/minified.js\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@json-editor/json-editor@latest/dist/jsoneditor.min.js\"></script>\n\n## About\n\nJSON Schema Based Editor\n\n### Topics\n\njavascript editor bootstrap json json-schema json-schema-form\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n4.2k stars\n\n### Watchers\n\n71 watching\n\n### Forks\n\n635 forks\n\nReport repository\n\n## Releases\n\n87 tags\n\n## Packages 0\n\nNo packages published\n\n## Used by 581\n\n\\+ 573\n\n## Contributors 143\n\n\\+ 129 contributors\n\n## Languages\n\n  * JavaScript 63.0%\n  * HTML 35.1%\n  * CSS 1.9%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
