{"aid": "40038591", "title": "Beware of Base64 Encoded Strings", "url": "https://garrit.xyz/posts/2024-04-15-beware-of-base64-encoded-strings", "domain": "garrit.xyz", "votes": 11, "user": "ColinWright", "posted_at": "2024-04-15 10:15:44", "comments": 10, "source_title": "Beware of base64 encoded strings | Garrit's Notes", "source_text": "Beware of base64 encoded strings | Garrit's Notes\n\n# Beware of base64 encoded strings\n\nApr 15 2024\n\n#guide#note#learnings#web#til#tech#programming\n\nI just encountered a fun little bug that I thought is worth sharing.\n\nTL;DR: the base64 util breaks lines after a certain number of columns. Use a\nflag to specify \"don't break\". Here's the commit that fixes the issue:\n\nIt started when we noticed that a cronjob that used wget to regularly call an\nendpoint failed on one specific environment. The endpoint uses Basic Auth,\nwhich is essentially a header with a Base64 encoded representation of a\nusername and password. Curl has this functionality built in, but to keep the\nattack surface as small as possible, we decided to stick to wget, which is\npart of busybox, to keep the container image size under 1 MB (!). After all,\nall we want to do is ping an endpoint.\n\nThis is the command we used up to this point:\n\n    \n    \n    wget --post-data=\"\" -O - --header=\"Authorization: Basic $(echo -n $BASIC_AUTH_USERNAME:$BASIC_AUTH_PASSWORD | base64)\" http://endpoint:8080/v1/cache\n\nWe noticed that the request worked fine on non-prod environments, but it\nfailed on production with the following error:\n\n    \n    \n    The HTTP header line [b2verlk1rwjsnutbcapkjh==] does not conform to RFC 7230. The request has been rejected.\n\nAfter digging around for a while and separating out the individual pieces of the commands, I noticed that the subcommand to build the header value (echo -n $BASIC_AUTH_USERNAME:$BASIC_AUTH_PASSWORD | base64) behaved differently on prod vs. non-prod. The password on prod is way longer compared to the other environments. Let's run this command with a short input:\n    \n    \n    / $ echo -n someuser:somepassword | base64 c29tZXVzZXI6c29tZXBhc3N3b3Jk / $\n\nAnd again with a long input:\n\n    \n    \n    / $ echo -n someuser:somepasswordthatswaylongerthanthefirstonebutalsoverysecureandsafe | base64 c29tZXVzZXI6c29tZXBhc3N3b3JkdGhhdHN3YXlsb25nZXJ0aGFudGhlZmlyc3RvbmVidXRhbHNv dmVyeXNlY3VyZWFuZHNhZmU= / $\n\nBingo! There's a rogue newline character in the output of base64. The fix is\nvery straight-forward. Using the -w0 flag for base64, we can force the output\nto be on the same line:\n\n    \n    \n    / $ echo -n someuser:somepasswordthatswaylongerthanthefirstonebutalsoverysecureandsafe | base64 -w0 c29tZXVzZXI6c29tZXBhc3N3b3JkdGhhdHN3YXlsb25nZXJ0aGFudGhlZmlyc3RvbmVidXRhbHNvdmVyeXNlY3VyZWFuZHNhZmU=\n\nThis eventually fixed the issue. Not something I would've ever thought of!\n\n## Continue Reading\n\nApr 11 2024 A simple search bar\n\nApr 10 2024 Beating Elden Ring\n\nApr 04 2024 Pandoc: Convert links to footnotes (the easy way)\n\nApr 02 2024 Fuck trees, use tags\n\nJan 30 2024 To prove something is true, try disproving it first\n\nI invite you to read my new book Five Years of Blogging: Ideas, Opinions and\nGuides written 2019 to 2024. Becoming a member on Buy Me a Coffee will grant\nyou free access to the book!\n\n### Links of Interest\n\nRSS Feed Todo List PGP Key Guestbook Blogroll Capture the Flag\n\n### Elsewhere\n\nGithub LinkedIn Mastodon (ActivityPub) Contact\n\n\ud83d\udc7b Proud member of darktheme.club \ud83d\udc7b\n\n\u00a9 2018-2024 Garrit Franke Privacy | Source Code\n\n", "frontpage": true}
