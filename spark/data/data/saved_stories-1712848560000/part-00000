{"aid": "40000091", "title": "Hermetic CC Toolchain", "url": "https://github.com/uber/hermetic_cc_toolchain", "domain": "github.com/uber", "votes": 2, "user": "signa11", "posted_at": "2024-04-11 09:14:42", "comments": 0, "source_title": "GitHub - uber/hermetic_cc_toolchain: Bazel C/C++ toolchain for cross-compiling C/C++ programs", "source_text": "GitHub - uber/hermetic_cc_toolchain: Bazel C/C++ toolchain for cross-compiling\nC/C++ programs\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nuber / hermetic_cc_toolchain Public\n\n  * Notifications\n  * Fork 33\n  * Star 239\n\nBazel C/C++ toolchain for cross-compiling C/C++ programs\n\n### License\n\nMIT license\n\n239 stars 33 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# uber/hermetic_cc_toolchain\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n43 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nmotiejusMerge pull request #170 from motiejus/windowsc37835a \u00b7\n\n## History\n\n659 Commits  \n  \n### .bcr\n\n|\n\n### .bcr\n\n| bcr: add bazel targets  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| releaser: fix windows  \n  \n### ci\n\n|\n\n### ci\n\n| releaser: fix windows  \n  \n### examples\n\n|\n\n### examples\n\n| Releasing hermetic_cc_toolchain v3.0.1  \n  \n### rules\n\n|\n\n### rules\n\n| test/cgo: cleanup  \n  \n### test\n\n|\n\n### test\n\n| Add wasm32-wasi-musl target  \n  \n### toolchain\n\n|\n\n### toolchain\n\n| bump zig to 0.12.0-dev.2824+0b7af2563  \n  \n### tools\n\n|\n\n### tools\n\n| releaser: fix windows  \n  \n### .bazelignore\n\n|\n\n### .bazelignore\n\n| enabling auto-publishing to BCR (#109)  \n  \n### .bazelrc\n\n|\n\n### .bazelrc\n\n| tests: run on more platforms, avoid shell scripts  \n  \n### .bazelversion\n\n|\n\n### .bazelversion\n\n| chore: bump bazel to 7.0.2  \n  \n### .envrc\n\n|\n\n### .envrc\n\n| revert \"Re-license portions of the code to Apache 2.0\" (#35)  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| releaser: fix windows  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| rm **/MODULE.bazel.lock  \n  \n### BUILD\n\n|\n\n### BUILD\n\n| Finish migration to bzlmod  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Rename bazel-zig-cc to hermetic_cc_toolchain (#36)  \n  \n### MODULE.bazel\n\n|\n\n### MODULE.bazel\n\n| Releasing hermetic_cc_toolchain v3.0.1  \n  \n### README.md\n\n|\n\n### README.md\n\n| Releasing hermetic_cc_toolchain v3.0.1  \n  \n### WORKSPACE\n\n|\n\n### WORKSPACE\n\n| Finish migration to bzlmod  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| Add wasm32-wasi-musl target  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| Add wasm32-wasi-musl target  \n  \n### tools.go\n\n|\n\n### tools.go\n\n| Enable Lint on CI (#2)  \n  \n## Repository files navigation\n\n# Hermetic CC toolchain\n\nThis is a C/C++ toolchain that can (cross-)compile C/C++ programs on top of\nzig cc. It contains clang-17, musl, glibc 2.17-2.38, all in a ~40MB package.\nRead here about zig-cc; the rest of the README will present how to use this\ntoolchain from Bazel.\n\nConfiguring toolchains in Bazel is complex and fraught with peril. We, the\nteam behind hermetic_cc_toolchain, are still confused on how this all works,\nand often wonder why it works at all. That aside, we made our best effort to\nmake hermetic_cc_toolchain usable for your C/C++/CGo projects, with as many\nguardrails can be installed.\n\nWhile copy-pasting the code in your project, attempt to read and understand\nthe text surrounding the code snippets. This will save you hours of head\nscratching.\n\n## Project Origin\n\nThis repository is cloned from and is based on Adam Bouhenguel's bazel-zig-cc,\nand was later developed at sr.ht/~motiejus/bazel-zig-cc. After a while this\nrepository was moved to the Uber GitHub repository and renamed to\nhermetic_cc_toolchain.\n\n> Our special thanks to Adam for coming up with the idea - and creating the\n> original version \u2013 of bazel-zig-cc and publishing it. His idea and work\n> helped make the concept of using Zig with Bazel a reality; now we all can\n> benefit from it.\n\n## Usage\n\nAdd this to your WORKSPACE:\n\n    \n    \n    load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\") HERMETIC_CC_TOOLCHAIN_VERSION = \"v3.0.1\" http_archive( name = \"hermetic_cc_toolchain\", sha256 = \"3bc6ec127622fdceb4129cb06b6f7ab098c4d539124dde96a6318e7c32a53f7a\", urls = [ \"https://mirror.bazel.build/github.com/uber/hermetic_cc_toolchain/releases/download/{0}/hermetic_cc_toolchain-{0}.tar.gz\".format(HERMETIC_CC_TOOLCHAIN_VERSION), \"https://github.com/uber/hermetic_cc_toolchain/releases/download/{0}/hermetic_cc_toolchain-{0}.tar.gz\".format(HERMETIC_CC_TOOLCHAIN_VERSION), ], ) load(\"@hermetic_cc_toolchain//toolchain:defs.bzl\", zig_toolchains = \"toolchains\") # Plain zig_toolchains() will pick reasonable defaults. See # toolchain/defs.bzl:toolchains on how to change the Zig SDK version and # download URL. zig_toolchains()\n\nAnd this to .bazelrc on a Unix-y systems:\n\n    \n    \n    common --enable_platform_specific_config build:linux --sandbox_add_mount_pair=/tmp build:macos --sandbox_add_mount_pair=/var/tmp build:windows --sandbox_add_mount_pair=C:\\Temp\n\nThe directories can be narrowed down to /tmp/zig-cache (Linux), /var/tmp/zig-\ncache (MacOS) and C:\\Temp\\zig-cache respectively if it can be ensured they\nwill be created before the invocation of bazel build. See #83 for more\ncontext. If a different place is prefferred for zig cache, set:\n\n    \n    \n    build --repo_env=HERMETIC_CC_TOOLCHAIN_CACHE_PREFIX=/path/to/cache build --sandbox_add_mount_pair=/path/to/cache\n\nThe snippets above will download the zig toolchain and make the bazel\ntoolchains available for registration and usage. If nothing else is done, this\nwill work for some minimal use cases. The .bazelrc snippet instructs Bazel to\nuse the registered \"new kinds of toolchains\". The next steps depend on how one\nwants to use hermetic_cc_toolchain. The descriptions below is a gentle\nintroduction to C++ toolchains from \"user's perspective\" too.\n\nSee examples for some other recommended .bazelrc flags, as well as how to use\nhermetic_cc_toolchain with bzlmod.\n\n### Use case: manually build a single target with a specific zig cc toolchain\n\nThis option is least disruptive to the workflow compared to no hermetic C++\ntoolchain, and works best when trying out or getting started with\nhermetic_cc_toolchain for a subset of targets.\n\nTo request Bazel to use a specific toolchain (compatible with the specified\nplatform) for build/tests/whatever on linux-amd64-musl, do:\n\n    \n    \n    bazel build \\ --platforms @zig_sdk//platform:linux_arm64 \\ --extra_toolchains @zig_sdk//toolchain:linux_arm64_musl \\ //test/go:go\n\nThere are a few things going on here, let's try to dissect them.\n\n#### Option --platforms @zig_sdk//platform:linux_arm64\n\nSpecifies that the our target platform is linux_arm64, which resolves into:\n\n    \n    \n    $ bazel query --output=build @zig_sdk//platform:linux_arm64 platform( name = \"linux_arm64\", generator_name = \"linux_arm64\", generator_function = \"declare_platforms\", generator_location = \"platform/BUILD:7:18\", constraint_values = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"], )\n\nconstraint_values instructs Bazel to be looking for a toolchain that is\ncompatible with (in Bazelspeak, target_compatible_with) all of the\n[\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"].\n\n#### Option --toolchains=@zig_sdk//toolchain:linux_arm64_musl\n\nInspect first (@platforms//cpu:aarch64 is an alias to @platforms//cpu:arm64):\n\n    \n    \n    $ bazel query --output=build @zig_sdk//toolchain:linux_arm64_musl toolchain( name = \"linux_arm64_musl\", generator_name = \"linux_arm64_musl\", generator_function = \"declare_toolchains\", generator_location = \"toolchain/BUILD:7:19\", toolchain_type = \"@bazel_tools//tools/cpp:toolchain_type\", target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\", \"@zig_sdk//libc:unconstrained\"], toolchain = \"@zig_sdk//:aarch64-linux-musl_cc\", )\n\nFor a platform to pick up the right toolchain, the platform's\nconstraint_values must be a subset^1 of the toolchain's\ntarget_compatible_with. Since the platform is a subset (therefore, toolchain's\n@zig_sdk//libc:unconstrained does not matter), this toolchain is selected for\nthis platform. As a result, --platforms @zig_sdk//platform:linux_amd64 causes\nBazel to select a toolchain @zig_sdk//platform:linux_arm64_musl (because it\nsatisfies all constraints), which will compile and link the C/C++ code with\nmusl.\n\n@zig_sdk//libc:unconstrained will become important later.\n\n#### Same as above, less typing (with --config)\n\nSpecifying the platform and toolchain for every target may become burdensome,\nso they can be put used via --config. For example, append this to .bazelrc:\n\n    \n    \n    build:linux_arm64 --platforms @zig_sdk//platform:linux_arm64 build:linux_arm64 --extra_toolchains @zig_sdk//toolchain:linux_arm64_musl\n\nAnd then building to linux-arm64-musl boils down to:\n\n    \n    \n    bazel build --config=linux_arm64_musl //test/go:go\n\n### Use case: always compile with zig cc\n\nInstead of adding the toolchains to .bazelrc, they can be added\nunconditionally. Append this to WORKSPACE after zig_toolchains(...):\n\n    \n    \n    register_toolchains( \"@zig_sdk//toolchain:linux_amd64_gnu.2.28\", \"@zig_sdk//toolchain:linux_arm64_gnu.2.28\", \"@zig_sdk//toolchain:darwin_amd64\", \"@zig_sdk//toolchain:darwin_arm64\", \"@zig_sdk//toolchain:windows_amd64\", \"@zig_sdk//toolchain:windows_arm64\", \"@zig_sdk//toolchain:wasip1_wasm\", )\n\nAppend this to .bazelrc:\n\n    \n    \n    build --action_env BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1\n\nFrom Bazel's perspective, this is almost equivalent to always specifying\n--extra_toolchains on every bazel <...> command-line invocation. It also means\nthere is no way to disable the toolchain with the command line. This is useful\nif you find hermetic_cc_toolchain useful enough to compile for all of your\ntargets and tools.\n\nWith BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1 Bazel stops detecting the default\nhost toolchain. Configuring toolchains is complicated enough, and the auto-\ndetection (read: fallback to non-hermetic toolchain) is a footgun best\navoided. This option is not documented in bazel, so may break. If you intend\nto use the hermetic toolchain exclusively, it won't hurt.\n\n### Use case: zig-cc for targets for multiple libc variants\n\nWhen some targets need to be build with different libcs (either different\nversions of glibc or musl), use a linux toolchain from\n@zig_sdk//libc_aware/toolchains:<...>. The toolchain will only be selected\nwhen building for a specific libc. For example, in WORKSPACE:\n\n    \n    \n    register_toolchains( \"@zig_sdk//libc_aware/toolchain:linux_amd64_gnu.2.19\", \"@zig_sdk//libc_aware/toolchain:linux_arm64_gnu.2.28\", \"@zig_sdk//libc_aware/toolchain:x86_64-linux-musl\", )\n\nWhat does @zig_sdk//libc_aware/toolchain:linux_amd64_gnu.2.19 mean?\n\n    \n    \n    $ bazel query --output=build @zig_sdk//libc_aware/toolchain:linux_amd64_gnu.2.19 |& grep target target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\", \"@zig_sdk//libc:gnu.2.19\"],\n\nTo see how this relates to the platform:\n\n    \n    \n    $ bazel query --output=build @zig_sdk//libc_aware/platform:linux_amd64_gnu.2.19 |& grep constraint constraint_values = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\", \"@zig_sdk//libc:gnu.2.19\"],\n\nIn this case, the platform's constraint_values and toolchain's\ntarget_compatible_with are identical, causing Bazel to select the right\ntoolchain for the requested platform. With these toolchains registered, one\ncan build a project for a specific libc-aware platform; it will select the\nappropriate toolchain:\n\n    \n    \n    $ bazel run --platforms @zig_sdk//libc_aware/platform:linux_amd64_gnu.2.19 //test/c:which_libc glibc_2.19 $ bazel run --platforms @zig_sdk//libc_aware/platform:linux_amd64_gnu.2.28 //test/c:which_libc glibc_2.28 $ bazel run --platforms @zig_sdk//libc_aware/platform:linux_amd64_musl //test/c:which_libc non_glibc $ bazel run --run_under=file --platforms @zig_sdk//libc_aware/platform:linux_arm64_gnu.2.28 //test/c:which_libc which_libc: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 2.0.0, stripped\n\nTo the list of libc aware toolchains and platforms:\n\n    \n    \n    $ bazel query @zig_sdk//libc_aware/toolchain/... $ bazel query @zig_sdk//libc_aware/platform/...\n\nLibc-aware toolchains are especially useful when relying on transitions, as\ntransitioning extra_platforms will cause the host tools to be rebuilt with the\nspecific libc version, which takes time; also the build host may not be able\nto run them if, say, target glibc version is newer than on the host. Some\ntests in this repository (under test/) are using transitions; you may check\nout how it's done.\n\nThe @zig_sdk//libc:variant constraint is necessary to select a matching\ntoolchain. Remember: the toolchain's target_compatible_with must be equivalent\nor a superset of the platform's constraint_values. This is why both libc-aware\nplatforms and libc-aware toolchains reside in their own namespace; if we try\nto mix non-libc-aware to libc-aware, confusion ensues.\n\nTo use the libc constraints in the project's platform definitions, add a\n@zig_sdk//libc:variant constraint to them. See the list of available values:\n\n    \n    \n    $ bazel query \"attr(constraint_setting, @zig_sdk//libc:variant, @zig_sdk//...)\"\n\n@zig_sdk//libc:unconstrained is a special value that indicates that no value\nfor the constraint is specified. The non libc aware linux toolchains are only\ncompatible with this value to prevent accidental silent fallthrough to them.\nThis is a guardrail.\n\n## Note: Naming\n\nBoth Go and Bazel naming schemes are accepted. For convenience with Go, the\nfollowing Go-style toolchain aliases are created:\n\nBazel (zig) name| Go name  \n---|---  \nx86_64| amd64  \naarch64| arm64  \nwasm32| wasm  \nmacos| darwin  \nwasi| wasip1  \n  \nFor example, the toolchain linux_amd64_gnu.2.28 is aliased to x86_64-linux-\ngnu.2.28. To find out which toolchains can be registered or used, run:\n\n    \n    \n    $ bazel query @zig_sdk//toolchain/...\n\n## Incompatibilities with clang and gcc\n\nzig cc is almost a drop-in replacement for clang/gcc. This section lists some\nof the discovered differences and ways to live with them.\n\n### UBSAN and \"SIGILL: Illegal Instruction\"\n\nzig cc differs from \"mainstream\" compilers by enabling UBSAN by default. Which\nmeans your program may compile successfully and crash with:\n\n    \n    \n    SIGILL: illegal instruction\n\nThis flag encourages program authors to fix the undefined behavior. There are\nmany ways to find the undefined behavior.\n\n## Known Issues In hermetic_cc_toolchain\n\nThese are the things you may stumble into when using hermetic_cc_toolchain. We\nare unlikely to implement them any time soon, but patches implementing those\nwill be accepted.\n\n### Zig cache location\n\nCurrently zig cache is stored in /var/tmp/zig-cache, so bazel clean --expunge\nwill not clear the zig cache. Zig's cache should be stored somewhere in the\nproject's path. It is not clear how to do it.\n\nSee #83 for more context.\n\n### OSX: sysroot\n\nFor non-trivial programs (and for all darwin/arm64 cgo programs) MacOS SDK may\nbe necessary. Read Jakub's comment about it. Support for OSX sysroot is\ncurrently not implemented, but patches implementing it will be accepted, as\nlong as the OSX sysroot must come through an http_archive.\n\nIn essence, OSX target support is not well tested with hermetic_cc_toolchain.\nAlso see #10.\n\n### Bazel 6 or earlier\n\nAdd to .bazelrc:\n\n    \n    \n    build --incompatible_enable_cc_toolchain_resolution\n\n## Host Environments\n\nThis repository is used on the following (host) platforms:\n\n  * linux_amd64, a.k.a. x86_64.\n  * linux_arm64, a.k.a. AArch64.\n  * darwin_amd64, the 64-bit post-PowerPC models.\n  * darwin_arm64, the M1.\n  * windows_amd64, a.k.a. x64.\n\nThe tests are running (CId) on linux-amd64.\n\n### Transient docker environment\n\nA standalone Docker environment to play with hermetic_cc_toolchain:\n\n    \n    \n    $ docker run -e CC=/usr/bin/false -ti --rm -v \"$PWD:/x\" -w /x debian:bookworm-slim # apt update && apt install --no-install-recommends -y shellcheck ca-certificates python3 git # git config --global --add safe.directory /x # tools/bazel test //... # ./ci/lint # ./ci/release # ./ci/zig-wrapper\n\n## Communication\n\nWe maintain two channels for comms:\n\n  * Github issues and pull requests.\n  * Slack: #zig in bazelbuild.slack.com.\n\n### Previous Commuications\n\nPrevious communications were done in a mailing list; the past archive can be\naccessed like this:\n\n    \n    \n    git checkout v2.0.0-rc2 mailing-list-archive.mbox mutt -R -f mailing-list-archive.mbox\n\n## Maintainers\n\n  * @FabianHahn\n  * @jvolkman\n  * @laurynaslubys\n  * @linzhp\n  * @motiejus\n  * @sywhang\n\nGuidelines for maintainers^2:\n\n  * Communicate intent precisely.\n  * Edge cases matter.\n  * Favor reading code over writing code.\n  * Only one obvious way to do things.\n  * Runtime crashes are better than bugs.\n  * Compile errors are better than runtime crashes.\n  * Incremental improvements.\n  * Avoid local maximums.\n  * Reduce the amount one must remember.\n  * Focus on code rather than style.\n  * Resource allocation may fail; resource deallocation must succeed.\n  * Memory is a resource.\n  * Together we serve the users.\n\nOn a more practical note:\n\n  * Maintainers can merge others' pull requests following their best judgement. They may or may not ask for feedback from other maintainers. Follow the Zen of Zig.\n  * Currently releases are coordinated with Uber employees, because they can test the version-to-be-released their big repository. If you use hermetic_cc_toolchain in production and, more importantly, have a heterogeneous environment (different languages, RBE, different platforms), we encourage you to make yourself known. That way we can work together to validate it before cutting the release.\n\n## Footnotes\n\n  1. a mathematical subset: both can be equal. \u21a9\n\n  2. Credit: zig zen \u21a9\n\n## About\n\nBazel C/C++ toolchain for cross-compiling C/C++ programs\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\nCustom properties\n\n### Stars\n\n239 stars\n\n### Watchers\n\n11 watching\n\n### Forks\n\n33 forks\n\nReport repository\n\n## Releases 13\n\nv3.0.1 Latest\n\nFeb 22, 2024\n\n\\+ 12 releases\n\n## Packages 0\n\nNo packages published\n\n## Contributors 13\n\n## Languages\n\n  * Starlark 44.5%\n  * Go 19.3%\n  * Python 16.4%\n  * Zig 14.1%\n  * Shell 4.5%\n  * C 1.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
