{"aid": "40039840", "title": "To Test or Not to Test? That's a Good Question", "url": "https://tidyfirst.substack.com/p/to-test-or-not-to-test-thats-a-good", "domain": "tidyfirst.substack.com", "votes": 1, "user": "rbanffy", "posted_at": "2024-04-15 12:43:32", "comments": 0, "source_title": "To Test or Not to Test? That\u2019s a Good Question", "source_text": "To Test or Not to Test? That\u2019s a Good Question\n\n# Software Design: Tidy First?\n\nShare this post\n\n#### To Test or Not to Test? That\u2019s a Good Question\n\ntidyfirst.substack.com\n\n#### Discover more from Software Design: Tidy First?\n\nSoftware design is an exercise in human relationships. So are all the other\ntechniques we use to develop software. How can we geeks get better at\ntechnique as one way of getting better at relationships?\n\nOver 80,000 subscribers\n\nContinue reading\n\nSign in\n\nFrom the Archives\n\n# To Test or Not to Test? That\u2019s a Good Question\n\nKent Beck\n\nApr 12, 2024\n\n48\n\nShare this post\n\n#### To Test or Not to Test? That\u2019s a Good Question\n\ntidyfirst.substack.com\n\nShare\n\n> First published August 2014. For context JUnit Max was a commercial product\n> I produced that is still the best test runner I\u2019ve ever used. It gave sub-\n> second feedback every time a file was edited & reported test failures in a\n> way that looked like syntax errors. No more switching back & forth between\n> your coding context & your testing context. Sigh. RIP.\n\nTurns out the eternal verities of software development are neither eternal nor\nverities. I\u2019m speaking in this case of the role of tests.\n\nOnce upon a time tests were seen as someone else\u2019s job (speaking from a\nprogrammer\u2019s perspective). Along came XP and said no, tests are everybody\u2019s\njob, continuously. Then a cult of dogmatism sprang up around testing\u2014if you\ncan conceivably write a test you must.\n\nBy insisting that I always write tests I learned that I can test pretty much\nanything given enough time. I learned that tests can be incredibly valuable\ntechnically, psychologically, socially, and economically. However, until\nrecently there was an underlying assumption to my strategy that I wasn\u2019t\nreally clear about.\n\nSoftware development is often a long game. My favorite software business of\nall time is the MVS PL/1 compiler. I heard a rumor that at one point it was\nearning IBM $300M annually with a total staff of 3 developers. To get to such\na business you have to be patient, to invest in extending the lifetime of your\nsoftware for decades if necessary.\n\nIt\u2019s that \u201coften\u201d that hid my assumption about testing. Just as golf has a\nlong game and short game requiring related but not identical skills, so\nsoftware has a long game and a short game [ed: I was edging up to 3X:\nExplore/Expand/Extract here]. With JUnit Max I am living the short game of\nsoftware. It\u2019s teaching me the meaning of \u201crelated but not identical skills\u201d\nwhen applied to software development.\n\n##\n\nTwo Projects\n\nJUnit is a long game\u2013lots of users, stable revenue ($0, alas), bounded scope.\nWe know what JUnit is. We know what attracts and retains users. We just need\nto stay a bit ahead of slowly evolving needs.\n\nWorking on JUnit, the whole bag of XP practices makes sense. We always test-\ndrive development. We refactor whenever we can, sometimes trying 3-4\napproaches before hitting one we are willing to live with.\n\nSuccess in JUnit is defined by keeping the support cost asymptotically close\nto zero. We have a huge, active user base and no budget for support. The means\nto success is clear\u2014slow evolution, comprehensive testing, and infrequent\nreleases.\n\nWhen I started JUnit Max it slowly dawned on me that the rules had changed\n[ed: see? 3X]. The killer question was (is), \u201cWhat features will attract\npaying customers?\u201d By definition this is an unanswered question. If JUnit (or\nany other free-as-in-beer package) implements a feature, no one will pay for\nit in Max.\n\nSuccess in JUnit Max is defined by bootstrap revenue: more paying users, more\nrevenue per users, and/or a higher viral coefficient. Since, per definition,\nthe means to achieve success are unknown, what maximizes the chance for\nsuccess is trying lots of experiments and incorporating feedback from actual\nuse and adoption.\n\n##\n\nTo Test. Or Not.\n\nOne form of feedback I put in place is that all internal errors in Max are\nreported to a central server. Unlike long game projects, runtime errors in\nshort game projects are not necessarily A Bad Thing (that\u2019s a topic for\nanother post). Errors I don\u2019t know about, however, are definitely A Bad Thing.\n\nLooking through the error log I saw two errors I knew how to fix. I didn\u2019t\nhave any experiments that would fit into the available time, so I set out to\nfix them both.\n\nThe first defect was clear\u2014projects that were closed caused an exception.\nWriting the test was easy\u2014clone an existing test but close the project before\nrunning Max. Sure enough, red bar. A two-line fix later, green bar.\n\nThe second defect posed a dilemma. I could see how to fix the problem, but I\nestimated it would take me several hours to learn what was necessary to write\nan automated test. My solution: fix it and ship it. No test.\n\nI stand behind both decisions. In both cases I maximized the number of\nvalidated experiments I could perform. The test for the first defect prevented\nregressions, added to my confidence, and supported future development. Not\nwriting the test for the second defect gave me time to try a new feature.\n\n##\n\nNo Easy Answer\n\nWhen I started Max I didn\u2019t have any automated tests for the first month. I\ndid all of my testing manually. After I got the first few subscribers I went\nback and wrote tests for the existing functionality. Again, I think this\nsequence maximized the number of validated experiments I could perform per\nunit time. With little or no code, no tests let me start faster (the first\ntest I wrote took me almost a week). Once the first bit of code was proved\nvaluable (in the sense that a few of my friends would pay for it), tests let\nme experiment quickly with that code with confidence.\n\nWhether or not to write automated tests requires balancing a range of factors.\nEven in Max I write a fair number of tests. If I can think of a cheap way to\nwrite a test, I develop every feature acceptance-test-first. Especially if I\nam not sure how to implement the feature, writing a test gives me good ideas.\nWhen working on Max, the question of whether or not to write a test boils down\nto whether a test helps me validate more experiments per unit time. It does, I\nwrite it. If not, damn the torpedoes. I am trying to maximize the chance that\nI\u2019ll achieve wheels-up revenue for Max. The reasoning around design investment\nis similarly complicated, but again that\u2019s the topic for a future post.\n\nSome day Max will be a long game project, with a clear scope and sustainable\nrevenue. Maintaining flexibility while simultaneously reducing costs will take\nover as goals. Days invested in one test will pay off. Until then, I need to\nremember to play the short game.\n\n### Subscribe to Software Design: Tidy First?\n\nBy Kent Beck \u00b7 Thousands of paid subscribers\n\nSoftware design is an exercise in human relationships. So are all the other\ntechniques we use to develop software. How can we geeks get better at\ntechnique as one way of getting better at relationships?\n\n48 Likes\n\n\u00b7\n\n1 Restack\n\n48\n\nShare this post\n\n#### To Test or Not to Test? That\u2019s a Good Question\n\ntidyfirst.substack.com\n\nShare\n\nComments\n\n90% of My Skills Are Now Worth $0\n\n...but the other 10% are worth 1000x\n\nApr 19, 2023 \u2022\n\nKent Beck\n\n150\n\nShare this post\n\n#### 90% of My Skills Are Now Worth $0\n\ntidyfirst.substack.com\n\n48\n\nMastering Programming\n\nFEBRUARY 5, 2016 \u00b7 FACEBOOK This was one of those posts that I threw together,\nthought nothing of, & then it blew up. Until recently this was my...\n\nFeb 9 \u2022\n\nKent Beck\n\n293\n\nShare this post\n\n#### Mastering Programming\n\ntidyfirst.substack.com\n\n3\n\nMeasuring developer productivity? A response to McKinsey\n\nPart 1 of 2\n\nAug 29, 2023 \u2022\n\nKent Beck\n\nand\n\nGergely Orosz\n\n281\n\nShare this post\n\n#### Measuring developer productivity? A response to McKinsey\n\ntidyfirst.substack.com\n\n47\n\nReady for more?\n\n\u00a9 2024 Kent Beck\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
