{"aid": "40065739", "title": "Puzzmo v1 Launch Tech deep-dive", "url": "https://blog.puzzmo.com/posts/2024/04/17/v1-launch/", "domain": "puzzmo.com", "votes": 1, "user": "cptcobalt", "posted_at": "2024-04-17 15:06:27", "comments": 0, "source_title": "Puzzmo v1 Launch Tech deep-dive", "source_text": "Puzzmo v1 Launch Tech deep-dive - Puzzmo Blog\n\nPuzzmo Blog\n\n# Puzzmo v1 Launch Tech deep-dive\n\nApr 16, 2024 - Orta Therox\n\nThis blog post is trying to do a lot, I want to look back at the initial\nversion of Puzzmo we shipped back in November and talk through what we built.\nIt\u2019s a very long read, and sometimes doesn\u2019t flow too naturally - but it\u2019s\ncomprehensive and a very useful reference for noting a little slice of time\nwhen Puzzmo\u2019s users were in the hundreds.\n\nI\u2019m mainly going to be concentrating on \u201cPuzzmo\u201d the system, e.g. the bits\nwhich power features like the website, leaderboards, scoring systems, groups,\nservers and that sort of thing. Internally, we generally call these projects\nthe \u201cApp\u201d (the public facing website for puzzmo.com) or the \u201cAPI\u201d (the servers\npowering the website). In doing so, I will be omitting \u201cgames\u201d topics like \u201cWe\nchanged Wordbind to use two words\u201d, \u201cChanges we made to games to make them fit\nPuzzmo\u201d. The hows and whys for those topics are not really my story to tell,\nand I have enough on my plate trying to keep on top of the technical\narchitecture for Puzzmo.\n\n## What did it take to ship Puzzmo?\n\nWe started off with a small jpg and a general plan, and turned it into that\nFigma above over the course of two years. We were in a bit of a strange\nposition with Puzzmo being a mix of \u201cgames\u201d and \u201capp\u201d culturally, as well as\nbeing a tech startup I guess. This meant we could kind of pick and choose\nideas from all of those cultures.\n\nSomewhere after the six months, we had a really solid \u201cvertical slice\u201d of what\nPuzzmo would be. We had folks playing daily, and you could see the skeleton of\nwhat we were trying pretty quickly.\n\nOver the next ~18 months, we plodded on. While I don\u2019t think we did a good job\nof being a \u201cminimum viable product\u201d, we had a pretty strong vision of what we\nwanted to build and where the edges of that problem space lay`.\n\n### How did we launch?\n\nTo kick off Puzzmo, we wanted to build something which would be interesting to\na general audience, and have a bit of FOMO mixed in. We came up with a plan\nwhich hit a few goals:\n\n  * Be worth reporting about for games journalists\n  * Gate folks getting in, as we did not know the ordinal of our audience\n  * Let people bring their friends along\n  * Have a pretty small time window for being open, and a random timing aspect to work on all timezones\n  * Explore mixing digital and physical aspects of games . To make that happen, we created a completely separate website from puzzmo.com\n\n## launch.puzzmo.com\n\nThe launch site. Keeping it on a separate domain removed complexity in the app\nand allowed us to try a different technique of writing websites (next.js) than\nour strategy for the app.\n\nThe idea for the site was based on our first guess at what a launch could be:\nmake a site which felt like a wordle-like (e.g. just played one game which\nrefreshed daily) and then have that alternate between all of Puzzmo\u2019s games\nover time as a surprise. What we ended up with was a system which explained\nour plans a bit, and required being one of the first 500 people to completing\na Puzzmo puzzle in a day:\n\nFor folks in the US, we would then send them a postcard which included an\ninvite code for puzzmo.com. Because mail takes time, this meant for the first\nweek or so, puzzmo.com (and our discord) was full of europeans who didn\u2019t get\nphysical mail, which made for some interesting discussions on the Crossword\u2019s\nAmericanness.\n\nDuring the launch period we offered lifetime accounts for Puzzmo, the launch\nsite ran for about a month as the gateway to joining Puzzmo.\n\n#### Iframe Embeds\n\nAs you can see above, we relied on playing Puzzmo games as a part of the\nlaunch strategy. This meant we needed to allow our games to run outside of\npuzzmo.com!\n\nFor games which don\u2019t require a virtual keyboard on mobile, we felt we could\ndo a good job of making \u201cpuzzle previews\u201d which can be embedded inside\narticles, the launch site or on blog posts like this eventually, for example\nhere it is in The Verge:\n\nThe iframe embeds are a separate games runtime from our main application, it\nhas less overhead and less features overall - but it\u2019s not supposed to be able\nto do so much anyway as they act more like a preview. This gave us a way to\n\u201cshow, not tell\u201d when talking about Puzzmo to the press.\n\n## puzzmo.com\n\nSo, what was behind the curtain?\n\n### App\n\nAt ~25 screens, roughly 70k lines of code and a whole world of spit-shine. The\nmajority of the app which powered puzzmo.com was written by two folks (Saman &\nMe). The app itself is largely a conventional Relay application built in\nReact, but it also talks, via a websocket, to our multiplayer/social side\nmaking state management non-trivial.\n\nWe do quite a lot of work in the application in terms of having layouts which\ndiffer on mobile vs desktop, which causes some interesting tension inside the\ncodebase. This approach is complex, but reviews of Puzzmo have often called it\n\u201cnative-like\u201d which is high praise for a project based on web-tech. It\u2019s\nlikely that the choice of using React Native Web via Expo at the start made\nthis report a lot more likely to happen.\n\nBetting of React Native Web gave us an obvious way to have native app when we\nget start thinking about putting Puzzmo on app stores.\n\nThis decision is something we\u2019ve started to roll back on though, as the number\nof legally necessary third party systems and policy systems start to make\nmaintaining one codebase across many platforms (each web browser, iOS and\nAndroid.) far less compelling. Part of the problem is that the complexity in\nmanaging all these constraints really requires at least one engineer\u2019s full\ntime focus on each platform, and I\u2019m not sure we\u2019re going to be there any time\nsoon.\n\nWe host the app on Vercel, where it is bundled as a Single Page App. Similar\nto techniques seen in Create React App, or Vite projects today.\n\n### API\n\nThe API for this app is a pretty traditional RedwoodJS app, with a reasonable\namount of built-in features replaced or dropped. The API is roughly 85k lines\nof code mostly written by one person (your truly), and provides a GraphQL\ninterface to the app and an admin dashboard.\n\nA Redwood app provides both APIs and a web interface, we use the web parts of\nRedwoodJS for an admin dashboard we call \u201cStudio\u201d. Studio powers all of the\nadmin tools for managing dailies, puzzles, iframe embeds and offers a \u201cGitHub\nfor Crosswords\u201d which is used to handle editing, reviewing and fact checking\nevery crossword which is put on the daily. This clocks in at roughly 100k\nlines of code, though a lot of it comes from our templating systems. We use\nreact-bootstrap for the majority of the user interface, which is truly a \u201cno-\nfrills get stuff done\u201d framework for writing reasonable code fast.\n\nMy opinions have a roughly 50% overlap with Redwood\u2019s.That number used to be\nhigher, as they look to be prioritising the parts we have little interest in\nover parts of Redwood we agree about. In a way that means we need to start\nbeing careful about the future of our API\u2019s foundations.\n\nWe host the API on Render, which occasionally has gone down on us, but not\nenough to be a concern. Render has a great set of tools for building server-\ndriven apps - we use a lot of their features and I\u2019ve been really happy with\nthat choice on the long-term.\n\n### Open Graph Thumbnail PNGs\n\nAs we were a year and a half into Puzzmo, Wordle came out and introduced to a\nmass audience the idea of a text representation of a game. This approach did\nthat game wonders! We had a few ideas similar, but had also been exploring the\nconnection between a URL and the image preview that lots of sites/apps show.\nWe wondered that maybe URLs could act as a conduit for doing image shares.\n\nWhen creating Puzzmo, we wanted to always have support for live thumbnails\ninside the site, and this code was re-used to generate custom image thumbnails\nfor each puzzle being played on the server. At 2k lines of code, it\u2019s not a\nvery big system because a lot of the hard work on making the thumbnails lives\nin the games repo. The thumbnail generator runs on Deno Deploy, which we\u2019ve\nfound to be pretty cool.\n\nWe ended up making a few different versions of these thumbnails and settled on\na pattern of trying to make a puzzle in that image which was a non-spoiler for\nthe puzzle you click through on. Quite a conceptual (and technical!) challenge\nfor some of the games.\n\n## Systems\n\nWithin Puzzmo itself, we had quite a lot systems to build in order to provide\na broad set of meta-game features seen in modern video games.\n\n### Game Runtime\n\nHeyyy, I thought we were defining this post as not being about games?! Well, I\nthink the technical architecture of how we run games at least worth a mention.\nFirst up, we should answer to \u201chow do we run a game?\u201d\n\nTo run a Puzzmo game, we have a embedded game runtime which communicates to an\nexternal system via JSON messages. For the app, we boot the game runtime\ninside an <iframe> and use postMessage to send info back and forth. I have\nworking prototypes for the same thing via webviews on iOS. The runtime is\nreasonably light, and mostly exists to provide an easy library for interacting\nwith a running game.\n\nGames themselves are JavaScript bundles generated by rollup, and we build a\ncopy of every game for every commit to our CDN. A game declares to Puzzmo (via\nthe database entry for a game) what commit SHA it is at, and what the global\nfunction for starting the game is called. This means that the API can tell the\nembed runtime how to make the right <script> tag, and then what function to\nuse to boot up.\n\nThis system intentionally disconnects deploys of the API/App from the games\ndeployments, and so games can deploy when it makes sense for them, and\nrollbacks are trivial as it\u2019s just a SHA switch in the database in our studio.\n\nSecond up, \u201chow do game thumbnails work?\u201d - it\u2019s kinda the same thing as\nabove, every game is responsible for creating it\u2019s own JavaScript bundle for\ncreating an SVG version of the puzzle. It means all games have to have at\nleast two renderers which take the same puzzle and gameplay state (e.g.\nprogress, or completion info.)\n\nA thumbnail renderer tends to be significantly simpler code-wise, but tends to\nshare a lot of state management code. Thumbnails are also just global\nfunctions in the JavaScript context which return an SVG string, so they work\nanywhere.\n\n#### Dailies\n\nThe root page on puzzmo.com we call the \u201cToday\u201d page and a today is\nresponsible for showing you things like \u201cyour group scores for today\u201d, news,\ngroup/friend invites etc. Here\u2019s the today page for the day Puzzmo went live\nwith the launch site:\n\nThe Today page is powered by a daily system that operates via the timezone of\nour servers (which pretends to live in Chicago (which brings all sorts of\ndaylight saving issues!)) but largely revolves around a single function in our\ncodebase which turns a date / timestamp into a format like 2023-10-16 (which\nwould be day 0.)\n\nWe build dailies 3 weeks in advance for games we can code generate, and\ncurated games try to schedule a month or two in advance. We offer prior\ndailies for folks who pay, which act as an archive of games to play.\n\n#### Social\n\nWe felt like the ability to talk and interact with friends were pretty\nimportant in this space. So, Puzzmo has a social graph, where you can find\nfriends and optionally give friends a \u201ctag\u201d. This gives us a way to have a\ntwo-tied relationship lookups for news, recommendations and ordering when\npresenting friends as a list. The technical foundations are based on an\nexternal open source project called Nakama, which provides a lot of our social\nprimitives.\n\nWe\u2019re very careful around letting folks interact, currently we have three\ntiers of users: admins and crossword contributors, whose profiles are\nconsidered public (and get bios, links etc) and users who are largely private\nto the internet.\n\nThere\u2019s a pretty nuanced invite system for friends, games, groups and gifting\npaid subscriptions which lives in the social systems.\n\n#### Groups\n\nGroups act as our competitive angle, anyone who is a subscriber can create a\ngroup and anyone with an account can join. Group members collectively pool\ntheir scores together, combining the highest score from each game into a\nsingle score for the group each day.\n\nGroups are a bit of a strange technical space for us, because some parts of\nwhat people see lives in Nakama and others in the API.\n\nGroups also act as our system for letting people get Discord and Slack\nwebhooks with updates from the dailies.\n\n#### Leaderboards\n\nOur leaderboards system operates mainly inside postgres at request-time,\ntaking a lot of inspiration from this blog post. We have a few types of\nleaderboards at launch!\n\n  * Daily leaderboards, which are mostly about combining points from puzzles\n  * Puzzle leaderboards, which are \u201chow fast did you complete the Cross|word\u201d\n  * Group leaderboards, combined points, which is show against other groups.\n\nWe added the ability to pin leaderboards you care about on your Today page.\nLeaderboards can be filtered to just be your friends, or to be folks who have\nsigned up via the same partner as you (for example like I am signed up to\nPolygon in a lot of these screenshots).\n\n#### Partner Subsites\n\nPuzzmo got acquired before launch! This gave us the option to move more of\nPuzzmo to be free, interestingly enough, but also brought a whole world of\nopportunities in providing games to newspapers and magazines. So, we went from\na goal of \u201cnewspaper like games\u201d to actually shipping in papers at launch.\n\nTo handle partnerships, we shipped Puzzmo with a whitelabel-like system that\nallows for nuanced theming support for folks who we want to work with. This\nmeans custom design work, custom themes, unique leaderboards - and the\npotential for unique games, puzzles or editorials to run. We built a lot of\nsmall configurable tweaks in the Studio to get everything copacetic across\nteams where the only contact can be sales folks on each side:\n\nThese run on puzzmo.com by using a custom path routing system, which we try to\nreplicate in other systems: roughly /+/[partner-slug] is marked as a reserved\nprefix in our namespace which can safely be removed from any URL. The partner\nslug is then passed though most of our App and API communications so what we\npresent is customized to the partner.\n\n#### Partner App Embeds\n\nIn addition to white-labeling as a subsite, which works on websites - we have\na version of Puzzmo which is built to run inside a tab on a native\napplication. This is a smaller, full re-implementation of the Today page.\nUnlike the Today Page however, an App Embed has two extra constraints:\n\n  * Only allowing anonymous users, because having a second un-linked user system would be unintuitive\n  * Being very cautious around app-store rules with respect to Puzzmo\u2019s Plus subscription. As app store owners want their cut of digital services, and Puzzmo should not accidentally trigger the app it is embedded in to get booted off the store.\n\n#### Stats Pipelines\n\nWhen you complete a puzzle, the game emits \u201cpipeline data\u201d and has some\n\u201cmetrics\u201d. Metrics are values which stick around, and pipeline data is used\nonly for the processing pipeline after a game is completed in a job process.\n\nThe stats pipeline uses both to create a user\u2019s aggregate data (e.g. a user\u2019s\nwords found across all games, or moves made in chess) and also creates puzzle\naggregate data (how many words found in this puzzle.) Both of these are the\nfuel for systems like News or a user\u2019s profile stats shown on hovering.\n\n#### Cron Jobs\n\nWe have a pretty naive cron system where a function is called once an hour,\nthree times at the same time. One marked as \u201ccritical\u201d, where the stuff that\nhas to happen happens (and any task failure is a direct to slack report),\nanother which is less critical, and a third which only does metric processing\nonce an hour to generate histograms for puzzles.\n\n#### Payments and Subscriptions\n\nLike many smaller tech companies, we use Stripe to handle our payment\ninfrastructure. A lot of the \u201cwork\u201d is making the right config options for\nredirecting a user to stripe, and then responding to the right webhooks to\nhandle access rights, gifts and the different types of discounts we do.\n\n#### Puzzle Pool\n\nAside from the Crossword, all our games are generated by computers, which at\nleast makes scheduling much easier. We have a shared set of folders in the CDN\nwhich are basically piles of text files that the API can grab from to get a\npuzzle. We then extract from the pool either via cron jobs system every\nmorning (we generate dailies 3 weeks in advance) or when someone wants to re-\ngenerate a puzzle, or we\u2019ve changed the format.\n\nHaving the pool as a giant set of text files (e.g. like S3) gives us the\nability to do a lot of scripting around puzzles as a giant pile before moving\nthem up into the CDN to eventually get pulled out by the daily system.\n\n#### News\n\nWe split news into two sections \u201cSocial News\u201d (e.g. what happened today within\nyour friend group) and \u201cYesterday\u2019s News\u201d (e.g. what are the highlights from\nyesterday.)\n\nThese systems are relatively straight forward systems which pull out aggregate\nstats for puzzles and related users. These are then passed to different games\nwithin the API to see if they have ideas about things worth classing as news.\nYou can see how that system works in a prior blog post.\n\n### Submission Review\n\nThe \u201cGitHub for Crosswords\u201d mentioned earlier, is called the Submission Review\narea - and you can think of it as a collection of tools for working on the\ncurated puzzles. At first, I built it to be generic to any of our puzzles -\nbut this far into the game it\u2019s solely for Crossword.\n\n( This is the Crossword my wife (Danger), Brooke Husic and I made BTW - you\ncan play it here.)\n\nSubmissions go through a ~12 step process, admittedly for a lot of our\nsubmissions, they start about a third of the way. We are often adding the\nhints, pipes to indicate word separators, metadata to describe related clues\nand some additional information for generating image thumbnails for completed\npuzzle shares. These are usually done in the Hint Editor section:\n\nThen there are review phases with the original authors, fact checkers and test\nsolvers. These folks all use a commenting system which is effectively the same\nas GitHub\u2019s, with only 2 key differences.\n\n  * Some comments are private to the public\n  * As I only have one file format to work with, we can attached to AST nodes instead of lines, which is cool - but rarely useful as lines don\u2019t change much during editing. It\u2019s a nice factoid though.\n\nSubmissions are then scheduled separately from puzzles to give Brooke the\nability to figure out her plans without impacting the dailies, and is synced\nwhen a puzzle has fully gone through the submission process.\n\nWe shipped a very solid, very feature-full xd format parser with interactive\ndevtools support using similar patterns from TypeScript\u2019s compiler. I helped\nbump the xd spec two versions over the years as we extended the file format to\nsupport some of the features above in a generalizable way. Strictly speaking,\nthe JavaScript xd library is the only new open source I\u2019ve done since leaving\nTypeScript.\n\n### Notifications\n\nHah, I forgot I built this till doing the write-up. Puzzmo supports web\nnotifications, so you can get a daily reminder! This is one of those gnarly\nprojects that you need to make extremely opt-in because so many marketers\nabused the feature in browsers. The path to someone using these is so obscure\nbut there\u2019s been about a ratio of 1 in 50 people using it, which is more\npeople than I expected. I felt like we needed notifications (or native ones)\neventually, and was really up for the challenge as a break from the day-to-day\nPuzzmo work.\n\nHere\u2019s what the notifications section looks like when you\u2019ve added some\nbrowsers to receive webhooks:\n\nSometimes you just gotta enjoy doing a little side-project.\n\nSo, that\u2019s where what got us to the \u201cv1\u201d of Puzzmo, we had a tight vision\nwhich took a few years to get right, then we joined up with Hearst to figure\nout how to scale and make it a \u201creal business\u201d since then the team has shifted\nquite a lot!\n\n## Team\n\nI started going full-time on Puzzmo in Feb 2022, with Zach committing full-\ntime after the release of Knotwords in April 2022. Then Saman joined in May\n2022! For launch, everyone involved managed to fit into this photo:\n\nAnd today we have even more folks on staff! It\u2019s been a wild run.\n\ntech launch\n\n\u00a9 2024 Puzzmo Blog\n\nForked from Paper\n\n", "frontpage": false}
