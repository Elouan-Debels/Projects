{"aid": "39990890", "title": "Using DallE to create kids coloring pages, faster and cheaper", "url": "https://shaneosullivan.wordpress.com/2024/04/09/using-dall-e-ai-to-create-kids-colouring-pages-in-kidzfun-art/", "domain": "shaneosullivan.wordpress.com", "votes": 2, "user": "shaneos", "posted_at": "2024-04-10 14:05:49", "comments": 0, "source_title": "Using Dall-E/AI to create kids colouring pages in KidzFun.art", "source_text": "Using Dall-E/AI to create kids colouring pages in KidzFun.art \u2013 SOS\n\nSkip to content\n\nSOS\n\nShane O'Sullivan's technical blog... really ties the room together\n\n# Using Dall-E/AI to create kids colouring pages in KidzFun.art\n\nShane O'Sullivan Technical April 9, 2024April 9, 2024 3 Minutes\n\nOver the past couple of years I\u2019ve been building KidzFun.art, an art &\neducation app for my young kids and hopefully yours. The first feature I ever\nadded was simple colouring pages, hand drawn by my lovely and talented wife.\nHowever that was a slow and laborious process, and with the advances in AI\nsince I began, I decided to add the ability for young children to generate a\nnear infinite number of fun, age-appropriate, colouring pages using AI.\n\nI chose to use Open AI\u2019s Dall-E for this, partly as an excuse to use their SDK\nin production, which is generated by a fantastic company I\u2019m advising called\nStainless.\n\nThere were four main things required in order to ship this feature:\n\n  1. Use the Open AI Node SDK to generate the image. This turned out to be by far the simplest, hat tip to Stainless and the Open AI team\n  2. Build a UI suitable for young children that gave them the ability to easily create an infinite number of colouring pages, while ensuring that the generated content is age-appropriate.\n  3. Allow parents (but not their kids) to pay for the Open AI costs, so I don\u2019t go broke.\n  4. Cache as much generated content as is feasible to minimize the costs\n\n## Using the OpenAI Node SDK\n\nThis part was trivial. I created a new NextJS API endpoint that accepted a\nquery parameter, created the OpenAI object using either an API token provided\nby the user (more on that later), or the default one on my account.\n\nThen simply call the openai.images.generate function and after a few seconds\n(it\u2019s not particularly fast) it returns you an array of URLs, in my case just\none.\n\n## A UI suitable and safe for young kids\n\nTo make the UI simple, I created a tabbed UI that let kids selected up to ten\nthings to put into the colouring page. When testing this with my 5 and 7 year\nolds, they found it intuitive \u2013 you can\u2019t beat having your users living in\nyour house!\n\nSome older kids may want more control, so I also allowed them to type in the\nimage description manually, using the pencil icon you see in the image above.\n\nTo ensure the images are safe, I add a number of instructions on the server\nside to instruct OpenAI to only generate age appropriate content.\n\n## Simple payment for adults only\n\nUsing Dall-E costs money, and so it\u2019s necessary for users to pay for this. I\nkept it simple, allowing parents to buy a pack of 100 image generations at a\ntime, which is likely to last a long long time (see later for why).\n\nYou never want to be in a situation as an app developer where a child\naccidentally spends their parents money. To prevent this, the parent must\nprovide the last four digits of their credit card. I use Stripe for payments,\nand users of the AI generation feature must already be subscribers, so I have\na record of their credit card and I can simply match against that.\n\nOf course, if you\u2019re technically minded and want full control over the\nspending and budget, you can generate your own Open AI API key and provide\nthat instead of purchasing a pack of pictures.\n\n## Caching to minimize costs\n\nA large benefit of providing pre-determined items to place in the picture to\nkids, rather than free text, is that it is likely that there will be many\nsimilar requests. I use this to cut down on generation costs. I use Firebase\nand Google Storage on the back end, and every time that a child accepts a\ngenerated image, I cache both a large and a small version of the image in\nGoogle Storage, and make a record of it in Firebase, noting the \u201ctokens\u201d\nassociated with it, e.g. \u201cdog, cat, classroom\u201d.\n\nThe next time a child selects \u201cdog, cat, classroom\u201d, they will be shown the\ncached image first, without subtracting from their count of purchased image\ngenerations. It\u2019s only once the child rejects all the cached images that they\ncause a new image to be generated with Dall-E and subtracts from their pre-\npurchased allocation. In this way, as more children use the feature, it will\ntake longer and longer for the purchased allocation to run out.\n\nFor the sake of safety, only images generated by selecting the provided tokens\nare cached. If a user writes in free form text that image is never cached nor\nshown to anyone else. They simply download it and colour it in.\n\n## That\u2019s all folks!\n\nGo try out KidzFun.art today on any tablet, laptop or desktop!\n\n### Share this:\n\n  * Share\n\n  * Facebook\n  * Twitter\n\nLike Loading...\n\n### Related\n\nKidz Fun Art \u2013 Tablet app for kidsSeptember 14, 2022In \"Technical\"\n\nUsing Bun.js as a bundlerMay 17, 2023In \"Technical\"\n\nInstant colour fill with HTML CanvasMay 23, 2023In \"Technical\"\n\n## Published by Shane O'Sullivan\n\nI am a software engineer and manager from Ireland. I spent 7 years working in\nIreland from 2003 \u2013 2010, then ten years in Silicon Valley from 2010 to 2020.\nIn California I spent about 6.5 years at Facebook Engineering, the last three\nof which I was an engineering manager in the Ads organisation focusing on\ncustomer facing products for creating and managing ads. At Stripe I built the\nDeveloper Productivity organisation, with teams that were responsible for the\nuse of the Ruby language, testing infrastructure, documentation, developer\ntooling (e.g. IDE integrations) and more. At Promise, I was Head of\nEngineering from 2018 \u2013 2020, responsible for building the first few\niterations of our products, hiring for all product roles, meeting with clients\nand investors, and anything else needed to get a tiny startup bootstrapped and\nsuccessful. Now I\u2019m back in Ireland, working on my next company. Coming soon\n(as of early 2023!). This blog contains my various musings on all things\ntechnical/interesting on the interweb and beyond. View all posts by Shane\nO'Sullivan\n\nPublished April 9, 2024April 9, 2024\n\n## One thought on \u201cUsing Dall-E/AI to create kids colouring pages in\nKidzFun.art\u201d\n\n  1. aglemann says:\n\nApril 9, 2024 at 9:07 pm\n\nnice work! I did a lot of similar things, but ultimately I\u2019ve been\ndisappointed with the quality of the images from the Dall-E API vs using the\nsame prompts with ChatGPT.. have you noticed anything similar?\n\nReply\n\n### Leave a comment Cancel reply\n\n# Other me\n\n  * Twitter\n  * LinkedIn\n  * Facebook\n\n# Recent Posts\n\n  * Using Dall-E/AI to create kids colouring pages in KidzFun.art\n  * Quick chicken soup recipe for sick people\n  * How to list all files in a browser\u2019s Origin Private File System\n  * How to clean up after your NextJS dev server\n  * Lightweight NextJS example of uploading files to Google Cloud Storage\n\n# Archives\n\n# Subscribe\n\nAtom 0.3 RSS 2.0\n\n# Recent Posts\n\n  * Using Dall-E/AI to create kids colouring pages in KidzFun.art\n  * Quick chicken soup recipe for sick people\n  * How to list all files in a browser\u2019s Origin Private File System\n  * How to clean up after your NextJS dev server\n  * Lightweight NextJS example of uploading files to Google Cloud Storage\n\n# Blogs\n\n  * Alex Russell\n  * Carol Jones\n  * Chofter.com Blog\n  * James Snell\n  * Rob Yates\n\n# Interests\n\n  * DojoBuilder\n  * GreaseMonkey Scripts\n  * MapViewer for Robotics\n\n# Links\n\n# Projects\n\n  * Chofter webOS Apps\n  * Chofter.com\n\n# Publications\n\n  * Benchmarking Map Building Algorithms\n  * Evaluation of Sonar Models\n  * IBM WMC ISV Integration Guide\n  * Linear Feature Prediction\n  * Masters Thesis\n  * Vectorising Spatial Maps\n\n# Visits to this blog\n\nBlog at WordPress.com.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * SOS\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * SOS\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
