{"aid": "39980938", "title": "Guile Hoot (Scheme->WASM compiler) 0.4.0 released", "url": "https://spritely.institute/news/guile-hoot-v040-released.html", "domain": "spritely.institute", "votes": 2, "user": "davexunit", "posted_at": "2024-04-09 16:13:05", "comments": 0, "source_title": "Guile Hoot v0.4.0 released!", "source_text": "Guile Hoot v0.4.0 released! -- Spritely Institute\n\n[Donate]| [About]| [Jobs]| [News]| [Community]| [Goblins]| [Hoot]| [OCapN]  \n---|---|---|---|---|---|---|---  \n  \n# Guile Hoot v0.4.0 released!\n\nSpritely Institute -- Tue 09 April 2024\n\nWe are excited to announce the release of Guile Hoot v0.4.0! Hoot is a Scheme\nto WebAssembly compiler backend for Guile, as well as a general purpose\nWebAssembly toolchain. In other words, Scheme in the browser!\n\n### Highlights\n\n  * Hoot now supports user-defined modules. Users no longer have to stuff their entire program into one file! Currently, the R6RS library syntax is supported, with R7RS define-library and Guile define-module syntax to come in a future release.\n\n  * The standard library is now available as a collection of importable modules. Hoot supports the standard (scheme ...) namespace as specified by R7RS-small. Non-standard interfaces are available under the (hoot ...) namespace. The see manual for more information about available non-standard interfaces.\n\n  * An example project was added to the source tree in Git, examples/project-template, to serve as an easy starting point for new Hoot projects. This example project also ships with our official release tarballs. See the template's README for more information.\n\n  * More of R7RS-small has been implemented and Hoot can now run 54 out of 57 Scheme benchmarks!\n\nRead on for the full change log.\n\n### R7RS-small\n\n  * Improved support for call-with-current-continuation.\n\n  * Added support for complex number arithmetic.\n\n  * Added support for cyclic data structures to equal?.\n\n  * Added support for file ports (call-with-input-file, call-with-output-file) with the caveat that they only work in non-browser runtimes such as NodeJS 22+ or Hoot's own Wasm interpreter.\n\n  * Fixed bignum/fraction division.\n\n  * Fixed missing fraction/flonum arithmetic cases.\n\n  * Fixed get-output-bytevector when total output size is greater than buffer size.\n\n  * Fixed close-port to call the port object's close hook.\n\n### Non-standard interfaces\n\n  * Added support for Guile's keyword argument dispatch syntax define*, and lambda*. To use them, add (only (hoot syntax) define* lambda*) to your program/module's import form.\n\n### Compiler\n\n  * Added #:load-library and #:extend-load-library keyword arguments to compile, compile-file, and read-and-compile.\n\n  * Improved error messages for unbound variables.\n\n  * Added new --load-path flag to guild compile-wasm that allows loading user modules from the file system.\n\n  * Added new --emit-names flag to guild-compile-wasm that emits debug names in the resulting Wasm binary.\n\n  * Fixed guild compile-wasm passing an invalid keyword argument to compile.\n\n### Runtime\n\n  * Errors that occur in standard library functions implemented in Wasm now throw Scheme exceptions rather than crashing. For example, it is now possible to catch the type error thrown by (+ 1 \"two\").\n\n  * Entry to the Hoot ABI via reflect.wasm now pushes the default prompt. Used for call-with-current-contination.\n\n  * Fixed issue where sending large strings from Wasm to JS caused a stack overflow.\n\n### Toolchain\n\n  * Added support for the Wasm exceptions proposal (tag objects and try, try_delegate, throw, rethrow instructions) as currently shipped in major browsers.\n\n  * The disassembler wasm->wat now expects symbolified input (via symbolify-wasm) and produces much better output that more closely resembles Wasm disassembly in Chrome dev tools.\n\n  * Fixed multi-value block type handling in push-block in (wasm stack).\n\n### Notable issues\n\n  * A special combination of branching code involving continuations with known return arity can lead to miscompilations that express themselves as Wasm runtime errors in the form of table.get instructions with a negative index or an invalid type cast. GitLab issue\n\n  * Usage of define-record-type within the top-level of the main program (not in a module) leads to a compilation error. The workaround for now is to wrap the program body in a (let () ...) form. GitLab issue\n\n  * Some uses of dynamic-wind cause compilation errors due to an unhandled thunk? primitive. Hoot expects such primitives to be removed. This seems to be caused by Guile's partial evaluator terminating earlier than desired and likely requires a fix to upstream Guile. GitLab issue\n\n### Browser compatibility\n\n  * Compatible with Firefox 121 or later.\n\n  * Compatible with Google Chrome 119 or later.\n\n  * Safari/WebKit is unsupported, unfortunately, as Wasm GC and tail calls are still not available.\n\n### Get Hoot 0.4.0!\n\nHoot is already available in GNU Guix:\n\n    \n    \n    $ guix pull $ guix install guile-next guile-hoot\n\n(Hoot currently requires a bleeding-edge version of Guile, hence guile-next\nabove.)\n\nOtherwise, Hoot can be built from source via our release tarball. See the Hoot\nhomepage for a download link and GPG signature.\n\nDocumentation for Hoot 0.4.0, including build instructions, can be found here.\n\n### Get in touch!\n\nFor bug reports, pull requests, or just to follow along with development,\ncheck out the Hoot project on GitLab.\n\nIf you build something cool with Hoot, let us know on our community forum!\n\nThe code in this release was brought to you by Andy Wingo and David Thompson.\nThe lovely Hoot art is by tessa. Special thanks to the MetaMask folks for\nfunding this work!\n\nUntil next time, happy hooting! \ud83e\udd89\n\nSite contents released under Creative Commons Attribution 4.0 International.\nPowered by Haunt.\n\n", "frontpage": false}
