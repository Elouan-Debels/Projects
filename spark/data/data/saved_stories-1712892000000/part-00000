{"aid": "40006916", "title": "Show HN: FastAPI Gen\": A CLI for Generating FastAPI/React/TypeScript Services", "url": "https://github.com/nick-roberson/fastapi-gen", "domain": "github.com/nick-roberson", "votes": 1, "user": "nick-roberson", "posted_at": "2024-04-11 21:17:41", "comments": 0, "source_title": "GitHub - nick-roberson/fastapi-gen: Generate FastAPI Service w/ React + Typescript UI and backing Database from a YAML config.", "source_text": "GitHub - nick-roberson/fastapi-gen: Generate FastAPI Service w/ React +\nTypescript UI and backing Database from a YAML config.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nnick-roberson / fastapi-gen Public\n\n  * Notifications\n  * Fork 0\n  * Star 14\n\nGenerate FastAPI Service w/ React + Typescript UI and backing Database from a\nYAML config.\n\n14 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# nick-roberson/fastapi-gen\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n5 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nnick-robersonupdate readmebb3d704 \u00b7\n\n## History\n\n127 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| update file paths  \n  \n### builder\n\n|\n\n### builder\n\n| add loom videos  \n  \n### example\n\n|\n\n### example\n\n| ensure .env template gets written  \n  \n### images\n\n|\n\n### images\n\n| Support for Alembic to manage the DB (#8)  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| update logging as well as move some files around  \n  \n### .pre-commit-config.yaml\n\n|\n\n### .pre-commit-config.yaml\n\n| update pre commit  \n  \n### README.md\n\n|\n\n### README.md\n\n| update readme  \n  \n### main.py\n\n|\n\n### main.py\n\n| fix docker installation and env var loading  \n  \n### poetry.lock\n\n|\n\n### poetry.lock\n\n| Support for Alembic to manage the DB (#8)  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| Support for Alembic to manage the DB (#8)  \n  \n## Repository files navigation\n\n# A CLI for FastAPI + React Service Generation\n\nCreate proof-of-concept FastAPI services with React frontends effortlessly\nusing a simple CLI tool. Database support includes MongoDB, PostgreSQL, and\nMySQL. ... Collaborators are always welcome!\n\n### Backend\n\n### Database\n\n### Frontend\n\n### Future Additions\n\nNOTE:\n\n  * This project is actively under development and not yet intended for production usage, although it functions well for general use cases and POCs.\n  * While the service templates are robust, the generated code is still being refined, and there are ongoing improvements.\n\nThat all being said fastapi-gen does a really great job of creating working\nPOC frontend and backend services that can be used to quickly prototype ideas\nand test out new features!\n\nSo use this and don't worry anymore about some of the more annoying parts of\nsetting up a new services! In the future I hope to add far more\nconfigurability as well as support for more databases and frontend frameworks.\nSee examples below for more information!\n\n# Table of Contents\n\n  * Features\n\n    * Python Code Generation\n    * Database Generation\n    * Frontend Code Generation\n  * Images\n  * Loom Video\n  * Example\n  * Setup\n  * Usage\n  * Running\n\n    * Back End\n    * Front End\n    * Regenerating Templated Files\n  * Test Data\n\nThis is a simple FastAPI service that can be used as a starting point for a\nnew project.\n\n## Features\n\n#### Python Code Generation\n\n  1. Generate FastAPI services with database support for MongoDB, PostgreSQL, and MySQL\n  2. Automatically creates CRUD endpoints for each model with async support\n  3. Generate pydantic models for the FastAPI services and handles conversion to and from the database models\n  4. Generate Python client code for the FastAPI service using openapi-generator for use elsewhere\n\n#### Database Generation\n\n  1. Generate a MongoDB database with Pydantic models\n  2. Generate a PostgreSQL database with SQLAlchemy + Alembic models\n  3. Generate a MySQL database with SQLAlchemy + Alembic models\n\nIn the event that you are using PostgreSQL or MySQL, you will need to set up a\nlocal database or use a cloud service like AWS RDS or Google Cloud SQL.\n\n#### Frontend Code Generation\n\n  1. Creates an entire React frontend that can interact with the FastAPI service\n\n     * Create a homepage that displays all the models that have been generated\n     * Create a page for each model that allows you to interact with the FastAPI service\n  2. All frontend code is generated using TypeScript and React\n  3. Generated TypeScript client and models are used to interact with the FastAPI service\n  4. No work requred on your end to set up the frontend, just run the commands and you are good to go! (assuming you have npm installed)\n\n## Images\n\nHere is an example of the homepage that is generated for the React frontend.\nIt will display all the models that have been generated.\n\nAll models will have a page similar to the one above, where you can interact\nwith the FastAPI service.\n\n## Loom Video\n\nYou can find a brief demo here!\n\n  * Demo Video\n\n## Example\n\nYou can find an example config for both MongoDB and MySQL + Alembic in the\nexample/ directory under their respective folders.\n\nIn addition, there is a full generated example of a Restaurant service in the\nexample/alembic/output directory. You should be able to run the service and\nfrontend by following the instructions below so long as you have all the\ncorrect environment variables set (see the setup section for more\ninformation).\n\n## Setup\n\nGeneral\n\n  * Poetry installed\n  * Python 3.12.2 installed (can install via poetry)\n\nDatabase\n\n  * If using MongoDB as the database, you will need to set up a free tier MongoDB Atlas database as well as have MONGO_URI set in your environment variables.\n  * If using PostgreSQL or MySQL as the database, you will need to set up either database locally or somewhere else and have the following environment variables set:\n\n    * DB_USER\n    * DB_PASSWORD\n    * DB_HOST\n    * DB_PORT\n    * DB_NAME\n  * The options in the config for the db_type are mongo, postgres, and mysql\n\nTo learn more about how to set up a free tier MongoDB Atlas database, see the\nfollowing link: MongoDB Atlas\n\n  * Click \"Try Free\" and follow the instructions to set up a free tier database\n\nPoetry\n\nAll you should need to do before running otherwise is to install the\ndependencies using poetry.\n\n    \n    \n    % poetry install\n\n## Usage\n\nThis is the CLI interface for the service generator:\n\n    \n    \n    % poetry run python main.py --help Usage: main.py [OPTIONS] COMMAND [ARGS]... \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. [default: None] \u2502 \u2502 --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. [default: None] \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 generate-app Generate a FastAPI backend and React frontend from the input yaml config. \u2502 \u2502 generate-python-app Generate a FastAPI backend from the input yaml config. \u2502 \u2502 generate-typescript-app Generate a React frontend from the input yaml config. \u2502 \u2502 regenerate-templates Just regenerate the frontend or backend templates, do not recreate the application \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nYou can find an example config file in the example/ directory. There should be\none for MongoDB and one for MySQL + Alembic. This setup should also work for\nPostgres, but I have not tested it yet.\n\n### Generate using Alembic\n\nOnce you have your config ready (or you can use the example config), you can\ngenerate the service using the following command:\n\n    \n    \n    % poetry run python main.py generate-app \\ --config example/alembic/restaurant.yaml \\ --output-dir example/alembic/output ... Run Backend (Poetry): % cd /Users/nicholas/Code/fastapi-gen/example/alembic/output/backend % poetry install && poetry update % poetry run uvicorn service:app --reload --port 8000 Run Backend (Docker) (Make sure to fill out the generated .env file!): % cd /Users/nicholas/Code/fastapi-gen/example/alembic/output/backend % docker build -t reservations-app . % docker run -p 8000:8000 reservations-app Run Frontend (NPM): % cd /Users/nicholas/Code/fastapi-gen/example/alembic/output/reservations-app % npm install && npm run start\n\n### Generate using Mongo\n\n    \n    \n    % poetry run python main.py generate-app \\ --config example/mongo/restaurant.yaml \\ --output-dir example/mongo/output ... Run Backend (Poetry): % cd /Users/nicholas/Code/fastapi-gen/example/alembic/output/backend % poetry install && poetry update % poetry run uvicorn service:app --reload --port 8000 Run Backend (Docker) (Make sure to fill out the generated .env file!): % cd /Users/nicholas/Code/fastapi-gen/example/alembic/output/backend % docker build -t reservations-app . % docker run -p 8000:8000 reservations-app Run Frontend (NPM): % cd /Users/nicholas/Code/fastapi-gen/example/alembic/output/reservations-app % npm install && npm run start\n\n## Running\n\n### Back End\n\nLocal:\n\n    \n    \n    % cd example/alembic/output/backend % poetry install && poetry update % poetry run uvicorn service:app --reload --port 8000\n\nDocker:\n\n    \n    \n    % cd example/alembic/output/backend % docker build -t reservations-app . % docker run -p 8000:8000 reservations-app\n\nTo view the generated OpenAPI documentation, navigate to\nhttp://localhost:8000/docs.\n\n### Front End\n\n    \n    \n    % cd example/alembic/output/reservations-app % npm install && npm run start\n\n### Regenerating Templated Files\n\nIf you want to regenerate the templates for the frontend or backend, you can\nuse the regenerate-templates command.\n\n    \n    \n    % poetry run python main.py regenerate-templates frontend \\ --config example/alembic/restaurant.yaml \\ --output-dir example/alembic/output ... Regenerated frontend templates!\n\nIf you want to regenerate the backend templates, you can use the following\ncommand:\n\n    \n    \n    % poetry run python main.py regenerate-templates backend \\ --config example/alembic/restaurant.yaml \\ --output-dir example/alembic/output ... Regenerated backend templates!\n\n## Test Data\n\nRight now I am working on a script that will generate test data for the\nFastAPI service, but it is not yet complete.\n\nThere is a script that works for the example in the\nbuilder/scripts/create_restaurant_app_data.py file. You can use a method\nsimilar to that in order to create and insert fake data.\n\nOnce that is done you can just copy the contents of the files into postman and\nsubmit them to the create many endpoints of the FastAPI service.\n\n## About\n\nGenerate FastAPI Service w/ React + Typescript UI and backing Database from a\nYAML config.\n\n### Topics\n\npython cli services automation generator mongodb python3 jinja pydantic\nfastapi\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n14 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Python 80.4%\n  * TypeScript 16.6%\n  * Jinja 2.1%\n  * Dockerfile 0.3%\n  * Shell 0.2%\n  * HTML 0.2%\n  * Other 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
