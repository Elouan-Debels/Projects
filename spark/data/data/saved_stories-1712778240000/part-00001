{"aid": "39990646", "title": "How Command Line Parameters Are Parsed", "url": "https://daviddeley.com/autohotkey/parameters/parameters.htm", "domain": "daviddeley.com", "votes": 1, "user": "meepmorp", "posted_at": "2024-04-10 13:42:16", "comments": 0, "source_title": "How Command Line Parameters Are Parsed", "source_text": "How Command Line Parameters Are Parsed\n\n# How Command Line Parameters Are Parsed\n\n### by\n\n## David Deley\n\n\u00a9 2009 (Updated 2014) (Updated 2016) (Updated 2019) (Updated 2020) (Updated\n2022)\n\nHow to escape the special characters in your parameters\n\n# Contents:\n\n*NIX (updated Feb. 2011)^19\n\n  1. How a New Process is Created on *nix (Unix, Linux, Ubuntu, Kubuntu, ...)\n  2. Passing Parameters to a new process on *nix\n\n    1. Example 1: Bash Shell\n    2. Example 2: Ubuntu Desktop Launcher Icon (GNOME\u2192Nautilus)\n    3. Example 3: Kubuntu (KDE\u2192Plasma)\n  3. The *nix Parameter Parsing Rules\n  4. References\n\nWINDOWS\n\n  1. How a New Process is Created on Windows\n  2. Passing Parameters to a new process on Windows\n  3. How does a C/C++ program on Windows get argv[] ?\n  4. Everyone Parses Differently\n  5. The C/C++ Parameter Parsing Rules\n\n    1. The documented and undocumented rules (The rules changed in 2008)\n    2. The C/C++ Parameter Parsing Rules Rephrased\n    3. Summary of rules 5,6,7\n    4. Examples\n    5. Some Common Tasks\n    6. The Microsoft Examples Explained\n    7. Double Double Quote Examples\n    8. How Triple Double Quotes Are Parsed\n    9. How Quadruple Double Quotes Are Parsed\n    10. The Microsoft C/C++ Command Line Parsing Algorithm\n  6. Who Calls CreateProcess?\n\n    1. ProgA.exe \u2192 CreateProcess()\n    2. Command Prompt Window \u2192 CreateProcess()\n  7. The Command Prompt Command Line Parameter Parsing Rules (cmd.exe) Putting It Together\n  8. How parameters are parsed to a C/C++ Program from the Command Line\n\n    1. How to Pass Parameters to a C/C++ Program from the Command Line\n  9. How to Pass Parameters to a Batch File from the Command Line\n  10. How to Pass Parameters to a VBScript, JScript, or WSH script from the Command Line\n\n    1. The Windows Script Host (WSH) Parameter Parsing Rules\n    2. The WSH Command Line Parameter Parsing Algorithm\n    3. Putting it together\n  11. a Perl script from the Command Line\n  12. a Python script from the Command Line\n  13. a REXX script from the Command Line (unfinished)\n  14. a RUBY script from the Command Line\n  15. an AutoHotkey script from the Command Line\n\n*nix\n\n(Unix, Linux, Ubuntu, Kubuntu, ...)^19\n\n1\\. How a new process is created on *nix On *nix, you launch a program using\nthe execve API (or it's cousins execvp, execl, execlp, execle, and execvp).\nThe interesting thing about these APIs is that they allow the caller to\nspecify each of the command line arguments - the signature for execve is:\n\nint execve(const char *filename, char *const argv [], char *const envp[]);\n\n2\\. Passing Parameters to a new process on *nix On *nix, the parameters are\nparsed off by whatever program creates the new process, before the new process\nis created.^1\n\n| *nix  \n---  \ncmdline = \"MyProg Hello Goodbye Friday\"  \n\u2193 parse  \n| argv[] =| MyProg.exe Hello Goodbye Friday  \n---|---  \n\u2193 create new process  \nexecve(argv[]) \u2192| \u2192| New Process running MyProg.exe has argv[]  \n  \n2.1 Example 1: Bash Shell If you launch a program using the Bash shell command\nline, The Bash shell is responsible for turning the string provided by the\nuser into the argv[] argument vector which is then passed to the program. For\nthe Bash shell parameter parsing rules, the following links provide some\ninformation:\n\n  * http://www.gnu.org/software/bash/manual/bashref.html#Quoting\n  * http://linux.about.com/library/cmd/blcmdl1_bash.htm\n\n2.2 Example 2: Ubuntu Desktop Launcher Icon (GNOME\u2192Nautilus) In Ubuntu a\ndesktop launcher icon can be created by right-clicking on the desktop and\nselecting \"Create Launcher\". This will generate a GNOME launch file\n~/Desktop/launcher-name.desktop This is a text file you can browse (have a\nlook at one). In this text file is a line starting with Exec= where the\ncommand and any command line parameters are.^17\n\nSo what happens when you double-click on this desktop icon?\n\nUbuntu uses the GNOME Desktop Environment, which in turn uses the Nautilus\nFile Manager. When you double-click on a desktop launcher icon, the Nautilus\nFile Manager parses the Exec= command line in the ~/Desktop/launcher-\nname.desktop file and calls execve passing it argv[]. So to know how your\ncommand line parameters are parsed you need to look into how Nautilus parses\ncommand lines. There's some good documentation here:\n\n  * The Exec Key http://library.gnome.org/devel/desktop-entry-spec/#exec-variables\n  * The GOption commandline parser http://library.gnome.org/devel/glib/stable/glib-Commandline-option-parser.html\n\n2.3 Example 3: Kubuntu (KDE\u2192Plasma) Kubuntu is based on Ubuntu but uses the\nKDE Plasma Desktop instead of GNOME. So, to determine how your command line is\nparsed in that environment, you'll need to look into KDE application\nlaunchers. This starts to get complicated, because according to the\ndocumentation there are three: Kickoff, classic K menu, or Lancelot\nLauncher.^18\n\nIt gets even more complicated, because it's possible to install both the KDE\nPlasma Desktop (kubuntu-desktop) as well as the GNOME desktop (ubuntu-desktop)\non the same machine.\n\n3\\. The *nix Parameter Parsing Rules It all depends on who is processing your\ncommand line before the new process is created. On *nix, the parameters are\nparsed off by whatever program creates the new process.\n\nThis is all I have to say about *nix. The rest is about Windows.\n\n4\\. References\n\n  * Bash Cheat Sheet: https://www.pcwdld.com/bash-cheat-sheet\n\nWindows\u00ae\n\n1\\. How a new process is created on Windows On Windows, a new program is\nlaunched by calling the CreateProcess() API, which takes the command line as a\nstring (the lpComandLine parameter to CreateProcess):\n\nint CreateProcess( ..., lpComandLine, ... )\n\n2\\. Passing Parameters to a new process on Windows On Windows, the parameters\nare parsed off the command line after the new process is created, by the new\nprocess. It's considered the responsibility of the newly started application\nto call the GetCommandLine() API to retrieve the command line string and parse\nit (possibly using the CommandLineToArgvW() helper function).^2\n\n| Windows  \n---  \ncmdline = \"MyProg.exe Hello Goodbye Friday\"  \n\u2193 create new process  \nCreateProcess(cmdline) \u2192| \u2192| New Process running MyProg.exe  \n\u2193 call  \nGetCommandLine()  \n\u2193 parse  \n| argv[] =| MyProg.exe Hello Goodbye Friday  \n---|---  \n  \n3\\. How does a C/C++ program on Windows get argv[]? The C/C++ compiler which\ncompiles the program secretly adds extra code to the executable that retrieves\nand parses the command line to extract the parameters before calling WinMain\n(or main). Thus, for a C/C++ executable on Windows, the parameter parsing\nrules are determined by the C/C++ compiler that compiled the program.\n\n4\\. Everyone Parses Differently You'll get different results if you pass a\ncommand line to ShowParams.exe (written in C/C++), ShowParams.vbs (VBScript),\nor ShowParams.bat (batch file):\n\nSample Code:\n\n  * ShowParams.c\n\n    * #include \"stdafx.h\" int main(int argc, char* argv[]) { for (int i = 0; i < argc; ++i) { printf(\"param %d = \",i); puts(argv[i]); printf(\"\\n\"); } return 0; }\n\n(Note: Avoid using printf when printing parameters, as the parameter may\ncontain a % which would be interpreted by printf as a conversion specifier.\nThe program may crash with a bizarre error, such as \"runtime error R6002 -\nFloating point not loaded\".)\n\n(Note: If we started this function with wmain or _tmain then argv[] would\npoint to wide character (unicode) strings. [Technically I'm not sure if they\nare UTF-16LE or UCS-2. I have 2 old posts discussing the basics of Unicode:\n\n      * \u2022 Overview of Unicode's five different standards: http://forums.multiedit.com/viewtopic.php?f=4&t=1717#p6178\n      * \u2022 Unicode: The Programmer's Nightmare http://forums.multiedit.com/viewtopic.php?f=4&t=1717#p6270\n\nI also wrote a short book on Unicode:\n\n      * \u2022 Brief Introduction to Unicode\n\n  * ShowParams.cpp\n\n    * It's difficult to get the Windows Console to display Unicode characters, so here's a C++ WinForms program that will display the arguments in a TextBox.\n        \n                // ShowParams.cpp : main project file. #include \"stdafx.h\" #include \"Form1.h\" using namespace ShowParams2; [STAThreadAttribute] int main(array<System::String ^> ^args) { // Enabling Windows XP visual effects before any controls are created Application::EnableVisualStyles(); Application::SetCompatibleTextRenderingDefault(false); // Create the main window and run it Application::Run(gcnew Form1(args)); return 0; } // Form1.h #pragma once namespace ShowParams2 { using namespace System; using namespace System::Windows::Forms; public ref class Form1 : public System::Windows::Forms::Form { public: private: array<System::String ^> ^args; public: Form1(array<System::String ^> ^_args) : args(_args) { InitializeComponent(); } protected: ~Form1() { if (components) { delete components; } } private: System::Windows::Forms::TextBox^ textBox1; protected: private: System::ComponentModel::Container ^components; #pragma region Windows Form Designer generated code void InitializeComponent(void) { this->textBox1 = (gcnew System::Windows::Forms::TextBox()); this->SuspendLayout(); // // textBox1 // this->textBox1->Anchor = static_cast<System::Windows::Forms::AnchorStyles>((((System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom) | System::Windows::Forms::AnchorStyles::Left) | System::Windows::Forms::AnchorStyles::Right)); this->textBox1->Location = System::Drawing::Point(12, 12); this->textBox1->Multiline = true; this->textBox1->Name = L\"textBox1\"; this->textBox1->Size = System::Drawing::Size(260, 238); this->textBox1->TabIndex = 0; // // Form1 // this->AutoScaleDimensions = System::Drawing::SizeF(6, 13); this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font; this->ClientSize = System::Drawing::Size(284, 262); this->Controls->Add(this->textBox1); this->Name = L\"Form1\"; this->Text = L\"Form1\"; this->Load += gcnew System::EventHandler(this, &Form1::Form1_Load); this->ResumeLayout(false); this->PerformLayout(); } #pragma endregion private: System::Void Form1_Load(System::Object^ sender, System::EventArgs^ e) { int i = 0; for each(String^ arg in args) { textBox1->AppendText(\"arg[\" + i + \"]=\" + arg + Environment::NewLine); i++; } } }; }\n\n  * ShowParamsC#.cs\n\n    * using System;\n\nnamespace ShowParams { class Program { static void Main(string[] args) {\nConsole.WriteLine(\"There are {0} program arguments\", args.Length);\n\nforeach (string arg in args) { Console.WriteLine(arg); } } } }\n\n  * ShowParams.bat\n\n    * @echo off echo Param1 = %1 echo Param2 = %2 echo Param3 = %3\n\n  * ShowParams.vbs\n\n    * If Wscript.Arguments.Count = 0 Then Wscript.echo \"No parameters found\" Else i=0 Do until i = Wscript.Arguments.Count Parms = Parms & \"Param \" & i & \" = \" & Wscript.Arguments(i) & \" \" & vbcr i = i+1 loop Wscript.echo parms End If\n\nResults:\n\n  1. ShowParams.exe\n\nShowParams.exe (written in c)  \n---  \n>ShowParams.exe \"c:\\test a\\\" \"c:\\test b\\\" param 0 = ShowParams.exe param 1 =\nc:\\test a\" c:\\test param 2 = b\"  \n  \n( \\\" is interpreted as meaning 'a literal double quote.')\n\n  2. C#ShowParams.exe\n\nC#ShowParams.exe (written in C#)  \n---  \n>C#ShowParams.exe \"c:\\test a\\\" \"c:\\test b\\\" There are 2 program arguments\nc:\\test a\" c:\\test b\"  \n  \n( \\\" is interpreted as meaning 'a literal double quote.')\n\n  3. ShowParams.bat\n\nShowParams.bat (a batch file)  \n---  \n>ShowParams.bat \"c:\\test a\\\" \"c:\\test b\\\" param 1 = \"c:\\test a\\\" param 2 =\n\"c:\\test b\\\"  \n  \n(the double quotes are included as part of the parameter)\n\n  4. ShowParams.vbs\n\nShowParams.vbs (a Visual Basic script)  \n---  \n>ShowParams.vbs \"c:\\test a\\\" \"c:\\test b\\\" param 0 = c:\\test a\\ param 1 =\nc:\\test b\\  \n  \n(The double quotes are removed from the parameter)\n\nDiagrams:\n\n  1. ShowParams.exe\n\n| ShowParams.exe and C#ShowParams.exe  \n---  \ncmdline = \"ShowParams.exe Hello Goodbye Friday\"  \n\u2193  \nCreateProcess(cmdline) \u2192| \u2192| New Process running ShowParams.exe  \n\u2193 call  \nGetCommandLine()  \n\u2193 parse  \n| argv[] =| ShowParams.exe Hello Goodbye Friday  \n---|---  \n  \nThe parameter parsing rules are determined by the C++ compiler that compiled\nShowParams.exe\n\n  2. ShowParams.bat\n\n| ShowParams.bat  \n---  \ncmdline = \"ShowParams.bat Hello Goodbye Friday\"  \n\u2193  \nCreateProcess(cmdline) \u2192| \u2192| New Process runs cmd.exe to process the batch\nfile ShowParams.bat  \n\u2193 call  \nGetCommandLine()  \n\u2193 parse  \n%1 = Hello %2 = Goodbye %3 = Friday  \n  \nThe parameter parsing rules are determined by cmd.exe which processes the\nbatch file.\n\n  3. ShowParams.vbs\n\n| ShowParams.vbs  \n---  \ncmdline = \"ShowParams.vbs Hello Goodbye Friday\"  \n\u2193  \nCreateProcess(cmdline) \u2192| \u2192| New Process runs WScript.exe to process the\nVBScript file ShowParams.vbs  \n\u2193 call  \nGetCommandLine()  \n\u2193 parse  \nWscript.Arguments(0) = Hello Wscript.Arguments(1) = Goodbye\nWscript.Arguments(2) = Friday  \n  \nThe parameter parsing rules are determined by WScript.exe which processes the\nVBScript file.\n\nSummary:\n\n  1. Parameters passed to ShowParams.exe are parsed by ShowParams.exe . The parameter parsing rules are determined by the C++ compiler that compiled ShowParams.exe\n  2. Parameters passed to ShowParams.bat are parsed by cmd.exe which is the program that processes batch files.\n  3. Parameters passed to ShowParams.vbs are parsed by WScript.exe which is the program that processes VBScript files^3\n\n(Note: If you only see the first letter of each parameter, the parameters may\nbe in Unicode format.)\n\n5\\. The C/C++ Parameter Parsing Rules The documented program parameter parsing\nrules for Microsoft C/C++ compilers may be found by searching www.msdn.com for\n\"Parsing C++ Command-Line Arguments\".\n\n  * There is separate documentation for each version of Microsoft's C/C++ compiler.\n  * Fortunately the documentation is identical for all of them.\n  * Unfortunately the documentation isn't complete.\n  * The implementation changed in 2008, which isn't documented.\n  * Fortunately you're reading this.\n\nVisual C++ Versions and Corresponding .dll\n\nmsvcr120.dll| \u2014| Visual C++ 2013| \u2014| (VC++ 12.0)| \u2014| (released on October 17,\n2013)  \n---|---|---|---|---|---|---  \nmsvcr110.dl| \u2014| Visual Studio 2012| \u2014| (VC++ 11.0)  \nmsvcr100.dll| \u2014| Visual Studio 2010| \u2014| (VC++ 10.0)  \nmsvcr90.dll| \u2014| Visual Studio 2008| \u2014| (VC++ 9.0)| \u2014| [new command line\nparsing]  \nmsvcr80.dll| \u2014| Visual Studio 2005| \u2014| (VC++ 8.0)  \nmsvcr71.dll| \u2014| Visual C++ .NET 2003| \u2014| (VC++ 7.1)  \nmsvcr70.dll| \u2014| Visual C++ .NET 2002| \u2014| (VC++ 7.0)  \nmsvcrt.dll| \u2014| Visual C++ 6.0| \u2014| (VC6)  \n  \nhttp://en.wikipedia.org/wiki/Visual_C%2B%2B\n\nRedistribution of the shared C runtime component in Visual C++\n\nhttp://support.microsoft.com/kb/326922\n\n5.1 Here are the documented (and undocumented) rules:\n\nNote: The Rules Changed in 2008\n\n  1. Arguments are delimited by white space, which is either a space or a tab.\n  2. The caret character (^) is not recognized as an escape character or delimiter. The character is handled completely by the command-line parser in the operating system before being passed to the argv array in the program. They are referring to the scenario discussed in sec. 6.2 below, where first the command line parser (cmd.exe) parses your command, handling such things as the escape character ^ , the redirection characters > & < , the pipe character | , the % character which may identify environment variables that need to be expanded (e.g. %PROGRAMFILES%), etc. The rules here describe how your C/C++ executable will parse the lpCommandLine that was passed to CreateProcess() by cmd.exe or whoever calls CreateProcess().\n  3. A string surrounded by double quotation marks (\"string\") is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument. The double quotes don't have to be around the whole parameter. A double quoted part may occur anywhere in the parameter.\n  4. A double quotation mark preceded by a backslash (\\\") is interpreted as a literal double quotation mark character (\").\n  5. Backslashes are interpreted literally, unless they immediately precede a double quotation mark.\n  6. If an even number of backslashes is followed by a double quotation mark, one backslash is placed in the argv array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter. This includes any trailing double quote enclosing a parameter.\n  7. If an odd number of backslashes is followed by a double quotation mark, one backslash is placed in the argv array for every pair of backslashes, and the double quotation mark is \"escaped\" by the remaining backslash, causing a literal double quotation mark (\") to be placed in argv.\n  8. The missing undocumented rule has to do with how doubledouble quotes (\"\") are handled:\n\n     * Prior to 2008: If a closing \" is followed immediately by another \", the 2nd \" is accepted literally and added to the parameter.\n     * After 2008\n\n       1. A double quote encountered outside a double quoted block starts a double quoted block.\n       2. A double quote encountered inside a double quoted block:\n\n          * not followed by another double quote ends the double quoted block.\n          * followed immediately by another double quote (e.g. \"\"), a single double quote is added to the output, and the double quoted block continues.\n\n5.2 The Microsoft C/C++ Parameter Parsing Rules Rephrased These are the rules\nfor parsing a command line passed by CreateProcess() to a program written in\nC/C++:\n\n  1. Parameters are always separated by a space or tab (multiple spaces/tabs OK)\n  2. If the parameter does not contain any spaces, tabs, or double quotes, then all the characters in the parameter are accepted as is (there is no need to enclose the parameter in double quotes).\n  3. Enclose spaces and tabs in a double quoted part\n  4. A double quoted part can be anywhere within a parameter\n  5. 2n backslashes followed by a \" produce n backslashes + start/end double quoted part\n  6. 2n+1 backslashes followed by a \" produce n backslashes + a literal quotation mark\n  7. n backslashes not followed by a quotation mark produce n backslashes\n  8. undocumented rules regarding double quotes:\n\nPrior to 2008:\n\n     * A \" outside a double quoted block starts a double quoted block\n     * A \" inside a double quoted block ends the double quoted block\n     * If a closing \" is followed immediately by another \", the 2nd \" is accepted literally and added to the parameter.\n\nPost 2008:\n\n     * Outside a double quoted block a \" starts a double quoted block.\n     * Inside a double quoted block a \" followed by a different character (not another \") ends the double quoted block.\n     * Inside a double quoted block a \" followed immediately by another \" (i.e. \"\") causes a single \" to be added to the output, and the double quoted block continues.\n\n5.3 Summary of rules 5,6,7:\n\nUse| \"| to start/end a double quoted part  \n---|---|---  \nUse| \\\"| to insert a literal \"  \nUse| \\\\\\\"| to insert a \\ then start or end a double quoted part  \nUse| \\\\\\\\\\\"| to insert a literal \\\"  \nUse| \\| to insert a literal \\  \n  \n5.4 Examples\n\nCommand-Line| argv[1]| Comment  \n---|---|---  \nCallMeIshmael| CallMeIshmael| a plain parameter can contain any characters\nexcept {space} {tab} \\ \"  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"Call Me Ishmael\"| Call Me Ishmael| spaces enclosed in a\ndouble quoted part  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 Cal\"l Me I\"shmael| Call Me Ishmael| a double quoted part can be\nanywhere within a parameter  \nCallMe\\\"Ishmael \u2191\u2191| CallMe\"Ishmael \u2191| \\\" \u2192 \"  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"CallMe\\\"Ishmael\" \u2191\u2191| CallMe\"Ishmael \u2191| \\\" \u2192 \" (whether or\nnot in a double quoted part)  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"Call Me Ishmael\\\\\\\" \u2191\u2191\u2191| Call Me Ishmael\\ \u2191 \u2191| \\\\\\\" \u2192 \\ +\n\" (which may begin or end a double quoted part)  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"CallMe\\\\\\\\\\\"Ishmael\" \u2191\u2191\u2191\u2191| CallMe\\\"Ishmael \u2191\u2191| \\\\\\\\\\\" \u2192\n\\\" (\\\\\\ \u2192 \\\\) (\\\" \u2192 \")  \na\\\\\\\\\\b \u2191\u2191\u2191| a\\\\\\\\\\b \u2191\u2191\u2191| backslashes not followed immediately by a double\nquotation mark are interpreted literally  \n\"a\\\\\\\\\\b\" \u2191\u2191\u2191| a\\\\\\\\\\b \u2191\u2191\u2191| whether or not the backslashes are in a double\nquoted part  \n  \n5.5 Some Common Tasks\n\nCommand-Line| argv[1]| Comment  \n---|---|---  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"\\\"Call Me Ishmael\\\"\" \u2191\u2191 \u2191\u2191| \"Call Me Ishmael\" \u2191 \u2191| the\nparameter includes double quotes  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"C:\\TEST A\\\\\\\" \u2191\u2191| C:\\TEST A\\ \u2191| the parameter includes a\ntrailing slash  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"\\\"C:\\TEST A\\\\\\\\\\\"\" \u2191\u2191 \u2191\u2191\u2191\u2191| \"C:\\TEST A\\\" \u2191 \u2191\u2191| the\nparameter includes double quotes and a trailing slash  \n  \n5.6 The Microsoft Examples Explained\n\nCommand-Line Input| argv[1]| argv[2]| argv[3]| Comment  \n---|---|---|---|---  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2510 \"a b c\" d e| \u250c\u2500\u2500\u2500\u2500\u2500\u2510 a b c| d| e| spaces enclosed in double quotes  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2510 \"ab\\\"c\" \"\\\\\\\" d \u2191\u2191 \u2191\u2191\u2191| \u250c\u2500\u2500\u2500\u2500\u2510 ab\"c \u2191| \u250c\u2500\u2510 \\ \u2191| d| \\\" \u2192 \" \\\\\\\" \u2192\n\\ + begin or end a double quoted part  \n\u2193 \u250c\u2500\u2500\u2500\u2510 \u2193 a\\\\\\\\\\b d\"e f\"g h \u2191\u2191\u2191| a\\\\\\\\\\b \u2191\u2191\u2191| \u2193 \u2193 de fg| h| backslashes not\nfollowed immediately by a double quotation mark are interpreted literally ^ \u2193\n\u2193 parameters are separated by spaces or tabs ^ \u250c\u2500\u2500\u2500\u2510 a double quoted part can\nbe anywhere within a parameter the space enclosed in double quotation marks is\nnot a delimiter  \na\\\\\\\\\\\"b c d \u2191\u2191\u2191\u2191| a\\\"b \u2191\u2191| c| d| 2n+1 backslashes before \" \u2192 n backslashes +\na literal \"  \n\u250c\u2500\u2500\u2500\u2510\u2193 \u2193 a\\\\\\\\\\\\\\\"b c\" d e \u2191\u2191\u2191\u2191\u2191| a\\\\\\b c| d| e| 2n backslashes followed by a\n\" produce n backslashes + start/end double quoted part. ^ \u2193 \u2193 parameters are\nseparated by spaces or tabs ^ \u250c\u2500\u2500\u2500\u2510 a double quoted part can be anywhere\nwithin a parameter the space enclosed in double quotation marks is not a\ndelimiter  \n  \n5.7 Double Double Quote Examples\n\n(post 2008)\n\nCommand-Line Input| argv[1]| argv[2]| argv[3]| argv[4]| argv[5]| Comment  \n---|---|---|---|---|---|---  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \"a b c\"\" \u2191\u2191| a b c\" \u2191|\n\n  * \" Begin double quoted part.\n  * \"\" while in a double quoted part \u2192 accept 2nd \" literally, double quoted part continues\n\n  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"\"\"CallMeIshmael\"\"\" b c \u2191\u2191 \u2191\u2191| \"CallMeIshmael\" \u2191 \u2191| b| c|\n\n  * \" Begin double quoted part.\n  * \"\" while in a double quoted part \u2192 accept 2nd \" literally, double quoted part continues\n  * \" not followed by another \" (i.e. not \"\") while in a double quoted part \u2192 ends the double quoted part\n  * Parameters are delimited by spaces or tabs.\n\n  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"\"\"Call Me Ishmael\"\"\" \u2191\u2191 \u2191\u2191| \"Call Me Ishmael\" \u2191 \u2191|\n\n  * \" Begin double quoted part.\n  * \"\" while in a double quoted part \u2192 accept 2nd \" literally, double quoted part continues\n  * \" not followed by another \" (i.e. not \"\") while in a double quoted part \u2192 ends the double quoted part\n\n  \n\u250c\u2500\u2500\u2510 \u250c\u2510 \"\"\"\"Call Me Ishmael\"\" b c \u2191\u2191| \"Call \u2191| Me| Ishmael| b| c|\n\n  * \" Begin double quoted part.\n  * \"\" while in a double quoted part \u2192 accept 2nd \" literally, double quoted part continues\n  * \" not followed by another \" (i.e. not \"\") in a double quoted part \u2192 ends the double quoted part\n  * Parameters are delimited by spaces or tabs.\n  * (note \"\" outside of double quoted block begins and then immediately ends a double quoted part.)\n\n  \n  \n(pre 2008)\n\nCommand-Line Input| argv[1]| argv[2]| argv[3]| Comment  \n---|---|---|---|---  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2510 \"a b c\"\" \u2191\u2191| a b c\" \u2191| \"\" while in a double quoted part \u2192 end double\nquoted part and accept 2nd \" literally  \n\u250c\u2510 \u250c\u2510 \"\"\"CallMeIshmael\"\"\" b c \u2191\u2191 \u2191\u2191| \"CallMeIshmael\" \u2191 \u2191| b| c| \" Begin double\nquoted part. \"\" while in a double quoted part \u2192 end double quoted part and\naccept 2nd \" literally  \n\u250c\u2510 \u2193 \u2193 \u250c\u2510 \"\"\"Call Me Ishmael\"\"\" \u2191\u2191 \u2191\u2191| \"Call \u2191| Me| Ishmael\" \u2191| Parameters are\ndelimited by spaces or tabs. \" Begin double quoted part. \"\" while in a double\nquoted part \u2192 end double quoted part and accept 2nd \" literally  \n\u250c\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"\"\"\"Call Me Ishmael\"\" b c \u2191\u2191 \u2191\u2191| \"Call Me Ishmael\" \u2191 \u2191|\nb| c| Parameters are delimited by spaces or tabs. \" Begin double quoted part.\n\"\" while in a double quoted part \u2192 end double quoted part and accept 2nd \"\nliterally  \n  \n5.8 Triple Double Quotes\n\n(post 2008)\n\nHow triple double quotes are parsed (post 2008)  \n---  \n...\"\"\"Call Me Ishmael\"\"\"... \u2191\u2191\u2191 \u2191\u2191\u2191\u2191 quote #1: Begin double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u251c\u2518 \u251c\u2518\u251c\u2518 quotes #2 & 3: Skip 1st \" take 2nd \" \u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 quotes 4\n& 5: Skip 1st \" take 2nd \" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 quote #6: End double\nquoted part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518>ShowParams.exe \"\"\"Call Me Ishmael\"\"\"\nparam 1 = \"Call Me Ishmael\"an alternative method is\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n>ShowParams.exe \\\"\"Call Me Ishmael\"\\\" param 1 = \"Call Me\nIshmael\"or\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 >ShowParams.exe \"\\\"Call Me Ishmael\\\"\" param 1\n= \"Call Me Ishmael\"  \n  \n(pre 2008)\n\nHow triple double quotes were parsed (pre 2008)  \n---  \n...\"\"\"Call Me Ishmael\"\"\"... \u2191\u2191\u2191 \u2191\u2191\u2191 quote #1: Begin double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2502\u2502 quote #2: End double quoted part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502\u2502\u2502 quote #3:\nand accept this \" literally\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2502\u2502 \u2502\u2502\u2502 quote #4: Begin double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 quote #5: End double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 quote #6: and accept this \"\nliterally\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518>ShowParams.exe \"\"\"Call Me Ishmael\"\"\" param 1\n= \"Call param 2 = Me param 3 = Ishmael\"an alternative method is>ShowParams.exe\n\\\"Call Me Ishmael\\\" param 1 = \"Call param 2 = Me param 3 = Ishmael\"  \n  \n5.9 Quadruple Double Quotes\n\n(post 2008)\n\nHow quadruple double quotes are parsed(post 2008)  \n---  \n...\"\"\"\"Call me Ishmael\"\"\"\"... \u2191\u2191\u2191\u2191\u2191 \u2191\u2191\u2191\u2191\u2191 quote #1: Begin double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u251c\u2518\u251c\u2518 \u2502\u251c\u2518\u2502\u2502 quotes #2 & 3: Skip 1st \" take 2nd \" \u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\u2502 \u2502\u2502 quote\n#4: End double quoted part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 quote #5: Begin double\nquoted part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502\u2502 quotes #6 & 7: Skip 1st \" take 2nd \"\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2502 quote #8: End double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 Assuming this isn't another \"\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518>ShowParams.exe \"\"\"\"Call Me Ishmael\"\"\"\" param 1 =\n\"Call param 2 = Me param 3 = Ishmael\"an alternative method is>ShowParams.exe\n\\\"Call Me Ishmael\\\" param 1 = \"Call param 2 = Me param 3 = Ishmael\"  \n  \n(pre 2008)\n\nHow quadruple double quotes are parsed (pre 2008)  \n---  \n...\"\"\"\"Call me Ishmael\"\"\"\"... \u2191\u2191\u2191\u2191 \u2191\u2191\u2191\u2191\u2191 quote #1: Begin double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502 quote #2: End double quoted part\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502\u2502\u2502\u2502\u2502 quote\n#3: and accept this \" literally\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502\u2502\u2502\u2502\u2502 quote #4: Begin another double\nquoted part\u2500\u2518 \u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502 quote #5: End double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502\u2502 quote #6: and accept this \"\nliterally\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502 quote #7: Begin double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 quote #8: End double quoted\npart\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 If this was a double quote we'd accept it\nliterally\u2500\u2500\u2518>ShowParams.exe \"\"\"\"Call Me Ishmael\"\"\"\" param 1 = \"Call Me\nIshmael\"Note quotes #7,#8 are not necessary. They contribute\nnothing.>ShowParams.exe \"\"\"\"Call Me Ishmael\"\" param 1 = \"Call Me Ishmael\"an\nalternative method is>ShowParams.exe \"\\\"Call Me Ishmael\\\"\" param 1 = \"Call Me\nIshmael\"  \n  \n5.10 The Microsoft C/C++ Command Line Parameter Parsing Algorithm\n\nThe following algorithm was reverse engineered by disassembling a small C\nprogram compiled using Microsoft Visual C++ and examining the disassembled\ncode.\n\n(post 2008)\n\nSee msvcr100dparsing.htm for the actual diasssembled code with annotations.\n\n(2020: Thank you to Pepa Stefan for noting an error in the earlier version of\nthe diagram.)\n\n(pre 2008)\n\nSee msvcrtparsing.htm for the actual diasssembled code with annotations.\n\nnote if odd number of backslashes, we ignore last backslash and begin again.\n\n1.| Parse off parameter 0 (the program filename)  \n---|---  \n\u2022| The entire parameter may be enclosed in double quotes (it handles double\nquoted parts) (Double quotes are necessary if there are any spaces or tabs in\nthe parameter)  \n\u2022| There is no special processing of backslashes (\\\\)  \n2.| Parse off next parameter:  \na.| Skip over multiple spaces/tabs between parameters  \nLOOP  \nb.| Count the backslashes (\\\\). Let m = number of backslashes. (m may be\nzero.)  \nIF even number of backslashes (or zero)  \nc.| IF next character following m backslashes is a double quote:  \nEven number of backslashes?  \nYes. If we're not in a double quoted part, \" begins a double quoted part.  \nYes. If we're in a double quoted part, \"\" skip 1st take 2nd \"  \nIf m is even (or zero)  \nif currently in a double quoted part  \nIF next character is also a \"  \nmove to next character (the 2nd \". This character will be added to the\nparameter.)  \nELSE  \nset flag to not add this \" character to the parameter  \ntoggle double quoted part flag (end double quoted part)  \nENDIF  \nelse  \nset flag to not add this \" character to the parameter  \nendif  \nEndif  \nENDIF  \nENDIF  \nAdd backslashes to output  \nm = m/2 (floor divide e.g. 0/2=0, 1/2=0, 2/2=1, 3/2=1, 4/2=2, 5/2=2, etc.)  \nd.| add m backslashes  \ne.| add this character to our parameter  \nENDLOOP  \n  \n6\\. Who Calls CreateProcess? So far we've talked about parsing the command\nline that got passed as the lpCommandLine parameter to CreateProcess(). But\nwho calls CreateProcess? One possibility is you could write a small program\nwhich calls CreateProcess() passing it a command line.\n\n6.1. ProgA.exe \u2192 CreateProcess() A small program ProgA.exe calls\nCreateProcess() passing it a command line:\n\n| ProgA.exe \u2192 CreateProcess()  \n---  \nProgA.exe  \n\u2193  \ncmdline = \"ShowParams.exe Hello Goodbye Friday\"  \n\u2193 create new process  \nCreateProcess(cmdline) \u2192| \u2192| New Process running ShowParams.exe  \n\u2193 call  \nGetCommandLine()  \n\u2193 parse  \n| argv[] =| ShowParams.exe Hello Goodbye Friday  \n---|---  \n  \nAnother possibility is you could open a Command Prompt window and type in a\ncommand:\n\n6.2 Command Prompt Window \u2192 CreateProcess() The command prompt window is\nprogram cmd.exe (go to START \u2192 RUN, enter \"cmd\"). Program cmd.exe displays the\ncommand prompt window, reads your command, and parses it handling such things\nas redirection characters (>) & (<), the pipe character (|), the escape\ncharacter (^), identifying and expanding Environment Variables (e.g.\n%PROGRAMFILES%), etc. Then cmd.exe calls CreateProcess(), passing it a command\nline.^4\n\n| Command Prompt Window (cmd.exe) \u2192 CreateProcess()  \n---  \nCommand Prompt Window (cmd.exe)  \n\u2193 get command from user  \ncommand = \"ShowParams.exe Hello Goodbye Friday < in.txt > out.txt\"  \n\u2193| parse and process command handling special characters like ^ < > | % create a command line  \ncmdline = \"ShowParams.exe Hello Goodbye Friday\"  \n\u2193 create new process  \nCreateProcess(cmdline) \u2192| \u2192| New Process running ShowParams.exe  \n\u2193 call  \nGetCommandLine()  \n\u2193 parse  \n| argv[] =| ShowParams.exe Hello Goodbye Friday  \n---|---  \n  \nNote here your command line is parsed twice:\n\n  1. by the Command Prompt Window (cmd.exe)\n  2. by ShowParams.exe\n\nSo if you want to get a parameter on the command line to ShowParams.exe, you\nfirst need to get it through the cmd.exe parser, then through the parser the\nMicrosoft C/C++ compiler added to ShowParams.exe\n\n7\\. The cmd.exe Command Prompt Parsing Rules\n\nThe command prompt window is program cmd.exe^5 (go to START \u2192 RUN, enter\n\"cmd\"). The command prompt window.\n\nEscape Character\n\n  * ^ is the escape character for commands passed to cmd.exe\n\nDouble Quotes:\n\n  * An unescaped \" will begin or end a double quoted part, and the double quote will be included as part of the parameter.\n  * ^\" outside a double quoted part will insert a \" but will not start a double quoted part.\n  * Environment variables are expanded both inside and outside double quotes.\n\nOutside Double Quotes:\n\n  * Use ^ outside double quotes to escape < > & | ^ to insert < use ^< to insert > use ^> to insert | use ^| to insert ^ use ^^ to insert \" and begin a double quoted part use \" to insert \" and not begin a double quoted part use ^\"\n  * sometimes it may be necessary to also escape ( ) @ !\n  * It's OK to escape everything\n\nNote ^ is also the line continuation character.\n\nInside Double Quotes:\n\n  * Inside Double Quotes, everything is taken literally\n  * ^\" gives ^\" but does not end a double quoted part\n  * Environment variable expansion is still performed inside double quotes\n\nPercent Sign:\n\n  * If your command line will be placed in a batch file, double the % character^6\n\nNote: The result is what gets passed as part of the lpCommandLine argument to\nthe CreateProcess() API. The newly created process still needs to retrieve the\nlpCommandLine string and parse off the parameters using it's own parsing rules\n(e.g. if it's a C/C++ program, it will use the Microsoft C/C++ parameter\nparsing rules to create the argv[] vector. See Putting It Together below for\nmore on this).\n\n7.1 Examples:\n\nOutside of Double Quotes Escape The Essential Characters < > & | ^  \n---  \n>ShowParams.exe\n!\\^\"#$%^&'()*+,-./0123456789:;^<=^>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^^_`abcdefghijklmnopqrstuvwxyz{^|}~\n\u2514\u2534\u2518 \u25b2\u2191_ \u2191_ \u2191_ \u2191_ \u2191_lpCommandLine = ShowParams.exe\n!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~  \n\u2191_| These characters have been escaped with ^  \n---|---  \n\u2514\u2534\u2518| The \" character has been escaped with ^ so it doesn't start a double\nquoted part when cmd.exe parses it. Then ^\" is escaped by \\ so ShowParams.exe\nwill see it as a literal \" (Microsoft C/C++ parsing rules) The result is: \\^\"\n\u2192 cmd.exe parses to give \\\" \u2192 ShowParams.exe parses to give \u2192 \"  \n\u25b2| Note if this command line is to be put in a batch file, the % will need to\nbe doubled.  \nOutside of Double Quotes It's OK to Escape Everything  \n---  \n>ShowParams.exe\n^!^\\^\"^#^$^%^&^'^(^)^*^+^,^-^.^/^0^1^2^3^4^5^6^7^8^9^:^;^<^=^>^?^@^A^B^C^D^E^F^G^H^I^J^K^L^M^N^O^P^Q^R\n\u2192 \u2514\u2534\u2534\u2518 \u25b2\u2192\n^S^T^U^V^W^X^Y^Z^[^\\^]^^^_^`^a^b^c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r^s^t^u^v^w^x^y^z^{^|^}^~lpCommandLine\n= ShowParams.exe\n!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~  \n\u2192| line continues  \n---|---  \n\u2514\u2534\u2534\u2518| The \" character has been escaped with ^ so it doesn't start a double\nquoted part when cmd.exe parses it. Then ^\" is escaped by \\ so ShowParams.exe\nwill see it as a literal \" (Microsoft C/C++ parsing rules) \\ itself is escaped\nby ^ just for the heck of it (it's OK to escape everything). The result is:\n^\\^\" \u2192 cmd.exe parses to give \\\" \u2192 ShowParams.exe parses to give \u2192 \"  \n\u25b2| Note if this command line is to be put in a batch file, the % will need to\nbe doubled.  \nInside Double Quotes Escape Nothing  \n---  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u2502 >ShowParams.exe\n\"!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"\n\u2191 \u25b2lpCommandLine = ShowParams.exe\n\"!#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"  \n\"| Outside a double quoted part, when not escaped with a ^, a double quote \"\nproduces a double quote \" and begins a double quoted part  \n---|---  \n\"| Inside a double quoted part, a double quote \" produces a double quote \" and\nends the double quoted part  \nThe \" character is always included as part of the parameter  \n\u2191| Note the \" character has been left out of the sequence as it would end the\ndouble quoted part. (You can't escape a \" while in a double quoted part. The\nclosest we could get would be to use ^\" which would give us a ^\" and not end\nthe double quoted part.)  \n\u25b2| Note if this command line is to be put in a batch file, the % will need to\nbe doubled.  \n  \n7.2 Environment Variables:\n\nParameter| Result| Comment  \n---|---|---  \nPROGRAMFILES| \u2192| PROGRAMFILES  \n\"PROGRAMFILES\"| \u2192| \"PROGRAMFILES\"  \n%PROGRAMFILES%| \u2192| C:\\Program Files| an environment variable  \n\"%PROGRAMFILES%\"| \u2192| \"C:\\Program Files\"| \" + an environment variable + \"  \n%XYZ%| \u2192| %XYZ%| (if XYZ is not an environment variable)  \n  \nSome brief articles about Command Line parsing:\n\n  * Command shell overview\n  * Using command redirection operators\n  * Command line redirection is performed by the command line interpreter\n  * The redirection operator can occur in the middle of the command line\n  * Beware of digits before the redirection operator\n  * The first word on the command line is the program name only by convention\n  * Environment variable expansion occurs when the command is read\n  * Capturing the current directory from a batch file\n  * What is the command line length limit?\n\nPUTTING IT TOGETHER:\n\n8.\n\nA command line passed to a C/C++ program passes through two parsers:\n\n  1. The cmd.exe command line parser parses your command & parameters\n  2. The C/C++ program retrieves the resulting command line and parses off the parameters\n\nHere are some examples:\n\nParsing Example 1  \n---  \n1\\. ShowParams.exe Bed Bath ^& Beyond \u2514\u2518 \u2193 \u2193 2. \u2193 Bed Bath & Beyond \u2193 \u2193 \u2193 3. \u2193\nBed Bath & Beyond \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 4. argv[0] argv[1] \u2193 \u2193 \u2193\nargv[2] \u2193 \u2193 argv[3] \u2193 argv[4]param 0 = ShowParams.exeparam 1 = Bedparam 2 =\nBathparam 3 = &param 4 = Beyond  \n1.| cmd.exe command line parser interprets ^& as an escaped & character so it\ndoes not interpret this as \u201cstart a new command.\u201d (It's possible to put more\nthan one DOS command on a command line by separating them with the &\ncharacter.)  \n---|---  \n2.| C/C++ command line parser receives this. There are no double quotes for it\nto process.  \n3.| C/C++ command line parser parses off the command line parameters into the\nargv[] array.  \nParsing Example 2  \n---  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 1. ShowParams.exe Bed \\\"Bath\\\" ^& Beyond \u2514\u2518 \u2193 \u2193 2. \u2193 Bed \\\"Bath\\\"\n& Beyond \u2193 \u2514\u2518 \u2514\u2518 \u2193 \u2193 3. \u2193 Bed \"Bath\" & Beyond \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 4.\nargv[0] argv[1] \u2193 \u2193 \u2193 argv[2] \u2193 \u2193 argv[3] \u2193 argv[4]param 0 =\nShowParams.exeparam 1 = Bedparam 2 = \"Bath\"param 3 = &param 4 = Beyond  \n1.| cmd.exe command line parser interprets the first \" as \u201cStart a double\nquoted part\u201d and the second \" as \u201cEnd the double quoted part.\u201d cmd.exe does\nnot remove the double quote characters. (Note that these double quotes are not\nescaped with the ^ character, which is the escape character for cmd.exe. Also\nnote the \\ character is treated as an ordinary character by cmd.exe)  \n---|---  \ncmd.exe command line parser interprets ^& as an escaped & character so it does\nnot interpret this as \u201cstart a new command.\u201d (It's possible to put more than\none DOS command on a command line by separating them with the & character.)  \n2.| C/C++ command line parser receives this. The C/C++ parser interprets \\\" as\nan escaped double quote so neither one starts a double quoted part.  \n3.| C/C++ command line parser parses off the command line parameters into the\nargv[] array.  \nParsing Example 3  \n---  \n1\\. ShowParams.exe ^\"Bed Bath ^& Beyond^\" \u2514\u2518 \u2514\u2518 \u2514\u2518\u2193 \u2193 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193 \u2502\n\u2502 2. \u2193 \"Bed Bath & Beyond\" \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 3. \u2193 Bed Bath & Beyond \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 4.\nargv[0] argv[1]param 0 = ShowParams.exeparam 1 = Bed Bath & Beyond  \n1.| cmd.exe command line parser interprets ^\" as an escaped \" character so it\ndoes not start or end a double quoted part.  \n---|---  \ncmd.exe command line parser interprets ^& as an escaped & character so it does\nnot interpret this as \u201cstart a new command.\u201d (It's possible to put more than\none DOS command on a command line by separating them with the & character.)  \n2.| C/C++ command line parser receives this. The C/C++ parser interprets \" as\n\u201cstart or end a double quoted part\u201d and the double quotes are removed.  \n3.| C/C++ command line parser parses off the command line parameters into the\nargv[] array.  \nParsing Example 4  \n---  \n1\\. ShowParams.exe ^\"Bed \\^\"Bath\\^\" ^& Beyond^\" \u2514\u2518 \u2514\u2518 \u2514\u2518 \u2514\u2518 \u2514\u2518\u2193 \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193 \u2502 \u2502 2. \u2193 \"Bed \\\"Bath\\\" & Beyond\" \u2193 \u2514\u2518 \u2514\u2518 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193\n3. \u2193 Bed \"Bath\" & Beyond \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 4. argv[0] argv[1]param 0 =\nShowParams.exeparam 1 = Bed \"Bath\" & Beyond  \n1.| cmd.exe command line parser interprets ^\" as an escaped \" character so it\ndoes not interpret this as \u201cStart a double quoted part.\u201d  \n---|---  \ncmd.exe command line parser interprets ^& as an escaped & character so it does\nnot interpret this as \u201cStart a new command.\u201d (It's possible to put more than\none DOS command on a command line by separating them with the & character.)  \n2.| C/C++ command line parser receives this. The C/C++ parser interprets \\\" as\nan escaped double quote so they do not start a double quoted part.  \n3.| C/C++ command line parser parses off the command line parameters.  \n  \nIt gets harder when double quotes are not escaped with ^ as cmd.exe will now\ninterpert them as \u201cStart or end a double quoted part.\u201d\n\nParsing Example 5  \n---  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 1. ShowParams.exe \"Bed Bath ^& Beyond\"\u2193 \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193 \u2502 \u2502 2. \u2193 \"Bed Bath ^& Beyond\" \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 3. \u2193 Bed Bath\n^& Beyond \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 4. argv[0] argv[1]param 0 = ShowParams.exeparam 1 = Bed\nBath ^& Beyond  \n1.| cmd.exe command line parser interprets the first \" as \u201cStart a double\nquoted part\u201d and the second \" as \u201cEnd the double quoted part.\u201d cmd.exe does\nnot remove the double quote characters.  \n---|---  \nInside the double quoted part cmd.exe interprets all characters literally,\nincluding ^ and &  \n2.| C/C++ command line parser receives this. The parser interprets the first \"\nas \u201cStart a double quoted part\u201d and the second \" as \u201cEnd the double quoted\npart.\u201d The double quotes are removed.  \n3.| C/C++ command line parser parses off the command line parameters into the\nargv[] array.  \nParsing Example 6  \n---  \n1\\. ShowParams.exe ^\"Bed Bath \\^\" Beyond^\" \u2514\u2518 \u2514\u2518 \u2514\u2518\u2193 \u2193 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193\n\u2502 \u2502 2. \u2193 \"Bed Bath \\\" Beyond\" \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 3. \u2193 Bed Bath \" Beyond \u2193 \u2193 \u2193 \u2193 \u2193 \u2193\n4. argv[0] argv[1]param 0 = ShowParams.exeparam 1 = Bed Bath \" Beyond  \n1.| cmd.exe command line parser interprets ^\" as an escaped \" character so it\ndoes not start or end a double quoted part.  \n---|---  \ncmd.exe command line parser interprets ^& as an escaped & character so it does\nnot interpret this as \u201cstart a new command.\u201d (It's possible to put more than\none DOS command on a command line by separating them with the & character.)  \n2.| C/C++ command line parser receives this. The parser interprets \" as \u201cstart\nor end a double quoted part\u201d and the double quotes are removed.  \n3.| C/C++ command line parser parses off the command line parameters into the\nargv[] array.  \nParsing Example 7  \n---  \n1\\. ShowParams.exe ^\"Bed Bath \\\\\\\\\\^\" Beyond^\" \u2514\u2518 \u2514\u2518 \u2514\u2518\u2193 \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193 \u2502 \u2502 2. \u2193 \"Bed Bath \\\\\\\\\\\" Beyond\" \u2514\u2534\u2534\u2518 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 3.\n\u2193 Bed Bath \\\" Beyond \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 4. argv[0] argv[1]param 0 =\nShowParams.exeparam 1 = Bed Bath \\\" Beyond  \n1.| cmd.exe command line parser interprets ^\" as an escaped \" character so it\ndoes not start or end a double quoted part. The ^ is removed. The \" is not\nremoved.  \n---|---  \n2.| The C/C++ command line parser receives this. The C/C++ command line parser\ninterprets the first \" as \u201cStart a double quoted part\u201d and the double quote is\nremoved. The C/C++ command line parser interprets \\\\\\\\\\\" inside the double\nquoted part as a literal \\\" The C/C++ command line parser interprets the\nending \" as \u201cEnd the double quoted part\u201d and the double quote is removed.  \n3.| The C/C++ command line parser fills the argv[] array with the result.  \nParsing Example 8  \n---  \n1\\. ShowParams.exe ^\"\\^\"Bed Bath Beyond\\^\"^\" \u2514\u2518 \u2514\u2518 \u2514\u2518\u2514\u2518\u2193 \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193 \u2502 \u2502 2. \u2193 \"\\\"Bed Bath Beyond\\\"\" \u2514\u2518 \u2514\u2518 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 3. \u2193\n\"Bed Bath Beyond\" \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 4. argv[0] argv[1]param 0 = ShowParams.exeparam\n1 = \"Bed Bath Beyond\"  \n1.| cmd.exe command line parser interprets ^\" as an escaped \" character so it\ndoes not start or end a double quoted part. The ^ is removed. The \" is not\nremoved. cmd.exe command line parser interprets \\ as an ordinary character.\ncmd.exe command line parser interprets ^\" as an escaped \" character so it does\nnot start or end a double quoted part. The ^ is removed. The \" is not removed.\ncmd.exe command line parser interprets Bed Bath Beyond\\ as ordinary\ncharacters. cmd.exe command line parser interprets ^\" as an escaped \"\ncharacter so it does not start or end a double quoted part. The ^ is removed.\nThe \" is not removed. cmd.exe command line parser interprets ^\" as an escaped\n\" character so it does not start or end a double quoted part. The ^ is\nremoved. The \" is not removed.  \n---|---  \n2.| The C/C++ command line parser receives this. The C/C++ command line parser\ninterprets the first \" as \u201cStart a double quoted part\u201d and the double quote is\nremoved. The C/C++ command line parser interprets \\\" inside the double quoted\npart as a literal \" The C/C++ command line parser interprets \\\" inside the\ndouble quoted part as a literal \" The C/C++ command line parser interprets the\nending \" as \u201cEnd the double quoted part\u201d and the double quote is removed.  \n3.| The C/C++ command line parser fills the argv[] array with the result.  \n  \n8.1 How To Pass A Parameter to: a C/C++ Program from the Command Line\n\nA Simplified method: (2016) (updated 2019)\n\nThe trick is to enclose parameters with ^\" instead of just \"\n\ne.g. instead of:\n\n\"Bed Bath Beyond\"\n\nuse\n\n^\"Bed Bath Beyond^\"\n\nThe command processor cmd.exe will strip off the ^ and won't start any double\nquoted parts.\n\nSimplified method steps:\n\n\u2022 Start with the parameter you want\n\n  1. Search for any \" (double quotes) which are a part of the parameter. Double the number of \\ immediately preceding any \" (there may be none). Then add one more \\ before the \"\n\ni.e. to insert \" use \\\" to insert \\\" use \\\\\\\\\\\" to insert \\\\\\\" use \\\\\\\\\\\\\\\\\\\"\nto insert \\\\\\\\\\\" use \\\\\\\\\\\\\\\\\\\\\\\\\\\"\n\n  2. If the parameter ends in a trailing \\ double the number of trailing \\ (there may be none).\n\n(2019: Thank you to Florian Balmer for noting this missing step.)\n\n  3. Escape with ^ all these special characters: ^ < > | & ( ) \"\n\ni.e. replace ^ with ^^ replace < with ^< replace > with ^> replace | with ^| replace & with ^& replace ( with ^( replace ) with ^) replace \" with ^\"\n\n  4. Add a leading and trailing ^\"\n\nExample 8.1: Command Line to C/C++ Program\n\nExample 8.1: Bed Bath & Beyond| Parameter  \n---|---  \nStart with the parameter you want (parameter includes spaces)| Bed Bath &\nBeyond  \n1.| Search for any \"| no \" in parameter  \n2.| Escape with ^ all special characters: ^ < > | & ( ) \"i.e. replace ^ with ^^ replace < with ^< replace > with ^> replace | with ^| replace & with ^& replace ( with ^( replace ) with ^) replace \" with ^\"| Bed Bath ^& Beyond \u2191  \n3.| double the number of trailing \\| no trailing \\  \n4.| Add a leading and trailing ^\"| ^\"Bed Bath ^& Beyond^\" \u2191\u2191 \u2191\u2191  \n5.| If this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| ^\"Bed Bath ^& Beyond^\"  \nNow examine how this parameter gets parsed:  \nA.| cmd.exe treats ^ as escape character. cmd.exe finds no double quoted parts\nbecause all \" are escaped with ^ cmd.exe removes escape character ^| ^\"Bed\nBath ^& Beyond^\" \u2193 \u2193 \u2193  \nB.| cmd.exe passes this to the C/C++ program| \"Bed Bath & Beyond\"  \nC.| C/C++ program parses string starting at the beginning. C/C++ program\nencounters initial \" and starts a double quoted part. The \" is removed.|\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500 \"Bed Bath & Beyond\" \u2193  \nD.| C/C++ program copies characters to output parameter until it encounters\nclosing \" The double quoted part ends and the \" is removed.|\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 Bed Bath & Beyond\" \u2193  \nE.| C/C++ program encounters space (or end of string) after parameter. Since\nwe are no longer in a double quoted part, parser declares this is the end of\nthe parameter.| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 Bed Bath & Beyond \u2193  \nF.| Result is the desired parameter we started with| Bed Bath & Beyond  \n  \nSample Test File:\n\n  * TestParams8_1.bat\n\n    * ShowParams.exe ^\"Bed Bath ^& Beyond^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.1b: Command Line to C/C++ Program\n\nExample 8.1b: Bed Bath & Beyond\\| Parameter  \n---|---  \nStart with the parameter you want (parameter includes spaces)| Bed Bath &\nBeyond\\  \n1.| Search for any \"| no \" in parameter  \n2.| Escape with ^ all special characters: ^ < > | & ( ) \"i.e. replace ^ with ^^ replace < with ^< replace > with ^> replace | with ^| replace & with ^& replace ( with ^( replace ) with ^) replace \" with ^\"| Bed Bath ^& Beyond\\ \u2191  \n3.| double the number of trailing \\| Bed Bath ^& Beyond\\\\\\ \u2191\u2191  \n4.| Add a leading and trailing ^\"| ^\"Bed Bath ^& Beyond\\\\\\^\" \u2191\u2191 \u2191\u2191  \n5.| If this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| ^\"Bed Bath ^& Beyond\\\\\\^\"  \nNow examine how this parameter gets parsed:  \nA.| cmd.exe treats ^ as escape character and removes them. cmd.exe finds no\ndouble quoted parts because all \" are escaped with ^| ^\"Bed Bath & Beyond\\\\\\^\"\n\u2193 \u2193  \nB.| cmd.exe passes this as parameter to the C/C++ program| \"Bed Bath &\nBeyond\\\\\\\"  \nC.| C/C++ program sees the first double quote as beginning a double quoted\npart. This double quote is not added to the parameter.| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Bed\nBath & Beyond\\\\\\\"  \nD.| C/C++ program copies characters to the output parameter. When it\nencounters the \\ it finds two \\ followed by a \" \u2022 Two is an even number \u2022 We\nare currently in a double quoted part \u2022 The character following the \" is not\nanother \" \u2192 Therefore two/2=1 backslashes are added to the parameter \u2192 and the\n\" ends the double quoted part| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 Bed Bath & Beyond\\ \u2191  \nE.| Result is the desired parameter we started with| Bed Bath & Beyond\\  \n  \nSample Test File:\n\n  * TestParams8_1b.bat\n\n    * ShowParams.exe ^\"Bed Bath ^& Beyond\\\\\\^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nNow examine what would happen if we had only one backshash at the end instead\nof two:  \n---  \nA.| cmd.exe treats ^ as escape character and removes them. cmd.exe finds no\ndouble quoted parts because all \" are escaped with ^| ^\"Bed Bath & Beyond\\^\" \u2193\n\u2193  \nB.| cmd.exe passes this as parameter to the C/C++ program| \"Bed Bath &\nBeyond\\\"  \nC.| C/C++ program sees the first double quote as beginning a double quoted\npart| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Bed Bath & Beyond\\\"  \nD.| C/C++ program copies characters to the output parameter. When it\nencounters the \\ it finds one \\ followed by a \" \u2022 One is an odd number \u2192\nOne/2=0 so no backslashes are added to the parameter \u2022 We are currently in a\ndouble quoted part \u2192 Therefore the \" is added to the parameter. The double\nquoted part continues.| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Bed Bath & Beyond\" \u2191  \nE.| If there was more following this it would be considered a part of the same\nparameter. If the command line abruptly ends, the parameter is accepted as is,\neven though the double quoted part wasn't closed properly.| Bed Bath & Beyond\"  \n  \nExample 8.1c: Command Line to C/C++ Program\n\nExample 8.1c: Bed Bath \\\\\\\\\\ Beyond| Parameter  \n---|---  \nStart with the parameter you want (parameter includes spaces)| Bed Bath \\\\\\\\\\\nBeyond  \n1.| Search for any \"| no \" in parameter  \n2.| Escape with ^ all special characters: ^ < > | & ( ) \"i.e. replace ^ with ^^ replace < with ^< replace > with ^> replace | with ^| replace & with ^& replace ( with ^( replace ) with ^) replace \" with ^\"| no special characters in parameter  \n3.| double the number of trailing \\| no trailing \\  \n4.| Add a leading and trailing ^\"| ^\"Bed Bath \\\\\\\\\\ Beyond^\" \u2191\u2191 \u2191\u2191  \n5.| If this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| ^\"Bed Bath \\\\\\\\\\ Beyond^\"  \nNow examine how this parameter gets parsed:  \nA.| cmd.exe treats ^ as escape character and removes them. cmd.exe finds no\ndouble quoted parts because all \" are escaped with ^| ^\"Bed Bath \\\\\\\\\\\nBeyond^\" \u2193 \u2193  \nB.| cmd.exe passes this as parameter to the C/C++ program| \"Bed Bath \\\\\\\\\\\nBeyond\"  \nC.| C/C++ program sees the first double quote as beginning a double quoted\npart. This double quote is not added to the parameter.| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Bed Bath\n\\\\\\\\\\ Beyond\"  \nD.| C/C++ program copies characters to the output parameter. Parser comes to\nthe \\\\\\\\\\ followed by a space \u2192 Since \\\\\\\\\\ is not followed by a \" they are\ncopied as is.| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Bed Bath \\\\\\\\\\ Beyond\"  \nE.| Parser comes to the \" \u2192 We are in a double quoted part, so parser checks\nto see if there's another \" immediately following, which there is not, so this\n\" ends the double quoted part and the \" is not added to the parameter.|\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 Bed Bath \\\\\\\\\\ Beyond\" \u2193  \nE.| Result is the desired parameter we started with| Bed Bath \\\\\\\\\\ Beyond  \n  \nSample Test File:\n\n  * TestParams8_1c.bat\n\n    * ShowParams.exe ^\"Bed Bath \\\\\\\\\\ Beyond^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.2: Bed \"Bath\" & Beyond| Parameter  \n---|---  \nStart with the parameter you want (parameter includes spaces)| Bed \"Bath\" &\nBeyond  \n1.| Search for any \" Double the number of \\ immediately preceding any \" (there\nare none) Then add one more \\ before each \"| Bed \\\"Bath\\\" & Beyond \u2191 \u2191  \n2.| Escape with ^ all special characters: ^ < > | & ( ) \"  \ni.e. replace ^ with ^^ replace < with ^< replace > with ^> replace | with ^| replace & with ^& replace ( with ^( replace ) with ^) replace \" with ^\"| Bed \\^\"Bath\\^\" ^& Beyond \u2191 \u2191 \u2191  \n3.| double the number of trailing \\| no trailing \\  \n4.| Add a leading and trailing ^\"| ^\"Bed \\^\"Bath\\^\" ^& Beyond^\" \u2191\u2191 \u2191\u2191  \n5.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| ^\"Bed \\^\"Bath\\^\" ^& Beyond^\"  \nNow examine how this parameter gets parsed:  \nA.| cmd.exe treats ^ as escape character and removes them. cmd.exe finds no\ndouble quoted parts because all \" are escaped with ^| ^\"Bed \\^\"Bath\\^\" ^&\nBeyond^\" \u2193 \u2193 \u2193 \u2193 \u2193  \nB.| cmd.exe passes this as parameter to the C/C++ program| \"Bed \\\"Bath\\\" &\nBeyond\"  \nC.| C/C++ program sees this as a double quoted parameter. Note that all \"\ninside the parameter are escaped with \\| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"Bed \\\"Bath\\\"\n& Beyond\" \u2193 \u2193  \nD.| C/C++ program applies the rule 2n+1 backslashes followed by a \" produce n\nbackslashes + a literal quotation mark. \\\" becomes \" (for n=0)| Bed \\\"Bath\\\" &\nBeyond \u2193 \u2193  \nE.| Result is the desired parameter we started with| Bed \"Bath\" & Beyond  \n  \nSample Test File:\n\n  * TestParams8_2.bat\n\n    * ShowParams.exe ^\"Bed \\^\"Bath\\^\" ^& Beyond^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.3: Bed Bath & \\\"Beyond\"| Parameter  \n---|---  \nStart with the parameter you want (parameter includes spaces)| Bed Bath &\n\\\"Beyond\"  \n1.| Search for any \" Double the number of \\ immediately preceding any \" Then\nadd one more \\ before each \"| Bed Bath & \\\\\\\\\\\"Beyond\\\" \u2191\u2191\u2191 \u2191  \n2.| Escape with ^ all special characters: ^ < > | & ( ) \"  \ni.e. replace ^ with ^^ replace < with ^< replace > with ^> replace | with ^| replace & with ^& replace ( with ^( replace ) with ^) replace \" with ^\"| Bed Bath ^& \\\\\\\\\\^\"Beyond\\^\" \u2191 \u2191 \u2191  \n3.| double the number of trailing \\| no trailing \\  \n4.| Add a leading and trailing ^\"| ^\"Bed Bath ^& \\\\\\\\\\^\"Beyond\\^\"^\" \u2191\u2191 \u2191\u2191  \n5.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| ^\"Bed Bath ^& \\\\\\\\\\^\"Beyond\\^\"^\"  \nNow examine how this parameter gets parsed:  \nA.| cmd.exe treats ^ as escape character and removes them. cmd.exe finds no\ndouble quoted parts because all \" are escaped with ^| ^\"Bed Bath ^&\n\\\\\\\\\\^\"Beyond\\^\"^\" \u2193 \u2193 \u2193 \u2193 \u2193  \nB.| cmd.exe passes this as parameter to the C/C++ program| \"Bed Bath &\n\\\\\\\\\\\"Beyond\\\"\"  \nC.| C/C++ program sees this as a double quoted parameter. Note that all \"\ninside the parameter are escaped with \\| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"Bed Bath &\n\\\\\\\\\\\"Beyond\\\"\" \u2193 \u2193  \nD.| C/C++ program applies the rule 2n+1 backslashes followed by a \" produce n\nbackslashes + a literal quotation mark \\\\\\\\\\\" becomes \\\" \\\" becomes \"| Bed\nBath & \\\\\\\\\\\"Beyond\\\" ---- --  \nE.| Result is the desired parameter we started with| Bed Bath & \\\"Beyond\"  \n  \nSample Test File:\n\n  * TestParams8_3.bat\n\n    * ShowParams.exe ^\"Bed Bath ^& \\\\\\\\\\^\"Beyond\\^\"^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.4: (Bed) <Bath> & \"Beyond\" | \\\"Kohl^s| Parameter  \n---|---  \nStart with the parameter you want (parameter includes spaces)| (Bed) <Bath> & \"Beyond\" | \\\"Kohl^s  \n1.| Search for any \" Double the number of \\ immediately preceding any \" Then add one more \\ before each \"| (Bed) <Bath> & \\\"Beyond\\\" | \\\\\\\\\\\"Kohl^s \u2191 \u2191 \u2191\u2191\u2191  \n2.| Escape with ^ all special characters: ^ < > | & ( ) \"  \ni.e. replace ^ with ^^ replace < with ^< replace > with ^> replace | with ^| replace & with ^& replace ( with ^( replace ) with ^) replace \" with ^\"| ^(Bed^) ^<Bath^> ^& \\^\"Beyond\\^\" ^| \\\\\\\\\\^\"Kohl^^s \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191  \n3.| double the number of trailing \\| no trailing \\  \n4.| Add a leading and trailing ^\"| ^\"^(Bed^) ^<Bath^> ^& \\^\"Beyond\\^\" ^|\n\\\\\\\\\\^\"Kohl^^s^\" \u2191\u2191 \u2191\u2191  \n5.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| ^\"^(Bed^) ^<Bath^> ^& \\^\"Beyond\\^\"\n^| \\\\\\\\\\^\"Kohl^^s^\"  \nNow examine how this parameter gets parsed:  \nA.| cmd.exe treats ^ as escape character and removes them. cmd.exe finds no\ndouble quoted parts because all \" are escaped with ^| ^\"^(Bed^) ^<Bath^> ^&\n\\^\"Beyond\\^\" ^| \\\\\\\\\\^\"Kohl^^s^\" \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193  \nB.| cmd.exe passes this as parameter to the C/C++ program| \"(Bed) <Bath> & \\\"Beyond\\\" | \\\\\\\\\\\"Kohl^s\"  \nC.| C/C++ program sees this as a double quoted parameter. Note all \" inside the double quoted parameter are escaped with \\| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"(Bed) <Bath> & \\\"Beyond\\\" | \\\\\\\\\\\"Kohl^s\" \u2193 \u2193  \nD.| C/C++ program applies the rule 2n+1 backslashes followed by a \" produce n backslashes + a literal quotation mark \\\" becomes \" \\\\\\\\\\\" becomes \\\"| (Bed) <Bath> & \\\"Beyond\\\" | \\\\\\\\\\\"Kohl^s -- -- ----  \nE.| Result is the desired parameter we started with| (Bed) <Bath> & \"Beyond\" | \\\"Kohl^s  \n  \nSample Test File:\n\n  * TestParams8_4.bat\n\n    * ShowParams.exe ^\"^(Bed^) ^<Bath^> ^& \\^\"Beyond\\^\" ^| \\\\\\\\\\^\"Kohl^^s^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.5: &<>^|()@!\"| Parameter  \n---|---  \nStart with the parameter you want (parameter includes a space)| &<>^|()@!\"  \n1.| Search for any \" Double the number of \\ immediately preceding any \" Then\nadd one more \\ before each \"| &<>^|()@!\\\" \u2191  \n2.| Escape with ^ all special characters: ^ < >| & ( ) \"  \ni.e. replace ^ with ^^ replace < with ^< replace > with ^> replace | with ^| replace & with ^& replace ( with ^( replace ) with ^) replace \" with ^\"| ^&^<^>^^^|^(^)^@^!\\^\" \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191  \n3.| double the number of trailing \\| no trailing \\  \n4.| Add a leading and trailing ^\"| ^\"^&^<^>^^^|^(^)^@^!\\^\"^\" \u2191\u2191 \u2191\u2191  \n5.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| ^\"^&^<^>^^^|^(^)^@^!\\^\"^\"  \nNow examine how this parameter gets parsed:  \nA.| cmd.exe treats ^ as escape character and removes them. cmd.exe finds no\ndouble quoted parts because all \" are escaped with ^|\n^\"^&^<^>^^^|^(^)^@^!\\^\"^\" \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193 \u2193  \nB.| cmd.exe passes this as parameter to the C/C++ program| \"&<>^|()@!\\\"\"  \nC.| C/C++ program sees this as a double quoted parameter. Note all \" inside\nthe double quoted parameter are escaped with \\| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"&<>^|()@!\\\"\" \u2193\n\u2193  \nD.| C/C++ program applies the rule 2n+1 backslashes followed by a \" produce n\nbackslashes + a literal quotation mark \\\" becomes \"| &<>^|()@!\\\" --  \nE.| Result is the desired parameter we started with| &<>^|()@!\"  \n  \nSample Test File:\n\n  * TestParams8_5.bat\n\n    * ShowParams.exe ^\"^&^<^>^^^|^(^)^@^!\\^\"^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nThe following older examples show the harder way of figuring out what to use\nas parameters.\n\n(Note there are multiple ways of achieving the same result.)\n\nExample 8.6: Command Line to C/C++ Program\n\nExample 8.6a: &<>^|()@ !| Parameter  \n---|---  \nStart with the parameter you want (parameter includes a space)| &<>^|()@ !  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \nnothing to replace  \nb.| enclose the whole parameter in double quotes (because there's a space in\nthe parameter)| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"&<>^|()@ !\" \u2191 \u2191  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\"&<>^|()@ !\"  \nb.| escape the special characters not in double quoted parts: ( the escape\ncharacter for cmd.exe is ^ )| Nothing to escape because it's all in a double\nquoted part (as seen by cmd.exe)  \nc.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| \"&<>^|()@ !\"  \nExample 8.6b: &<>^|()@ !| Parameter  \nStart with the parameter you want (same as example 1a)| &<>^|()@ !  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \nnothing to replace  \nb.| enclose spaces in double quotes (A double quoted part can be anywhere\nwithin a parameter)| &<>^|()@\" \"! \u2191 \u2191  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2510 &<>^|()@\" \"!  \nb.| escape the special characters not in double quoted parts: ( the escape\ncharacter for cmd.exe is ^ )| \u250c\u2500\u2510 ^&^<^>^^^|^(^)^@\" \"^! \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191  \nc.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| ^&^<^>^^^|^(^)^@\" \"^!  \n  \nSample Test File:\n\n  * TestParams8_6.bat\n\n    * REM both lines should produce the same result ShowParams.exe \"&<>^|()@ !\" ShowParams.exe ^&^<^>^^^|^(^)^@\" \"^!\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.7: Command Line to C/C++ Program\n\nExample 8.7: &<>^|@()!\"&<>^|@() !| Parameter  \n---|---  \nStart with the parameter you want| &<>^|@()!\"&<>^|@()!  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \n&<>^|@()!\\\"&<>^|@()! \u2191  \nb.| enclose the whole parameter in double quotes| \"&<>^|@()!\\\"&<>^|@()!\" \u2191 \u2191  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\n\"&<>^|()@!\\\"&<>^|@()!\"  \nwe have a problem in that the final \" is interpreted by cmd.exe as opening a\ndouble quoted part. To avoid this, escape that last \" ( the escape character\nfor cmd.exe is ^ )| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"&<>^|()@!\\\"&<>^|@()!^\" \u2191  \nb.| escape the other special characters not in double quoted parts: ( the\nescape character for cmd.exe is ^ )| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"&<>^|@()!\\\"^&^<^>^^^|@()!^\"\n\u2191 \u2191 \u2191 \u2191 \u2191  \nc.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| \"&<>^|@()!\\\"^&^<^>^^^|@()!^\"  \nAnother way to get the same result would be at step 1b don't enclose the\nparameter in double quotes, then escape all special characters including the\ndouble quote so it doesn't start a double quoted part.|\n^&^<^>^^^|@()!\\^\"^&^<^>^^^|@()! \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191  \n  \nSample Test File:\n\n  * TestParams8_7.bat\n\n    * REM both lines should produce the same result ShowParams.exe \"&<>^|@()!\\\"^&^<^>^^^|@()!^\" ShowParams.exe ^&^<^>^^^|@()!\\^\"^&^<^>^^^|@()!\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.8: Command Line to C/C++ Program\n\nExample 8.8a: &<>^|@() !\"&<>^|@() !| Parameter  \n---|---  \nStart with the parameter you want (parameter includes leading and trailing\ndouble quotes, plus a double quote inside, and two spaces)| \"&<>^|@()\n!\"&<>^|@() !\"  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \n\\\"&<>^|@() !\\\"&<>^|@() !\\\" \u2191 \u2191 \u2191  \nb.| enclose the whole parameter in double quotes| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\"\\\"&<>^|@() !\\\"&<>^|@() !\\\"\" \u2191 \u2191  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\n\"\\\"&<>^|@() !\\\"&<>^|@() !\\\"\"  \nwe have a problem in that the final \" is interpreted by cmd.exe as opening a\ndouble quoted part. To avoid this, escape that last \" ( the escape character\nfor cmd.exe is ^ )| \u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"\\\"&<>^|@() !\\\"&<>^|@() !\\\"^\" \u2191  \nb.| escape the special characters not in double quoted parts: ( the escape\ncharacter for cmd.exe is ^ )| \u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"\\\"^&^<^>^^^|@() !\\\"&<>^|@()\n!\\\"^\" \u2191 \u2191 \u2191 \u2191 \u2191  \nc.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| \"\\\"^&^<^>^^^|@() !\\\"&<>^|@() !\\\"^\"  \nAnother way to get the same result would be at step 2a just escape all special\ncharacters including all double quotes so there are no double quoted parts.|\n^\"\\^\"^&^<^>^^^|@() !\\^\"^&^<^>^^^|@() !\\^\"^\" \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191  \nExample 8.8b: &<>^|@() !\"&<>^|@() !| Parameter  \nStart with the parameter you want (same as 3a)| \"&<>^|@() !\"&<>^|@() !\"  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \n\\\"&<>^|@() !\\\"&<>^|@() !\\\" \u2191 \u2191 \u2191  \nb.| enclose spaces in double quotes (A double quoted part can be anywhere\nwithin a parameter)| \u250c\u2500\u2510 \u250c\u2500\u2510 \\\"&<>^|@()\" \"!\\\"&<>^|@()\" \"!\\\" \u2191 \u2191 \u2191 \u2191  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2510 \u250c\u2500\u2510\n\u250c\u2500\u2500\u2500 \\\"&<>^|@()\" \"!\\\"&<>^|@()\" \"!\\\"  \nonce again we have a problem in that the final \" is interpreted by cmd.exe as\nopening a double quoted part. To avoid this, escape that last \" ( the escape\ncharacter for cmd.exe is ^ )| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2510 \u250c\u2500\u2510 \\\"&<>^|@()\" \"!\\\"&<>^|@()\"\n\"!\\^\" \u2191  \nb.| escape the other special characters not in double quoted parts: ( the\nescape character for cmd.exe is ^ )| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2510 \u250c\u2500\u2510 \\\"&<>^|@()\"\n\"!\\\"^&^<^>^^^|@()\" \"!\\^\" \u2191 \u2191 \u2191 \u2191 \u2191  \nc.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| \\\"&<>^|@()\" \"!\\\"^&^<^>^^^|@()\"\n\"!\\^\"  \nAnother way to get the same result would be at step 2a just escape all special\ncharacters including all double quotes so there are no double quoted parts.|\n\\^\"^&^<^>^^^|@()^\" ^\"!\\^\"^&^<^>^^^|@()^\" ^\"!\\^\" \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191\n\u2191 \u2191  \n  \nSample Test File:\n\n  * TestParams8_8.bat\n\n    * REM all 4 lines should produce the same result ShowParams.exe \"\\\"^&^<^>^^^|@() !\\\"&<>^|@() !\\\"^\" ShowParams.exe ^\"\\^\"^&^<^>^^^|@() !\\^\"^&^<^>^^^|@() !\\^\"^\" ShowParams.exe \\\"&<>^|@()\" \"!\\\"^&^<^>^^^|@()\" \"!\\^\" ShowParams.exe \\^\"^&^<^>^^^|@()^\" ^\"!\\^\"^&^<^>^^^|@()^\" ^\"!\\^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.9: Command Line to C/C++ Program\n\nExample 8.9a: \"C:\\TEST A\\\"| Parameter  \n---|---  \nStart with the parameter you want (parameter includes double quotes and a\nspace)| \"C:\\TEST A\\\"  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \n\\\"C:\\TEST A\\\\\\\\\\\" \u2191 \u2191\u2191  \nb.| enclose the whole parameter in double quotes (because there's a space in\nthe parameter)| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"\\\"C:\\TEST A\\\\\\\\\\\"\" \u2191 \u2191  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2510 \u250c\u2510 \"\\\"C:\\TEST\nA\\\\\\\\\\\"\"  \nb.| escape the special characters not in double quoted parts: ( the escape\ncharacter for cmd.exe is ^ )| No special characters to escape (as seen by\ncmd.exe)  \nc.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| \"\\\"C:\\TEST A\\\\\\\\\\\"\"  \nAnother way to get the same result would be at step 2a just escape all special\ncharacters including all double quotes so there are no double quoted parts.|\n^\"\\^\"C:\\TEST A\\\\\\\\\\^\"^\" \u2191 \u2191 \u2191 \u2191  \nExample 8.9b: \"C:\\TEST A\\\"| Parameter  \nStart with the parameter you want (same as 4a)| \"C:\\TEST A\\\"  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \n\\\"C:\\TEST A\\\\\\\\\\\" \u2191 \u2191\u2191  \nb.| enclose spaces in double quotes (A double quoted part can be anywhere\nwithin a parameter)| \\\"C:\\TEST\" \"A\\\\\\\\\\\" \u2191 \u2191  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2510\n\\\"C:\\TEST\" \"A\\\\\\\\\\\"  \nb.| escape the special characters not in double quoted parts: ( the escape\ncharacter for cmd.exe is ^ )| It's all in double quoted parts. (as seen by\ncmd.exe)  \nc.| if this will be placed in a batch file, double the % characters| no % in\nparameter  \nResult: To get desired parameter use this:| \\\"C:\\TEST\" \"A\\\\\\\\\\\"  \nAnother way to get the same result would be at step 2a just escape all special\ncharacters including all double quotes so there are no double quoted parts.|\n\\^\"C:\\TEST^\" ^\"A\\\\\\\\\\^\" \u2191 \u2191 \u2191 \u2191  \n  \nSample Test File:\n\n  * TestParams8_9.bat\n\n    * REM all 4 lines should produce the same result ShowParams.exe \"\\\"C:\\TEST A\\\\\\\\\\\"\" ShowParams.exe ^\"\\^\"C:\\TEST A\\\\\\\\\\^\"^\" ShowParams.exe \\\"C:\\TEST\" \"A\\\\\\\\\\\" ShowParams.exe \\^\"C:\\TEST^\" ^\"A\\\\\\\\\\^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem.)\n\nExample 8.10: Command Line to C/C++ Program\n\nExample 8.10a: \"C:\\TEST %&^ A\\\"| Parameter  \n---|---  \nStart with the parameter you want| \"C:\\TEST %&^ A\\\"  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \n\\\"C:\\TEST %&^ A\\\\\\\\\\\" \u2191 \u2191\u2191  \nb.| enclose the whole parameter in double quotes| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\"\\\"C:\\TEST %&^ A\\\\\\\\\\\"\"  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2510 \u250c\u2510 \"\\\"C:\\TEST %&^\nA\\\\\\\\\\\"\"  \nb.| escape the special characters not in double quoted parts: ( the escape\ncharacter for cmd.exe is ^ )| \u250c\u2500\u2510 \u250c\u2510 \"\\\"C:\\TEST ^%^&^^ A\\\\\\\\\\\"\" \u2191 \u2191 \u2191  \nc.| if this will be placed in a batch file, double the % characters| \u250c\u2500\u2510 \u250c\u2510\n\"\\\"C:\\TEST ^%%^&^^ A\\\\\\\\\\\"\" \u2191  \nResult: To get desired parameter use this:| \"\\\"C:\\TEST ^%%^&^^ A\\\\\\\\\\\"\"  \nAnother way to get the same result would be at step 2a just escape all special\ncharacters including all double quotes so there are no double quoted parts.|\n^\"\\^\"C:\\TEST %^&^^ A\\\\\\\\\\^\"^\" \u2191 \u2191 \u2191 \u2191 \u2191 \u2191  \nc.| and if this will be placed in a batch file, double the % characters|\n^\"\\^\"C:\\TEST %%^&^^ A\\\\\\\\\\^\"^\" \u2191  \nExample 8.10b: \"C:\\TEST %&^ A\\\"| Parameter  \nStart with the parameter you want (same as 5a)| \"C:\\TEST %&^ A\\\"  \n1.| Apply the Microsoft C/C++ parsing rules  \na.| | replace:| literal \" with \\\" literal \\\" with \\\\\\\\\\\" literal \\\\\\\" with \\\\\\\\\\\\\\\\\\\"  \n---|---  \n\\\"C:\\TEST %&^ A\\\\\\\\\\\" \u2191 \u2191\u2191  \nb.| enclose spaces in double quotes (A double quoted part can be anywhere\nwithin a parameter)| \u250c\u2500\u2510 \u250c\u2500\u2510 \\\"C:\\TEST\" \"%&^\" \"A\\\\\\\\\\\" \u2191 \u2191 \u2191 \u2191  \n2.| Apply the Command Prompt parsing rules (cmd.exe)  \na.| determine what cmd.exe will see as the quoted parts| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510\n\u250c\u2500\u2500\u2500\u2500\u2510 \\\"C:\\TEST\" \"%&^\" \"A\\\\\\\\\\\"  \nb.| escape the special characters not in double quoted parts: ( the escape\ncharacter for cmd.exe is ^ )| it's all in double quoted parts (as seen by\ncmd.exe)  \nc.| if this will be placed in a batch file, double the % characters|\n\\\"C:\\TEST\" \"%%&^\" \"A\\\\\\\\\\\" \u2191  \nResult: To get desired parameter use this:| \"\\\"C:\\TEST ^%%^&^^ A\\\\\\\\\\\"\"  \nAnother way to get the same result would be at step 2a just escape all special\ncharacters including all double quotes so there are no double quoted parts.|\n\\^\"C:\\TEST^\" ^\"%^&^^^\" ^\"A\\\\\\\\\\^\" \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191 \u2191  \nc.| and if this will be placed in a batch file, double the % characters|\n\\^\"C:\\TEST^\" ^\"%%^&^^^\" ^\"A\\\\\\\\\\^\" \u2191  \n  \nSample Test File:\n\n  * TestParams8_10.bat\n\n    * REM all 4 lines should produce the same result ShowParams.exe \"\\\"C:\\TEST ^%%^&^^ A\\\\\\\\\\\"\" ShowParams.exe ^\"\\^\"C:\\TEST %%^&^^ A\\\\\\\\\\^\"^\" ShowParams.exe \"\\\"C:\\TEST ^%%^&^^ A\\\\\\\\\\\"\" ShowParams.exe \\^\"C:\\TEST^\" ^\"%%^&^^^\" ^\"A\\\\\\\\\\^\"\n\n9 How To Pass A Parameter to: a Batch File from the Command Line\n\nTo get a parameter into a batch file you need to work backwards through the\ntwo parsings it will go through:\n\n  1. The cmd.exe command line parser parses your command line & parameters and then starts running the batch file\n  2. The batch file retrieves the parameters, but when you use them, they get parsed again. Here's an example:\n\n    1. a batch file line contains %1\n    2. %1 is replaced with your parameter\n    3. that line is then sent to the command line parser for execution, where it gets parsed\n\nOverview of steps:\n\n  1. Start with the parameter you want\n  2. Apply the command line parsing rules that cmd.exe will apply when you enter the command and parameters [sec. 7]\n  3. Again, apply the command line parsing rules that cmd.exe will apply when you enter the command and parameters [sec. 7]\n\nStep Details: The steps to create your parameter are:\n\n  1. Apply the Command Line Parser (cmd.exe) parsing rules\n\n    1. determine what cmd.exe will see as the quoted parts\n    2. escape the special characters < > | & ^ not in a double quoted part\n    3. again, escape the special characters < > | & ^ not in a double quoted part\n\n       * \u2022the escape character for cmd.exe is ^\n       * \u2022it may also be necessary to escape ( ) @ !\n       * \u2022it's OK to escape everything\n    4. If your command line will be placed in a batch file, double the % character^7\n\nThe Command Line to Batch File Rules:\n\nCombining the two steps above gives us the following rules:\n\n  * Use ^^^ outside double quotes to escape < > & | ^ to insert < use ^^^< to insert > use ^^^> to insert | use ^^^| to insert ^ use ^^^^\n  * Sometimes it may be necessary to also escape ( ) @ !\n  * It's OK to escape everything\n  * Note ^ is also the line continuation character.\n\nSpace, Tab, Semicolon, Comma: Note that you can't have a space within a\nparameter without having some double quotes around it somehow. All spaces must\nbe within a double quoted part. Otherwise the space will act as a parameter\ndelimiter. (Same with tabs, semicolons, commas.)\n\n  1. Command line arguments can be separated by an unquoted semicolon or comma. This affects builtin commands like COPY and batch file parameters.\n  2. If the command is called by name (no path), the following slash is treated a separator, as in DIR/P. This affects both builtin commands and external commands. Note: If you want to use NT-style slash-separated paths with DOS utilities you have to quote them (as in TYPE \"C:/BOOT.INI\").^16\n\nExample 9.1: Command Line to Batch File\n\nExample 9.1: &<>^|()@!| Parameter  \n---|---  \nStart with the parameter you want| &<>^|()@!  \n1.| Apply the Command Line to Batch File parsing rules  \na.| determine what cmd.exe will see as the quoted parts:| it's all unquoted  \nb.| escape the special characters not in double quoted parts:|\n^^^&^^^<^^^>^^^^^^^|()@! \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191  \nResult: To get desired parameter use this:| ^^^&^^^<^^^>^^^^^^^|()@!  \n  \nSample Test File:\n\n  * TestParams9_1.bat\n\n    * ShowParams.bat ^^^&^^^<^^^>^^^^^^^|()@!\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem. WARNING! When executing a batch file from inside another batch file, the\noriginal batch file is terminated before the other one starts. This method of\ninvoking a batch file from another is usually referred to as chaining.)\n\nExample 9.2: Command Line to Batch File\n\nExample 9.2: &<>^|()@!| Parameter  \n---|---  \nStart with the parameter you want| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"&<>^|()@!\"  \n1.| Apply the Command Line to Batch File parsing rules  \na.| determine what cmd.exe will see as the quoted parts:| it's all in a double\nquoted part  \nb.| escape the special characters not in double quoted parts:| Nothing to\nescape because it's all in a double quoted part (as seen by cmd.exe)  \nResult: To get desired parameter use this:| \"&<>^|()@!\"  \n  \nSample Test File:\n\n  * TestParams9_2.bat\n\n    * ShowParams.bat \"&<>^|()@!\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem. WARNING! When executing a batch file from inside another batch file, the\noriginal batch file is terminated before the other one starts. This method of\ninvoking a batch file from another is usually referred to as chaining.)\n\nExample 9.3: Command Line to Batch File\n\nExample 9.3: &<>^|()@!\"&<>^|()@!| Parameter  \n---|---  \nStart with the parameter you want| &<>^|()@!\"&<>^|()@!  \n1.| Apply the Command Line to Batch File parsing rules  \na.| determine what cmd.exe will see as the quoted parts:| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\n\"&<>^|()@!\"&<>^|()@!\"  \nwe have a problem in that the final \" is interpreted by cmd.exe as opening a\ndouble quoted part. To avoid this, escape that last \"| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\"&<>^|()@!\"&<>^|()@!^^^\" \u2191\u2191\u2191  \nb.| escape the special characters not in double quoted parts:| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\"&<>^|()@!\"^^^&^^^<^^^>^^^^^^^|()@!^^^\" \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191  \nResult: To get desired parameter use this:|\n\"&<>^|()@!\"^^^&^^^<^^^>^^^^^^^|()@!^^^\"  \nThough not necessary, it's OK to escape the rest of the characters:|\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \"&<>^|()@!\"^^^&^^^<^^^>^^^^^^^|^^^(^^^)^^^@^^^!^^^\" \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191\n\u2191\u2191\u2191  \nAn easier way to get the same result would be to escape the \" within the\nparameter so it doesn't end the double quoted part. Then nothing else needs to\nbe escaped since it's all in a double quoted part.| \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\"&<>^|()@!\\\"&<>^|()@!\" \u2191  \nAnother way to get the same result would be to escape all the special\ncharacters including all the \" so nothing is in a double quoted part:  \n^^^\"^^^&^^^<^^^>^^^^^^^|()@!^^^\"^^^&^^^<^^^>^^^^^^^|()@!^^^\"  \nAs before, though it's not necessary, it is OK to escape the rest of the\ncharacters:  \n^^^\"^^^&^^^<^^^>^^^^^^^|^^^(^^^)^^^@^^^!^^^\"^^^&^^^<^^^>^^^^^^^|^^^(^^^)^^^@^^^!^^^\"\n\u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191 \u2191\u2191\u2191  \n  \nSample Test Files: all 5 test files should produce the same result\n\n  * TestParams9_3a.bat\n\n    * ShowParams.bat \"&<>^|()@!\"^^^&^^^<^^^>^^^^^^^|()@!^^^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem. WARNING! When executing a batch file from inside another batch file, the\noriginal batch file is terminated before the other one starts. This method of\ninvoking a batch file from another is usually referred to as chaining.)\n\n  * TestParams9_3b.bat\n\n    * ShowParams.bat \"&<>^|()@!\"^^^&^^^<^^^>^^^^^^^|^^^(^^^)^^^@^^^!^^^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem. WARNING! When executing a batch file from inside another batch file, the\noriginal batch file is terminated before the other one starts. This method of\ninvoking a batch file from another is usually referred to as chaining.)\n\n  * TestParams9_3c.bat\n\n    * ShowParams.bat \"&<>^|()@!\\\"&<>^|()@!\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem. WARNING! When executing a batch file from inside another batch file, the\noriginal batch file is terminated before the other one starts. This method of\ninvoking a batch file from another is usually referred to as chaining.)\n\n  * TestParams9_3d.bat\n\n    * ShowParams.bat ^^^\"^^^&^^^<^^^>^^^^^^^|()@!^^^\"^^^&^^^<^^^>^^^^^^^|()@!^^^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem. WARNING! When executing a batch file from inside another batch file, the\noriginal batch file is terminated before the other one starts. This method of\ninvoking a batch file from another is usually referred to as chaining.)\n\n  * TestParams9_3e.bat\n\n    * ShowParams.bat ^^^\"^^^&^^^<^^^>^^^^^^^|^^^(^^^)^^^@^^^!^^^\"^^^&^^^<^^^>^^^^^^^|^^^(^^^)^^^@^^^!^^^\"\n\n(Note: Since this is a batch file, if there were any % we would need to double\nthem. WARNING! When executing a batch file from inside another batch file, the\noriginal batch file is terminated before the other one starts. This method of\ninvoking a batch file from another is usually referred to as chaining.)\n\n10\\. How To Pass A Parameter to: a VBScript, JScript, or WSH Script from the\nCommand Line\n\nVBScript (.vbs), JScript^9 (.js), and WSH (.wsh) scripts are run by program\nwscript.exe, which is the Microsoft\u00ae Windows\u00ae Script Host (WSH). WSH is a\nlanguage-independent scripting host for Windows Script compatible scripting\nengines. Microsoft provides both Microsoft Visual Basic Script and JScript\nscripting engines with WSH. Windows Script Host executes scripts that exist\noutside an HTML or ASP page and that stand on their own as text files.^10\n\n    \n    \n    Example: > C:\\WINDOWS\\system32\\wscript.exe ShowParams.vbs hello goodbye Friday\n\nWhen you run ShowParams.vbs you'll notice the window title says, \"Window\nScript Host\".\n\n\u201cIf you want to get picky, the truth is that you can\u2019t read command-line\narguments using VBScript; that\u2019s because VBScript doesn\u2019t know anything about\ncommand-line arguments. But that\u2019s all right; after all, VBScript doesn\u2019t have\nto know anything about command-line arguments. That\u2019s because Windows Script\nHost takes care of all that stuff.\u201cAny time you supply a command-line argument\nto a script that runs under Windows Script Host (that includes JScript scripts\nas well as VBScript scripts) those arguments are automatically stored in the\nWscript.Arguments collection.\u201d\u2014Hey, Scripting Guy! 2008 Winter Scripting\nGames: Retrieving Command-Line Arguments\nhttp://www.microsoft.com/technet/scriptcenter/funzone/games/tips08/gtip0104.mspx  \n---  \n  \nOn startup wscript.exe calls GetCommandLine() to get the command line, then\ncalls wscript!SplitCommandLine(), which parses off the parameters. The rules\nfor WSH command line parameter parsing are simple:\n\n10.1 The WSH Command Line Parameter Parsing Rules:\n\n  * parameters are separated by a space or tab (multiple spaces/tabs OK)\n  * \" begins and ends the double quoted part)\n  * all characters within a double quoted part are accepted, including spaces and tabs)\n  * The \" character itself is always stripped from the parameter) (Note this means you can not pass a double quote as part of a parameter.))\n\n10.2 The Microsoft\u00ae Windows\u00ae Script Host (WSH) Command Line Parameter Parsing\nAlgorithm:\n\nThe following algorithm was reverse engineered by disassembling and examining\nwscript.exe and cscript.exe:\n\nAlgorithm:\n\n  1. call Kernel32.dll!GetCommandLine() to get the command line\n  2. make a copy of the command line\n  3. call wscript!SplitCommandLine() dry run to determine the number of parameters\n  4. allocate space for argv[] array\n  5. call wscript!SplitCommandLine() to parse parameters and fill in argv[] array\n\nwscript!SplitCommandLine() builds an argv[] array of where each parameter\nbegins, and writes a terminating NULL at the end of each parameter.\n\nSplitting the Command Line to get Parameters  \n---  \nstart with: ShowParams.exe hello goodbye Friday end with:\nShowParams.exe0hello0goodbye0Friday0 \u2191 \u2191 \u2191 \u2191 argv[] \u2502 \u2502 \u2502 \u2502 param 0: \u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502 param 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 param 2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 param\n3: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \n      \n    \n    loop parse off next parameter: skip over spaces, tabs clear \" flag save starting address of this parameter LOOP process this character: If space or tab if \" flag set accept this space or tab as part of the parameter else write a 0 here to terminate this parameter and goto parse off next parameter Else if \" toggle \" flag, strip \" (shift rest of line left 1 char) move to next char ENDLOOP endloop\n\nNotes:\n\n  * \" flag - set if we're currently inside a double quoted part\n  * The algorithm only looks for {space}, {tab}, and (\"). All other characters are just characters.\n  * You can't pass a double quote (\") as part of a parameter because double quotes are always stripped off.\n\n10.3 Putting it together: When you launch a VBScript, JScript, or WSH script\nfrom the command line, your command line goes through two parsers:\n\n  1. First the cmd.exe command line parser parses your command & parameters, using its cmd.exe parsing rules. It builds a command line, and calls CreateProcess() passing it the command line it built.\n  2. Then the Windows Script Host retrieves that resulting command line and parses off the parameters, using its WSH parsing rules.\n\nSo to get a parameter into a VBScript, JScript, or WSH script, you need to\nwork backwards through the two parsers it will go through:\n\n  1. Start with the parameter you want\n  2. Apply the WSH parsing rules that Windows Script Host will apply when parsing the command line it retrieves\n  3. Then apply the command line parsing rules that cmd.exe will apply when you enter the command and parameters\n\nStep Details: The steps to create your parameter are:\n\n  1. Apply the WSH parsing rules:\n\n    1. if there are any spaces or tabs within a parameter, add some \" so they are enclosed in a double quoted part\n\n       * \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2022you may enclose the entire parameter in double quotes: \"Call Me Ishmael\"\n       * \u250c\u2500\u2510 \u250c\u2500\u2510 \u2022or you may enclose just the spaces in double quotes: Call\" \"Me\" \"Ishmael\n       * \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2022or you can make a mess of it: Ca\"ll Me Is\"hmael\n  2. Apply the Command Line Parser (cmd.exe) parsing rules\n\n    1. determine what cmd.exe will see as the double quoted parts\n    2. escape the special characters < > | & ^ not in a double quoted part\n\n       * \u2022the escape character for cmd.exe is ^\n       * \u2022it may also be necessary to escape ( ) @ !\n       * \u2022it's OK to escape everything\n    3. If your command line will be placed in a batch file, double the % character^11\n\n10.4 Sample Scripts:\n\nSample 'Show Parameters' scripts:\n\nVBScript:\n\n  * ShowParams.vbs\n\n    * If Wscript.Arguments.Count = 0 Then Wscript.echo \"No parameters found\" Else i=0 Do until i = Wscript.Arguments.Count Parms = Parms & \"Param \" & i & \" = \" & Wscript.Arguments(i) & \" \" & vbcr i = i+1 loop Wscript.echo parms End If\n\nJScript:\n\n  * ShowParams.js\n\n    * if (WScript.Arguments.Count() ==0) { WScript.Echo(\"No parameters found\"); } else { var objArgs = WScript.Arguments; var parms = \"\" for (i=0, n=objArgs.length; i<n; i++) { parms += '\\nParam '+i+'='+objArgs(i); } WScript.Echo(parms); }\n\n11.How To Pass A Parameter to a Perl script from the command line\n\nActivePerl^12 and Strawberry Perl^13 both call MSVCRT.dll!__getmainargs which\nfollows the Microsoft C/C++ Parameter Parsing Rules. Therefore the steps are:\n\n  1. Start with the parameter you want\n  2. Apply the Microsoft C/C++ parsing rules that ShowParams.exe will apply when parsing the command line it retrieves [sec. 5]\n  3. Apply the command line parsing rules that cmd.exe will apply when you enter the command and parameters [sec. 7]\n\nSee sec. 8: How To Pass A Parameter to: a C/C++ Program from the Command Line\nabove.\n\nSample 'Show Parameters' Perl script:\n\n  * ShowParams.pl\n\n    * if ( $#ARGV < 0 ) { print \"No parameters\\n\"; } else { my $i = 0; my $Parms = \"\"; while ( $i <= $#ARGV ) { $Parms .= \"Param $i = $ARGV[$i]\\n\"; $i ++; } print $Parms; }\n\n12.How To Pass A Parameter to a Python script from the command line\n\nPythonTM^14 is written in C and obtains its parameters via the argv[]\nvector.^15 It thus uses the Microsoft C/C++ Parameter Parsing Rules. Therefore\nthe steps are:\n\n  1. Start with the parameter you want\n  2. Apply the Microsoft C/C++ parsing rules that ShowParams.exe will apply when parsing the command line it retrieves [sec. 5]\n  3. Apply the command line parsing rules that cmd.exe will apply when you enter the command and parameters [sec. 7]\n\nSee sec. 8: How To Pass A Parameter to: a C/C++ Program from the Command Line\nabove.\n\nSample 'Show Parameters' Python script for Python version 2:\n\n  * ShowParams2.py\n\n    * #!/usr/bin/python # Filename: using_sys.py import sys print 'The command line arguments are:' for i in sys.argv: print i print '\\n\\nThe PYTHONPATH is', sys.path, '\\n'\n\nSample 'Show Parameters' Python script for Python version 3:\n\n  * ShowParams3.py\n\n    * #!/usr/bin/python # Filename: using_sys.py import sys print( 'The command line arguments are:' ) for i in sys.argv: print( i ) print( '\\n\\nThe PYTHONPATH is', sys.path, '\\n' )\n\nNote: Python version 3 is incompatible with Python version 2. Guido van Rossum\nwrote \"Python 3.0, also known as Python 3000 or Py3K, is the first ever\nintentionally backwards incompatible Python release.\" In particular, print\nstatements that would work with pre-3 versions of Python will not work in 3.x.\nThe change of \"print\" from a statement to a function is identified as a common\nstumbling block on this page on what's new in Python 3.0.\nhttp://docs.python.org/3.1/whatsnew/3.0.html\n\n13.How To Pass A Parameter to a REXX script from the command line\n\n8/24/2009 Under Construction...\n\nSample 'Show Parameters' REXX script:\n\n  * ShowParams.rex\n\n    * NumParams = %0% Param1 = %1% Param2 = %2% Param3 = %3% MsgBox GetCommandLine=%string%`nNumParams = %0%`nParam1 = %1%`nParam2 = %2%`nParam3 = %3% ExitApp\n\n14.How To Pass A Parameter to a RUBY script from the command line\n\nRuby attempts to mimic the Microsoft C/C++ parameter parsing rules, but the\ncurrent versions, 1.8.6 & 1.9.1, have a bug in them so they don't work\nproperly.\n\n(file Win32.c routine rb_w32_cmdvector, the memcpy statement needs to copy one\nmore character to include the trailing NULL.)\n\nSample 'Show Parameters' RUBY script:\n\n  * ShowParams.rb\n\n    * ARGV.each do|a| puts \"Argument: #{a}\" end\n\n15.How To Pass A Parameter to an AutoHotkey script from the command line\n\nAutoHotkey is written in C++ and obtains its parameters via the __argv[]\nvector. Thus it uses the Microsoft C/C++ Parameter Parsing Rules. Therefore\nthe steps are:\n\n  1. Start with the parameter you want\n  2. Apply the Microsoft C/C++ parsing rules that ShowParams.exe will apply when parsing the command line it retrieves [sec. 5]\n  3. Apply the command line parsing rules that cmd.exe will apply when you enter the command and parameters [sec. 7]\n\nSee sec. 8: How To Pass A Parameter to: a C/C++ Program from the Command Line\nabove.\n\nSample 'Show Parameters' AutoHotkey script:\n\n  * ShowParams.ahk\n\n    * NumParams = %0% Param1 = %1% Param2 = %2% Param3 = %3% result := DllCall(\"kernel32\\GetCommandLineW\") pointer := result string := DllCall(\"MulDiv\",\"int\",pointer,\"int\",1,\"int\",1,\"str\") MsgBox GetCommandLine=%string%`nNumParams = %0%`nParam1 = %1%`nParam2 = %2%`nParam3 = %3% ExitApp\n\nFootnotes:\n\n1.| Larry Osterman's WebLog The Windows command line is just a string...\nhttp://blogs.msdn.com/larryosterman/archive/2007/10/03/the-windows-command-\nline-is-just-a-string.aspxThank you to Delan Azabani for the following\nexplanation:Technically, execl(3) and friends do not allow you to specify a\ncommand line string^ [i], but rather a sequence of previously separated\narguments via variadic C arguments. execv(3) and friends are similar, except\nthat they use decayed arrays.The complete exec family includes\nexec{l,le,lp,v,ve,vp}, fexecve(3), and if you\u2019re using glibc, the execvpe(3)\nextension.The family may be invoked in a way that allows you to specify a\ncommand line string \u2014 including, for example, together with\nsh(1):execl(\"/path/to/bin/sh\", \"sh\", \"-c\", command_line, (char *) NULL);This\nis roughly how system(3) is specified by POSIX^ [ii].[i]\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html [ii]\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/system.html  \n---|---  \n2.| ibid.  \n3.| or possibly CScript.exe; WScript.exe is the Windows version, CScript.exe\nis the console version. You'll find them in the System32 directory.  \n4.| In some cases cmd.exe may call ShellExecute() which eventually calls\nCreateProcess(), passing it a command line.  \n5.| On Windows 95,98,ME the Command Prompt Window program was COMMAND.COM .\nThe parsing rules are the same. (Back then it was also known as the DOS\nPrompt, or MS-DOS Prompt. Technically COMMAND.COM is DOS. Note there are other\nCommand Prompt Window programs such as JPSoft's \"Take Command\".\n(http://jpsoft.com) Note the following CP/M legacy constructs: 1. Command line\narguments can be separated by an unquoted semicolon or comma. This affects\nbuiltin commands like COPY and batch file parameters. In particular, I can\nthink of no way to pass A;B (without quotes) as a paramater to a batch file.\n2. If the command is called by name (no path), the following slash is treated\na separator, as in DIR/P. This affects both builtin commands and external\ncommands. Note: If you want to use NT-style slash-separated paths with DOS\nutilities you have to quote them (as in TYPE \"C:/BOOT.INI\").  \n6.| It's been documented in the past, such as here: \"Percent Signs Stripped\nfrom Batch File Text\" http://support.microsoft.com/kb/75634 and it's mentioned\nin current documentation here (last sentence of the \"Copy Examples\" section):\n\"dtutil Utility\" http://msdn.microsoft.com/en-us/library/ms162820.aspx Note:\nJPSoft's Take Command command line utility processes % differently. You'll\nneed to quadruple the % char (http://jpsoft.com)  \n7.| See footnote 6  \n8.| See footnote 6  \n9.| JScript is Microsoft's own version of JavaScript.  \n10.| \"Windows Script Host Basics\" http://msdn.microsoft.com/en-\nus/library/ec0wcxh3(VS.85).aspx \"Description of Windows Script Host (WSH)\"\nhttp://support.microsoft.com/kb/188135 \"Hosting Environments and Script\nEngines\" http://msdn.microsoft.com/en-us/library/s4axe076(VS.85).aspx  \n11.| See footnote 6  \n12.| http://www.activestate.com/activeperl/  \n13.| http://strawberryperl.com/  \n14.| http://www.python.org/  \n15.| Technically, WinMain in WinMain.c calls Py_main in main.c passing it\n__argc and __wargv as argc[] and argv[] respectively.  \n16.| Thanks to Christopher Yeleighton for these two points.  \n17.| YoLinux.com: GNOME desktop basics \u2192 GNOME Desktop Launcher  \n18.| The KDE Menu Editor Handbook  \n19.| Thanks to Andr\u00e1s Korn for assistance in updating the *nix section (Feb.\n2011).  \n  \nDavid Deley \u00a9 2009 http://daviddeley.com\n\nUpdates:\n\nJuly 5, 2020 \u2014 Thank you to Stefan Kanthak for pointing out some spelling\nerrors.\n\nFeb. 8, 2022 \u2014 Bash Cheat Sheet reference added.\n\n", "frontpage": false}
