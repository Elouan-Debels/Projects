{"aid": "40067112", "title": "Base 32", "url": "https://www.crockford.com/base32.html", "domain": "crockford.com", "votes": 2, "user": "cal85", "posted_at": "2024-04-17 16:40:14", "comments": 0, "source_title": "Base 32", "source_text": "Base 32\n\nDouglas Crockford\n\nBlog\n\nBooks\n\nVideos\n\n2024 Appearances\n\nJavaScript\n\nMisty\n\nJSLint\n\nJSON\n\nGithub\n\nElectric Communities\n\nMastodon/Layer8\n\nFlickr Photo Album\n\nResearchGate\n\nLinkedIn\n\nPronouns: pe/per\n\nAbout\n\n2019-03-04\n\n# Base 32\n\nSymbol Value| Decode Symbol| Encode Symbol  \n---|---|---  \n0| 0 O o| 0  \n1| 1 I i L l| 1  \n2| 2| 2  \n3| 3| 3  \n4| 4| 4  \n5| 5| 5  \n6| 6| 6  \n7| 7| 7  \n8| 8| 8  \n9| 9| 9  \n10| A a| A  \n11| B b| B  \n12| C c| C  \n13| D d| D  \n14| E e| E  \n15| F f| F  \n16| G g| G  \n17| H h| H  \n18| J j| J  \n19| K k| K  \n20| M m| M  \n21| N n| N  \n22| P p| P  \n23| Q q| Q  \n24| R r| R  \n25| S s| S  \n26| T t| T  \n27| V v| V  \n28| W w| W  \n29| X x| X  \n30| Y y| Y  \n31| Z z| Z  \n  \nBase 32 is a textual 32-symbol notation for expressing numbers in a form that\ncan be conveniently and accurately transmitted between humans and computer\nsystems. It can be used for out of band communication of public keys.\n\n## Requirements\n\nThe encoding scheme is required to\n\n  * Be human readable and machine readable.\n  * Be compact. Humans have difficulty in manipulating long strings of arbitrary symbols.\n  * Be error resistant. Entering the symbols must not require keyboarding gymnastics.\n  * Be pronounceable. Humans should be able to accurately transmit the symbols to other humans using a telephone.\n\n## Base\n\nBase 10 is well known and well accepted, but it produces strings that will be\nunacceptably long. Base 16 is only slightly more compact.\n\nBase 64 encoding uses a large symbol set containing both upper and lower case\nletters and many special characters. It is more compact than Base 16, but it\nis difficult to type and difficult to pronounce.\n\nBase 32 seems the best balance between compactness and error resistance. Each\nsymbol carries 5 bits.\n\n## Symbols\n\nThe Base 32 symbol set is a superset of the Base 16 symbol set.\n\nWe chose a symbol set of 10 digits and 22 letters. We exclude 4 of the 26\nletters: I L O U.\n\nExcluded Letters  \n---  \nI| Can be confused with 1  \nL| Can be confused with 1  \nO| Can be confused with 0  \nU| Accidental obscenity  \n  \nWhen decoding, upper and lower case letters are accepted, and i and l will be\ntreated as 1 and o will be treated as 0. When encoding, only upper case\nletters are used.\n\nIf the bit-length of the number to be encoded is not a multiple of 5 bits,\nthen zero-extend the number to make its bit-length a multiple of 5.\n\nHyphens (-) can be inserted into symbol strings. This can partition a string\ninto manageable pieces, improving readability by helping to prevent confusion.\nHyphens are ignored during decoding. An application may look for hyphens to\nassure symbol string correctness.\n\n## Check\n\nSymbol Value| Decode Symbol| Encode Symbol  \n---|---|---  \n32| *| *  \n33| ~| ~  \n34| $| $  \n35| =| =  \n36| U u| U  \n  \nAn application may append a check symbol to a symbol string. This check symbol\ncan be used to detect wrong-symbol and transposed-symbol errors. This allows\nfor detecting transmission and entry errors early and inexpensively.\n\nThe check symbol encodes the number modulo 37, 37 being the least prime number\ngreater than 32. We introduce 5 additional symbols that are used only for\nencoding or decoding the check symbol.\n\nThe additional symbols were selected to not be confused with punctuation or\nwith URL formatting.\n\n0123456789ABCDEFGHJKMNPQRSTVWXYZ *~$=U 2002-11-02\n\n", "frontpage": false}
