{"aid": "40004324", "title": "AI proof your career with software architecture", "url": "https://www.selikoff.net/2024/04/11/devnexus-2024-ai-proof-your-career-with-software-architecture/", "domain": "selikoff.net", "votes": 1, "user": "mooreds", "posted_at": "2024-04-11 16:57:40", "comments": 0, "source_title": "[devnexus 2024] ai proof your career with software architecture", "source_text": "[devnexus 2024] ai proof your career with software architecture | Down Home Country Coding With Scott Selikoff and Jeanne Boyarsky\n\nSkip to primary content\n\n# Down Home Country Coding With Scott Selikoff and Jeanne Boyarsky\n\n## Java/J2EE Software Development and Technology Discussion Blog\n\n# [devnexus 2024] ai proof your career with software architecture\n\nPosted on April 11, 2024 by Jeanne Boyarsky\n\nSpeaker: Kelly Morrison\n\nFor more, see the 2024 DevNexus Blog Table of Contents\n\nHIstory\n\n  * Fairly recent. GPT created in 2018. Number parameters increasing exponentially\n  * Microsoft CoPilot released in 2021. Uses Codex; a specialized model off GPT3 for creating code. Trained on billions of lines of GitHub code and can learn from a local code base\n  * Amazon released CodeWhisperer in 2022. Can generate code for 15 languages. Specialized for AWS Code Deployment\n\nBasic Example\n\n  * Asked ChatGPT to write a Java 17 Spring boot rest API for stats in a MongoDB with JUnit 5 tests cases for the most common cases\n  * Looks impressive on first pass, but then find problems\n  * Hard coded info\n  * Used Lombok instead of Java 17 records\n  * Code doesn\u2019t compile\n\nComplicated Example\n\n  * Asked ChatGPT to write an entire enterprise app for selling over 10K crafts with a whole bunch of requirements like OpenID, Sarbanes Oxley, etc\n  * Didn\u2019t try. Instead came back with a list of things to consider in terms of requirements\n\nWhat AI can/can\u2019t do\n\n  * Can do \u201cGround level\u201d work.\n  * Still need humans for large orchestratoin \u2013 ex: architects\n  * Can do more self without junior devs\n  * Garbage in, garbage out. Trained on public code in GitHub. Not all good/correct. Some obsolete.\n  * Humans better at changing frameworks, working with CSS (does it look nice), major architectural changes, understanding impact of code when requirements change\n\nHallucinations\n\n  * Doesn\u2019t understand. Asks as mime/mimic/parrot\n  * If can\u2019t find answer, will give answer that looks like what you want even if made up. Example where made up up a kubectl option\n  * Not enough training data on new languages/technologies. More hallucinations when less training data\n  * Mojo created May 2023. Likely to get Python examples if ask for Mojo. However, it is a subset of Python with some extra things\n\nSecurity Concerns\n\n  * Learns from what you enter so can leak data\n  * Almost impossible to remove something in a LLM. ex: passwords, intellectual propery, trade secrets\n  * Some companies forbid using these models or require anonymous air gapped use. Translate something innocuous into what actually want\n\nDebugging\n\n  * Can human understand AI generated code well enough to debug\n  * GPT and Copilot can sometimes debug code, but have to worry about security\n\nPushback\n\n  * Law \u2013 ChatGPT made up cases\n  * Hollywood strike \u2013 copying old plots/scripts/characters\n  * Unclear if generated output can be copyrighted. For now, not copyrightable but could change.\n  * Some software is too important to risk hallucinations 0 ex: plane, car (although Telsa getting there), pacemakers, spacecraft, satellites\n  * Lack of context \u2013 other software at compnay, standards, reuse, why use certain technologies, securities\n  * Lack of creativity \u2013 need to determine problem to solve or new approaches\n\nWhat AI does well\n\n  * Low level code gen (REST APIs, config, database access)\n  * Code optimization\n  * Greenfield development\n  * Generateing docs or tests\n  * Basically the kin of tasks you hand off to a junior developer [I disagree that some of these are things you hand off]\n\nCareer Advice\n\n  * Focus on architecture, not code\n  * Don\u2019t just learn a langauge or framework.\n  * Learn which langauges are best in different situations\n  * Learn common idioms\n  * Look at pricing, availability of libraries and programmers\n  * Learn which architectures should be implemented in different languages\n  * Learn how to create great prompts for code generation\n  * Learn how to understand, follow, test, and debug AI generated code\n\nBook recommendations\n\n  * Building Evolutionary Architectures\n  * Domain Driven Design\n  * Fundamentals of Software Archicture\n  * Head First Software Architecture\n\nMore skills\n\n  * Types or architecutures \u2013 Layered, event driven, microkernel, microservices, space based, client/server, broker, peer to peer, etc\n  * Determine requirements \u2013 domain experts don\u2019t know enough about software to specify. Can be bridge between AI and domain experts\n\nMentoring junior developers\n\n  * Teach how write high quality prompts.\n  * Remind to ask for security, test cases, docs, design patterns, OWASP checks\n  * Show to spot and deal with hallucinations\n  * Help to understand and debut AI written code\n  * Help learn architecture by explaining why choices made\n  * Ensure code reviews are held\n  * Precommit git hooks to test code\n  * Use AI to help generate unit tests\n\nArchUnit\n\n  * archunit.org tests architecuture.\n  * Can add own architecture rules.\n  * ex: never use Java Util Logging or Joda Time\n  * ex: fields should be private/static/final\n  * ex: no field injection\n  * ex: what layers are allowed to call\n  * Can include \u201cBecause\u201d reason for each rule\n  * Ensures AI doesn\u2019t sneak in something that goes against conventions\n\nMy take\n\nGood examples. I was worried about the omission of \u201cwhere to senior devs\u201d come\nfrom but there were examples like changing frameworks so not entirely ignored.\nGood examples from the ecosystem as well. Good list of skills to focus on.\n\n### Share this:\n\n  * Email\n  * Facebook\n  * Tumblr\n  * Reddit\n  * Print\n  * LinkedIn\n  * Twitter\n\nThis entry was posted in Conferences and tagged ai, architecture by Jeanne\nBoyarsky. Bookmark the permalink.\n\n### Leave a Reply\n\nProudly powered by WordPress\n\n", "frontpage": false}
