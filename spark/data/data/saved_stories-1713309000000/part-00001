{"aid": "40054538", "title": "A Fresh Take on Do-178C Software Reviews", "url": "https://blog.adacore.com/a-fresh-take-on-do-178c-software-reviews", "domain": "adacore.com", "votes": 1, "user": "synack", "posted_at": "2024-04-16 17:09:06", "comments": 0, "source_title": "A Fresh Take on DO-178C Software Reviews", "source_text": "A Fresh Take on DO-178C Software Reviews | The AdaCore Blog\n\n# AdaCore Blog\n\n# A Fresh Take on DO-178C Software Reviews\n\n## by Olivier App\u00e9r\u00e9 , Josue Bello \u2013 Apr 16, 2024\n\nDO-178C/ED-12C, officially titled \"Software Considerations in Airborne Systems\nand Equipment Certification\" is a certification standard that governs the\nacceptability of software in commercial aircraft. As stated in Section 1.1,\n\"The purpose of this document is to provide guidance for the production of\nsoftware for airborne systems and equipment that performs its intended\nfunction with a level of confidence in safety that complies with airworthiness\nrequirements.\"\n\nGuidance has a technical meaning in the standard and consists of:\n\nObjectives associated with software life cycle processes\n\n  * Planning process\n\n  * Development processes (requirements, design, coding, integration)\n\n  * Integral processes (verification, configuration management, QA, certification liaison)\n\n  * Recommended activities that satisfy these objectives (DO-178 provides guidelines and best practices to comply with the software life cycle objectives however it also encourages users to adapt these methods to their specific use cases).\n\n  * Software life cycle data: evidence (\"artifacts\") verifying that activities have been accomplished successfully / objectives have been met\n\nA software level establishes which guidance applies, and how rigorously. It is\nbased on the effect of software anomalies on airworthiness/pilot workload and\nis determined during safety assessment (a system life cycle process). The\nsoftware levels addressed in DO-178C/ED-12C range from D (anomalous behavior\ncan lead to a minor failure condition) to A (anomalous behavior can lead to a\ncatastrophic failure).\n\nA major focus of DO-178C/ED-12C is on the verification process, where\nverification means the technical assessment of the outputs of a software life\ncycle process. Verification consists of reviews, analyses, and tests, with the\nobjective of detecting and reporting errors that may have been introduced\nduring software development processes.\n\nAs stated in Section 6.3 of DO-178C/ED-12C:\n\n\u201c... reviews provide a qualitative assessment of correctness. A review may\nconsist of an inspection of an output of a process guided by a checklist or\nsimilar aid.\u201d\n\nA review is an evaluation of software life cycle data such as software\nrequirements, software architecture, source code, executable object code, and\ntests produced by a software development compliant with DO-178C/ED-12C\nobjectives:\n\n  * \u00a75.0 Software Development Processes\n\n  * \u00a76.4 Software Testing\n\nReview is an essential part of the evidence required for certification. More\nspecifically, reviews provide compliance with the following sections of\nDO-178C/ED-12C:\n\n  * \u00a76.3 \u201cSoftware Reviews and Analyses\u201d and\n\n  * \u00a76.4.5 \u201cReviews and Analyses of Test Cases, Procedures, and Results\u201d).\n\nThe DO-178C/ED-12C sections below define further \u201cReview\u201d activities but are\nseparate from the software verification process. Consequently, they are\noutside the scope of this blog post.\n\n  * \u00a74.6 \u201cReview of the Software Planning Process\u201d\n\n  * \u00a77.2.5 \u201cChange Review\u201d\n\n  * \u00a78.3 \u201cSoftware Conformity Review\u201d\n\nThis is the first in a series of blog posts in which we explore how to define\nand leverage a review framework for efficient review in a DO-178C/ED-12C\ncontext.\n\nThe prerequisite steps required before implementing a review framework with\nany tool are the following\n\n  1. First, capture thoroughly all the review-related constraints specified or implied by DO-178C/ED-12C, and then\n\n  2. Define a minimum acceptable review framework consisting of checklists, authorization, reviewer roles, etc. compliant with DO-178C/ED-12C, and finally\n\n  3. Set up a configuration management repository such as GitLab to track development activities and extract lifecycle data (e.g., setting up projects, repositories, Continuous Integration automation, etc.). GitLab CI (Continuous Integration) is a DevOps tool integrated into GitLab for automating the build, test, and deployment processes of software development projects.\n\nIn this blog, we\u2019ll identify the constraints (records with evidence\nindependence, configuration items reviewed, etc.) associated with meeting the\nreview objectives of DO-178C/ED-12C most efficiently. Subsequent blog posts\nwill address the other two items.\n\n# WHY - Review\n\nWhy do reviews? Sure, it is required by DO-178C/ED-12C, but the primary\npurpose of reviews is to identify and mitigate potential software defects,\nerrors, and inconsistencies early in the development process. Especially when\nthe activity is not practical to be performed by an automated (qualified)\ntool.\n\nThe software review activity in DO-178C/ED-12C encompasses several key\naspects:\n\n  1. Use of checklists or similar aids to review technical and other life cycle data, as described in Section 6.3.\n\n  2. Creation of Software Verification Results, which includes review records, and configuration management info for software reviewed, as per Section 11.14.\n\n  3. A mechanism for efficient storage and retrieval of reviewed life cycle data, as indicated in Section 11.0(b).\n\n  4. Establishing independent verification, as outlined in Sections 4.6 and 6.2. The review should be performed by individuals other than the developers, and evidence should trace outputs to their activities and inputs.\n\n  5. Reviews of high-level requirements, low-level requirements, architecture, source code, outputs of the integration process, and software testing activities, which are necessary to ensure compliance with objectives outlined in Sections 6.3.1 to 6.4.5.\n\n  6. Tracking of discrepancies found during the review process via problem reporting, as per Section 11.14.\n\nTo undertake a review in DO-178C/ED-12C the first task is to focus on the\nreview and analysis objectives which are specific to 8 categories of software\nlife cycle data.\n\nThe figure below gives an overview of the software life cycle data submitted\nfor review in the software verification process:\n\nA total of 31 review and analyses objectives are explicit in DO-178C/ED-12C\nsection 6.3 \u201cSoftware Reviews and Analyses\u201d and section 6.4.5 \u201cReviews and\nAnalyses of Test Cases, Procedures, and Results\u201d.\n\nAnd so the WHY of the review is to confirm that these objectives are\nsatisfied.\n\nYou must also focus on the WHAT by choosing the most appropriate verification\nmethod.\n\n# WHAT- Verification Methods\n\n## Review vs Analysis\n\nTo apply the methodology presented in the previous sections, reviews or\nanalyses must confirm that all software life cycle data, namely high-level\nrequirements, low-level requirements, software architecture, source code,\nexecutable object code, test cases, test procedures, and test results\ncombined, satisfy their objectives.\n\nAnalyses provide repeatable evidence of correctness, and reviews provide a\nqualitative assessment of correctness (DO-178C/ED-12C section 6.3).\n\nOne solution to reduce the effort of review is to consider augmenting or\nreplacing the review with a formal analysis following DO-333/ED-216 \u201cFormal\nMethods Supplement to DO-178C/ED-12C and DO-278A\u201d.\n\n\u201cSince formal methods can be used to discover errors early in the life cycle,\nthey actually reduce the overall work required for the project.\u201d\n(DO-333/ED-216 Section FM.B.1.4.4 Reduce Effort)\n\nFor instance the objective \u201cEach high-level requirement is accurate,\nunambiguous, and sufficiently detailed\u201d could be handled by formal analysis\nprovided that the requirements are expressed in a formal notation.\n\n\u201cIf the high-level requirements are expressed in a formal notation, then they\nwill be precise and unambiguous. The formal model of high-level requirements\ncan be checked for consistency (the absence of conflicts) and may enable\naccuracy checks to be carried out using formal analysis.\u201d (DO-333/ED-216\nSection 6.3.1 b).\n\nActually, on a classical software development basis where:\n\n  * High-level and low-level requirements are written in natural language,\n\n  * Software architecture is designed with no formal or semi-formal notation,\n\n  * A code checker tool is used to verify coding rules (6.3.4-c Conformance to standard),\n\n  * An advanced static code analyzer tool is used to ensure the correctness and consistency of the source code (6.3.4-e Accuracy and consistency),\n\nAmong the 31 DO-178 objectives, not less than 29 objectives are verified by\nreview.\n\nWith a more formal notation approach, where:\n\n  * High-level requirements are written in constrained natural language (i.e. EARS). ,\n\n  * Low-level requirements are written in a formal notation (e.g., SPARK, SPARK is a language based on Ada. It adds contracts and extended annotations as part of a subset of regular Ada code): \u201cIt is more effective to write requirements formally than to write an informal one.\u201d (DO-333/ED-216 Section FM.B.1.4.1 Improve Requirements),\n\n  * The software architecture is designed with a semi-formal notation like UML,\n\n  * A design verifier tool is used to verify the software architecture (e.g., Simulink Design Verifier, GNATprove (To verify correctness of data flow), etc.),\n\n  * An automated documentation generation tool is used to generate traceability matrices,\n\nwe could dramatically reduce review objectives to be verified or at least\nreduce effort when using semi-formal notations. While it may still follow some\nconventions and rules, a semi-formal notation allows for more flexibility and\ninterpretation. It is often used in contexts where absolute precision is not\nnecessary or where there's a need for a balance between formalism and\nreadability. Here's an example with the EARS syntax (EARS for Easy Approach to\nRequirements Syntax is a mechanism to gently constrain textual requirements.\nThe EARS patterns provide structured guidance that enables authors to write\nhigh quality textual requirements):\n\nWhen the input A is below 20 [amperes] for more than 10 [milliseconds], the\nfunction B shall set the output C to ACTIVE\n\nTo summarize, you can streamline the review process by automating evaluation\nas much as possible (i.e., replacing review with analysis) and/or by using\nformal or semi-formal notation.\n\n## The Review Methods\n\nThe DO-178C/ED-12C standard does not prescribe specific review methods to be\nfollowed.\n\nIt only mentions that \u201ca review may consist of an inspection of an output of a\nprocess guided by a checklist or similar aid.\u201d (6.3 Software Reviews and\nAnalyses)\n\nInstead, it specifies objectives and criteria such as correctness, accuracy,\ncompleteness, and verifiability, that must be satisfied.\n\nAs a result, organizations can choose their review methods as long as they\nmeet the criteria specified in the document.\n\nTwo review methods are typically used, the walk-through and the inspection\nmethod. They share the common goal of identifying issues but the second\napproach requires more formalization.\n\nThe walk-through method is a form of peer review where the author of the\nartifact leads a group of peers through the artifact. The focus is on\nunderstanding the logic, structure, and functionality. It is more informal and\naims to familiarize the team with the content.\n\nThe inspection method, popularized by Michael Fagan in the 1970s, is a more\nformal process where a designated moderator leads a team of reviewers through\nthe artifact. It involves a thorough examination of the work product against\npredefined criteria or standards.\n\n# Challenges\n\nThat being said, you have to pay attention to several points as described\nbelow. This will avoid falling into common traps that reduce efficiency and\ncreate tedious, high-effort, and low-added-value workloads.\n\nThe first three are constraints: configuration identification, independence,\nand availability.\n\nThe last three are to be considered as opportunities to reduce effort or ease\nmanagement.\n\n## Configuration Identification\n\nDO-178C/ED-12C requires the identification of configuration items reviewed.\n\nThis is crucial to\n\n  * help establish this traceability throughout the development process. Traceability must include all levels of requirements, testing, reviews, defects, and the code itself.\n\n  * ensure that the correct version of the configuration item is being reviewed.\n\n  * ensure that developers can replicate the conditions under which the issue occurred and work towards a resolution.\n\n  * ensure that documentation accurately reflects the status of the software at a given point in time. This makes it easier to demonstrate compliance during certification audits.\n\n## Independence\n\nDO-178C/ED-12C places a significant emphasis on independence in the review\nactivity for software at levels A or B. Independence is a fundamental\nprinciple aimed at ensuring objectivity, impartiality, and thorough scrutiny\nof software development and verification activities.\n\nIndependence means that the review is performed by a person(s) other than the\ndeveloper of the software life cycle data being reviewed. A tool may be used\nto achieve equivalence to the human verification activity. (DO178-C Section\n6.2-e).\n\n16 out of 31 for software level A (7 out of 31 for level B, none for level C\nor D) of review objectives need to be satisfied with independence.\n\nWhile independence in reviews is essential for achieving review objectives, it\ncan introduce various consequences on the effort required:\n\n  * Additional resources in terms of personnel\n\n  * Scheduling challenges to coordinate independent reviews with people who have availability and expertise\n\n  * Maintaining documentation and traceability records for independent reviews adds to the overall overhead\n\n## Availability of Review Records\n\nThe review records are evidence of compliance and may be requested by the\ncertification authority. Consequently, there is no obligation to export review\nrecords from the database to create a deliverable document as long as the data\nand database itself remain available for audit if needed.\n\n## The Form of Documentation\n\nThe form of documentation can significantly influence the efficiency of\nreviews and analyses in compliance with DO-178C/ED-12C.\n\nWell-structured documentation facilitates efficient reviews and ensures that\nreviewers can adequately assess compliance with requirements.\n\n\u201cIf documentation is produced with care, it will be useful for a long time.\nConversely, if it is going to be extensively used, it is worth doing right.\u201d,\nA Rational Design Process: How and Why to Fake It, Parnas, Clements, 1986\n\nDO-178C/ED-12C focuses mainly on content, and not on layout and appearance.\nThat\u2019s why the documentation can take various forms and structures (i.e. a\ndatabase).\n\nTo optimize the review\u2019s effort, you should manage an adequate level of detail\nby applying the \u201cless-is-more\u201d rule, limiting details to only those that are\nessential, and making sure that reviewers quickly see the big picture.\n\nLast but not least, to make it possible to automate a software requirements\nreview, you have to define the rules for writing requirements so that they are\nexpressed in a format that can be processed by a Natural Language Processing\n(NLP) tool.\n\n## The Software Component definition\n\nThe particular DO-178C/ED-12C review and analysis objectives related to\nsoftware architecture and its projection into source code are as follows:\n\n  * \u00a76.3.3 b). This review objective is to verify the relationship, via data flow and control flow, between the components of the software architecture.\n\n  * \u00a76.3.4 b) This objective is to ensure that the Source Code matches the data flow and control flow defined in the software architecture.\n\nThe related workload could vary greatly depending on the definition of the\ncomponent and whether or not a tool is used to define/verify data flow and\ncontrol flow.\n\nIn DO-178C/ED-12C, components can vary in size and complexity, ranging from\nindividual software modules or functions to larger software units such as\nsubsystems or entire applications. Here are some properties based on\nDO-178C/ED-12C and DO-248C/ED-94C:\n\n  * A software component is assigned a software level (DO-178C/ED-12C section 2.3). This means that a software component may be visible from a system perspective.\n\n  * A software product (software intended for use in airborne applications) can be composed of several components. (DO-178C/ED-12C section 3.2)\n\n  * Interfaces between software components, in the form of data flow and control flow, should be defined to be consistent between the components. (DO-178C/ED-12C section 5.2.2 d.)\n\n  * If the interface is related to a component of a lower software level, it should also be confirmed that the higher software level component has appropriate protection mechanisms in place to protect itself from potential erroneous inputs from the lower software level component. (DO-178C/ED-12C section 6.3.3 b.)\n\n  * A software component can be a subprogram (DO-248/ED-94C FAQ #67)\n\nSo organizations should be able to choose the scope of the software component\nthat best suits their software development strategies.\n\n## Resource and Time Constraints\n\nAlthough project management considerations are out of the scope of\nDO-178C/ED-12C, limited resources, including time and people, can constrain\nthe scope and depth of reviews. Organizations must allocate resources\neffectively to prioritize critical review activities and ensure that reviews\nare conducted in a timely manner without compromising quality. These\nconstraints explain why we often find proofreading comments with the\nproperties \u201cStatus\u201d, \u201cCategory\u201d or \u201cSeverity\u201d. There is another reason why\ncategorizing proofreading comments is useful: the management of open problem\nreports as per AC 20-189 \u201cManagement of Open Problem Reports (OPRs)\u201d, an\nadvisory circular (AC) developed in coordination with EASA and FAA.\n\n# What\u2019s Next?\n\nIn this post, we emphasized the constraints emerging from DO-178C/ED-12C\nreviews and analysis objectives and established a baseline to write a\nspecification to describe a minimal viable review framework to comply with\nDO-178C/ED-12C.\n\nIn the next post, we will show how to define a minimal viable review framework\nto both comply with DO-178C and be as efficient as possible.\n\nPosted in #Certification #DO-178C #ED-12C\n\n### About Olivier App\u00e9r\u00e9\n\nOlivier is a Certification Engineer and joined AdaCore in 2022.\n\nHe has over two decades of dedicated experience in the field of aviation\nsoftware certification and has a deep expertise in DO-178 software safety\ncertification standards.\n\nAt AdaCore, he works on GNAT run-time libraries suitable for certifiable\napplications.\n\n### About Josue Bello\n\nJosu\u00e9 has been a part of AdaCore\u2019s certification team since 2022. He has\nexperience in working in certification for the aviation industry for software,\nhardware, and flight management and guidance functions. At AdaCore, he\ncurrently works on tool qualification and supports the run-time certification\nactivities.\n\n13 Shares\n\n## AdaCore provides tools and expertise for safe, secure, and high-reliability\nsoftware development.\n\nHome Products Developers Training Customers Ada Answers Academia Support\n\nlinkedin twitter github rss\n\nCopyright \u00a9 2024 AdaCore. All Rights Reserved Legal | Cookie Policy | Privacy Policy | Code of Conduct\n\nBy clicking \u201cAccept All Cookies\u201d, you agree to the storing of cookies on your\ndevice to enhance site navigation, analyze site usage, and assist in our\nmarketing efforts.\n\n## Privacy Preference Center\n\nWhen you visit any website, it may store or retrieve information on your\nbrowser, mostly in the form of cookies. This information might be about you,\nyour preferences or your device and is mostly used to make the site work as\nyou expect it to. The information does not usually directly identify you, but\nit can give you a more personalized web experience. Because we respect your\nright to privacy, you can choose not to allow some types of cookies. Click on\nthe different category headings to find out more and change our default\nsettings. However, blocking some types of cookies may impact your experience\nof the site and the services we are able to offer. More information\n\n### Manage Consent Preferences\n\n#### Strictly Necessary Cookies\n\nAlways Active\n\nThese cookies are necessary for the website to function and cannot be switched\noff in our systems. They are usually only set in response to actions made by\nyou which amount to a request for services, such as setting your privacy\npreferences, logging in or filling in forms. You can set your browser to block\nor alert you about these cookies, but some parts of the site will not then\nwork. These cookies do not store any personally identifiable information.\n\n#### Performance Cookies\n\nThese cookies allow us to count visits and traffic sources so we can measure\nand improve the performance of our site. They help us to know which pages are\nthe most and least popular and see how visitors move around the site. All\ninformation these cookies collect is aggregated and therefore anonymous. If\nyou do not allow these cookies we will not know when you have visited our\nsite, and will not be able to monitor its performance.\n\n#### Targeting Cookies\n\nThese cookies may be set through our site by our advertising partners. They\nmay be used by those companies to build a profile of your interests and show\nyou relevant adverts on other sites. They do not store directly personal\ninformation, but are based on uniquely identifying your browser and internet\ndevice. If you do not allow these cookies, you will experience less targeted\nadvertising.\n\n#### Social Media Cookies\n\nThese cookies are set by a range of social media services that we have added\nto the site to enable you to share our content with your friends and networks.\nThey are capable of tracking your browser across other sites and building up a\nprofile of your interests. This may impact the content and messages you see on\nother websites you visit. If you do not allow these cookies you may not be\nable to use or see these sharing tools.\n\n### Cookie List\n\nlabel\n\nConsent Leg.Interest\n\nlabel\n\nlabel\n\nlabel\n\n", "frontpage": false}
