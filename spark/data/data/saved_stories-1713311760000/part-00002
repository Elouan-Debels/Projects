{"aid": "40055059", "title": "To C or Not to C", "url": "https://blogsystem5.substack.com/p/to-c-or-not-to-c", "domain": "blogsystem5.substack.com", "votes": 1, "user": "goranmoomin", "posted_at": "2024-04-16 17:54:29", "comments": 0, "source_title": "To C or not to C", "source_text": "To C or not to C - by Julio Merino - Blog System/5\n\n# Blog System/5\n\nShare this post\n\n#### To C or not to C\n\nblogsystem5.substack.com\n\n#### Discover more from Blog System/5\n\nA newsletter on operating systems, build systems, programming languages,\nsoftware engineering, and my own software projects. Specifics include FreeBSD,\nLinux, Rust, Bazel and EndBASIC.\n\nContinue reading\n\nSign in\n\n# To C or not to C\n\n### That's the dilemma at Twitter over the weekend\n\nJulio Merino\n\nFeb 21, 2024\n\n7\n\nShare this post\n\n#### To C or not to C\n\nblogsystem5.substack.com\n\n1\n\nShare\n\nOver the last few days, there has been this... debate over at Twitter sparked\nby a claim that you cannot be a good programmer without knowing C. You\nobviously can be one, but there is some nuance in what \u201cknowing\u201d C is truly\nabout. Here is my take on the matter.\n\nLet me repeat this first: of course you can be a perfectly good programmer\nwithout knowing C. Knowing a language doesn\u2019t make or break a programmer, and\nthere are great programmers out there that don\u2019t touch C. However, knowing C\nsays something about your journey.\n\nIf you know C well, it means you\u2019ve dealt with pointers and managed memory by\nhand. It probably also means you know the difference between system calls and\nlibrary calls. And it might also mean that you know about FFI. Let\u2019s look at\nthis trinity and why these are important.\n\n\ud83e\udde0 First, memory. When learning C, you must deal with pointers, malloc, and\nfree, and you must learn how these are put to use. You also may learn how to\ndebug a segfault and probably use tools like Valgrind to find memory errors.\n\nNone of this is trivial. Saying that \u201ca pointer is just a memory address;\nwhat\u2019s difficult in that!?\u201d misses the point (get it?). Knowing what a thing\nis is really different from knowing how to use that thing. I covered something\nsimilar back in my post about Rust\u2019s Into trait.\n\nBut more importantly, pointers and memory management are not a \u201cC thing\u201d.\nThese concepts show up in pretty much any language. For example, both Java and\nPython differentiate primitive types from objects... and, guess what, object\nreferences are essentially pointers.\n\nWithout knowing pointers, it\u2019s hard to reason about pass-by-value vs. pass-by-\nreference semantics. Without knowing memory management, you can\u2019t easily tell\nwhether your code makes a reasonable use of memory.\n\n\ud83d\udce3 Second, system calls vs. library functions. For example, how do read and\nfread differ? They are not the same thing and using them interchangeably can\nlead to performance problems. Reading bytes one by one with read is very\ninefficient but isn\u2019t with fread.\n\nWhen learning C, you often have to read manpages because they are the primary\nsource of documentation for the C APIs. In doing so, you probably have noticed\nthat certain manpages are in section 2 (system calls) and others are in\nsection 3 (library functions).\n\nEvery language must issue system calls but not all languages expose them as\nclearly as C does. The distinction exists in higher level but it is more\nsubtle. If you aren\u2019t careful, you can introduce performance problems like the\none in my post on deleting directory hierarchies.\n\n\u2699\ufe0f Third, the Foreign Function Interface (FFI). Almost every language in your\nsystem has to end up calling into the C library to execute system calls. If\nyou have learned C, you have probably also learned about stack frames and how\na binary (ELF or whatnot) is put together.\n\nThis knowledge is useful because, as I said, every language\u2014except for the\nstubborn Go\u2014has to talk to C for certain operations. And this interface isn\u2019t\nalways zero cost. Knowing the costs helps write more efficient code.\n\n\ud83d\udca1 So there they are. The three major topics that you are likely familiar with\njust by knowing C well. Of course you can be a good programmer without knowing\nthese topics deeply, but being familiar with these will help you engineer\nbetter systems.\n\nParaphrasing Joel Spolksy\u2019s article titled \u201cThe perils of JavaSchools\u201d from\n2005: there are only two types of programmers: those that know pointers (and\nrecursion), and those that don\u2019t.\n\nThis aligns with my experience after interviewing 100+ candidates: there is a\nstark contrast between those that don\u2019t known anything about memory management\nand those that do. I couldn\u2019t care less about what language you choose, but I\nwant to see if you know how things work.\n\nBecause, remember: these three topics have nothing to do with C per se: they\nare concepts that apply to almost any language. For example, you also deal\nwith memory in Rust via Box, but a Box is more opaque than explicit malloc and\nfree calls.\n\nSo: don\u2019t be worried if you don\u2019t know C, but also don\u2019t be afraid to learn\nit! Just, please, don\u2019t use it to start any new project. Keep C to yourself as\na learning exercise, or leverage it as a tool to deal with legacy codebases.\n\nThis was originally published as a Twitter thread because that\u2019s the context\nin which the discussion took place.\n\nBlog System/5 is a reader-supported publication. To receive new posts and\nsupport my work, consider becoming a subscriber or follow me on Twitter at\n@jmmv.\n\n7 Likes\n\n\u00b7\n\n2 Restacks\n\n7\n\nShare this post\n\n#### To C or not to C\n\nblogsystem5.substack.com\n\n1\n\nShare\n\n1 Comment\n\nViswa KumarTechno AdventureApr 15I spent 8 years in C . I can greatly resonate\nwith this post.Expand full commentLikeReplyShare  \n---  \n  \nThe IDEs we had 30 years ago... and we lost\n\nA deep dive into the text mode editors we had and how they compare to today's\n\nDec 25, 2023 \u2022\n\nJulio Merino\n\n44\n\nShare this post\n\n#### The IDEs we had 30 years ago... and we lost\n\nblogsystem5.substack.com\n\n63\n\nFrom 0 to 1 MB in DOS\n\nA tour on how DOS was able to use most of the 1 MB address space of the 8086\n\nJan 17 \u2022\n\nJulio Merino\n\n15\n\nShare this post\n\n#### From 0 to 1 MB in DOS\n\nblogsystem5.substack.com\n\n18\n\nHard disk LEDs and noisy machines\n\nThe little annoyances that alerted us developers of performance problems\n\nDec 15, 2023 \u2022\n\nJulio Merino\n\n8\n\nShare this post\n\n#### Hard disk LEDs and noisy machines\n\nblogsystem5.substack.com\n\n3\n\nReady for more?\n\n\u00a9 2024 Julio Merino\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
