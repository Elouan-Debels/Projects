{"aid": "40039930", "title": "A Billion open-source Downloads", "url": "https://1billion.spatie.be", "domain": "1billion.spatie.be", "votes": 1, "user": "freekmurze", "posted_at": "2024-04-15 12:53:04", "comments": 0, "source_title": "Story of a billion downloads | Spatie - 1 Billion", "source_text": "Story of a billion downloads | Spatie - 1 Billion\n\nStory\n\nGame\n\nSpatie.be\n\n1,001,872,909 Package\n\n# The story of a billion downloads\n\nThe open-source journey of Spatie\n\nOur story\n\nPlay & win\n\nCurrently, we have around 300 open-source repositories on GitHub. Our packages\nhave been downloaded a staggering 1,001,872,909 times. That's almost 45\nmillion downloads each month!\n\nPutting our modesty aside for a minute, this is quite an achievement for a\nsmall team; we're only 10 people at the moment.\n\nThis all did not happen overnight. Read on to learn the story behind our open-\nsource efforts.\n\n## Chapters\n\n  1. Hello Laravel\n  2. Why packages?\n  3. Maintaining open-source\n  4. Why use Spatie packages\n  5. Favorite packages of our team\n\n## Hello Laravel\n\nUp until 2013, all Spatie projects were made using a custom-built CMS that was\npowered by Zend Framework 1. In 2013, we transitioned to Laravel, which was at\nversion 4.0 at the time. We were immediately impressed by the expressive\nsyntax and the big focus on developer happiness of Laravel.\n\nAt that time, a lesser-known guy named Jeffrey Way started his next project,\nLaracasts: a video tutorial site dedicated to Laravel. We realized that his\nvideos could greatly accelerate our learning process and immediately bought a\nlifetime subscription.\n\nOn March 4, 2014, Jeffrey published a video titled \"Continuous Integration\nWith Travis.\" Travis and its integration with GitHub looked so cool that we\nwanted to use it.\n\nA few months before he made the Travis video, Jeffrey created a mini-series on\npackage development that contained all the information you need to get started\ncreating your own package.\n\n## Making the switch\n\nAt the time we were working on a project that needed to automatically create\nscreenshots of a website. With the things we learned on Laracasts, we started\nto work on our first package: Browsershot. This package was essentially just a\nsimple wrapper around PhantomJS (the current version uses Headless Chrome and\nPuppeteer).\n\nIt was pretty exciting working in the open. We were thrilled every time the\ndownload counter got up and were incredibly happy that other people started\nwriting about it.\n\nDid you know?\n\nOur first package, browsershot, is currently on its 4th version and has been\ndownloaded more than 13 million times since its release!\n\nBack when we used Zend Framework, we used a custom-built application template,\ncalled Blender, to kickstart all our client projects. Think of it as a very\nbasic CMS. Besides traditional CMS features, Blender could do a lot of cool\nthings: pull in data from Analytics to show graphs about the usage of the\nsite; handle uploaded files; subscribe users to a MailChimp list and more.\n\nTo power new projects, we needed a Laravel version of our CMS and started\ncreating it from scratch.\n\nWe soon realized that some of the things we were porting to Laravel could also\nbe useful to other developers and decided to build these functionalities in\npackages.\n\nIn quick succession packages like laravel-newsletter, laravel-medialibrary and\nlaravel-analytics were created, each of them still being supported and\nregularly updated.\n\nCurrently, every new package that we create gets born inside a client project.\nIn almost every project we find some functionality that can be extracted to\nits own package.\n\n## Why packages?\n\nThere are many benefits of creating packages that make time working on open-\nsource code well spent.\n\nA lot can be learned while creating a package. Each package needs to be\ncarefully crafted. It provides clear and understandable syntax. Like Laravel,\nwe want all our packages to put a great emphasis on developer happiness. They\nshould be easy to use. They should have great documentation. They should have\nclear tests. Thinking about how other people will use your code will make you\na better developer.\n\n## Improving our work\n\nThe issues reported and the PRs submitted by the users of our packages\nprovided another chance for learning. People can point to mistakes that are in\nour packages and can propose interesting new features that we didn't think\nabout.\n\nOf course, we're also dogfooding ourselves. Our packages get used on most\nprojects. If we discover a bug in a package used in a project we can very\nquickly fix that and distribute that fix through the power of Composer to our\nother projects.\n\nThere are also commercial benefits. In recent years, we've landed some cool\nprojects thanks to our open-source work. This shifted our focus to working for\ninternational companies, including some well-known ones. These new clients\noften already use our products and packages.\n\nWhile our main aim with open-source efforts isn't to attract clients, it's\ncertainly a pleasant bonus.\n\nDid you know?\n\nThe number of downloads of our packages is constantly growing. We reached 10\nmillion in 2017 and 100 million by 2021.\n\n## Maintaining open-source\n\nWhen we meet people at conferences, we often get asked how it is possible for\na small company like us, only 10 people big, to create and maintain so many\nopen-source packages.\n\nThe simple truth is that it does take up a lot of time. Creating the code for\nthe package itself, writing tests, writing documentation and publicizing\ndistribution all require quite a bit of attention.\n\nWhen the first stable release of a package gets tagged the work is not over.\nMaintaining a package, responding to issues and reviewing PRs takes a lot of\ntime (and dedication) too.\n\nDid you know?\n\nOver the years, we responded to more than 12,000 issues and reviewed 18,000\nPRs.\n\nMost of our packages are created while working on client projects. If we see\nsomething that can be made into a package, we do it. Because we've done it so\nmany times, we're pretty quick at it, too.\n\n## Making time\n\nA big way for us to keep our open-source work manageable is the way plan our\nweek. Each week, we plan for only four days ahead, leaving one day flexible.\nThis day isn't fixed; its time is spread out across the week.\n\nOn this fifth day, everyone in our company can work on open-source projects or\ntheir own tasks. Though one day might not seem like much, when done\nconsistently each week for many years, it adds up to a significant amount of\ntime. We've been following this approach for open-source work for around a\ndecade now.\n\n## Experience and accountability\n\nEvery package has a primary author, the person who initially wrote it.\n\nAlthough packages are reviewed by other team members and everyone helps each\nother, it is the primary author who does most of the maintenance work. At\nSpatie, we are fortunate that staff turnover is very low and most of the\npeople who wrote a package are still with our company.\n\nWhen we create a package, we always make sure we have a test package for it as\nwell. That way we know that our code is stable. We also know that good\ndocumentation is essential, so we dedicate time to this as well.\n\nBecause we provide testing and good documentation, the first release of a\npackage is often already very stable and does not need much maintenance after\nthat.\n\nDid you know?\n\nOur most popular package that we never use ourselves is laravel-permissions, a\ngreat way to manage user rights and roles in a database. :-)\n\n## Keeping it maintainable\n\nEven after a package is released, we aim to keep the scope small. The key to\nkeeping everything maintainable is to say no to PRs by default. We accept PRs\nthat are either very simple or add features that we see ourselves using.\n\nWe enable Discussions on Github for most of our packages. This is a great way\nfor people to ask questions and request features. We also often engage in\nthese. The issue tracker is used to track work that we would like to do on a\npackage. We try to keep that issue list small.\n\nIn summary, the big secret to creating and maintaining so many packages is\nconsistency. By having everyone in our company working on open-source\nregularly, we get a lot of work done.\n\n## Why use Spatie packages\n\nAdding a package to your composer.json should not be done lightly. You need to\nbe sure that a package works correctly, can be used easily and that it will be\nmaintained well over time.\n\nEvery Spatie package adheres to a list of rules we have set for ourselves,\nensuring that when you use a Spatie package, you always have a great\nexperience.\n\n  1. We have put a lot of effort into making our package as user-friendly as possible. Every method should have a function. Ultimately, a package should be fun to use.\n  2. We invest time in creating excellent documentation for each of our packages. This makes it easy to discover what a package does and what all the features are.\n  3. All our packages have an extensive test suite. This provides you (and us) with proof that the package code behaves correctly and works under all conditions.\n  4. In our opinion, code readability is very important. We structure and write our code in such a way that others can easily understand what is going on. Names of variables, functions and classes are chosen with care. You should be able to understand how the package works just by reading the code.\n  5. We know we can\u2019t imagine every scenario our code will be used in. That\u2019s why we make our packages as customizable and extensible as possible. We don\u2019t use the final keyword, and make everything protected by default instead of private. Our code is structured in small functions and classes that can be overwritten or extended. We see our users as responsible programmers who can be trusted with sharp knives.\n  6. When creating a package we intentionally keep the scope small. In most cases, packages are created to be consumed in our projects. We would rather have a small package with one very polished feature, than a large package that tries to cover all possible edge cases and variations of a problem.\n  7. Most of our packages are maintained for a very long time. When a new PHP or Laravel version comes out, our team spends time to make sure the test suite is running correctly and that a new package version is tagged. Usually, all of our Laravel packages are compatible with the major releases of the Laravel framework within a few days.\n\n## Favorite packages of our team\n\nWe asked our team members a simple question: what is your favorite Spatie\npackage that you have used or worked on, and why?\n\nNiels\n\nTypescript Transformer\n\nAt Spatie, we are a fan of Inertia. This package truly shines when we need to\ndefine types for both PHP and TypeScript, and keep them in sync. By parsing\nPHP files and transforming them into TypeScript type declarations, we save\ntime and mental effort but also streamline the refactoring process.\n\nRuben\n\nLaravel Sluggable\n\nIt was the first Spatie package I've ever added to one of my composer.json\nfiles. At that time, I wasn't working for Spatie yet, but I loved the idea of\nsuch a simple package. It has only one use case: take the field of an Eloquent\nmodel and make a slug from it so that the model can be queried with that slug.\nThe docs are excellent, and the API is easy to use. It is the perfect example\nof a terrific Spatie package. And it, in the end, made me start working at\nSpatie.\n\nTim\n\nLaravel Horizon Watcher\n\nFor saving me from the dozen times I wondered 'Why is my change not\nreflecting?'' when I first started to work with queues.\n\nAlex\n\nLaravel Blade X\n\nDespite being abandoned, the Blade X package now lives on in Laravel. It added\ncustom HTML components to Laravel before Blade components were natively\nsupported. Hacked together on a Friday afternoon when both project managers\nwere MIA, this package started with an friendly discussion over lunch and\nended with the entire Spatie team ditching 'real work' (who needs that,\nright?) to tinker with this gem. I love how an impulsive \"there's nothing\nstopping us from doing this weird thing\"-idea ended up with 180.000 downloads\nthanks to a fun afternoon with the team.\n\nSeb\n\nPHPUnit Snapshot Assertions\n\nI love playing with off-beat ways to make tests more readable and joyful to\nwrite. Snapshot testing was popularized by Jest to test UI components. I\nthought it would be a great fit for testing large data, so I wrote a PHPUnit\npackage to bring it to PHP.\n\nRias\n\nSimple Excel\n\nThe name says it all, it makes exporting and importing Excel & CSV files\nsimple. Every project needs some kind of importing or exporting, this package\njust makes it a breeze.\n\nFreek\n\nLaravel Media Library\n\nAt Spatie, we use Media Library in every single project. I still remember I\nwas still learning some basics of Laravel when coding up the first version of\nthe media library. For the media conversions, queues are used, and this was\nthe very first time I used queuing which felt very empowering. Currently, the\npackage is already at v11, which is a nice indication of how much we\ninteracted on this package, it's well polished now.\n\n", "frontpage": false}
