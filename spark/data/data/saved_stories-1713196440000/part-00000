{"aid": "40038479", "title": "APFS: Special File Types", "url": "https://eclecticlight.co/2024/04/15/apfs-special-file-types/", "domain": "eclecticlight.co", "votes": 1, "user": "frizlab", "posted_at": "2024-04-15 09:53:05", "comments": 0, "source_title": "APFS", "source_text": "APFS: Special file types \u2013 The Eclectic Light Company\n\nSkip to content\n\n# The Eclectic Light Company\n\nMacs, painting, and more\n\nhoakley April 15, 2024 Macs, Technology\n\n# APFS: Special file types\n\nCompared to its predecessor HFS+, APFS brings several new types of file and\nlink. This article gathers together brief summaries of those we currently know\nabout, even though accounts in the APFS Reference may be cursory or omitted\naltogether.\n\n#### Clone files\n\nI have already given an account of how clone files are used in APFS. Instead\nof making an ordinary copy of a file with each of its components duplicated,\nwhenever possible APFS will instead make a copy of the inode and its\nattributes, together with file extent information, as a clone of the original.\n\nThis can be verified by demonstrating that their inode numbers are different,\nas is information in the attributes such as the file\u2019s name. There\u2019s a flag in\nthe file\u2019s attributes to indicate that cloning has taken place, but working\nout their current degree of overlap requires comparison of their extents, and\nisn\u2019t available outside the file system.\n\n#### Dataless files\n\nThese have been introduced more recently to support non-replicating\nFileProviders, including iCloud Drive. When the local copy of a file also\nstored remotely in the cloud is evicted, its data is removed from local\nstorage, rendering it dataless.\n\nWhen that file is to be used locally again, its data has to be downloaded from\nthe cloud service, and the local dataless file is materialised by adding its\ndata back. Because that local file never lost its metadata, those remain\nintact, as should any locally stored versions. Although the APFS Reference\ndetails flags for dataless snapshots, it doesn\u2019t contain any information about\ndataless files, which do have a flag to mark that state in their attributes,\nas explained here.\n\n#### Sparse files\n\nIn common with many other modern file systems, APFS provides a special format\nfor files consisting of substantial quantities of null data, sparse files. The\nAPFS Reference provides no information about their format or handling, though,\nonly details of flags used to distinguish them.\n\nSparse files aren\u2019t created by a process writing large amounts of zeroed data,\nbut require specific operations using a FileHandle. These might start with\nopening the FileHandle for writing, then writing blocks of non-null data and\nmoving the write pointer through the null data using seek(). An example is\nshown in the code below.\n\nFileHandles can\u2019t be used to create a sparse file from an existing file that\nalready has blank data stored on disk.\n\nOne notable disadvantage of sparse files is their propensity to explode to\nfull size when copied to another file system such as HFS+. As transparent\nconversion to the sparse file formats of other file systems isn\u2019t available,\nthere\u2019s currently no way avoid that.\n\n#### Trimmed disk images as sparse files\n\nmacOS Monterey brought together sparse files, UDRW read-write disk images, and\nAPFS trimming in a powerful combination that results in high-efficiency\nstorage of disk images that were previously of fixed size.\n\nWhen a UDRW disk image is first created, it\u2019s written as a single file of the\nsize set by the user. When that disk image is mounted for a second time, it\u2019s\ntransformed into a sparse file, with all its unused blocks trimmed on mounting\nand converted to skipped space. This doesn\u2019t happen during its initial mount,\nbecause trimming is only triggered automatically when its file system is\nmounted. This isn\u2019t described in the otherwise detailed account given in man\nhdiutil.\n\nEvidence for this appears in the mount sequence in the log, which begins with\nits preliminaries (times given in decimal seconds from an arbitrary start):\n2.015645 dev_init:299: disk6 device_handle block size 4096 block count 1169499\nfeatures 16 external 2.015826 nx_mount:1224: disk6 initializing cache\nw/hash_size 8192 and cache size 32768 2.023228\nnx_checkpoint_find_valid_checkpoint:565: disk6 sanity checking all recently-\nchanged container state... please be patient. 2.023567 nx_mount:1553: disk6\ncheckpoint search: largest xid 1, best xid 1 @ 1 2.023574 nx_mount:1580: disk6\nstable checkpoint indices: desc 0 data 0\n\nThat\u2019s followed by Spaceman, the APFS Space Manager, scanning for free blocks,\nand trimming them: 2.023580 spaceman_metazone_init:110: disk6 no metazone for\ndevice 0, of size 4790267904 bytes, block_size 4096 2.023783\nspaceman_scan_free_blocks:3311: disk6 scan took 0.000179 s (no trims) 2.023813\napfs_newfs:30416: disk6s1 FS will NOT be encrypted. 2.024045\nspaceman_scan_free_blocks:3293: disk6 scan took 0.000256 s, trims took\n0.000035 s 2.024048 spaceman_scan_free_blocks:3295: disk6 1164953 blocks free\nin 1 extents 2.024050 spaceman_scan_free_blocks:3303: disk6 1164953 blocks\ntrimmed in 1 extents (35 us/trim, 28571 trims/s) 2.024052\nspaceman_scan_free_blocks:3306: disk6 trim distribution 1:0 2+:0 4+:0 16+:0\n64+:0 256+:1\n\nThis feature is limited to disk images containing APFS and HFS+ file systems,\nas they have trim support, unlike FAT or ExFAT. That in itself can appear\nconfusing, because HFS+ as a file system doesn\u2019t support sparse images,\nalthough here a disk image containing an HFS+ file system enjoys the same\npreferential treatment, and is converted into a sparse file when hosted on\nAPFS.\n\nFurther economy in the use of disk space can be seen when such sparse disk\nimages are cloned, for example in cloning a macOS virtual machine hosted on\nAPFS.\n\n#### Symbolic links\n\nSymlinks are special files in APFS, and the volume superblock maintains a\ntotal number of symlinks on that volume. Rather than consisting simply of text\ndata, they contain at least one extended attribute named com.apple.fs.symlink\ncontaining the path in the link. That extended attribute is marked as being\nowned by the file system, although that doesn\u2019t affect the symlink\u2019s\npermissions.\n\n#### Firmlinks\n\nThese were introduced with macOS 10.15 Catalina to form bidirectional links\nbetween locations in the System and Data volumes in a boot volume group. These\nare apparently marked with another extended attribute named\ncom.apple.fs.firmlink. Apple doesn\u2019t provide any further details.\n\nSystem firmlinks appear to be required to be created early in the life of a\nvolume, and can\u2019t apparently be repaired or recreated later. This caused\nproblems for many using Big Sur, for instance, who ended up with orphaned Data\nvolumes that had lost their firmlinks to their paired System volume. There are\ncurrently no user tools for working with system firmlinks, nor any method for\nrepairing or recreating them once both volumes have been created.\n\nSince their introduction, the list of system firmlinks given in\n/usr/share/firmlinks has remained the same: /Applications <-> Applications\n/Library <-> Library /System/Library/Caches <-> System/Library/Caches\n/System/Library/Assets <-> System/Library/Assets\n/System/Library/PreinstalledAssets <-> System/Library/PreinstalledAssets\n/System/Library/AssetsV2 <-> System/Library/AssetsV2\n/System/Library/PreinstalledAssetsV2 <-> System/Library/PreinstalledAssetsV2\n/System/Library/CoreServices/CoreTypes.bundle/Contents/Library <->\nSystem/Library/CoreServices/CoreTypes.bundle/Contents/Library\n/System/Library/Speech <-> System/Library/Speech /Users <-> Users /Volumes <->\nVolumes /cores <-> cores /opt <-> opt /private <-> private /usr/local <->\nusr/local /usr/libexec/cups <-> usr/libexec/cups /usr/share/snmp <->\nusr/share/snmp /AppleInternal <-> AppleInternal (on Apple engineering systems\nonly) in each case shown as the system volume path and the Data volume path\nthat are firmlinked.\n\nUsers can create synthetic firmlinks, which appear at root volume level and\nlink to folders or symbolic links on the Data volume. These are stored in an\n/etc/synthetic.conf file, and are documented in man synthetic.conf. Rich\nTrouton has published an excellent tutorial on how to do this. Users who\npreviously had their own custom folders at the root level of the boot volume\ncan use this to create the same effect in Catalina and later.\n\n#### Accounting for space\n\nIt appears that the primary motivation for space-saving file formats in clone\nand sparse files isn\u2019t to return more free space for the user, but to minimise\non the amount of data that has to be written to an SSD to store each file, so\nextending its working life. This also improves performance: cloning a 100 GB\nfile takes but an instant, whereas copying 100 GB of data from one file to\nanother on the same volume requires an appreciable amount of time.\n\nAccounting for the space taken up by sparse and clone files becomes\ncomplicated and may appear misleading:\n\n  * for individual sparse files, the actual (reduced) space taken on disk is given;\n  * for individual clone files, the original (unreduced) space taken on disk is given;\n  * for sparse and clone files within a volume, the actual (fully reduced) total space taken is given;\n  * for sparse and clone files within a volume, the decision as to whether it\u2019s possible to copy another file to that volume can be made on either reduced or unreduced space.\n\nTwo examples illustrate the inconsistencies that can result. These are given\nfor a single APFS volume in a container of 100 GB, with 100 GB available space\nin that volume initially:\n\n  * A single sparse file of 120 GB unreduced size, but only 50 KB actual space taken, can\u2019t be copied to that volume because there\u2019s insufficient space.\n  * Five or more clones of a 21 GB sparse file, occupying 2 GB of disk space for the original, can be made without error. At the end, total space used is reported as 2 GB, leaving 98 GB free space available.\n\nThus there are occasions when sparse and clone files do allow the user to make\nfull use of the disk space they save, and others when the user is blocked from\ndoing so. While these conflicting behaviours may arise in layers well above\nthe file system, they suggest that APFS may not provide consistent guidance.\n\n#### Articles in this series\n\n1\\. Files and clones 2. Directories and names 3. Containers and volumes 4.\nSnapshots 5. Encryption and sealing\n\n#### References\n\nApple\u2019s APFS Reference (PDF), last revised 22 June 2020.\n\n### Share this:\n\n  * Twitter\n  * Facebook\n  * Reddit\n  * Pinterest\n  * Email\n  * Print\n\nLike Loading...\n\n### Related\n\nAPFS: Files and clonesMarch 20, 2024In \"Macs\"\n\nHow can you tell whether a file has been \u2018cloned\u2019 in APFS?April 2, 2021In\n\"Macs\"\n\nAPFS hard links, symlinks, aliases and clone files: a summaryApril 28, 2023In\n\"Macs\"\n\nPosted in Macs, Technology and tagged APFS, clone, dataless file, disk image,\nfirmlink, sparse file, symlink, TRIM. Bookmark the permalink.\n\n## iThere are no comments\n\nAdd yours\n\n### Leave a comment Cancel reply\n\nThis site uses Akismet to reduce spam. Learn how your comment data is\nprocessed.\n\n# Quick Links\n\n  * Free Software Menu\n  * System Updates\n  * M-series Macs\n  * Mac Troubleshooting Summary\n  * Mac problem-solving\n  * Painting topics\n  * Painting\n  * Long Reads\n\n# Search\n\n# Monthly archives\n\n  * April 2024 (35)\n  * March 2024 (81)\n  * February 2024 (72)\n  * January 2024 (78)\n  * December 2023 (79)\n  * November 2023 (74)\n  * October 2023 (77)\n  * September 2023 (77)\n  * August 2023 (72)\n  * July 2023 (79)\n  * June 2023 (73)\n  * May 2023 (79)\n  * April 2023 (73)\n  * March 2023 (76)\n  * February 2023 (68)\n  * January 2023 (74)\n  * December 2022 (74)\n  * November 2022 (72)\n  * October 2022 (76)\n  * September 2022 (72)\n  * August 2022 (75)\n  * July 2022 (76)\n  * June 2022 (73)\n  * May 2022 (76)\n  * April 2022 (71)\n  * March 2022 (77)\n  * February 2022 (68)\n  * January 2022 (77)\n  * December 2021 (75)\n  * November 2021 (72)\n  * October 2021 (75)\n  * September 2021 (76)\n  * August 2021 (75)\n  * July 2021 (75)\n  * June 2021 (71)\n  * May 2021 (80)\n  * April 2021 (79)\n  * March 2021 (77)\n  * February 2021 (75)\n  * January 2021 (75)\n  * December 2020 (77)\n  * November 2020 (84)\n  * October 2020 (81)\n  * September 2020 (79)\n  * August 2020 (103)\n  * July 2020 (81)\n  * June 2020 (78)\n  * May 2020 (78)\n  * April 2020 (81)\n  * March 2020 (86)\n  * February 2020 (77)\n  * January 2020 (86)\n  * December 2019 (82)\n  * November 2019 (74)\n  * October 2019 (89)\n  * September 2019 (80)\n  * August 2019 (91)\n  * July 2019 (95)\n  * June 2019 (88)\n  * May 2019 (91)\n  * April 2019 (79)\n  * March 2019 (78)\n  * February 2019 (71)\n  * January 2019 (69)\n  * December 2018 (79)\n  * November 2018 (71)\n  * October 2018 (78)\n  * September 2018 (76)\n  * August 2018 (78)\n  * July 2018 (76)\n  * June 2018 (77)\n  * May 2018 (71)\n  * April 2018 (67)\n  * March 2018 (73)\n  * February 2018 (67)\n  * January 2018 (83)\n  * December 2017 (94)\n  * November 2017 (73)\n  * October 2017 (86)\n  * September 2017 (92)\n  * August 2017 (69)\n  * July 2017 (81)\n  * June 2017 (76)\n  * May 2017 (90)\n  * April 2017 (76)\n  * March 2017 (79)\n  * February 2017 (65)\n  * January 2017 (76)\n  * December 2016 (75)\n  * November 2016 (68)\n  * October 2016 (76)\n  * September 2016 (78)\n  * August 2016 (70)\n  * July 2016 (74)\n  * June 2016 (66)\n  * May 2016 (71)\n  * April 2016 (67)\n  * March 2016 (71)\n  * February 2016 (68)\n  * January 2016 (90)\n  * December 2015 (96)\n  * November 2015 (103)\n  * October 2015 (119)\n  * September 2015 (115)\n  * August 2015 (117)\n  * July 2015 (117)\n  * June 2015 (105)\n  * May 2015 (111)\n  * April 2015 (119)\n  * March 2015 (69)\n  * February 2015 (54)\n  * January 2015 (39)\n\n# Tags\n\nAPFS Apple Apple silicon backup Big Sur Blake bug Catalina Consolation Console\nCorinth diagnosis Disk Utility Dor\u00e9 El Capitan extended attributes Finder\nfirmware Gatekeeper G\u00e9r\u00f4me High Sierra history of painting iCloud\nImpressionism iOS landscape LockRattler log M1 Mac Mac history macOS macOS\n10.12 macOS 10.13 macOS 10.14 macOS 10.15 macOS 11 macOS 12 macOS 13 macOS 14\nmalware Mojave Monet Monterey Moreau MRT myth narrative OS X Ovid painting\nperformance Pissarro Poussin privacy realism Renoir riddle Rubens Sargent\nscripting security Sierra SilentKnight SSD Swift Time Machine Tintoretto\nTurner update upgrade Ventura xattr Xcode XProtect\n\n# Statistics\n\n  * 16,965,682 hits\n\nBlog at WordPress.com.\n\nBegin typing your search above and press return to search. Press Esc to\ncancel.\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * The Eclectic Light Company\n    * Already have a WordPress.com account? Log in now.\n\n  *     * The Eclectic Light Company\n    * Customize\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\nLoading Comments...\n\n%d\n\n", "frontpage": false}
