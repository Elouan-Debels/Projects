{"aid": "39994415", "title": "Super Fast Rails \u2013 A promise given is a debt", "url": "https://www.rorvswild.com/blog/2024/super-fast-rails-a-promise-given-is-a-debt", "domain": "rorvswild.com", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-10 18:55:16", "comments": 0, "source_title": "Super Fast Rails \u2013 A promise given is a debt", "source_text": "Super Fast Rails \u2013 A promise given is a debt - RorVsWild\n\n# Super Fast Rails \u2013 A promise given is a debt\n\n2024-04-10\n\nLast week's article, Super Fast Rails, received many funny reactions. But for\nsome people, that was too much.\n\n## The SuperFastRails joke\n\nBefore reading this one, you should read the previous article to understand\nfully.\n\nIf you don\u2019t have a few extra minutes, here is a summary: I was describing a\nnew revolutionary gem that could automatically optimize any Rails app. It\ncould create missing indexes, remove unused indexes, optimize SQL queries, and\nhandle dangerous migrations. All that without needing you to think about it.\n\nThat was of course an April fools\u2019 joke. It worked pretty well, possibly too\nwell:\n\n> Not going to consider you for a good long while until I get over the April\n> 1st post. Boomed me good\n>\n> A promise given is a debt. Now the joke is on you, my friend.\n\nSorry, that was quite a promise to optimize Rails apps automatically! I will\nprobably not keep it, but I\u2019ll try to be helpful for once. Luckily for me,\nexisting tools or gems already solve the listed optimizations. The only slight\ndifference is that they won\u2019t do that fully automatically. No more jokes; what\ndo we have?\n\n## Missing indexes\n\nPgHero is a mountable dashboard for any Rails app that provides a lot of\ninformation about PostgreSQL:\n\n  * Missing/unused indexes\n  * Live queries\n  * Slow queries\n  * Maintenance/vacuum\n  * Live connections\n  * Space usage per tables and indexes\n  * Tune settings\n\nIf your database is not PostgreSQL, you could use lol_dba. Since I mainly use\nPostgreSQL, I never had a chance to try it.\n\n## Unused indexes\n\nRails PG Extras gives a lot of details about indexes:\n\n  * Unused indexes\n  * Duplicated indexes\n  * Index cache hit ratio\n  * Null indexes\n\nIt\u2019s also helpful to improve the existing indexes. If the index includes null\nvalues, there is probably an improvement to do.\n\nPgHero is also able de detect unused indexes. I recommend installing both\ngems. The UI of PgHero is more intuitive, but Rails PG Extras provides more\nadvanced information.\n\nActive Record Doctor can detect unused indexes and more.\n\n## Optimizing SQL\n\nMost databases have the EXPLAIN statement, which shows the query plan. It\nshould be the first step to optimize any query. Thanks to the query plan, it\u2019s\npossible to understand why a query is slow.\n\nBy calling explain on a relation, ActiveRecord returns the query plan:\n\n    \n    \n    Article.text_search(\"test\").explain # Since Rails 7.1 it accepts options Article.text_search(\"test\").explain(:analyze)\n\nOr directly from a SQL prompt by prefixing the query with EXPLAIN. Adding the\nanalyze option EXPLAIN ANALYZE will improve the accuracy of the query plan on\nPostgreSQL.\n\nHowever, reading a query plan can be difficult. This one is straightforward:\n\n    \n    \n    EXPLAIN ANALYZE SELECT count(*) FROM \"articles\" WHERE (to_tsvector(body) @@ plainto_tsquery('simple', 'test')); QUERY PLAN ------------------------------------------------------------------------------------------------------------------ Aggregate (cost=3546.74..3546.76 rows=1 width=8) (actual time=6523.238..6523.239 rows=1 loops=1) -> Seq Scan on articles (cost=0.00..3546.62 rows=48 width=0) (actual time=3.214..6522.726 rows=1200 loops=1) Filter: (to_tsvector(body) @@ '''test'''::tsquery) Rows Removed by Filter: 8490 Planning Time: 0.210 ms Execution Time: 6523.299 ms (6 rows) Time: 6525.133 ms (00:06.525)\n\nIt tells that the sequential table is slow. But with a query plan viewer, it\u2019s\nmuch easier to see that an index is missing:\n\n## 1+N queries\n\n1+N queries can be detected while developing thanks to the Bullet gem. It\u2019s\ngreat because it gives feedback before deploying to production.\n\nThere is also Prosopite, which can do that.\n\n## Dangerous migrations\n\nStrong migrations detects dangerous migrations and suggest a safer\nalternative. It\u2019s like a safety net that reminds you how to properly create an\nindex or rename a column without locking the database. There is a similar gem\ncalled safe-pg-migrations.\n\nIf reliability is more important than shipping fast, it\u2019s essential to use it.\nHowever, if the database is small, the traffic is low, and you need to move\nfast, don\u2019t bother writing migrations without downtime.\n\n## Conclusion\n\nI hope this little list compensates a bit for the Super Fast Rails joke. We\nare lucky to have so many great tools to help us. Thanks to them, any Rails\napp can be easily prepared to avoid the most common bottlenecks and\noptimization mistakes. You can definitively make your Rails app Super FastTM.\n\nI may have missed to name other great gems. Do not hesitate to share them with\nthe community.\n\nblog Subscribe to RSS | Follow us on Twitter or Mastodon.\n\n## RorVsWild monitors your Ruby on Rails applications.\n\n  * \u2726 Requests\n  * \u2726 Background Jobs\n  * \u2726 Errors\n  * \u2726 Deployments\n  * \u2726 Servers\n\nTry for free\n\nMade in Geneva, Switzerland by BASE SECRETE. 100% independent. No trackers.\n\n", "frontpage": false}
