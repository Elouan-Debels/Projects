{"aid": "39991246", "title": "Custom Automation Framework Deep-Dive", "url": "https://www.sleuth.io/post/sleuth-custom-automations-deep-dive/", "domain": "sleuth.io", "votes": 4, "user": "schlurken", "posted_at": "2024-04-10 14:42:50", "comments": 0, "source_title": "Sleuth's Custom Automation Framework Deep-Dive Series", "source_text": "Sleuth's Custom Automation Framework Deep-Dive Series\n\nHome page\n\nHome page\n\nEngineering Improvement Runbook | Engineering Automations\n\nCarl Bergenhem\n\nApril 9th, 2024\n\n# Sleuth's Custom Automation Framework Deep-Dive Series\n\nTABLE OF CONTENTS\n\nSleuth's Custom Automation Framework Deep-Dive Series\n\n  * What is Sleuth\u2019s Custom Automation Framework?\n\n  * How Custom Sleuth Automations Work\n\n  * Two Ways to Use Custom Automations\n\n  * Path 1: Sleuth Custom Automations from Marketplace\n\n  * Path 2: Adding a\n\n  * Building Blocks of Sleuth\u2019s Custom Automation Framework\n\nTired of having to open up Jira or Linear just to move an issue from one\ncolumn to the next every time you merge a pull request? Are you struggling to\nmake sure that your team adheres to certain formatting when creating pull\nrequests? These are all painful situations that we are sure many of you have\nexperienced in the past, or are actively experiencing today.\n\nWith Sleuth\u2019s Custom Automation Framework the pain associated with these\nscenarios are a thing of the past! This is thanks to the framework's ability\nto completely automate manual work, set up guardrails and best practices for\nyour team, and send notifications along the way.\n\n## What is Sleuth\u2019s Custom Automation Framework?\n\nSleuth Automations are a feature of Sleuth meant to help teams and\norganization drive improvements across their software delivery workflow. This\nincludes automating manual work and reducing toil of individual contributors,\nsetting up guardrails and best practices for teams and projects, and keeping\nteams and their members continuously informed on the things that matter as\nsoftware gets pushed to various environments.\n\nThe power of Sleuth\u2019s Custom Automations Framework comes from the fact that it\nis service agnostic, so the same Sleuth Automation can work with GitHub,\nBitbucket, Gitlab, and Azure DevOps. Sleuth also connects to, and can automate\ninteractions with, various other tools including issue trackers like Jira or\nLinear, observability and incident management tools like DataDog and\nPagerDuty, and much more.\n\nSleuth Automations are all built upon Sleuth\u2019s Custom Automation Framework,\nwhich is a rich YAML-based rules engine. There is a long list of out-of-the-\nbox Sleuth Automations found within the Sleuth Automations Marketplace, but in\nsome scenarios there may be a need for a tailor-built Automation.\n\nIn the cases where something more bespoke needs to be created, developers can\nleverage the YAML-based rules framework to built a completely custom Sleuth\nAutomation.\n\n## How Custom Sleuth Automations Work\n\nAs mentioned above, any Sleuth Automation is built on a YAML-based rules\nengine. Within each Sleuth Automation is a rule, or set or rules, that reads\ninformation from a certain source (a pull request or an issue for example) and\ndoes a certain action (e.g. \u201cSend a message to a slack channel\u201d or \u201cadd a\ncomment to a pull request\u201d).\n\nHere\u2019s an example of YAML used to comment on an issue whenever a pull request\nis deployed to a particular environment:\n\n    \n    \n    rules:\n    \n    - tool_add_comment_on_issue:\n    \n    actions:\n    \n    - notify_mentioned_issues\n    \n    conditions:\n    \n    - environment='[[ Environment ]]'\n    \n    triggers: - deployed\n\nIn the above example, Sleuth waits for a particular trigger (which in this\ncase is when a deploy happens), ensures that a condition has been met (the\ntarget environment is a previously configured environment like production),\nand a certain action is done (add a comment on any related issue(s)).\n\n## Two Ways to Use Custom Automations\n\n### Path 1: Sleuth Custom Automations from Marketplace\n\nThe Sleuth Marketplace lists a specific category for \u201cCustom YAML\nAutomations\u201d, which provides a simple one-button install process for adding\nany custom automation. There\u2019s no need for additional configuration in any\nother tools and there is no source code contributions needed.\n\nA huge benefit of using the Marketplace Custom Automation is that any project\nor team in your Sleuth instance is able to install the same custom automation,\nmaking sharing the gains your team has made by implementing their tailored\nautomation is just as easy as installing any out-of-the-box Sleuth Automation\n(a single button click). There\u2019s no need to commit changes to your source code\nrepository or copy fragile code from one project to the next.\n\n### Path 2: Adding a rules.yml file to your repositories\n\nWhile most of what has been discussed so far uses the Sleuth application as\nthe way to install and manage Sleuth Automations, there is also the option to\nsave these rules in a single YAML file inside of any existing repository.\n\nThis can be done by adding all Sleuth Automations in a YAML file in a Sleuth-\nspecific folder, .sleuth/rules.yml. Rather than install separate automations,\nall of the desired automations will live in this single file. When Sleuth\ndetects this file it will keep all applicable automations in mind for the\nspecific repository only.\n\nSharing any Custom Sleuth Automation will have to be done by copying the\nappropriate YAML snippets to a .sleuth.rules.yml file in another repository.\n\n## Building Blocks of Sleuth\u2019s Custom Automation Framework\n\nAny Custom Sleuth Automation is built in a similar way, using a mix of\ntrigger, condition, filter, and action building blocks, all added together to\nautomate various things throughout your software delivery workflow.\n\nEach of these building blocks have a specific purpose when creating a Custom\nAutomation:\n\n  * trigger : The event that kicks off the rule of the Sleuth Automation. This an include a pull request getting merged, a deploy landing in an environment, or even a cron job that happens on regular intervals.\n  * condition : An expression that has to be true in order to execute the desired action. conditions can take advantage of joined expressions by using or and and.\n  * filter: An expression that helps filter a set of items like a set of pull requests or work in progress items (a specific thing in Sleuth). filters are optional.\n  * action: The \u201cthing\u201d that the specific rule is supposed to do like \u201cadd a comment to a pull request\u201d, \u201cnotify a slack channel/user\u201d, \u201cclose a pull request\u201d, and much much more. The heart of any Sleuth Automation.\n\nThere is a lot to unpack in each one of these. Luckily, below you can find a\nlink to a resources where we dive deeper into each of these building blocks.\nWalking through each part of this series will enable anyone to become a Custom\nAutomations master.\n\n  * Sleuth's Custom Automation Framework Deep-Dive: Triggers\n  * Sleuth's Custom Automation Framework Deep-Dive: Conditions\n  * Sleuth's Custom Automation Framework Deep-Dive Series: Filters\n  * Sleuth's Custom Automation Framework Deep-Dive Series: Actions\n\nSHARE\n\nFacebookTwitterLinkedInMail\n\nGET A SLEUTH DEMO\n\nReady to engineer your efficiency?\n\nGet a Sleuth Demo \u2197\n\nSHARE\n\nFacebookTwitterLinkedInMail\n\nRelated Content\n\nEngineering Automations\n\n### Sleuth's Custom Automation Framework Deep-Dive: Triggers\n\nEngineering Automations\n\n### Sleuth's Custom Automation Framework Deep-Dive: Conditions\n\nEngineering Automations\n\n### Sleuth's Custom Automation Framework Deep-Dive: Actions\n\nFacebookTwitterYouTubeLinkedIn\n\n\u00a9 Sleuth 2024\n\n", "frontpage": false}
