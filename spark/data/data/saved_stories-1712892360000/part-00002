{"aid": "40006981", "title": "Anatomy of Lisp by John Allen", "url": "https://dl.acm.org/doi/book/10.5555/542865", "domain": "acm.org", "votes": 1, "user": "pmcjones", "posted_at": "2024-04-11 21:24:31", "comments": 0, "source_title": "Anatomy of LISP: | Guide books | ACM Digital Library", "source_text": "Anatomy of LISP: | Guide books | ACM Digital Library\n\n## This website uses cookies\n\nWe occasionally run membership recruitment campaigns on social media channels\nand use cookies to track post-clicks. We also share information about your use\nof our site with our social media, advertising and analytics partners who may\ncombine it with other information that you\u2019ve provided to them or that they\u2019ve\ncollected from your use of their services. Use the check boxes below to choose\nthe types of cookies you consent to have stored on your device.\n\nUse necessary cookies only Allow all cookies Show details\n\nOK\n\nUse necessary cookies only Allow selected cookies Allow all cookies\n\nShow details\n\nCookie declaration [#IABV2SETTINGS#] About\n\nNecessary (7) Preferences (5) Statistics (16) Marketing (24) Unclassified (0)\n\nNecessary cookies help make a website usable by enabling basic functions like\npage navigation and access to secure areas of the website. The website cannot\nfunction properly without these cookies. These cookies do not gather\ninformation about you that could be used for marketing purposes and do not\nremember where you have been on the internet.\n\nName| Provider| Purpose| Expiry| Type  \n---|---|---|---|---  \n__jid| c.disquscdn.com| Used to add comments to the website and remember the\nuser's Disqus login credentials across websites that use said service.|\nSession| HTTP  \ndisqusauth| c.disquscdn.com| Registers whether the user is logged in. This\nallows the website owner to make parts of the website inaccessible, based on\nthe user's log-in status.| Session| HTTP  \n__cf_bm| ACM| This cookie is used to distinguish between humans and bots. This\nis beneficial for the website, in order to make valid reports on the use of\ntheir website.| 1 day| HTTP  \n_cfuvid| ACM| This cookie is a part of the services provided by Cloudflare -\nIncluding load-balancing, deliverance of website content and serving DNS\nconnection for website operators.| Session| HTTP  \nCookieConsent| Cookiebot| Stores the user's cookie consent state for the\ncurrent domain| 1 year| HTTP  \n1.gif| Cookiebot| Used to count the number of sessions to the website,\nnecessary for optimizing CMP product delivery.| Session| Pixel  \nVISITOR_PRIVACY_METADATA| YouTube| Stores the user's cookie consent state for\nthe current domain| 180 days| HTTP  \n  \nPreference cookies enable a website to remember information that changes the\nway the website behaves or looks, like your preferred language or the region\nthat you are in.\n\nName| Provider| Purpose| Expiry| Type  \n---|---|---|---|---  \naet-dismiss| c.disquscdn.com| Necessary for the functionality of the website's\ncomment-system.| Persistent| HTML  \ndrafts.queue| c.disquscdn.com| Necessary for the functionality of the\nwebsite's comment-system.| Persistent| HTML  \nsubmitted_posts_cache| c.disquscdn.com| Necessary for the functionality of the\nwebsite's comment-system.| Persistent| HTML  \nmopDeploy| Mopinion| Pending| Session| HTML  \nMACHINE_LAST_SEEN| ACM| Pending| 300 days| HTTP  \n  \nStatistic cookies help website owners understand how visitors interact with\nwebsites by collecting and reporting information anonymously.\n\nName| Provider| Purpose| Expiry| Type  \n---|---|---|---|---  \n_ga| Google| Registers a unique ID that is used to generate statistical data\non how the visitor uses the website.| 2 years| HTTP  \n_ga_#| Google| Used by Google Analytics to collect data on the number of times\na user has visited the website as well as dates for the first and most recent\nvisit.| 2 years| HTTP  \n_gat| Google| Used by Google Analytics to throttle request rate| 1 day| HTTP  \n_gid| Google| Registers a unique ID that is used to generate statistical data\non how the visitor uses the website.| 1 day| HTTP  \n_hjSession_#| Hotjar| Collects statistics on the visitor's visits to the\nwebsite, such as the number of visits, average time spent on the website and\nwhat pages have been read.| 1 day| HTTP  \n_hjSessionUser_#| Hotjar| Collects statistics on the visitor's visits to the\nwebsite, such as the number of visits, average time spent on the website and\nwhat pages have been read.| 1 year| HTTP  \n_hjTLDTest| Hotjar| Registers statistical data on users' behaviour on the\nwebsite. Used for internal analytics by the website operator.| Session| HTTP  \n_hp2_#| Heap Analytics| Collects data on the user\u2019s navigation and behavior on\nthe website. This is used to compile statistical reports and heatmaps for the\nwebsite owner.| 1 day| HTTP  \n_hp2_hld#.#| Heap Analytics| Collects data on the user\u2019s navigation and\nbehavior on the website. This is used to compile statistical reports and\nheatmaps for the website owner.| 1 day| HTTP  \n_hp2_id.#| Heap Analytics| Collects data on the user\u2019s navigation and behavior\non the website. This is used to compile statistical reports and heatmaps for\nthe website owner.| 1 year| HTTP  \n_hp2_ses_props.#| Heap Analytics| Collects data on the user\u2019s navigation and\nbehavior on the website. This is used to compile statistical reports and\nheatmaps for the website owner.| 1 day| HTTP  \ndisqus_unique| c.disquscdn.com| Collects statistics related to the user's\nvisits to the website, such as number of visits, average time spent on the\nwebsite and loaded pages.| Session| HTTP  \ncollect| Google| Used to send data to Google Analytics about the visitor's\ndevice and behavior. Tracks the visitor across devices and marketing\nchannels.| Session| Pixel  \nhjActiveViewportIds| Hotjar| This cookie contains an ID string on the current\nsession. This contains non-personal information on what subpages the visitor\nenters \u2013 this information is used to optimize the visitor's experience.|\nPersistent| HTML  \nhjViewportId| Hotjar| Saves the user's screen size in order to adjust the size\nof images on the website.| Session| HTML  \ntd| Google| Registers statistical data on users' behaviour on the website.\nUsed for internal analytics by the website operator.| Session| Pixel  \n  \nMarketing cookies are used to track visitors across websites. The intention is\nto display ads that are relevant and engaging for the individual user and\nthereby more valuable for publishers and third party advertisers.\n\nName| Provider| Purpose| Expiry| Type  \n---|---|---|---|---  \nbadges-message| c.disquscdn.com| Collects data on the visitor\u2019s use of the\ncomment system on the website, and what blogs/articles the visitor has read.\nThis can be used for marketing purposes.| Persistent| HTML  \napi/telemetry| Heap Analytics| Collects data on user behaviour and interaction\nin order to optimize the website and make advertisement on the website more\nrelevant.| Session| Pixel  \nh| Heap Analytics| Collects data on user behaviour and interaction in order to\noptimize the website and make advertisement on the website more relevant.|\nSession| Pixel  \n#-#| YouTube| Pending| Session| HTML  \niU5q-!O9@$| YouTube| Registers a unique ID to keep statistics of what videos\nfrom YouTube the user has seen.| Session| HTML  \nLAST_RESULT_ENTRY_KEY| YouTube| Used to track user\u2019s interaction with embedded\ncontent.| Session| HTTP  \nLogsDatabaseV2:V#||LogsRequestsStore| YouTube| Pending| Persistent| IDB  \nnextId| YouTube| Used to track user\u2019s interaction with embedded content.|\nSession| HTTP  \nremote_sid| YouTube| Necessary for the implementation and functionality of\nYouTube video-content on the website.| Session| HTTP  \nrequests| YouTube| Used to track user\u2019s interaction with embedded content.|\nSession| HTTP  \nServiceWorkerLogsDatabase#SWHealthLog| YouTube| Necessary for the\nimplementation and functionality of YouTube video-content on the website.|\nPersistent| IDB  \nTESTCOOKIESENABLED| YouTube| Used to track user\u2019s interaction with embedded\ncontent.| 1 day| HTTP  \nVISITOR_INFO1_LIVE| YouTube| Pending| 180 days| HTTP  \nYSC| YouTube| Pending| Session| HTTP  \nyt.innertube::nextId| YouTube| Registers a unique ID to keep statistics of\nwhat videos from YouTube the user has seen.| Persistent| HTML  \nytidb::LAST_RESULT_ENTRY_KEY| YouTube| Used to track user\u2019s interaction with\nembedded content.| Persistent| HTML  \nYtIdbMeta#databases| YouTube| Used to track user\u2019s interaction with embedded\ncontent.| Persistent| IDB  \nyt-remote-cast-available| YouTube| Stores the user's video player preferences\nusing embedded YouTube video| Session| HTML  \nyt-remote-cast-installed| YouTube| Stores the user's video player preferences\nusing embedded YouTube video| Session| HTML  \nyt-remote-connected-devices| YouTube| Stores the user's video player\npreferences using embedded YouTube video| Persistent| HTML  \nyt-remote-device-id| YouTube| Stores the user's video player preferences using\nembedded YouTube video| Persistent| HTML  \nyt-remote-fast-check-period| YouTube| Stores the user's video player\npreferences using embedded YouTube video| Session| HTML  \nyt-remote-session-app| YouTube| Stores the user's video player preferences\nusing embedded YouTube video| Session| HTML  \nyt-remote-session-name| YouTube| Stores the user's video player preferences\nusing embedded YouTube video| Session| HTML  \n  \nUnclassified cookies are cookies that we are in the process of classifying,\ntogether with the providers of individual cookies.\n\nWe do not use cookies of this type.  \n---  \n  \n[#IABV2_LABEL_PURPOSES#] [#IABV2_LABEL_FEATURES#] [#IABV2_LABEL_PARTNERS#]\n\n[#IABV2_BODY_PURPOSES#]\n\n[#IABV2_BODY_FEATURES#]\n\n[#IABV2_BODY_PARTNERS#]\n\nCookies are small text files that can be used by websites to make a user's\nexperience more efficient. Other than those strictly necessary for the\noperation of the site, we need your permission to store any type of cookies on\nyour device. Learn more about ACM, how you can contact us, and how we process\npersonal data in our Privacy Policy. Also please consult our Cookie Notice.\n\nYou can change or withdraw your consent from the Cookie Declaration on our\nwebsite at any time by visiting the Cookie Declaration page. If contacting us\nregarding your consent, please state your consent ID and date from that page.\n\nYour consent applies to the following domains: dl.acm.org\n\nCookie declaration last updated on 3/31/24 by Cookiebot\n\nskip to main content\n\n  * Advanced Search\n  * Browse\n  * About\n  *     * Sign in\n    * Register\n\nAdvanced Search\n\n10.5555/542865guidebooksBook PagePublication PagesBookacm-pubtype\n\nBrowse\n\n# Browse Books\n\nSkip header Section\n\nAnatomy of LISPJanuary 1978\n\nJanuary 1978\n\nRead More\n\n  * Author:\n  * John Allen\n\nPublisher:\n\n  * McGraw-Hill, Inc.\n  * Professional Book Group 11 West 19th Street New York, NY\n  * United States\n\nISBN:978-0-07-001115-1\n\nPublished:01 January 1978\n\nPages:\n\n470\n\nAppears In:\n\nACM Classic Books\n\nPDFeReader\n\nSave to BinderBinder\n\n##### Save to Binder\n\nCreate a New Binder\n\nExport CitationCitation\n\nShare on\n\nSkip Bibliometrics Section\n\nBibliometrics\n\nCitation count\n\n56\n\nDownloads (6 weeks)\n\n0\n\nDownloads (12 months)\n\n0\n\nDownloads (cumulative)\n\n322\n\nSkip Left Menu Section\n\n#### Sections\n\nAnatomy of LISP\n\n1978\n\nSkip Abstract Section\n\nAbstract\n\nThis text is nominally about LISP and data structures. However, in the process\nit covers much broader areas of computer science. The author has long felt\nthat the beginning student of computer science has been getting' a distorted\nand disjointed picture of the field. In some ways this confusion is natural;\nthe field has been growing at such a rapid rate that few are prepared to be\njudged experts in all areas of the discipline. The current alternative seems\nto be to give a few introductory courses in programming and machine\norganization followed by relatively specialized courses in more technical\nareas. The difficulty with this approach is that much of the technical\nmaterial never gets related. The student's perspective and motivation suffer\nin the process. This book uses LISP as a means for relating topics which\nnormally get treated in several separate courses. The point is not that we can\ndo this in LISP, but rather that it is natural to do it in LISP. The high-\nlevel notation for algorithms is beneficial in explaining and understanding\ncomplex algorithms. The use of abstract data structures and abstract LISP\nprograms shows the intent of structured programming and step-wise refinement.\nMuch of the current work in mathematical theories of computation is based on\nLISP-like languages. Thus LISP is a formalism for describing algorithms, for\nwriting programs, and for proving properties of algorithms. We use data\nstructures as the main thread in our discussions because a proper appreciation\nof data structures as abstract objects is a necessary prerequisite to an\nunderstanding of modern computer science.\n\n## Book Downloads\n\nPDFCover, Title page, Contents, Preface\n\nPDFBack cover\n\nSkip Table Of Content Section\n\n## Chapters\n\n1Symbolic expressions\n\n2Applications of LISP\n\n3Evaluation of LISP expressions\n\n4Imperative constructs in LISP\n\n5The static structure of LISP\n\n6The dynamic structure of LISP\n\n7Storage structures and efficiency\n\n8Implications of LISP\n\n9Projects\n\nBibliography\n\nIndex\n\n## References\n\n  1. [Aho 72] Aho, A., and Ullman, J., The Theory of Parsing, Translation & Compiling, Prentice Hall Inc., Englewood Cliffs, N.J., 1972. [ 4 165 307 ]Google Scholar\n  2. [Alg 63] Naur, P. et. al., 'Revised Report on the Algorithmic Language Algol 60', Comm. ACM 6, 1, Jan., 1963. [ 164 357 ]Google ScholarDigital Library\n  3. [Alg 75] van Wijngaarden, A., et. al., eds., 'Revised Report on the Algorithmic Language Algol 68', Acta Informatica, Vol. 5, Fac. 1.3, p. 1--236, 1975. [ 163 281 357 382 ]Google Scholar\n  4. [Ama 72] Amarel, S., 'A Set of Goals and Approaches for Education in Computer Science', AFIPS Conference Proceedings, Vol 40, p. 841--846, 1972. [ 157 ]Google Scholar\n  5. [And 76a] Anderson, D. Bruce, 'The Samefringe Problem', SIGART Newsletter, No. 60, p. 4, Nov. 1976. [ 223 ]Google Scholar\n  6. [And 76] Anderson, D. Bruce, 'A Brief Critique of LISP', Proc. AISB Summer Conference, Edinburgh, p. 14--25, 1976. [ 229 385 ]Google Scholar\n  7. [Bac 73] Backus, J., 'Programming Language Semantics and Closed Applicative Languages', IBM Research Lab, RJ-1245, San Jose, Cal., July 1973. [ 156 ]Google ScholarDigital Library\n  8. [Bar 66] Barron, D., and Strachey, C., 'Programming', in Advances in Computer Programming and Non-numerical Computation, L. Fox, ed., Academic Press, New York, p. 49--82, 1966. [196]Google ScholarCross Ref\n  9. [Bar 71] Barbacci, M., et al., 'C.ai (P.LISP), A LISP processor of C.ai', Carnegie-Mellon U., 1971. [241]Google Scholar\n  10. [Bau 72] Baumgart, B., 'MICRO-PLANNER Alternative Reference Manual', Stanford Univ. Operating Note No. 67, April 1972. [73]Google Scholar\n  11. [Ber 64] Berkeley, E., and Bobrow, D., eds., The Programming Language LISP: Its Operation and Applications, Information International, Cambridge, Mass., 1964. [norefs]Google Scholar\n  12. [Ber 71] Berkling, H., 'A Computing Machine Based on Tree Structures', IEEE Trans on Comptr. 20, C-20, 4, p. 404--418, April 1971. [248 374]Google Scholar\n  13. [Ber 75] Berkling, H., 'A Recursive Control Structure for Processing Reduction Machine Languages', Micro Architecture of Computer Systems, Hartenstein, R., & Zaks, R., eds., North Holland, p. 191--200, 1975. [81108]Google Scholar\n  14. [Berr 71 ] Berry, D., 'Block Structure: Retention or Deletion?', Proc. of 3^rd Annual ACM Symposium on Theory of Computing, p. 86--100, 1971. [norefs]Google Scholar\n  15. [Bis 74a] Bishop, P., 'Garbage Collection in a Very Large Address Space', M.I.T. A.I. Lab, Working paper 111, Sep. 1975. [402]Google Scholar\n  16. [Bis 74] Bishop, P., 'Spaghetti Stacks', unpublished paper, M.I.T., Dec 19, 1974. [291 314]Google Scholar\n  17. [Bla 71] Blair, F., The Structure of the Lisp Compiler', unpublished paper, 1971. [219]Google Scholar\n  18. [Bob 67] Bobrow, D., and Murphy, D., 'The Structure of a LISP System Using Two-level Storage', Comm. ACM 10, 3, p. 155--159, Mar. 1967. [norefs]Google ScholarDigital Library\n  19. [Bob 69] Bobrow, D., '(LISP Bulletin)', ACM Sigplan Notices, Vol. 1, No. 9, p. 17--45, Sept. 1969. [194]Google ScholarDigital Library\n  20. [Bob 73a] Bobrow, D., and Wegbreit, B., 'A Model and Stack Implementation of Multiple Environments', Comm. ACM 16, 10, p. 591--603, Oct. 1973. [229 301 354 401 405]Google ScholarDigital Library\n  21. [Bob 74] Bobrow, D., and Raphael, D., 'New Programming Languages for A.I. Research', Computing Surveys, 6, 3, p. 154--174, Sep 1974. [410]Google ScholarDigital Library\n  22. [Bob 75] Bobrow, D., 'A Note on Hash Linking', Comm. ACM 18, 7, p. 413--414, July, 1975. [403]Google ScholarDigital Library\n  23. [Boy 75] Boyer, R., and Moore, J, 'Proving theorems about LISP functions', Jour. ACM, 1, p. 129--144, Jan. 1975. [96 160]Google ScholarDigital Library\n  24. [Bur 76] Burge, W., Recursive Programming Techniques, Addison Wesley, Reading, Mass., 1976. [norefs]Google Scholar\n  25. [Car 75] Carpenter, R., & Doran, R., The Other Turing Machine, Massey University Computing Unit, Rep. No. 23 Aug 1975. [239]Google Scholar\n  26. [Car 76] Cartwright, R., 'A Practical and Formal Semantics and Verification System for TYPED LISP', Ph.D. Thesis, Computer Science Dept., Stanford Univ., 1976. [96 160 242 410]Google Scholar\n  27. [Che 67] Cheatham, T., The Theory & Construction of Compilers, Computer Associates, Wakefield, Mass., 1967. [norefs]Google Scholar\n  28. [Che 70] Cheney, C., 'A Nonrecursive List Compacting Algorithm', Comm. ACM 13, 11, p. 677--678, Nov. 1970. [401]Google ScholarDigital Library\n  29. [Che 76] Cheatham, T., and Townley, J., 'A Look at Programming and Programming Systems', in Advances in Computers, Vol. 14, M. Rubinoff, and M. Yovits, eds., Academic Press, New York, p. 45--78, 1976. [norefs]Google Scholar\n  30. [Chr 68] Christensen, C., 'An Example of the Manipulation of Directed Graphs in the AMBIT/G Programming Language', 423--435, in Interactive Systems for Experimental Applied Mathematics, Klerer, M., & Reinfelds, J. eds., Academic Press, 1968. [398]Google ScholarCross Ref\n  31. [Chu 41] Church, A., The Calculi of Lambda-conversion, Annals of Mathematics Studies, Princeton University Press, New Jersey, 1941. [110 167]Google ScholarDigital Library\n  32. [CI 76] Clark, D., 'List Structure: Measurements, Algorithms and Encodings', Ph.D. Thesis, Carnegie Mellon University, August 1976. [377]Google Scholar\n  33. [Con 73] McDermott, D., and Sussman, G., The CONNIVER Reference Manual', M.I.T. A.I. Lab. Memo 259a, Cambridge, Mass., 1973. [74 75 219 229 301 410 411 412]Google Scholar\n  34. [Con 74] Conrad, W., 'A Compactifying Garbage Collector for ECL's Non-homogeneous Heap', Center for Research in Computing Technology, TR. 2-74, Harvard, Feb. 1974. [norefs]Google Scholar\n  35. [Cur 58] Curry, H, and Feys, R., Combinatory Logic, North-Holland, 1958. [173]Google Scholar\n  36. [Dar 73] Darlington, J., and Burstall, R., 'A System which Automatically Improves Programs', Proc. 3^rd Int. J. Conf. on A.I., Stanford, 1973. [160 353]Google ScholarDigital Library\n  37. [Dav 76] Davis, R., 'Deduction, Truth, and Computation', M.S. Thesis, Math. Dept., San Jose State University, 1976. [162]Google Scholar\n  38. [DEC 69] 'PDP-10 Systems Reference Manual', Digital Equipment Corporation, Maynard Mass., 1969. [312]Google Scholar\n  39. [Deu 73] Deutsch, P., 'A LISP Machine With Very Compact Programs', Proc. 3^rd Int. J. Conf. on A.I., Stanford, 1973. [241]Google Scholar\n  40. [Dif 71] Diffie, W., 'Documentation of the Compiler', unpublished paper, Stanford A.I. Lab., 1971. [265]Google Scholar\n  41. [Dij 72a] Dijkstra, E., 'The Humble Programmer: 1972 ACM Turing Lecture', Comm. ACM 15, 10, p. 859--866, Oct 1972. [norefs]Google Scholar\n  42. [Dij 72] Dijkstra, E., 'Notes on Structured Programming', in Structured Programming, Dahl, O., and Hoare, C., eds. Academic Press, New York, 1972. [53]Google Scholar\n  43. [Dor 76] Doran, R., Architecture of General Purpose Computers, to be published by Academic Press, New York. [236 317 372]Google Scholar\n  44. [DSIPL] Proceedings of a Symposium on Data Structures in Programming Languages, SIGPLAN Notices 6, 2, Feb. 1971. [norefs]Google ScholarDigital Library\n  45. [ELI 74] Wegbreit, B., 'ECL Programmer's Manual', Center for Research in Computing Technology, TR 23--74, Harvard, Dec. 1974. [265 382 407]Google Scholar\n  46. [Els 73] Elson, M., Concepts of Progranguages, SRA Inc, Palo Alto, Cal, 1973. [norefs]Google Scholar\n  47. [Fat 73] Fateman, R., 'Reply to an Editorial', SIGSAM Bulletin, No. 25, p. 9--11, Mar. 1973. [303 390]Google Scholar\n  48. [Fel 68] Feldman, J., and Gries, D., 'Translator Writing Systems', Comm. ACM 11, 2, p. 77--113, Feb. 1968. [norefs]Google ScholarDigital Library\n  49. [Fen 69] Fenichel, R., and Yochelson, J., 'A LISP Garbage Collector for Virtual-memory Computer Systems', Comm. ACM 12, 11, p. 611--612, Nov. 1969. [norefs]Google ScholarDigital Library\n  50. [Fin 76] Finin, T., and Rutter, P., 'Different Fringe for Different Folk', SIGART Newsletter, No. 60, p. 4--5, Nov. 1976. [223]Google Scholar\n  51. [Fis 70] Fisher, D., 'Control Structures for Programming Languages', Ph.D. Thesis, Dept. of Computer Science, Carnegie-Mellon University, 1970. [norefs]Google ScholarDigital Library\n  52. [Fis 72] Fischer, M., 'Lambda Calculus Schemata', ACM Conf. on Proving assertions about programs, SIGPLAN Notices, p. 104--109, Jan. 1972. [207]Google ScholarDigital Library\n  53. [Fri 74] Friedman, D., The Little LISPer, SRA, Menlo Park, 1974. [norefs]Google Scholar\n  54. [Fri 76a] Friedman, D., and Wise, D., 'CONS Should Not Evaluate its Arguments', Proc. 3^rd Int. Colloq. on Automata, Languages and Programming, Edinburgh Univ. Press, p.257--284, July 1976. [12 221]Google Scholar\n  55. [Fri 76b] Friedman, D., and Wise, D., 'An Environment for Multiple-valued Recursive Procedures', 2^me Colloque sur la Programation, Paris, Springer Verlag, Berlin, 1976. [222]Google Scholar\n  56. [Gol 73] Goldstein, I., 'Pretty Printing: Converting List to Linear Structure', M.I.T. A.I. Lab, Memo 279, Feb. 1973. [415]Google Scholar\n  57. [Goo 57] Goodstein, R., Recursive Number Theory, North-Holland Pub. Co., Amsterdam, 1957. [2]Google Scholar\n  58. [Gor 73] Gordon, M., 'Models of Pure LISP', Dept. of Machine Intelligence, Experimental programming reports: No.30, University of Edinburgh, 1973. [175 177 180 235]Google Scholar\n  59. [Gor 75] Gordon, M., 'Towards a Semantic Theory of Dynamic Binding', Stanford A.I. Lab. Memo 265, Stanford University, 1975. [175 180]Google Scholar\n  60. [Got 74] Goto, E., 'Monocopy and Associative Algorithms in an Extended Lisp', University of Tokyo, Japan, May 1974. [46 241 287 403]Google Scholar\n  61. [Got 76] Goto, E., and Kanada, Y., 'Recursive Hashed Data Structures with Applications to Polynomial Manipulations', submitted to SYMSAC 76. [79 403]Google Scholar\n  62. [Gre 74] Greenblatt, R., 'The LISP Machine', M.I.T., Working paper No. 79, Nov. 1974. [241 301]Google Scholar\n  63. [Gre 75] Greussay, P., 'Manuel de Reference Provisoire: LISP T 1600', Universite Paris-Vincennes, Feb. 1975. [219]Google Scholar\n  64. [Gre 76a] Greussay, P., 'Iterative Interpretation of Tail-Recursive LISP Procedures', University of Vincennes, TR-20-76, Paris, Sep. 1976. [230]Google Scholar\n  65. [Gre 76] Greussay, P., 'An Iterative LISP Solution to the Samefringe Problem', SIGART Newsletter, No. 59, p. 14, Aug. 1976. [223]Google Scholar\n  66. [Gri 71] Gries, D., Compiler Construction for Digital Computers, Wiley, New York, 1971. [278 307]Google ScholarDigital Library\n  67. [Gua 69] Guard, J., Bennet, J., and Settle, L., 'Semi Automated Mathematics', J ACM 16, 1, p. 49--62, Jan. 1969. [247]Google ScholarDigital Library\n  68. [Gun 76] Gunji, T., 'Analysis of Hash Addressing Methods', Department of Information Sciences, TR 76--03, Univ. of Tokyo, Japan, Jan. 1976. [norefs]Google Scholar\n  69. [Ham 69] Hammer, M., 'Formal Definition of BASEL', Mass. Computer Associates, Inc., CA-6908-1511, Wakefield, Mass., 1969. [norefs]Google Scholar\n  70. [Han 69] Hansen, W., 'The Impact of Storage Management on Plex Processing Language Implementation', Stanford Graphics Project, July 1969. [382]Google Scholar\n  71. [Han 71] Hansen, W., 'Creation of Hierarchic Text With a Computer Display', Ph.D. Thesis, Computer Science Dept., Stanford Univ., June 1971. [367]Google ScholarDigital Library\n  72. [Har 64] Hart, T., and Evans, T., 'Notes on Implementing LISP for the M-460 Computer', p. 191--203 in [Ber 64]. [norefs]Google Scholar\n  73. [Har 75] Howard, F., 'Documentation of Harvard PDP-11 LISP', unpublished documentation, 1975. [245]Google Scholar\n  74. [Hea 68] Hearn, A., 'REDUCE User's Manual', Stanford A.I. Lab Memo 50, Stanford University, 1968. [62 421]Google Scholar\n  75. [Hen 75] von Henke, F., 'On the Representation of Data Structures in LCF With Applications to Program Generation', Stanford A.I. Lab. Memo 267, Sep. 1975. [54]Google Scholar\n  76. [Hen 76] Henderson, P., and Morris, J., 'A Lazy Evaluator', SIGPLAN-SIGACT Symposium on principles of programming languages, Altanta, p.95--103, Jan. 1976. [221 223]Google ScholarDigital Library\n  77. [Hew 72] Hewitt, C., 'Description and Theoretical Analysis (using Schemata) of PLANNER', M.I.T. A.I. Lab., TR-258, April 1972. [73 229 410]Google Scholar\n  78. [Hew 74] Hewitt, C., et. al., 'Behavioral Semantics of Non-recursive Control Structures', Proc. Colloque sur la Programmation, B. Robinet ed., in Lecture Notes in Computer Science, No. 19, p. 385--407, Springer Verlag, Berlin, 1974. [137 223 410]Google Scholar\n  79. [Hew 75] Hewitt, C., and Smith, B., 'Towards a Programming Apprentice', IEEE Trans, on Software Engineering, SE-1, p. 26--45, Mar 1975. [364]Google ScholarDigital Library\n  80. [Hew 76] Hewitt, C., 'Viewing Control Structures as Patterns of Passing Messages', M.I.T. A.I. Lab, Working paper 92, April 1976. [172 207 229 230 358 410]Google Scholar\n  81. [Hoa 69] Hoare, C. A. R., 'An Axiomatic Basis for Computer Programming', Comm. ACM 12, 10, p. 576--580, Oct. 1969. [162]Google ScholarDigital Library\n  82. [Hoa 73a] Hoare, C. A. R., 'Hints on Programming Language Design', Stanford A.I. Lab Memo 224, Dec. 1973. [norefs]Google Scholar\n  83. [Hoa 73] Hoare, C. A. R., 'Recursive Data Structures', Stanford A.I. Lab Memo 223, Oct. 1973. [norefs]Google Scholar\n  84. [Hop 69] Hopcroft J., and Ullman, J., Formal Languages and their Relation to Automata, Addison-Wesley, Reading, Mass., 1969. [25 55]Google Scholar\n  85. [Int 75] Teitelman, W., 'INTERLISP Reference Manual', Xerox PARC, Palo Alto, 1975. [128 194 242 273 364 367 403]Google Scholar\n  86. [Ive 62] Iverson, K., A Programming Language, Wiley, New York, 1962. [357]Google ScholarDigital Library\n  87. [Joh 71] Johnston, J., 'The Contour Model of Block Structured Processes', p. 55--82 in [DSIPL]. [norefs]Google Scholar\n  88. [Kan 75] Kanada, Y., 'Implementation of HLISP and Algebraic Manipulation Language REDUCE-2', Information Sciences Lab., TR 75-01, Univ. of Tokyo, Japan, Jan. 1975. [norefs]Google Scholar\n  89. [Kni 74] Knight, T., 'The CONS Microprocessor', M.I.T., Artificial Intelligence Working paper No. 80, Cambrigde, Nov. 1974. [norefs]Google Scholar\n  90. [Knu 68] Knuth, D., The Art of Computer Programming, Non-numerical Algorithms, Vol. 1, Addison-Wesley, Reading, Mass., 1968. [387 393 398]Google Scholar\n  91. [Knu 72] Knuth, D., The Art of Computer Programming, Searching and Sorting, Vol. 3, Addison-Wesley, Reading, Mass., 1972. [278]Google Scholar\n  92. [Knu 74] Knuth, D., 'Structured Programming With GO TO Statements', Computer Surveys 6, 4, p. 261--301, Dec. 1974. [norefs]Google ScholarDigital Library\n  93. [Lan 64] Landin, P., 'The Mechanical Evaluation of Expressions', Computer Journal 6, 4, p. 308--320, Apr. 1964. [173]Google ScholarCross Ref\n  94. [Lan 66] Landin, P., 'The Next 700 Programming Languages', Comm. ACM 9, 3, p. 157--166, Mar. 1966. [norefs]Google ScholarDigital Library\n  95. [LCF 72] Milner, R., 'Logic for Computable Functions, Description of a Machine Implementation', Stanford A.I. Lab. Memo 169, 1972. [96 410]Google Scholar\n  96. [Leh 73] Lehmann, D., 'A Direct Proof of the Church-Rosser Theorem', Center for Computer and Information Sciences, Technical Report No. 73--70, Brown University, Providence, R.I., August 1973. [173]Google Scholar\n  97. [Lev un] Levin, M., 'Course notes: 6.542', M.I.T., Cambridge, Mass., undated [181]Google Scholar\n  98. [Lin 73] Lindstrom, G., 'Algorithms For List Structure Condensation', Dept. of Computer Science, Technical Report 73-14, University of Pittsburgh, 1973. [402]Google Scholar\n  99. [Lis 74] Liskov, B., and Zilles, S., 'Programming With Abstract Data Structures', Proc. of Symposium on Very high level languages, SIGPLAN Notices, Apr. 1974. [norefs]Google ScholarDigital Library\n  100. [Lon 71] London, R., 'Correctness of Two Compilers for a LISP Subset', Stanford A.I. Lab. Memo 151, Oct., 1971. [337]Google Scholar\n  101. [Lug 73] Lugger, J., and Melenk, H., 'Darstellung und Bearbeitung Umfangreicher LISP-programme', Angewandte Informatik, p. 257--263, June 1973. [norefs]Google Scholar\n  102. [MAC 74] Bogen, R., 'MACSYMA Reference Manual', Project MAC, Mathlab Group, M.I.T., Cambridge, 1974. [62 390 421]Google Scholar\n  103. [Man 74] Manna, Z., Mathematical Theory of Computation, McGraw-Hill, New York, 1974. [160 232]Google ScholarDigital Library\n  104. [McB 63] McBeth, H. 'On the Reference Counter Method', (letter), Comm. ACM 6, 9, p. 575, Sep 1963. [norefs]Google ScholarDigital Library\n  105. [McC 60a] McCarthy, J, et. al., 'LISP 1 Programmer's Manual', Computation Center and Research Laboratory of Electronics, M.I.T., Cambridge, 1960. [norefs]Google Scholar\n  106. [McC 60] McCarthy, J., 'Recursive Functions of Symbolic Expressions and Their Computation by Machine', Comm. ACM, p. 184--195, April 1960. [110 185 231 287]Google ScholarDigital Library\n  107. [McC 62] McCarthy, J., 'Towards a Mathematical Science of Computation', IFIPS Proceedings of Munich Conference 1962, North Holland, Amsterdam, 1963. [164]Google Scholar\n  108. [McC 63] McCarthy, J., A Basis for a Mathematical Theory of Computation, in Computer Programming and Formal Systems, North Holland, Amsterdam, 1963. [norefs]Google ScholarCross Ref\n  109. [McC 65] McCarthy, J., et. al., 'LISP 1.5 Programmer's Manual', M.I.T. Press, Cambridge, 1965. [118]Google Scholar\n  110. [McC 66] McCarthy, J., 'A Formal Description of a Subset of ALGOL', in Formal Language Description Languages for Computer Programming, North Holland, Amsterdam, 1966. [164]Google Scholar\n  111. [McC 76] McCarthy, J., Recursive Programming in LISP, CS206 notes, Stanford University, 1976. [337]Google Scholar\n  112. [McD 75] McDermott, D., 'Very Large PLANNER-type Data Bases', M.I.T. A.I. Lab Memo 339, Cambridge, Mass., Sep. 1975. [75 256]Google Scholar\n  113. [Men 64] Mendelson, E., Introduction to Mathematical Logic, Van Nostrand, Princeton, New Jersey, 1964. [107 162 174]Google Scholar\n  114. [Mic 71] Sussman, G., et al., 'Micro-PLANNER Reference Manual', M.I.T., A.I. Lab. Memo 203a, Cambridge, Mass., Dec 1971. [410 412]Google Scholar\n  115. [Mil 73] Milner, R., '\u03bb-Calculus and the Semantics of Programming Languages', Lecture Notes, Computer Science Dept., University of Edinburgh, 1973--74. [173 181]Google Scholar\n  116. [Min 70] Minsky, M., 'Form and Content in Computer Science: 1970 ACM Turing Lecture', J ACM 17, 2, p. 197--215, Apr. 1970. [norefs]Google ScholarDigital Library\n  117. [Mit 70] Mitchell, J., 'The Design & Construction of Flexible & Efficient Interactive Programming Systems', Ph.D. Thesis, Carnegie-Mellon Unversity, June 1970. [152 358 405]Google ScholarDigital Library\n  118. [Mli 73] Smith, D., and Enea, H., 'MLISP2', Stanford A.I. Lab Memo 195, Stanford Univ., 1973. [410 422]Google Scholar\n  119. [Mon 73] Montangero, C., et al., 'An Extended LISP System for Complex Control-structure Programming', University of Pisa, 1973. [norefs]Google Scholar\n  120. [Mon 75a] Montangero, C., et al., 'MAGMA-Lisp: A 'Machine Language' for Artifical Intelligence', Proc. 4^th Int. J. Conf. on A.I., Tbilisi, p. 556--561, Sep. 1975. [norefs]Google Scholar\n  121. [Mon 75] Montangero, C., et al., 'Information Management in Context Trees', University of Pisa, N.I. B75--21, Oct. 1975. [301]Google Scholar\n  122. [Moo 74] Moon, D., 'MacLISP Reference Manual', Laboratory for Computer Science, M.I.T., Cambridge, Mass, 1974. [128 148 194 195 198 199 280 367 390 403]Google Scholar\n  123. [Moor 74] Moore, J, 'Introducing PROG to the Pure LISP Theorem Prover', CSL 74-3, Xerox PARC, Palo Alto, Dec 1974. [47 185]Google Scholar\n  124. [Moor 75a] Moore, J, 'The INTERLISP Virtual Machine Specification', (in preparation), Xerox PARC, Palo Alto, 1975. [norefs]Google Scholar\n  125. [Moor 75b] Moore, J, 'Computational Logic: Structure Sharing and Proof of Program Properties Part II', CSL 75-2, Xerox PARC, Palo Alto, Apr 1975. [96]Google Scholar\n  126. [Mor 55] Morris, C., 'Foundations of the Theory of Signs', International Encyclopedia of Unified Science, Vol 1, No 2, University of Chicago press, 1955. [162]Google Scholar\n  127. [Mor 68] Morris, J., 'Lambda-calculus Models of Programming Languages', Project MAC., M.I.T., MAC-TR57, Dec 1968. [22 181]Google Scholar\n  128. [Mor 73] Morris, L., 'Advice on Structuring Compilers and Proving Them Correct', ACM Symposium on Principles of Programming Languages, Boston, p. 144--152, 1973. [norefs]Google Scholar\n  129. [Mor 74] Morris, J., 'Towards More Flexible Type Systems', Proc. Colloque sur la Programmation, Paris, April 1974, p. 377--383, Springer Verlag, Berlin, 1974. [36]Google Scholar\n  130. [Mos 70] Moses, J., 'The Function of FUNCTION in LISP', SIGS AM Bulletin, p. 13--27, July 1970. [norefs]Google Scholar\n  131. [Mos 74] Moses, J., 'MACSYMA -- The Fifth Year', SIGSAM Bulletin, 8, 3, p. 105--110, Aug 1974. [62 390]Google ScholarDigital Library\n  132. [Mot 76] Motoyoshi, F., 'A Portable LISP Compiler on a Hypothetical LISP Machine', Dept. of Info. Science, TR 76--5, University of Tokyo, Japan, Jan. 1976. [249]Google Scholar\n  133. [Mud 75] Galley, S. W., and Pfister, G., 'The MDL Language', Programming Technology Division Doc. SYS.11.01, Project Mac, M.I.T., Cambridge, Mass., Nov. 1975. [301 412]Google Scholar\n  134. [Mul 76] Muller, K., 'On the Feasibility of Concurrent Garbage Collection', Ph.D. Thesis, University of Delft, 1976. [287]Google Scholar\n  135. [New 61] Newell, A., Information Processing Language V Manual, Prentice Hall, Englewood Cliffs, New Jersey, 1961. [227 236 247 256 ]Google Scholar\n  136. [New 75] Newey, M., 'Formal Semantics of LISP with Applications to Program Correctness', Stanford A.I. Lab Memo 257, Stanford Univ., Jan 1975. [ 96 337 ]Google Scholar\n  137. [Nor 70] Nordstrom, M., et al., 'LISP Fl -- A Fortran Implementation of LISP 1.5', Computer Science Dept, Uppsala University, Sweden, 1970. [ norefs ]Google Scholar\n  138. [Nor 76] Norman, E., 'Documentation for 1100 LISP Implementation', unpublished paper, University of Wisconsin-Madison, 1976. [ 266 ]Google Scholar\n  139. [Org 71] Organick, E., and Cleary, J., 'A Data Structure Model of the B6700 Computer System', p. 83--145 in [DSIPL] [ 372 ]Google Scholar\n  140. [Org 73] Organick, E., Computer System Organization: the B570016700 Series, ACM Monograph Series, Academic Press, New York, 1973. [ 236 ]Google ScholarDigital Library\n  141. [Pac 73] Pacini, G., 'An Optimal Fix-point Computation Rule for a Simple Recursive Language', University of Pisa, N.I. B75-10, Oct. 1973. [ 221 ]Google Scholar\n  142. [Pag 76] Page, R., LISP for Fairchild F8, Private communication, 1976. [ 245 ]Google Scholar\n  143. [Per 67] Perlis, A., 'The Synthesis of Algorithmic Systems: 1966 ACM Turing Lecture', J ACM 14, 1, p. 1--9, Jan. 1967. [ norefs ]Google Scholar\n  144. [Plo 74] Plotkin, G., 'Call-by-name, Call-by-value and the \u03bb-Calculus', Theoretical Computer Science I, p. 125--159, 1975. [ norefs ]Google ScholarCross Ref\n  145. [Pop 68a] Popplestone, R., 'The Design Philosophy of POP-2', in Machine Intelligence 3, American Elsevier, New York, 1968. [ 160 ]Google Scholar\n  146. [Pop 68] Burstall, R., et al., POP2 Papers, Oliver & Boyd, Edinburgh, 1968. [160 382]Google Scholar\n  147. [Pra 73] Pratt, V., 'Top-down Operator Precedence', Proceedings of the ACM Symposium on Principles of Programming, p. 41--51 1973. [ 162 ]Google Scholar\n  148. [Pra 76] Pratt, V., 'CGOL -- An Alternative External Representation for LISP Users', M.I.T. A.I. Lab, Working Paper No. 89, 1976. [ 410 ]Google Scholar\n  149. [Pre 72] Prenner, C., 'Multi-path Control Structures for Programming Languages', Ph.D. Thesis, Center for Research in Computing Technology, Harvard Univ., 1972. [ 229 ]Google Scholar\n  150. [Pre 76a] Prenner, C., 'Data structures for Spaghetti LISP', unpublished notes, University of California, Berkeley, Calif, 1976. [ 229 266 ]Google Scholar\n  151. [Pre 76b] Prenner, C., 'Implementation for Spaghetti ELI', unpublished notes, University of California, Berkeley, Calif, 1976. [ 410 ]Google Scholar\n  152. [QA4 72] Rulifson, J., et. al., 'QA4: A Procedural Calculus for Intuitive Reasoning', Stanford Research Institute, TN-73, Menlo Park, Cal., Nov. 1972. [ 74 410 ]Google Scholar\n  153. [Qua 68] Quam, L., 'SDIO Manual', unpublished paper, Stanford, 1968. [ 421 ]Google Scholar\n  154. [Qua 72] Quam, L., and Diffie, W., 'Stanford LISP 1.6 Manual', Stanford A.I. Lab., Operating Note 28.7, Stanford Univ., 1972. [ 128 194 ]Google Scholar\n  155. [Rey 72] Reynolds, J., 'Definitional Interpreters for High-order Programming Languages', Proceedings of the ACM National convention, 1972, p. 717--740, ACM, 1972. [ 137 207 219 ]Google Scholar\n  156. [Ric 74] Rich, C., and Shrobe, H., 'Understanding LISP Programs: Towards a Programming Apprentice', M.I.T. A.I. Lab, Working paper 82, Dec. 1974. [ norefs ]Google Scholar\n  157. [Ris 73] Risch, T., 'REMREC -- A Program for Automatic Recursion Removal in LISP', Datalogilaboratoriet, DLU 73/24, Uppsala Univ., Nov. 1973. [ norefs ]Google Scholar\n  158. [Riv 76] Rivest, R., 'On Self-organizing Sequential Search Heuristics', Comm. ACM 19, 2, p. 63--67, Feb. 1976. [ 261 ]Google ScholarDigital Library\n  159. [Rob 65] Robinson, J., 'A Machine-oriented Logic Based on the Resolution Principle', Journal ACM 12, 1, p. 23--41, Jan 1965. [ 75 ]Google ScholarDigital Library\n  160. [Roc 71] Rochfeld, A., 'New LISP Techniques for a Paging Environment', Comm. ACM 14, 12, p. 791--795, Dec 1971. [ norefs ]Google ScholarDigital Library\n  161. [Rog 67] Rogers, H., Theory of Recursive Functions & Effective Computability, McGraw-Hill, New York, 1967. [ 22 159 160 229 ]Google Scholar\n  162. [Ros 71] Rosen, B. 'Subtree Replacement Systems', Ph.D. Thesis, Harvard University, Cambridge, Mass., 1971. [ 173 ]Google Scholar\n  163. [Rus 64] Russell R., 'KALAH -- The Game and the Program', Stanford A.I. Lab. Memo 22, Stanford University, 1964. [ norefs ]Google Scholar\n  164. [Sam 75] Samet, H., 'Automatically Proving the Correctness of Translations Involving Optimized Code', Stanford A.I. Lab. Memo 259, May 1975. [ 185 262 ]Google Scholar\n  165. [San 75a] Sandewall, E., 'Ideas About Management of LISP Data Bases', M.I.T. A.I. Lab., Memo 332, May 1975. [ 265 ]Google Scholar\n  166. [San 75] Sandewall, E., 'Some Observations on Conceptual Programming', Computer Science Dept., Uppsala University, Sweden, 1975. [ norefs ]Google Scholar\n  167. [San 76] Sandewall, E., 'Programming in an Interactive Environment: The LISP Experience', Linkoping University, Sweden, 1976. [ norefs ]Google Scholar\n  168. [Sau 64] Saunders, R., 'The LISP System for the Q-32 Computer', p. 220--231 in [Ber 64] [ norefs ]Google Scholar\n  169. [Sch 67] Schorr, H., and Waite, W., 'An Efficient Machine-independent Procedure for Garbage Collection in Various List Structures', Comm. ACM 10, 8, p. 501--506, Aug. 1967. [ 398 ]Google ScholarDigital Library\n  170. [Sco 70] Scott, D., 'Outline of a Mathematical Theory of Computation', Oxford University Computing Labs, PRG-2, Oxford University, 1970. [ 175 177 ]Google Scholar\n  171. [Sco 72] Scott, D., 'Mathematical Concepts in Programming Languages', AFIPS Conference Proceedings, Vol 40, p. 225--234, 1972. [ 161 ]Google Scholar\n  172. [Sco 73] Scott, D., 'Models for various type-free calculi', in Logic, Methodology, and Philosophy of Science IV, North Holland, p. 157--187, 1973. [ 175 177 ]Google Scholar\n  173. [Sik 76] Siklossy, L., Let's Talk LISP, Prentice Hall, Englewood Cliffs, New Jersey, 1976. [ norefs ]Google Scholar\n  174. [Sta 74] von Staa, A., 'Data Transmission and Modularity Aspects of Programming Languages', Dept. of Computer Science, Research Report CS-74-17, University of Waterloo, Ontario, October 1974. [ 160 ]Google Scholar\n  175. [Ste 73] Steele, G., 'BIBOP LISP Memo', unpublished MIT paper, 1973. [ 266 402 ]Google Scholar\n  176. [Ste 76a] Steele, G., 'Multiprocessing Compactifying Garbage Collection', Comm. ACM 18, 9, p. 495--508, Sep. 1967. [ 402 ]Google Scholar\n  177. [Ste 76b] Steele, G., and Sussman, G., 'LAMBDA: The Ultimate Imperative', M.I.T. A.I. Memo 353, Mar. 1976. [ 150 172 219 358 411 ]Google Scholar\n  178. [Ste 76c] Steele, G., 'LAMBDA: The Ultimate Declarative', M.I.T. A.I. Memo 379, Oct. 1976. [ 172 411 ]Google Scholar\n  179. [Ste pc] Steele, G., private communications. [ 155 368 382 ]Google Scholar\n  180. [Stei 74] Steiger, R., 'Actor Machine Architecture', M.S. Thesis, M.I.T., 1974. [ norefs ]Google Scholar\n  181. [Sto 75] Stoyan, H., 'Comparison of Two LISP Compilers: Stanford Versus DOS/ES-LISP', Elektronische Informationsverarbeitung und Kybernetik 11, p. 371--375, 1975. [ norefs ]Google Scholar\n  182. [Str 67] Strachey, C., 'Fundamental Concepts in Programming Languages', NATO Conference, Copenhagen, 1967. [ norefs ]Google Scholar\n  183. [Str 73] Strachey, C., 'Varieties of Programming Languages', Oxford University Computing Labs, PRG-10, Oxford University, 1973. [ norefs ]Google Scholar\n  184. [Str 74a] Strachey, C., and Wadsworth, C., 'Continuations: A Mathematical Semantics for Handling Full Jumps', Oxford University Computing Laboratory, Technical Monograph PRG-11, Jan 1974. [ 207 ]Google Scholar\n  185. [Str 74] Foy, N., 'The Words Games of the Night Bird: Interview with C. Strachey', Computing Europe, p. 10--11, Aug 15, 1974. [ 97 ]Google Scholar\n  186. [Sug 77] Sugarman, R., 'Chess Computers Start to Give Humans a Tough Game', Electronic Engineerging News, p. 4, 44, 92, Apr 18, 1977. [ 66 ]Google Scholar\n  187. [Sus 75] Sussman, G., and Steele, G., 'SCHEME: an Interpreter for Extended Lambda Calculus', M.I.T. A.I. Memo 349, Dec. 1975. [ 137 172 219 358 411 ]Google Scholar\n  188. [Sus 76] Sussman, G., and Steele, G., 'SCHEME Flash 1', M.I.T. A.I. Lab., Jan. 1976. [ 230 255 ]Google Scholar\n  189. [Tei 72] Teitelman, W., 'Automated Programmering -- The Programmer's Assistant', Proceedings of the Fall Joint Computer Conference, Dec. 1972. [ norefs ]Google Scholar\n  190. [Ten 76] Tennent, R., The Denotational Semantics of Programming Languages', Comm. ACM 19, 8, p. 437--453, Aug. 1976. [ 164 ]Google ScholarDigital Library\n  191. [Ter 75] Terashima, M., 'Algorithms Used in an Implementation of HLISP', Information Sciences Lab., TR 75--03, Univ. of Tokyo, Japan, Jan. 1975. [ 273 403 ]Google Scholar\n  192. [Urm 76] Urmi, J., 'A Shallow Binding Scheme for Fast Environment Changing in a 'Spaghetti Stack' LISP System', Linkoping University, Sweden, 1976. [ 398 ]Google Scholar\n  193. [Vui 74] Vuillemin, j., 'Correct and Optimal Implementations of Recursion in a Simple Programming Language', Journal of Computer and System Science, Vol 9, No 3, Dec 1974. [ 221 ]Google ScholarDigital Library\n  194. [Wad 71] Wadsworth, C., 'Semantics and Pragmatics of the Lambda-calculus', Ph.D. Thesis, Oxford University, 1971. [ 173 174 175 221 ]Google Scholar\n  195. [Wad 74a] Wadsworth, C., The Relation Between Lambda-expressions and Their Denotations', unpublished paper, Systems and Info. Science Dept, Syracuse Univ., 1974. [ 173 ]Google Scholar\n  196. [Wan 75] Wang, P., 'MACSYMA -- A Symbolic Manipulation System', Proceedings of International Computer Symposium, Vol. 1, p. 103--109, 1975. [ 390 ]Google Scholar\n  197. [War 74] Ward, S., 'Functional Domains of Applicative Languages', Ph.D. Thesis, M.I.T., MAC TR-136, Cambridge, Sep. 1974. [ norefs ]Google ScholarDigital Library\n  198. [Weg 68] Wegner, P., Programming Languages, Information Structures and Machine Organization, McGraw-Hill, New York, 1968. [ norefs ]Google Scholar\n  199. [Weg 70] Wegner, P., 'Three Computer Cultures -- Computer Technology, Computer Mathematics & Computer Science', in Advances in Computers, 10, Academic Press, New York, 1970. [ norefs ]Google Scholar\n  200. [Weg 71] Wegner, P., 'Data Structure Models for Programming Languages', p. 1--54 in [DSIPL] [ norefs ]Google Scholar\n  201. [Weg 72] Wegner, P., 'The Vienna Definition Language', Computing Surveys, Vol 4, No 1, p. 5--63, Mar 1972. [ 42 163 ]Google ScholarDigital Library\n  202. [Wegb 70] Wegbreit, B., 'Studies in Extensible Programming Languages', Ph.D. Thesis, Harvard University, Cambridge, Mass., 1970. [ 402 ]Google Scholar\n  203. [Wegb 71] Wegbreit, B., 'The ECL Programming System', Proceedings AFIPS 1971 FJCC, Vol 39, AFIPS Press, Mondale, New Jersey, p. 253--262, 1971. [ norefs ]Google Scholar\n  204. [Wegb 72] Wegbreit, B., 'A Generalized Compactifying Garbage Collector', Computer Journal 15, 3, p. 204--208, Aug 1972. [ norefs ]Google ScholarCross Ref\n  205. [Wegb 74] Wegbreit, B., 'The Treatment of Data Types in ELI', Comm. ACM 17, 5, p. 251--264, May 1974. [ norefs ]Google Scholar\n  206. [Wegb 75] Wegbreit, B., 'Retrieval From Context Trees', Information Processing Letters, 3, 4, p. 119--120, March 1975. [ 150 301 ]Google ScholarCross Ref\n  207. [Wei 62] Weizenbaum, J., 'Knotted List Structures', Comm. ACM 5, 13, p. 161--165, Mar 1962. [ norefs ]Google ScholarDigital Library\n  208. [Wei 63] Weizenbaum, J., 'Symmetric List Processor', Comm. ACM 6, 9, p. 524--544, Sep 1963. [ norefs ]Google ScholarDigital Library\n  209. [Wei 68] Weizenbaum, J., 'The FUNARG Problem Explained', unpublished memorandum, M.I.T., Cambridge, Mass., 1968. [ 131 ]Google Scholar\n  210. [Weis 67] Weismann, C., 'LISP 1.5 Primer', Dickenson Press, Belmont, 1967. [ norefs ]Google Scholar\n  211. [Win 75] Winograd, T., 'Breaking the Complexity Barrier (again)', ACM SIGPLAN Notes 10, 1, p. 13--30, Jan. 1975. [ 364 ]Google Scholar\n  212. [Wis 75] Wise, D., et. al., 'Boolean-valued Loops', BIT 15 p. 431--451, 1975. [ 195 ]Google ScholarDigital Library\n  213. [Zil 70] Zilles, S., 'An Expansion of the Data Structuring Capabilities in PAL', M.S. Thesis, MIT, Jun 1970.Google Scholar\n\n## Cited By\n\n  1. Vion J and Piechowiak S (2018). From MDD to BDD and Arc consistency, Constraints, 23:4, (451-480), Online publication date: 1-Oct-2018.\n\n  2. Penkler D An Array and List Processing System Proceedings of ILC 2014 on 8th International Lisp Conference, (22-30)\n\n  3. Xu G (2013). Resurrector, ACM SIGPLAN Notices, 48:10, (111-130), Online publication date: 12-Nov-2013.\n\n  4. Xu G Resurrector Proceedings of the 2013 ACM SIGPLAN international conference on Object oriented programming systems languages & applications, (111-130)\n\n  5. Dietl W, Dietzel S, Ernst M, Mu\u015flu K and Schiller T Building and using pluggable type-checkers Proceedings of the 33rd International Conference on Software Engineering, (681-690)\n\n  6. Krajca P and Vychodil V Software transactional memory for implicitly parallel functional language Proceedings of the 2010 ACM Symposium on Applied Computing, (2123-2130)\n\n  7. Luszczek P (2009). Parallel Programming in MATLAB, International Journal of High Performance Computing Applications, 23:3, (277-283), Online publication date: 1-Aug-2009.\n\n  8. Filli\u00e2tre J and Conchon S Type-safe modular hash-consing Proceedings of the 2006 workshop on ML, (12-19)\n\n  9. Marinov D and O'Callahan R (2003). Object equality profiling, ACM SIGPLAN Notices, 38:11, (313-325), Online publication date: 26-Nov-2003.\n\n  10. Marinov D and O'Callahan R Object equality profiling Proceedings of the 18th annual ACM SIGPLAN conference on Object-oriented programing, systems, languages, and applications, (313-325)\n\n  11. Acar U, Blelloch G and Harper R (2003). Selective memoization, ACM SIGPLAN Notices, 38:1, (14-25), Online publication date: 15-Jan-2003.\n\n  12. Acar U, Blelloch G and Harper R Selective memoization Proceedings of the 30th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, (14-25)\n\n  13. Case J, Jain S and Suraj M (2002). Control structures in hypothesis spaces, Theoretical Computer Science, 270:1-2, (287-308), Online publication date: 6-Jan-2002.\n\n  14. Parson D (1999). Using Java reflection to automate extension language parsing, ACM SIGPLAN Notices, 35:1, (67-80), Online publication date: 1-Jan-2000.\n\n  15. Parson D Using Java reflection to automate extension language parsing Proceedings of the 2nd conference on Domain-specific languages, (67-80)\n\n  16. Parson D Using java reflection to automate extension language parsing Proceedings of the 2nd conference on Conference on Domain-Specific Languages - Volume 2, (6-6)\n\n  17. Moreau L (1998). A Syntactic Theory of Dynamic Binding, Higher-Order and Symbolic Computation, 11:3, (233-279), Online publication date: 1-Oct-1998.\n\n  18. Anane R (1998). Holistic design of a programming system, ACM SIGSOFT Software Engineering Notes, 23:1, (72-76), Online publication date: 1-Jan-1998.\n\n  19. Kaplan H and Tarjan R Persistent lists with catenation via recursive slow-down Proceedings of the twenty-seventh annual ACM symposium on Theory of computing, (93-102)\n\n  20. Teodosiu D (1991). HARE, ACM SIGPLAN Notices, 26:1, (109-120), Online publication date: 1-Jan-1991.\n\n  21. Pugh W (1990). Skip lists: a probabilistic alternative to balanced trees, Communications of the ACM, 33:6, (668-676), Online publication date: 1-Jun-1990.\n\n  22. Sundar R and Tarjan R Unique binary search tree representations and equality-testing of sets and sequences Proceedings of the twenty-second annual ACM symposium on Theory of Computing, (18-25)\n\n  23. Nordstrom D (1990). Threading Lisp, ACM SIGPLAN Notices, 25:2, (17-24), Online publication date: 1-Feb-1990.\n\n  24. Schelvis M (1989). Incremental distribution of timestamp packets: a new approach to distributed garbage collection, ACM SIGPLAN Notices, 24:10, (37-48), Online publication date: 1-Oct-1989.\n\n  25. Schelvis M Incremental distribution of timestamp packets: a new approach to distributed garbage collection Conference proceedings on Object-oriented programming systems, languages and applications, (37-48)\n\n  26. Pugh W and Teitelbaum T Incremental computation via function caching Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, (315-328)\n\n  27. Moore T (1988). Software development in C, ACM SIGCSE Bulletin, 20:2, (5-7), Online publication date: 1-Jun-1988.\n\n  28. Pugh W An improved replacement strategy for function caching Proceedings of the 1988 ACM conference on LISP and functional programming, (269-276)\n\n  29. McMillan T (1987). A small lisp interpreter as a project in a programming language course, ACM SIGCSE Bulletin, 19:3, (10-14), Online publication date: 1-Sep-1987.\n\n  30. Pumplin B (1987). Compiling LISP procedures, ACM SIGSMALL/PC Notes, 13:1, (16-30), Online publication date: 1-Feb-1987.\n\n  31. Pumplin B (1987). Compiling LISP procedures, ACM SIGART Bulletin:99, (27-31), Online publication date: 1-Jan-1987.\n\n  32. Hoover R and Teitelbaum T (1986). Efficient incremental evaluation of aggregate values in attribute grammars, ACM SIGPLAN Notices, 21:7, (39-50), Online publication date: 1-Jul-1986.\n\n  33. Hoover R and Teitelbaum T Efficient incremental evaluation of aggregate values in attribute grammars Proceedings of the 1986 SIGPLAN symposium on Compiler construction, (39-50)\n\n  34. Tomita S, Shibayama K, Nakata T, Yuasa S and Hagiwara H A computer with low-level parallelism QA-2: its applications to 3-D graphics and Prolog/Lisp machines Proceedings of the 13th annual international symposium on Computer architecture, (280-289)\n\n  35. Tomita S, Shibayama K, Nakata T, Yuasa S and Hagiwara H (1986). A computer with low-level parallelism QA-2: its applications to 3-D graphics and Prolog/Lisp machines, ACM SIGARCH Computer Architecture News, 14:2, (280-289), Online publication date: 1-May-1986.\n\n  36. Hood R (1985). Efficient abstractions for the implementation of structured editors, ACM SIGPLAN Notices, 20:7, (171-178), Online publication date: 1-Jul-1985.\n\n  37. Hood R Efficient abstractions for the implementation of structured editors Proceedings of the ACM SIGPLAN 85 symposium on Language issues in programming environments, (171-178)\n\n  38. Sohi G, Davidson E and Patel J An efficient LISP-execution architecture with a new representation for list structures Proceedings of the 12th annual international symposium on Computer architecture, (91-98)\n\n  39. Sohi G, Davidson E and Patel J (1985). An efficient LISP-execution architecture with a new representation for list structures, ACM SIGARCH Computer Architecture News, 13:3, (91-98), Online publication date: 1-Jun-1985.\n\n  40. Glass H (1985). Threaded interpretive systems and functional programming environments, ACM SIGPLAN Notices, 20:4, (24-32), Online publication date: 1-Apr-1985.\n\n  41. Georgeff M (1984). Transformations and reduction strategies for typed lambda expressions, ACM Transactions on Programming Languages and Systems, 6:4, (603-631), Online publication date: 1-Oct-1984.\n\n  42. Rivi\u00e8res J and Smith B The implementation of procedurally reflective languages Proceedings of the 1984 ACM Symposium on LISP and functional programming, (331-347)\n\n  43. Cardelli L Compiling a functional language Proceedings of the 1984 ACM Symposium on LISP and functional programming, (208-217)\n\n  44. Lieberman H and Hewitt C (1983). A real-time garbage collector based on the lifetimes of objects, Communications of the ACM, 26:6, (419-429), Online publication date: 1-Jun-1983.\n\n  45. Georgeff M A scheme for implementing functional values on a stack machine Proceedings of the 1982 ACM symposium on LISP and functional programming, (188-195)\n\n  46. Cercone N, Krause M and Boates J (1981). Lexicon design using perfect hash functions, ACM SIGSOC Bulletin, 13:2-3, (69-78), Online publication date: 1-Jan-1982.\n\n  47. Kajiya J Generic functions by nonstandard name scoping in APL Proceedings of the international conference on APL, (172-179)\n\n  48. Kajiya J (1981). Generic functions by nonstandard name scoping in APL, ACM SIGAPL APL Quote Quad, 12:1, (172-179), Online publication date: 1-Sep-1981.\n\n  49. Cercone N, Krause M and Boates J Lexicon design using perfect hash functions Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981, (69-78)\n\n  50. Pitman K Special forms in Lisp Proceedings of the 1980 ACM conference on LISP and functional programming, (179-187)\n\n  51. Boley H (1980). A preliminary survey of artificial intelligence machines, ACM SIGART Bulletin:72, (21-28), Online publication date: 1-Jul-1980.\n\n  52. Soloway E and Woolf B Problems, plans, and programs Proceedings of the eleventh SIGCSE technical symposium on Computer science education, (16-24)\n\n  53. Soloway E and Woolf B (1980). Problems, plans, and programs, ACM SIGCSE Bulletin, 12:1, (16-24), Online publication date: 1-Feb-1980.\n\n  54. McCarthy J (1978). History of LISP, ACM SIGPLAN Notices, 13:8, (217-223), Online publication date: 1-Aug-1978.\n\n  55. (1978). LISP books, ACM Lisp Bulletin:2, (3-3), Online publication date: 1-Jul-1978.\n\n  56. McCarthy J History of LISP History of programming languages, (173-185)\n\n##### Save to Binder\n\nCreate a New Binder\n\nContributors\n\n  * John Allen\n\n    * Publication Years1978 - 1978\n    * Publication counts1\n    * Citation count56\n    * Available for Download1\n    * Downloads (cumulative)322\n    * Downloads (12 months)0\n    * Downloads (6 weeks)0\n    * Average Downloads per Article322\n    * Average Citation per Article56\n\nView Full Profile\n\n## Index Terms\n\n  1. ###### Anatomy of LISP\n\n    1. General and reference\n\n      1. Document types\n\n        1. Reference works\n\n    2. Software and its engineering\n\n      1. Software creation and management\n\n        1. Software development techniques\n\n      2. Software notations and tools\n\n        1. General programming languages\n\n          1. Language types\n\n## Recommendations\n\n  * ##### Standard LISP (reprint)\n\nWhen it was first formulated in 1960, (1) the programming language LISP was a\ntruly machine independent language. However, even the earliest computer\nimplementation encountered problems in input-output control and the handling\nof free variables which ...\n\nRead More\n\n  * ##### On compiling embedded languages in LISP\n\nLFP '80: Proceedings of the 1980 ACM conference on LISP and functional\nprogramming\n\nIn INTERLISP we find a number of embedded languages such as the iterative\nstatement and the pattern match facility in the CLISP package, the editor and\nmakefile languages and so forth. We will in this paper concentrate on the\nproblem of extending the ...\n\nRead More\n\n  * ##### Down with Emacs Lisp: dynamic scope analysis\n\nICFP '01: Proceedings of the sixth ACM SIGPLAN international conference on\nFunctional programming\n\nIt is possible to translate code written in Emacs Lisp or another Lisp dialect\nwhich uses dynamic scoping to a more modern programming language with lexical\nscoping while largely preserving structure and readability of the code. The\nbiggest obstacle to ...\n\nRead More\n\nComments\n\n## Export Citations\n\n## Footer\n\n### Categories\n\n  * Journals\n  * Magazines\n  * Books\n  * Proceedings\n  * SIGs\n  * Conferences\n  * Collections\n  * People\n\n### About\n\n  * About ACM Digital Library\n  * ACM Digital Library Board\n  * Subscription Information\n  * Author Guidelines\n  * Using ACM Digital Library\n  * All Holdings within the ACM Digital Library\n  * ACM Computing Classification System\n  * Digital Library Accessibility\n\n### Join\n\n  * Join ACM\n  * Join SIGs\n  * Subscribe to Publications\n  * Institutions and Libraries\n\n### Connect\n\n  * Contact\n  * Facebook\n  * Twitter\n  * Linkedin\n  * Feedback\n  * Bug Report\n\nThe ACM Digital Library is published by the Association for Computing\nMachinery. Copyright \u00a9 2024 ACM, Inc.\n\n  * Terms of Usage\n  * Privacy Policy\n  * Code of Ethics\n\nYour Search Results Download Request\n\nWe are preparing your search results for download ...\n\nWe will inform you here when the file is ready.\n\nDownload now!\n\nYour Search Results Download Request\n\nYour file of search results citations is now ready.\n\nDownload now!\n\nYour Search Results Download Request\n\nYour search export query has expired. Please try again.\n\n", "frontpage": false}
