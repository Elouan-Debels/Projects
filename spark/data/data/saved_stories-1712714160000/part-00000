{"aid": "39983536", "title": "Ansible \u2013 Infrastructure as Code for building up my Homelab", "url": "https://akashrajpurohit.com/blog/ansible-infrastructure-as-a-code-for-building-up-my-homelab/", "domain": "akashrajpurohit.com", "votes": 6, "user": "thunderbong", "posted_at": "2024-04-09 19:54:46", "comments": 0, "source_title": "Ansible \u2014 Infrastructure as Code for building up my Homelab", "source_text": "Ansible \u2014 Infrastructure as Code for building up my Homelab | Akash Rajpurohit\n\n# Ansible \u2014 Infrastructure as Code for building up my Homelab\n\n\ud83d\udcc6 Apr 9, 2024 \u00b7 \u23f3 11 min read \u00b7\n\n# homelab\n\n\u00b7 \ud83d\udc40\n\n## Introduction\n\nWhen I started self hosting more critical services like Vaultwarden, I\nrealized that I focused on backups a lot but not on the infrastructure itself.\nWhat I started to realise was that if for some reason my server goes down, I\nwould have to manually set up everything again, which would take a lot of\ntime.\n\nI was doing everything manually currently, and it was a pain to keep track of\nall the changes I made. Also, whenever I mess something up or need to\nreinstall the server, I have to do everything from scratch.\n\nI needed a way to automate the deployment and configuration of my servers and\nservices. That\u2019s when I found Ansible. In this post, I will share with you how\nI use Ansible to manage my homelab infrastructure.\n\n\ud83d\ude05\n\nHere\u2019s a YouTube video \u2197\ufe0f of me trying to explain some parts of this post in a\nmore interactive, uncut, unedited and way below any decent production grade\nstandards.\n\nAnd boy oh boy, I said its going to be a short video but it\u2019s 10 minutes long.\n\n## What is Ansible?\n\nLet\u2019s first understand what is Ansible what problem does it solves.\n\nAnsible \u2197\ufe0f is an open-source automation tool that allows you to automate the\ndeployment and configuration of servers and services. It uses a simple and\npowerful automation language that allows you to define the state of your\ninfrastructure in a declarative way. You write playbooks that describe the\ndesired state of your infrastructure, and Ansible takes care of making sure\nthat your infrastructure matches that state.\n\nAnsible is also a agentless tool, which means that you don\u2019t need to install\nany agents on your servers to manage them. You just need to have SSH access to\nthe servers, and Ansible will use SSH to connect to the servers and run the\ntasks defined in the playbooks which is my opinion is a great feature.\n\nThe best part is that all the operations are idempoent, which means that you\ncan run the same playbook multiple times, and it will only make the necessary\nchanges to bring your infrastructure to the desired state. This makes it safe\nto run the playbooks multiple times without worrying about breaking your\ninfrastructure. (In fact I tend to run the paybooks multiple times over the\ncourse of a few days to make sure everything is in the desired state).\n\nNow that we have a basic understanding of what Ansible is, let\u2019s see how I use\nit to manage my homelab infrastructure.\n\n## Setting up Ansible\n\nThe first step is to install Ansible on your local machine. You can follow the\nofficial installation guide \u2197\ufe0f to install Ansible on your machine. I installed\nit via Homebrew on a Mac, but you can read more about the installation process\non the official website.\n\nOnce you have installed Ansible, you need to set up your inventory file. The\ninventory file is a simple text file that contains a list of all the servers\nyou want to manage with Ansible. You can define groups of servers and assign\nvariables to them in the inventory file.\n\nThis is how my inventory file looks like:\n\n    \n    \n    [homelab]\n    \n    sukuna ansible_host={{sukuna.ip}} ansible_port={{ssh_port}} ansible_user={{me.username}} ansible_connection=ssh ansible_ssh_private_key_file={{ssh_private_key}}\n    \n    satoru ansible_host={{satoru.ip}} ansible_port={{ssh_port}} ansible_user={{me.username}} ansible_connection=ssh ansible_ssh_private_key_file={{ssh_private_key}}\n    \n    suguru ansible_host={{suguru.ip}} ansible_port={{ssh_port}} ansible_user={{me.username}} ansible_connection=ssh ansible_ssh_private_key_file={{ssh_private_key}}\n\nI have three servers in my homelab: sukuna, satoru, and suguru. I have defined\nthe IP address, SSH port, username, and SSH private key file for each server\nin the inventory file.\n\n\ud83d\udca1\n\nPro Tip\n\nWhen you are setting up a new server, you need to ensure that your client\nmachine is able to SSH into the server for ansible to be able to manage it.\nYou can use the ssh-copy-id command to copy your SSH key to the server.\n\nHere is how you would do that:\n\nTerminal window\n\n    \n    \n    ssh-copy-id -i ~/.ssh/id_lab username@hostname\n\nOnce you have set up your inventory file, you can start writing playbooks to\nmanage your servers.\n\n## Writing Playbooks\n\nPlaybooks are the heart of Ansible. They are simple YAML files that describe\nthe desired state of your infrastructure. You define a list of tasks that\nAnsible should perform on your servers to bring them to the desired state.\n\nHere is an example playbook that performs apt update and upgrade on all the\nservers in my homelab:\n\n    \n    \n    ---\n    \n    - name: Update and upgrade packages\n    \n    hosts: all\n    \n    become: true\n    \n    tasks:\n    \n    - name: Update apt cache\n    \n    ansible.builtin.apt:\n    \n    update_cache: true\n    \n    - name: Upgrade all packages\n    \n    ansible.builtin.apt:\n    \n    upgrade: dist\n\nHere we are telling Ansible to run two tasks on all the servers (hosts: all)\nas a root user (become: true) to update the apt cache and upgrade all the\npackages.\n\nRead more about the apt module here \u2197\ufe0f. In fact I would highly recommend you\nto read the official documentation to understand the various modules\navailable, this certainly helped me craft my playbooks.\n\nYou can run the playbook using the ansible-playbook command:\n\nTerminal window\n\n    \n    \n    ansible-playbook playbook.yml --ask-become-pass\n\nThis will run the playbook on all the servers defined in the inventory file.\nThe --ask-become-pass flag is used to prompt for the sudo password if required\n(which we do in the example above, since we are updating packages which\nrequires sudo privileges).\n\n## My Ansible Setup\n\nSo in the example, we saw that we defined the tasks directly in our\nplaybook.yml file, which is fine for simple tasks. But as your infrastructure\ngrows, you will have more complex tasks and you will need to organize your\nplaybooks better.\n\nWhat I do is I organize my playbooks into roles. A role is a collection of\ntasks, handlers, templates, and variables that are used to configure a\nspecific part of your infrastructure. For example, I have a system role which\nruns on all the servers to setup the basic system configuration like updating\npackages, setting up users, setting up ZSH shell, my dotfiles config and more.\n\nSimilarly, I have roles for setting up specific services like Vaultwarden,\nNginx, AdGuard Home, Linkding etc.\n\nHere is how my directory structure looks like:\n\nTerminal window\n\n    \n    \n    .\n    \n    \u251c\u2500\u2500 README.md\n    \n    \u251c\u2500\u2500 ansible.cfg\n    \n    \u251c\u2500\u2500 dev-requirements.txt\n    \n    \u251c\u2500\u2500 galaxy-requirements.yml\n    \n    \u251c\u2500\u2500 group_vars\n    \n    \u2502 \u2514\u2500\u2500 all\n    \n    \u2502 \u251c\u2500\u2500 docker.yml\n    \n    \u2502 \u251c\u2500\u2500 hosts.yml\n    \n    \u2502 \u251c\u2500\u2500 secrets.yml\n    \n    \u2502 \u251c\u2500\u2500 services.yml\n    \n    \u2502 \u2514\u2500\u2500 vars.yml\n    \n    \u251c\u2500\u2500 inventory\n    \n    \u2502 \u2514\u2500\u2500 hosts\n    \n    \u251c\u2500\u2500 roles\n    \n    \u2502 \u251c\u2500\u2500 adguardhome\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 handlers\n    \n    \u2502 \u2502 \u251c\u2500\u2500 tasks\n    \n    \u2502 \u2502 \u2514\u2500\u2500 templates\n    \n    \u2502 \u251c\u2500\u2500 adguardhome_sync\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 handlers\n    \n    \u2502 \u2502 \u251c\u2500\u2500 tasks\n    \n    \u2502 \u2502 \u2514\u2500\u2500 templates\n    \n    \u2502 \u251c\u2500\u2500 cadvisor\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 cloudflared\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u251c\u2500\u2500 tasks\n    \n    \u2502 \u2502 \u2514\u2500\u2500 templates\n    \n    \u2502 \u251c\u2500\u2500 docker\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 handlers\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 dotfiles\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 grafana\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 immich\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 linkding\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 loki\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 nginx\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u251c\u2500\u2500 tasks\n    \n    \u2502 \u2502 \u2514\u2500\u2500 templates\n    \n    \u2502 \u251c\u2500\u2500 node_exporter\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 podman\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 prometheus\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 promtail\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 rclone\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 scripts\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 ssh\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 handlers\n    \n    \u2502 \u2502 \u251c\u2500\u2500 tasks\n    \n    \u2502 \u2502 \u2514\u2500\u2500 templates\n    \n    \u2502 \u251c\u2500\u2500 syncthing\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 system\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u251c\u2500\u2500 tasks\n    \n    \u2502 \u2502 \u2514\u2500\u2500 templates\n    \n    \u2502 \u251c\u2500\u2500 tgpt\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u251c\u2500\u2500 umami\n    \n    \u2502 \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2502 \u2514\u2500\u2500 tasks\n    \n    \u2502 \u2514\u2500\u2500 vaultwarden\n    \n    \u2502 \u251c\u2500\u2500 defaults\n    \n    \u2502 \u251c\u2500\u2500 files\n    \n    \u2502 \u2514\u2500\u2500 tasks\n    \n    \u251c\u2500\u2500 scripts\n    \n    \u2502 \u251c\u2500\u2500 deploy.sh\n    \n    \u2502 \u251c\u2500\u2500 lint.sh\n    \n    \u2502 \u2514\u2500\u2500 setup.sh\n    \n    \u2514\u2500\u2500 run.yml\n\nI have a roles directory where I keep all my roles. Each role has its own\ndirectory with the tasks, handlers, templates, and variables defined in\nseparate files.\n\nI also have a group_vars directory where I define variables that are common to\nall the servers in my homelab. The run.yml file that includes all the\nplaybooks that I want to run. This is the entry point for running my\nplaybooks.\n\nTo avoid repeating same commands again and again, I have some helpful scripts\nwhich runs the deployment, linting and setup of my ansible environment on CI\nfor validating my playbook changes.\n\nNow for me since I wanted to learn about Ansible while working on my homelab,\nI started from scratch and built up my roles. But you can also use Ansible\nGalaxy \u2197\ufe0f to find pre-built roles that you can use in your playbooks. This is\na great way to get started quickly and learn how to write playbooks.\n\nI took references from many of the existing roles and tweaked them to suit my\nneeds. The one that I am most proud of is setting up the Nginx reverse proxy.\nI have a detailed guide on what my Nginx setup looks like, so check that out.\nThis is what it does:\n\n  * It installs Nginx package.\n\n  * It creates the self-signed SSL certificates using a CA that I have setup and copies them to the correct location.\n\n  * I have a very simplied config of all my services that I want to route via Nginx.\n\nThe config looks like this:\n\n    \n        nginx_sites_available:\n    \n    - name: suguru\n    \n    domain: \"{{ suguru.domain }}\"\n    \n    ip: \"{{ suguru.ip }}\"\n    \n    records:\n    \n    - subdomain: \"{{ adguardhome.subdomain }}\"\n    \n    port: \"{{ adguardhome.port }}\"\n    \n    ssl: \"{{ adguardhome.ssl }}\"\n    \n    - subdomain: \"{{ syncthing.subdomain }}\"\n    \n    port: \"{{ syncthing.port }}\"\n    \n    ssl: \"{{ syncthing.ssl }}\"\n\nHere I just have to define the subdomain, port and if I want to use SSL for\nthe service and the role will take care of the rest.\n\n  * It copies all the relevant snippets to the Nginx config directory.\n\n  * It creates the Nginx config file for each service and enables the site.\n\nSo now whenever I introduce a new service in my homelab, I just have to add\nthe details to the nginx_sites_available variable and run the playbook. The\nNginx role will take care of setting up the reverse proxy for the new service.\n\nAnother than this, I also have a system role which does the basic setup of my\nservers like updating and upgrading packages, setting up the user, creating\nSSH keys for the user and uploading them to GitHub as well as adding the SSH\nkeys to the authorized keys file of all the other servers so they can\ncommunicate with each other, setup GPG keys and mark them as trusted, setup\nZSH shell, setup my dotfiles and more.\n\nSome of the things were pretty straight forward however some were quite\npainful to setup like GPG keys and SSH keys. But I learned a lot from setting\nthem up and it feels great to have them setup now automatically.\n\nOverall, I feel that using Ansible to manage my homelab infrastructure has\nbeen a great learning experience. It has allowed me to automate the deployment\nand configuration of my servers and services, and it has made it easy to keep\ntrack of all the changes I make to my infrastructure.\n\n## Whats Next?\n\nI am planning to explore more about Ansible and learn how to write more\ncomplex playbooks. I want to learn how I can do testing in a much better way\nbecause what I am doing currently is running the playbooks on my homelab\nservers and checking if everything is working as expected which is not the\nbest way to do it.\n\nAnd ofcourse improve my roles and make them more robust and reusable. I am\nalso planning to write a few more posts about how I use Ansible to manage my\nhomelab infrastructure, so stay tuned for that.\n\nFinally I would love to give a shoutout to Jake Howard a.k.a RealOrangeOne \u2197\ufe0f.\nThis whole idea of using Ansible was something I got the inspiration from him\nwhen I saw his response on one of my Reddit posts and checked out his setup\nand how he uses Ansible to manage his homelab. So thank you Jake for the\ninspiration. He also has very good content on his site \u2197\ufe0f so do check it out.\n\nWhile learning Ansible was not easy and something that I had decided to\nexplore this year as I mentioned in my 2023 journey blog but I am glad that I\ndid and I am looking forward to learning more about it and keep improving my\nhomelab infrastructure.\n\n## Conclusion\n\nIn this post, I shared how I use Ansible to manage my homelab infrastructure.\nI explained what Ansible is, how to set it up, and how to write playbooks to\nmanage your servers and services. I also shared my directory structure and how\nI organize my playbooks into roles.\n\nI hope this post has given you some insights (and hopefully some inspiration)\ninto how you can use Ansible to manage your homelab infrastructure. If you\nhave any questions or suggestions, feel free to reach out to me on Twitter \u2197\ufe0f\n/ Reddit \u2197\ufe0f.\n\nSee you in another one! \ud83d\udc4b\n\n## Stay up to date\n\nGet notified when I publish something new, and unsubscribe at any time.\n\nShare on\n\nNeed help with your software project? Let\u2019s talk\n\nDiscuss on Reddit\n\n## Previous Article\n\nAdGuard Home \u2014 Network Wide Ad Blocking in your Homelab\n\n### You may also like\n\n* # homelab# networking\n\n##\n\nAdGuard Home \u2014 Network Wide Ad Blocking in your Homelab\n\nLet's talk about AdGuardHome, a network-wide ad blocking software that you can\nrun in your homelab. It's a great way to block ads and trackers on your\nnetwork without having to install ad blockers on every device.\n\nApr 2, 2024\n\n* # homelab# networking\n\n##\n\nNginx \u2014 The reverse proxy in my Homelab\n\nNginx is a powerful reverse proxy that I use in my homelab to expose services\nto the internet. In this post, I'll show you how I use it and how you can use\nit too.\n\nMar 26, 2024\n\n* # homelab\n\n##\n\nSelf-Host Vaultwarden with Scheduled Backups\n\nIn this article, I will show you how to self-host Vaultwarden along with a\nbackup solution that will periodically backup your data safely.\n\nFeb 5, 2024\n\n### General\n\n  * Home\n  * About\n  * Blogs\n  * Projects\n  * Snippets\n  * Contact\n\n### Extras\n\n  * Hire me\n  * Resume\n  * Uses\n  * Newsletter\n  * Tags\n  * Tweets\n  * Privacy policy\n\n## Stay up to date\n\nGet notified when I publish something new, and unsubscribe at any time.\n\n\u00a9 2024 Akash Rajpurohit\n\n", "frontpage": true}
