{"aid": "39982786", "title": "An SRE's Most Important Skill? Communication", "url": "https://www.checklyhq.com/blog/sre-people-and-communication-matter/", "domain": "checklyhq.com", "votes": 1, "user": "serverlessmom", "posted_at": "2024-04-09 18:51:48", "comments": 0, "source_title": "For an SRE, relationships and communication matter most: advice from SRE's", "source_text": "For an SRE, relationships and communication matter most: advice from SRE's\n\n/Blog/Advice from SRE's\n\nApril 3, 2024\n\n(Updated: April 9, 2024)\n\n# An SRE's Most Important Skill? Communication\n\nNo\u010dnica Mellifera\n\nDeveloper Advocate\n\nCheckly Community\n\npeople\n\nShare on social\n\nI wish someone had told me that I shouldn\u2019t hop between frameworks. Just like\nlearning four programming languages in your first year, in my experience\nspending time content switching as a beginner is wasted effort. If I\u2019d spent a\nsolid year learning how to deploy services on AWS, then when it was time to\nlearn Azure, I\u2019d see more similarities than differences and find it a lot\neasier to pick up a second public cloud. The same is true for the time I spent\nlearning Selenium AND Cypress for end-to-end testing. I wish I\u2019d just stuck\nwith one or, even better, waited \u2018til Playwright was released \ud83d\ude09.\n\nLast week I asked the people of the r/SRE subreddit the question: \u2018What\u2019s one\npiece of advice you wish you\u2019d gotten sooner?\u2019 and got a great variety of\nreplies. Interestingly, some commenters even disagreed with my one piece of\nadvice, saying that being a broad generalist was preferable to focusing on one\nframework!\n\nHere\u2019s some of the advice I got, and some general lessons I think all SRE\u2019s\ncould benefit from.\n\n## People and communication matter\n\nTechnical proficiency is only one part of the puzzle. Any shared wisdom should\ninclude the significance of effective communication, especially in the tech\nenvironment. We often ignore this at our peril, as it is the glue that holds\nteams, concepts, and advancements together. User u/wugiewugiewugie underscored\nthe significance of effective communication in a tech environment, sharing\ntheir experience of bridging the gap between technical jargon and business\nobjectives:\n\n> It took me half a decade to appropriately prioritize the human aspect of\n> technology in what made me do a better job \u2014 today I tend to quote Deming's\n> \"System of profound knowledge\u201d\n\nThis theme of translation and collaboration resonated throughout the thread,\nemphasizing the importance of finding common ground between different\nstakeholders as u/bigvalen points out.\n\n> Sometimes leadership does not speak the same language. Find a translator and\n> work with them.\n\nUser u/bivalen follows up with a fantastic anecdote about speaking the\nlanguage that others understand:\n\n> I had a giant fight many years ago, trying to buy $200 of hardware that\n> would make a single point of failure more reliable. Because I couldn't show\n> what the reliability improvement would be in terms that mattered to an\n> accountant. Until a sales guy suggested leading with how much revenue we\n> booked through the box. I was more interested in company reputation. Once I\n> pointed out that one box made us \u20ac50k/month, the accountant countered with\n> \"how about I give you $5k, and you upgrade everything\".\n\nWhile it might seem like you\u2019re fighting needless beuracracy and top-down\ncontrol, the idea of a \u2018translator\u2019 can make working in these systems quite a\nbit easier. As technical people we all know that single points of failure are\nbad and that high traffic services should have redundancy. We often don\u2019t know\nor care how much revenue each bit of traffic represents. Finding that\nsupporting business impact made this much easier than before.\n\n## Failure is always possible\n\nThe conversation also touched on the inevitability of failure in the tech\nworld. User u/devoopseng emphasized the value of embracing failure as a\ncatalyst for growth, echoing the sentiments of quality management pioneer\nDeming's \"System of profound knowledge.\" In an industry driven by innovation,\nsetbacks serve as invaluable learning opportunities.\n\n> Every incident, outage, or performance degradation presents a chance to\n> analyze, understand, and mitigate potential future issues. Instead of\n> fearing failure, see it as a chance to innovate, iterate, and ultimately\n> improve system reliability. Hard to remember sometimes when you\u2019re early in\n> your career and perfection driven.\n\nWhen things fail, when the PR we worked so hard on is the one that takes down\nproduction, and when it feels like no one has made mistakes as big as we have,\nit\u2019s easy to get discouraged. Many commenters noted the importance of\nadaptability and resilience. User u/durden0 cautioned against succumbing to\nanalysis paralysis, advocating for a pragmatic approach to learning and\nimplementation. In a field where change is constant, flexibility and agility\nare key to success.\n\n> Don\u2019t waste too much time trying to research and learn everything about a\n> new technology to decide which one to use. Try stuff out...then implement\n> and design things in a way that makes it easy to evolve or change course. In\n> other words, avoid analysis paralysis by making change as easy as possible.\n\nUser u/CapitanFlama gave some more basic advice that I think every SRE needs\nto hear: just own your mistakes and move forward:\n\n> If you screw up, if you break something, quickly raise your hand/give\n> notice. It's easier to get help to fix something that just broke or was\n> misconfigured than untangle something that broke and was quickly tried and\n> failed to get fixed.\n\nThis one spoke to me personally: I was guilty in my very early career of\nspending a solid 20 minutes every time I broke something trying to fix it on\nmy own. Eventually I had the experience of not just wasting time doing this\nbut actively making the problem worse, and finally got the lesson: no one\nexpects you to be perfect, but they do expect you to let someone know when you\nmade a mistake.\n\n## Conclusions: the SRE Journey\n\nI wasn\u2019t surprised that the theme that came up more than once was about the\nhuman side of SRE. Making others prioritize the fixes and maintenance that we\nknow is necessary is a huge part of the job, as is encouraging cultural buy-in\non improved practices for better performance.\n\nThe Reddit thread offered hard-earned wisdom for the SRE community. From\nprioritizing depth over breadth in learning to fostering effective\ncommunication and embracing failure, the journey to becoming an experienced\nSRE is more about personal growth than the growth in your technical skills.\n\nNo\u010dnica Mellifera\n\nDeveloper Advocate\n\nNo\u010dnica Mellifera (She/Her) was a developer for seven years before moving into\ndeveloper relations. She specializes in containerized workloads, serverless,\nand public cloud engineering. No\u010dnica has long been an advocate for open\nstandards, and has given talks and workshops on OpenTelemetry and Kubernetes\narchitecture. She enjoys making music that friends have described as\n\"unlistenable.\" In her spare time she cares for her two children and hundreds\nof houseplants.\n\nShare on social\n\n## Related Articles\n\n### SRE and Kubernetes: A Glossary for Advanced Monitoring and Reliability\n\nFebruary 16, 2024\n\nProduct\n\nMonitoring as codeSynthetic monitoringAPI monitoringAlertingPrivate\nlocationsIntegrationsDashboardsLive Checkly dashboardChangelogPricingStatus\n\nCompany\n\nAboutCareersBlogSecurityTerms of usePrivacy\n\nMonitoring as code\n\nCheckly CLIPulumi ProviderTerraform Provider\n\nConnect\n\nContact UsSupportSlack CommunityTwitter @ChecklyHQYouTubeLinkedInPublic\nroadmap\n\nLearn\n\nDocsCheckly GuidesPlaywright Tips\n\nHow we compare\n\nAlternative to DatadogAlternative to New RelicAlternative to\nDynatraceAlternative to Pingdom\n\nArticles\n\nWhat is Synthetic Monitoring?What is API monitoring?What is Playwright?A guide\nto Monitoring as CodeWhy Monitoring as Code?Cypress vs Selenium vs Playwright\nspeed comparison\n\nCopyright \u00a9 2024 Checkly Inc. All rights reserved.\n\n", "frontpage": false}
