{"aid": "39979565", "title": "Support the Open-Source Project", "url": "https://github.com/nurzhannogerbek/rpg", "domain": "github.com/nurzhannogerbek", "votes": 1, "user": "nurzhannogerbek", "posted_at": "2024-04-09 14:04:09", "comments": 0, "source_title": "GitHub - nurzhannogerbek/rpg: This Go application is designed to calculate the optimal number and sizes of packs to fulfill customer orders for a product with different pack sizes.", "source_text": "GitHub - nurzhannogerbek/rpg: This Go application is designed to calculate the\noptimal number and sizes of packs to fulfill customer orders for a product\nwith different pack sizes.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nnurzhannogerbek / rpg Public\n\n  * Notifications\n  * Fork 0\n  * Star 3\n\nThis Go application is designed to calculate the optimal number and sizes of\npacks to fulfill customer orders for a product with different pack sizes.\n\n3 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# nurzhannogerbek/rpg\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nnurzhannogerbekAdd the list of command to to initiate the project within\nDocker cont...9eff17a \u00b7\n\n## History\n\n12 Commits  \n  \n### cmd/packcalculator\n\n|\n\n### cmd/packcalculator\n\n| Docker files have been added to deploy the project in AWS EC2.  \n  \n### internal/packcalculator\n\n|\n\n### internal/packcalculator\n\n| RPG Pack Calculator  \n  \n### screenshots\n\n|\n\n### screenshots\n\n| Added information about the UI in 'README.md' the file.  \n  \n### ui\n\n|\n\n### ui\n\n| Docker files have been added to deploy the project in AWS EC2.  \n  \n### utils\n\n|\n\n### utils\n\n| RPG Pack Calculator  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Quick Launch Commands and Makefile added.  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Quick Launch Commands and Makefile added.  \n  \n### README.md\n\n|\n\n### README.md\n\n| Add the list of command to to initiate the project within Docker cont...  \n  \n### RPG Pack Calculator.postman_collection.json\n\n|\n\n### RPG Pack Calculator.postman_collection.json\n\n| RPG Pack Calculator  \n  \n### docker-compose.yml\n\n|\n\n### docker-compose.yml\n\n| Docker files have been added to deploy the project in AWS EC2.  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| CORS settings have been added.  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| CORS settings have been added.  \n  \n## Repository files navigation\n\n# RPG Pack Calculator\n\nThis Go application is designed to calculate the optimal number and sizes of\npacks to fulfill customer orders for a product with different pack sizes.\n\n## Project Structure\n\n    \n    \n    rpg |-- cmd | `-- packcalculator | |-- Dockerfile | `-- main.go |-- internal | `-- packcalculator | |-- handlers | | |-- handler.go | | `-- handler_test.go | |-- models | | `-- pack.go | `-- services | |-- mocks | | |-- calculator_mocks.go | | `-- graph_mocks.go | |-- calculator.go | |-- calculator_test.go | |-- graph.go | `-- graph_test.go |-- utils | |-- utils.go | `-- utils_test.go |-- ui | |-- public | | `-- index.html | |-- src | | |-- components | | | |-- OrderForm.vue | | | `-- ResultDisplay.vue | | |-- App.vue | | `-- main.js | |-- Dockerfile | |-- babel.config.js | |-- jsconfig.json | |-- package.json | |-- package-lock.json | `-- vue.config.js |-- .gitignore |-- go.mod |-- go.sum |-- Makefile |-- README.md |-- docker-compose.yml `-- RPG Pack Calculator.postman_collection.json\n\n  1. cmd/packcalculator/main.go:\n\n     * Purpose: This file serves as the entry point for your application. It initializes core components such as HTTP handlers and starts the web server.\n  2. internal/packcalculator/handlers/handler.go:\n\n     * Purpose: Contains the HTTP handler code that receives requests from clients and invokes corresponding services to process the requests.\n  3. internal/packcalculator/handlers/handler_test.go:\n\n     * Purpose: Test file for the HTTP handler. Used to verify the correctness of request handling and response formation.\n  4. internal/packcalculator/models/pack.go:\n\n     * Purpose: Defines the data structure representing information about pack size and quantity.\n  5. internal/packcalculator/services:\n\n     * Purpose: This directory contains business logic and services for pack calculations.\n     * mocks/calculator_mocks.go and mocks/graph_mocks.go: Mock implementations for testing purposes.\n     * calculator.go and calculator_test.go: Implement the core algorithm for calculating optimal pack combinations based on given constraints.\n     * graph.go and graph_test.go: Implement the graph-related logic used in the pack calculation algorithm.\n  6. utils/utils.go and utils/utils_test.go:\n\n     * Purpose: Contains utility functions and unit tests for them, in this case, a function to calculate the sum of integers in an array.\n  7. go.mod and go.sum:\n\n     * Purpose: These files manage the Go module and its dependencies.\n  8. README.md:\n\n     * Purpose: A documentation file providing an overview of the project structure, instructions for running tests, and details about the main algorithm used for solving the problem, etc.\n  9. RPG Pack Calculator.postman_collection.json:\n\n     * Purpose: Postman collection which includes pre-configured requests for the different test cases.\n\n## Running Tests\n\nTo run the unit tests of the handlers package use the following command:\n\n    \n    \n    go test ./internal/packcalculator/handlers -v\n\nResult:\n\n    \n    \n    === RUN TestCalculateHandler_ValidRequest --- PASS: TestCalculateHandler_ValidRequest (0.00s) === RUN TestCalculateHandler_InvalidMethod --- PASS: TestCalculateHandler_InvalidMethod (0.00s) === RUN TestCalculateHandler_InvalidJSON --- PASS: TestCalculateHandler_InvalidJSON (0.00s) PASS ok rpg/internal/packcalculator/handlers 0.669s\n\nTo run the unit tests of the services package use the following command:\n\n    \n    \n    go test ./internal/packcalculator/services -v\n\nResult:\n\n    \n    \n    === RUN TestCalculatePacks_BaseExample --- PASS: TestCalculatePacks_BaseExample (0.00s) === RUN TestCalculatePacks_CustomSize --- PASS: TestCalculatePacks_CustomSize (0.00s) === RUN TestCalculatePacks_ZeroQuantity --- PASS: TestCalculatePacks_ZeroQuantity (0.00s) === RUN TestCalculatePacks_EmptySizes --- PASS: TestCalculatePacks_EmptySizes (0.00s) === RUN TestCalculatePacks_ZeroPackSizes --- PASS: TestCalculatePacks_ZeroPackSizes (0.00s) === RUN TestCalculatePacks_NegativePackSizes --- PASS: TestCalculatePacks_NegativePackSizes (0.00s) === RUN TestGeneratePermutations === RUN TestGeneratePermutations/GeneratePermutations_with_Valid_Input Actual result: [8 6 4 2 10 5 3 -1 9 -2 1 0 7] === RUN TestGeneratePermutations/GeneratePermutations_with_Empty_Sizes === RUN TestGeneratePermutations/GeneratePermutations_with_Negative_Quantity === RUN TestGeneratePermutations/GeneratePermutations_with_Zero_Quantity --- PASS: TestGeneratePermutations (0.00s) --- PASS: TestGeneratePermutations/GeneratePermutations_with_Valid_Input (0.00s) --- PASS: TestGeneratePermutations/GeneratePermutations_with_Empty_Sizes (0.00s) --- PASS: TestGeneratePermutations/GeneratePermutations_with_Negative_Quantity (0.00s) --- PASS: TestGeneratePermutations/GeneratePermutations_with_Zero_Quantity (0.00s) === RUN TestClosestCandidate === RUN TestClosestCandidate/NoCandidates === RUN TestClosestCandidate/SingleCandidate === RUN TestClosestCandidate/MultipleCandidates --- PASS: TestClosestCandidate (0.00s) --- PASS: TestClosestCandidate/NoCandidates (0.00s) --- PASS: TestClosestCandidate/SingleCandidate (0.00s) --- PASS: TestClosestCandidate/MultipleCandidates (0.00s) === RUN TestPruneNodes === RUN TestPruneNodes/PruneNodes_with_Single_Candidate === RUN TestPruneNodes/PruneNodes_with_Multiple_Candidates --- PASS: TestPruneNodes (0.00s) --- PASS: TestPruneNodes/PruneNodes_with_Single_Candidate (0.00s) --- PASS: TestPruneNodes/PruneNodes_with_Multiple_Candidates (0.00s) === RUN TestHasWeightedLine === RUN TestHasWeightedLine/EmptyGraph === RUN TestHasWeightedLine/SingleNodeGraph === RUN TestHasWeightedLine/WeightedLinePresent === RUN TestHasWeightedLine/ZeroWeightedLine === RUN TestHasWeightedLine/NegativeWeightedLine --- PASS: TestHasWeightedLine (0.00s) --- PASS: TestHasWeightedLine/EmptyGraph (0.00s) --- PASS: TestHasWeightedLine/SingleNodeGraph (0.00s) --- PASS: TestHasWeightedLine/WeightedLinePresent (0.00s) --- PASS: TestHasWeightedLine/ZeroWeightedLine (0.00s) --- PASS: TestHasWeightedLine/NegativeWeightedLine (0.00s) === RUN TestAddWeightedLine === RUN TestAddWeightedLine/AddToEmptyGraph === RUN TestAddWeightedLine/AddDuplicateLine === RUN TestAddWeightedLine/AddZeroWeightLine --- PASS: TestAddWeightedLine (0.00s) --- PASS: TestAddWeightedLine/AddToEmptyGraph (0.00s) --- PASS: TestAddWeightedLine/AddDuplicateLine (0.00s) --- PASS: TestAddWeightedLine/AddZeroWeightLine (0.00s) PASS ok rpg/internal/packcalculator/services 0.489s\n\nTo run the unit tests of the utils package use the following command:\n\n    \n    \n    go test ./utils -v\n\nResult:\n\n    \n    \n    === RUN TestSum === RUN TestSum/Positive_numbers === RUN TestSum/Empty_slice === RUN TestSum/Negative_numbers === RUN TestSum/Mix_of_positive_and_negative_numbers === RUN TestSum/Single_number --- PASS: TestSum (0.00s) --- PASS: TestSum/Positive_numbers (0.00s) --- PASS: TestSum/Empty_slice (0.00s) --- PASS: TestSum/Negative_numbers (0.00s) --- PASS: TestSum/Mix_of_positive_and_negative_numbers (0.00s) --- PASS: TestSum/Single_number (0.00s) PASS ok rpg/utils 0.502s\n\n## Algorithm Explanation\n\nThe core algorithm is implemented inside services package. These services\ncollectively deliver an effective solution aimed at identifying the most\nefficient combination of pack sizes to meet customer orders while satisfying\npredefined constraints.\n\n  1. Sorting Pack Sizes\n\nThe algorithm begins by sorting the available pack sizes in ascending order.\nThis ensures a systematic exploration of possibilities and simplifies\nsubsequent calculations.\n\n  2. Order Quantity Optimization\n\nIf the order quantity is significantly larger than the sum of available pack\nsizes, the algorithm takes an optimization step. It intelligently reduces the\nproblem space by subtracting packs from the largest available size. This\nbrings the order quantity closer to a predefined clamp value, preventing\nunnecessary calculations for extremely large orders.\n\n  3. Graph Generation\n\nThe core of the algorithm involves the creation of a graph that represents the\npossible permutations of quantities achievable with the available pack sizes.\nThis is accomplished through a recursive process of subtracting pack sizes\nfrom the order quantity. Each node in the graph represents a unique quantity,\nand edges correspond to the pack sizes used to transition between quantities.\n\n  4. Pruning Unnecessary Nodes\n\nAfter graph generation, the algorithm optimizes the graph by pruning\nunnecessary nodes. Nodes that don't contribute to reaching the goal or have no\nedges going out are removed. This pruning step significantly reduces the size\nof the graph, enhancing the efficiency of subsequent calculations.\n\n  5. A* Search Algorithm\n\nThe algorithm employs the A* search algorithm to find the shortest path from\nthe initial quantity (customer order) to the quantity closest to zero. A* uses\na heuristic to guide the search, ensuring an optimal path is found\nefficiently.\n\n  6. Analyzing the Shortest Path\n\nThe shortest path obtained from the A* search represents the most efficient\nway to fulfill the customer order. The algorithm then analyzes this path,\ncounting the number of each pack size used.\n\n  7. Result Calculation\n\nThe final result is a map of pack sizes and their corresponding quantities,\nproviding the optimal combination of packs needed to fulfill the order while\nmeeting the specified constraints.\n\nIn summary, the algorithm combines sorting, optimization, graph generation,\npruning, and the A* search algorithm to systematically explore and find the\noptimal solution for packing items according to specific customer orders. The\nresulting implementation is both efficient and scalable, providing a robust\nsolution for the given problem statement.\n\n## Quick Launch Commands\n\nMakefile:\n\n    \n    \n    # Build the Golang backend binary. build-backend: cd ./cmd/packcalculator && go build -o ../../bin/packcalculator # Run the Golang backend application. run-backend: cd ./cmd/packcalculator && go run main.go # Build the Vue.js frontend application. build-frontend: cd ./ui && npm install && npm run build # Run the Vue.js frontend application. run-frontend: cd ./ui && npm run serve -- --port 8081\n\nTo quickly build and run both the Golang backend and Vue.js frontend locally\non your computer, you can use the following commands from the provided\nMakefile:\n\n  * make build-backend: Build the Golang backend binary.\n  * make run-backend: Run the Golang backend application.\n  * make build-frontend: Build the Vue.js frontend application.\n  * make run-frontend: Run the Vue.js frontend application.\n\nExecute the following commands to initiate the project within Docker\ncontainers:\n\n    \n    \n    docker-compose down docker-compose build docker-compose up -d\n\n  * docker-compose down: Stops and removes containers, networks, and volumes defined in the docker-compose.yml.\n  * docker-compose build: Builds or rebuilds services defined in the docker-compose.yml.\n  * docker-compose up -d: Starts the project in detached mode, running containers in the background.\u00df\n\n## Running the Golang Backend Application\n\nTo run the Golang Backend application locally on your computer, follow these\nsteps:\n\n  1. Install Golang\n\n     * Ensure that Golang is installed on your system. You can download and install Golang from the official website.\n     * After installation, make sure the GOPATH environment variable is set and added to the PATH variable.\n  2. Download Dependencies\n\n     * Navigate to the project root directory:\n    \n        cd rpg\n\n     * Execute the following command to download and install the project dependencies specified in go.mod:\n    \n        go mod download\n\n  3. Run the Golang Application\n\nExecute the following command to run the Golang application:\n\n    \n        go run cmd/packcalculator/main.go\n\n  4. Verification:\n\n     * The Golang application uses the RPG_BACKEND_PORT environment variable to determine the port on which the server should listen. If the variable is not set, the application defaults to port 8080.\n     * After successful startup, you should see a log message indicating the server starting on a specific port, for example:\n    \n        Server starting on port 8080...\n\n## Running the Vue.js Frontend Application\n\nTo run the Vue.js Frontend application locally on your computer, follow these\nsteps:\n\n  1. Install Node.js and npm\n\nEnsure that Node.js and npm are installed on your system. You can download and\ninstall them from the official Node.js website.\n\n  2. Navigate to the UI Directory\n    \n        cd rpg/ui\n\n  3. Install Dependencies\n\nExecute the following command to install project dependencies:\n\n    \n        npm install\n\n  4. Run the Vue.js Application\n\nRun the Vue.js application using the command. Specify a port that does not\nconflict with the Golang Backend application (e.g., 8081):\n\n    \n        npm run serve -- --port 8081\n\n  5. Verification\n\n     * After successful startup, you should see a message in the console indicating the URL of the local server, for example, http://localhost:8081/.\n     * Open this URL in your web browser, and you will see your Vue.js Frontend application.\n\n## API Testing\n\nYou can use curl utility, a tool like Postman or Vue.js Frontend Application\nwith simple UI to test the API with the following scenarios:\n\n### 1\\. Single Item Order\n\n    \n    \n    curl -X POST -H \"Content-Type: application/json\" -d '{ \"order\": 1, \"pack_sizes\": [250, 500, 1000, 2000, 5000] }' http://localhost:8080/calculate\n\n### 2\\. Order Matching a Single Pack\n\n    \n    \n    curl -X POST -H \"Content-Type: application/json\" -d '{ \"order\": 250, \"pack_sizes\": [250, 500, 1000, 2000, 5000] }' http://localhost:8080/calculate\n\n### 3\\. Order Just Above Single Pack Size\n\n    \n    \n    curl -X POST -H \"Content-Type: application/json\" -d '{ \"order\": 251, \"pack_sizes\": [250, 500, 1000, 2000, 5000] }' http://localhost:8080/calculate\n\n### 4\\. Order Requiring Multiple Packs\n\n    \n    \n    curl -X POST -H \"Content-Type: application/json\" -d '{ \"order\": 501, \"pack_sizes\": [250, 500, 1000, 2000, 5000] }' http://localhost:8080/calculate\n\n### 5\\. Large Order\n\n    \n    \n    curl -X POST -H \"Content-Type: application/json\" -d '{ \"order\": 12001, \"pack_sizes\": [250, 500, 1000, 2000, 5000] }' http://localhost:8080/calculate\n\n### 6\\. Custom Pack Sizes\n\n    \n    \n    curl -X POST -H \"Content-Type: application/json\" -d '{ \"order\": 263, \"pack_sizes\": [23, 31, 53] }' http://localhost:8080/calculate\n\nTo test the API, you can use Postman and import the provided Postman\ncollection called RPG Pack Calculator.postman_collection.json located in the\nroot directory. This collection includes pre-configured requests for the\nfollowing test cases:\n\n  1. Single Item Order | Order: 1, Pack Sizes: [250, 500, 1000, 2000, 5000]\n  2. Order Matching a Single Pack | Order: 250, Pack Sizes: [250, 500, 1000, 2000, 5000]\n  3. Order Just Above Single Pack Size | Order: 251, Pack Sizes: [250, 500, 1000, 2000, 5000]\n  4. Order Requiring Multiple Packs | Order: 501, Pack Sizes: [250, 500, 1000, 2000, 5000]\n  5. Large Order | Order: 12001, Pack Sizes: [250, 500, 1000, 2000, 5000]\n  6. Custom Pack Sizes | Order: 263, Pack Sizes: [23, 31, 53]\n\nFollow these steps to use the Postman collection:\n\n  1. Open Postman.\n  2. Click on \"Import\" in the top left corner.\n  3. Select \"Choose File\" and navigate to the project's root directory.\n  4. Select the file RPG Pack Calculator.postman_collection.json and click \"Open\" to import the collection.\n  5. The collection will now be visible in the left sidebar of Postman.\n\nYou can then execute each request from the collection to test the API for\ndifferent scenarios. Adjust the request payload or parameters as needed.\n\n## User Interface Validation\n\nThe Vue.js Frontend Application includes a simple yet effective input\nvalidation in App.vue. The validation is applied to the order quantity and\npack sizes fields:\n\n  * Order Quantity Validation:\n\n    * Validates that the order quantity is a positive integer.\n    * Displays an error message if the input is invalid.\n  * Pack Sizes Validation:\n\n    * Validates that pack sizes are valid numbers separated by commas.\n    * Displays an error message if the input is invalid.\n  * Calculate Button State:\n\n    * The \"Calculate Packs\" button is disabled until both the order quantity and pack sizes are valid.\n    * Prevents the user from triggering calculations with invalid input.\n  * Error Messages:\n\n    * Error messages are displayed below the respective input fields when validation fails.\n    * Provides clear feedback to the user about the nature of the validation error.\n\nThis validation ensures that users provide correct and reasonable input before\ntriggering the pack calculation, enhancing the overall user experience.\n\n## About\n\nThis Go application is designed to calculate the optimal number and sizes of\npacks to fulfill customer orders for a product with different pack sizes.\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n3 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Go 81.4%\n  * Vue 14.7%\n  * HTML 1.4%\n  * Other 2.5%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
