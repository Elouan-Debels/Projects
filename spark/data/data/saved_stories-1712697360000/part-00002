{"aid": "39978736", "title": "Why You Should Go Open-Source", "url": "https://ekxide.io/blog/why-you-should-go-open-source/", "domain": "ekxide.io", "votes": 3, "user": "elfenpiff", "posted_at": "2024-04-09 12:34:23", "comments": 0, "source_title": "Why You Should Go Open-Source | ekxide IO GmbH", "source_text": "Why You Should Go Open-Source | ekxide IO GmbH\n\n# Why You Should Go Open-Source\n\nChristian Eltzschig - 09/04/2024\n\nopen-source\n\n# Why You Should Go Open-Source\n\nIn this article, I would like to analyze ideas and misconceptions floating\naround when it comes to open-source software and provide arguments on why an\nopen-source strategy can be a success story.\n\nSo, if you are a developer trying to convince your manager or you are the one\nwho is currently exploring and deciding on the open-source strategy, this\narticle is for you. It is based on the experience we had with our open-source\nproject iceoryx, which led to the founding of our open-source company exkide.\n\nDiscuss the article on Reddit\n\n## What Is iceoryx\n\niceoryx is a zero-copy inter-process communication framework written in\nC++/Rust. With ekxide, we founded a company that backs up the open-source\nproject, provides commercial support and products around it, and supports the\ncommunity with new features, bug fixes, and tooling.\n\n## Let's Ask The Business Team To Open-Source Our Software\n\n### But What About Our Unique Selling Point?\n\nOne counterargument often used is, \"When we open-source our product, we give\naway one unique selling point!\". When you encounter this statement, it is\nworth digging deeper and understanding what unique thing the business people\nare trying to sell.\n\nIn our case, it is not zero-copy inter-process communication by itself. This\nis necessary for most users in our domain, and there are already multiple\ncustom closed-source solutions. If you would like to develop software for a\ncar, a robot, or a medical device, you most likely require fast inter-process\ncommunication to deploy a robust and efficient system.\n\nWhat makes our product unique is the upcoming support for zero-copy\ncommunication on GPUs or across hypervisor partitions. So, a strategy could be\nto open-source the core functionality, design and architecture that supports\nclosed-source extensions, and promote them. This is not a new idea! It is the\nOpen-core model.\n\n### But Wouldn't It Help Our Competitors?\n\nWhen a company open-sources software, other competitors can get inspired by\nit, use it, or fork and extend it. So they save time, create their product\nfaster, and save money at the same time. But this is only partially true. If\nyou develop the product, you have the expertise and the innovation on your\nside. Couple this with a well-defined Open-Core business strategy, and you\nwill be ahead. The underlying issue may be something else. Question yourself,\nDo you rather want to succeed, or do you want your competitors to fail? If you\nwant to succeed, what is the problem when your competitors also succeed?\n\nIf your software is well received and others start using it, you may even save\nmoney since there is a common interest in solving bugs and introducing new\nimprovements and features. This may lead to cooperation between you and the\ncommunity or they start contributing and you get new features for free. This\nis how iceoryx got FreeRTOS platform support - thank you, NXP Semiconductors,\nfor the contribution.\n\nHowever, the most significant benefits are that you can define the ecosystem\naround your open-source software, grow horizontally, and gain customers in\ndomains you have never thought of. When you invest time in the community, you\nalso have access to a talent pool that may support you with bug fixes and\nfeatures where you lack some expertise. Big thanks goes to our community for\nhelping with the bazel support in iceoryx where we still have some knowledge\ngaps.\n\n### But Wouldn't It Slow Down Development?\n\nThis argument comes more from the developer's side. The misconception is that\nthe maintenance overhead with additional testing, documentation, and a clean\ncode base is not worth the effort. It is required for the community to\nconsider your project, but it is also vital for yourself. The proof-of-concept\nphase may be a bit slower, but as soon as this goes into production,\ndocumentation, clean code base, and test concept are not optional. Leaving out\ndocumentation, tests and code clean-ups will produce faster results only in a\nbrief period. After that, every additional feature will be more expensive and\ntime-consuming just because of technical debt.\n\nWith poor tests, how are you sure the new features work and do not break\nexisting ones? With poor documentation, how can other developers (including\nyour future self) use the software as intended and continue developing it\nfurther?\n\nIsn't it something we all strive for as developers? Create something that is\nused also in the future and continues evolving. To create something that\nmatters and persists. If you are confident that your problem is a problem\nworth solving, others may think the same. When the solution is closed-source,\nthey will develop their custom solution, and your code may end up lost in some\nbig mono-repo.\n\nI believe the benefits you gain from open-sourcing outweigh the extra effort\nof additional documentation and community work. Not only does the community\nbenefit from it, but so do you too - when others will later continue the work\nand ideas you have started or stumble across all the edge cases you never\nthought of.\n\n### But How To Sell This To Our Investors?\n\nIf you are working in a startup, your investors expect you to increase the\nvalue of your startup. How can this be achieved when providing software as\nopen-source? So the question is: why offer software as open source? Let's\nexplore this in more detail.\n\n## Why Offer Software As Open Source\n\n### Set The Standard\n\nLet's go back to the unique selling point. When your software is the only\nopen-source software that solves a particular problem, you can set the\nstandard. When others provide proprietary solutions, they have to compete with\nyou, and they need to offer more advanced features worth the extra costs one\nhas to pay for their product - depending on your open-source license and\nbusiness model. Furthermore, with your solution, you can steer the ecosystem\nand define the architecture and how your business will evolve around it.\n\nWhen your project succeeds and reaches a critical mass, companies will require\ntheir supplier to be compatible with your solution to simplify their software\nstack. By offering an open-source solution, your product eliminates the need\nfor a closed-source solution, and you have the advantage of knowing your\nsolution in great detail.\n\n### Horizontal Growth\n\nWhen your project flourishes, it will be used by users from different domains\nwith use cases you never thought of in the first place. We were surprised when\nwe noticed that fintech libraries, desktop applications, or computer-aided\nmedical procedures are using iceoryx, which was initially developed for the\nembedded safety-certified automotive market.\n\nThese new use cases also moved the frontier of what we strive for with\niceoryx. Support for new operating systems was requested, and they wanted to\ncommunicate via low-latency network protocols or become much more dynamic than\nthe typical static safety-critical automotive use case. Now, we will work on\nlanguage bindings for C#, Lua, Python, or Java, all things you usually do not\nencounter in a car but on a desktop machine. So, after some time, we gained\nusers we didn't even think of when we started the project.\n\nWhen starting a new project with a proof-of-concept phase, developers began to\nuse our software. Since it is open source with a permissive license (Apache\n2.0), they did not have to ask their manager for an evaluation license but\ncould just use it.\n\nWhen their product matured enough, they required our advanced features. But\nsometimes some pieces were missing, and who do you call when you have problems\nwith the software you are using - the company behind it! In this case exkide.\n\nOur core use case benefits from this as well. We also use those new tools and\nfeatures in our workday life. Windows is not running in cars, but it is nice\nto have the freedom to develop on any machine you want - from Windows, macOS,\nLinux to FreeBSD - thanks to the platform support community members like ecal\nrequested.\n\n### Increase Your Talentpool\n\nGetting talented developers is a challenge many companies are facing,\nespecially when your particular field requires detailed domain knowledge. The\nonboarding of new hires can be time-consuming, and the lack of experience in a\nspecialized field may slow down the development process.\n\nWhen building up a community that is welcoming and fun to interact with, you\ncreate a talent pool at your fingertips. You observe who is shining with their\ncontributions, and you have the advantage that they do not need the entire\nonboarding process since they already know the product. We also received\napplications just because people wanted to work with us on our iceoryx\nproject.\n\nEven when employees leave the company, they stick around the project and are\noften supportive when you are in need. A good community has your back when it\ncomes to an urgent bug fix or support in a feature where you lack the\nexpertise.\n\n## Special Thanks\n\nI want to conclude the article by saying thank you to the company that gave us\na cozy place to start our development of iceoryx and supported us when we\nopen-sourced our project, Robert Bosch GmbH.\n\nIn the last 3 years, Apex.AI has been our home. The atmosphere there did let\nus thrive and brought more features into iceoryx.\n\nWithout them, iceoryx wouldn't have been the success story it is today.\n\nThe primary goal of our new company ekxide is to focus now entirely on\niceoryx, boost feature development further, and provide commercial support,\ntraining, and custom feature development for our community, users, and\ncustomers.\n\nImpressum \u2013 Legal Notice\n\n2024 \u00a9 ekxide IO GmbH | Based on the zolastrap theme for Zola\n\n", "frontpage": false}
