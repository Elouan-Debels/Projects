{"aid": "40036313", "title": "The Future of Front End Is Already Here", "url": "https://redmonk.com/kholterhoff/2024/03/28/the-future-of-frontend-is-already-here/", "domain": "redmonk.com", "votes": 2, "user": "mooreds", "posted_at": "2024-04-15 01:49:53", "comments": 0, "source_title": "The Future of Frontend is Already Here", "source_text": "The Future of Frontend is Already Here \u2013 console.log()\n\nSkip to Content\n\nRedMonk the developer-focused industry analyst firm\n\n  * Become a client\n\n  * Videos\n  * Research\n  * Events\n  * About\n  * Team\n  * Services\n\n    * Briefings\n    * Consults\n    * Projects and Media\n  * Clients\n  * Contact\n\n  * @redmonk\n\n#### console.log()\n\n# The Future of Frontend is Already Here\n\nBy kate holterhoff | March 28, 2024\n\nShare via Twitter Share via Facebook Share via Linkedin Share via Reddit\n\nEngineers focused on the top of the stack are the Newest New Kingmakers\nbecause the software industry as a whole is trending toward packaged, managed,\nand abstracted solutions intended to minimize the pain of backend and\ninfra\u2014precisely the type of development that frontend engineers have little\ninterest in doing themselves. Central to my claim is acknowledging that\nfrontend devs are not alone in expressing this preference to offload,\nabstract, and move into the cloud their operations labor. In fact, more and\nmore of the developers I speak to\u2014frontend, backend, and ops\u2014describe their\nworkflows in ways suggesting that developers of all stripes are ceding their\nlow level concerns to managed providers.\n\nFrontend development is no longer ancillary to the SDLC, and in this post,\npart of a series concerning the frontend Kingmaker, I discuss what the future\nholds for the frontend and a top-of-stack-first software industry more\nbroadly.\n\nDiscussion of the future of frontend is popular right now. While Josh W Comeau\nargues against hyperbolic claims that AI spells \u201cThe End of Front-End\nDevelopment,\u201d Shahan Chowdhury\u2019s \u201cThe future of frontend development\u201d argues\nthat AI and No-Code/Low-Code will augment frontend developers without\nreplacing them. You can also find more general posts on the state of\nJavaScript and web development by Emma White, Ritesh Kumar, and Luigi Toporov.\nHowever, all of the ink spilled on this subject misses what I consider to be\nthe equally significant concern of the frontend Kingmaker. Namely, that as\nabstracted solutions intended to lessen the pain of backend and operations\nimprove, the role of frontend developers in making purchasing decisions will\ncontinue to grow.\n\n## From BaaS to PartyKit\n\nLet\u2019s talk about some of the vendors catering to frontend engineers, and the\nrole of cloud-based abstractions for establishing their position in the\nmarketplace.\n\n> Testing out @partykit_io for the first time\n>\n> I love building real-time apps so I'm excited to finally try it out, also\n> huge fan of @threepointone work \ud83e\udee1 pic.twitter.com/JX1SR5CX7c\n>\n> \u2014 nader dabit (@dabit3) November 30, 2023\n\nWhen Sunil Pai, CEO of PartyKit, decided to appear on an episode of JS Party,\nChangelog\u2019s frontend podcast, he did so for very good reason. Not only is Pai\na veritable institution in the React, JavaScript, and CSS domains, PartyKit is\ntargeted to frontend engineers. Pai\u2019s newest project has received a ton of\nbuzz for simplifying real-time sync, which has long been a thorn in the side\nof developers working on multiplayer collaborative apps that allow more than\none user to work simultaneously (think Figma, Google Docs, and Replit).\n\nPartyKit represents a compelling case for the ascendance of frontend. Not only\ndoes it demonstrate the innovation happening in the JavaScript space, PartyKit\nalso suggests the robustness of the frontend buyer market. Vendors are\nnoticing the success of platforms that deliberately target frontend\ndevelopers, and are eager to spin up their own solutions to meet the demand.\nAccording to JS Party co-host Kevin Ball:\n\n> I like [PartyKit\u2019s] one-liner[: \u201cit\u2019s like Vercel or Netlify, but if you\u2019re\n> building real time\u201d]. This model of ... Vercel and Netlify did something\n> great, which is \u201cOkay, if you\u2019re a frontend developer, you know your\n> stuff... Deploy on us. We\u2019ll handle everything else, and we\u2019ll make it easy\n> to deal with these other different things.\u201d And you\u2019re saying, \u201cOkay, I want\n> to be that for multiplayer.\u201d\n\nBall argues that platforms created to remove the pain of managing backend\noperations set a precedent in the market. These vendors include not only\nVercel and Netlify, but also, as I have argued, BaaS companies like Supabase,\nGoogle Firebase, MongoDB Atlas, AWS Amplify, and Appwrite. It also includes\ncompanies like Zephyr Cloud, a cloud service founded by the inventors and\nmaintainers of the micro-frontend containerization technology Module\nFederation, intended to lessen the difficulty of developing and managing\nmicro-frontends. The number of companies that identify frontend developers as\na lucrative and eager customer base is growing steadily among incumbents and\nnew entrant startups alike. All recognize that the cognitive load of self-\nmanaging operations and infrastructure, not to mention databases, security,\nauthentication, and observability, poses tremendous challenges that are\nincreasingly unnecessary to handle in-house.\n\n## Moar Abstractions\n\n> moar abstractions pls...\n>\n> \u2014 Betty Junod (@BettyJunod) September 6, 2019\n\nFrontend developers are Kingmakers owing to a long succession of software\ndevelopment trends tied to the rise of cloud-hosted abstractions. Abstracted\nsolutions simplify and expand access to primitives, which are otherwise\ndifficult to manage. In PartyKit\u2019s case, these include Cloudflare\u2019s Durable\nObjects, which are essentially Cloudflare workers that feature in-memory\nstate. The story of primitives ceding place to managed services is one we\noften tell at RedMonk (I recommend my colleague Stephen O\u2019Grady\u2019s recent \u201cAI,\nPaaS and Punctuated Equilibrium\u201d), but it is worth rehashing this trend to\nconsider how it affects the move up-stack.\n\nTo begin, the historical progression toward abstraction in the software\ndevelopment profession applies to services as well as languages. Fewer and\nfewer programmers spend their days writing code for bare metal and low-level\nlanguages. Although less human-readable languages like C, Assembly, and\nFortran aren\u2019t going anywhere soon, and Rust is growing its list of admirers,\nmost work-a-day developers write high-level code for the top of the stack.\n\nGitHub\u2019s 2023 State of the Octoverse certainly upholds this trend. According\nto their research, of the \u201c20.2 million developers\u201d (meaning individuals with\na GitHub account), there has been \u201ca 21% increase in developer growth over the\npast year\u201d with JavaScript continuing to be the most popular language.\nRedMonk\u2019s own language rankings echo this finding, with JavaScript holding top\nseat as the most popular language every year since 2015. In fact, of the top 7\nlanguages, 6 reside squarely at the top of the stack and three are client-side\n(JS, CSS, and Typescript). My takeaway from these surveys is that as the\nsoftware field continues growing by leaps and bounds, the lion\u2019s share of new\nentrants to the field will work on the frontend.\n\nIn addition to the languages developers write, modern software development\nrelies heavily on services that abstract away fiddly bits and complexity.\nWhile some grumpier sysadmins will doubtless wring their hands at this\nproclamation, the fact of the matter is that offloading operations is becoming\nincreasingly desirable because ops is hard, infra is expensive, and the stakes\nfor security and compliance are high.\n\n## The API Economy & Cloud Native\n\nThe frontend Kingmaker is a consequence of the proliferation of abstractions,\nand abstractions are here to stay. Managed services can improve security by\nleaving complex and time consuming tasks like user authentication and highly\nregulated services like POS systems to domain experts. They allow companies to\nfocus wholly upon business logic unique to their use case. When it comes to\nthe frontend tooling and provisioning ecosystem, this move toward abstractions\nties into the failure of full-stack. The rise of the full-stack engineer,\nwhile good for employers, is now roundly denounced by many in this space\nbecause expecting developers to master everything saddles them with undue\ncognitive load. As Laurie Voss argues,\n\n> we survive the ever growing stack ... by abstracting details away.\n\nLet\u2019s dig into the subject of abstractions by revisiting the so-called API\nEconomy. While APIs have been essential to the story of cloud computing since\nits inception, with Salesforce and eBay allowing access to their web APIs as\nfar back as 2000, the market share of companies that have adopted an Ask Your\nDeveloper philosophy by offering APIs is, to quote Paul Lehair, \u201ceating the\nworld.\u201d APIs are essential to modern software development, and frontend\nengineers are well positioned to profit from this evolution. According to J\nChris Anderson, a co-founder of Couchbase who is currently working on\nFireproof, a database startup targeted at front-end developers:\n\n> APIs are getting integrated in the frontend, which is why they are getting\n> the buying power and making them into Kingmakers.\n\nMost recently, the ascent of API driven development appears in the integration\nof LLMs. Instead of training up their own models or hosting them locally,\ndevelopers can easily build chatbots using options like OpenAI\u2019s ChatGPT,\nGoogle\u2019s Gemini, or Anthropic\u2019s Claude using the API integrations these\nvendors aim to make as seamless and intuitive for developers as possible.\nIndeed, OpenAI\u2019s custom GPTs provide bespoke experiences while eliminating the\npain of training and self-hosting these models. They also take developer\nexperience seriously, with extensive documentation, quick start guides, and\nSDKs.\n\nIn addition to frontend engineer\u2019s comfort with APIs, the abstractions vendors\nprovide for these users are frequently cloud native. Brian LeRoux, cofounder\nof Begin, is optimistic about the frontend Kingmaker\u2019s future because of this\ndomain\u2019s ease with cloud. From a vendor\u2019s perspective:\n\n> Frontend engineers are a wonderful market to onboard to the new cloud\n\nBecause frontend developers must take backend processes into account when\nbuilding dynamic and interactive websites, they recognize the importance of\nserverless and cloud hosting. Indeed, the challenges attendant to the\nServer/Client Two-Step are unsettled and occupy a tremendous amount of brain\npower among the savviest developers in this field.\n\n## Abstraction Problems\n\nThere are, of course, tradeoffs to adopting these abstraction-heavy solutions.\nAbstracted products and services, often delivered as APIs and libraries, all\nport other people\u2019s code into a project. This is both its beauty and danger.\nAbstracted solutions force projects into a specific shape, and often struggle\nto scale as a consequence. As I prepare to attend DevNexus in the coming weeks\nI anticipate hearing the now very old chestnut trotted out that Twitter had to\nrewrite their backend from Ruby on Rails to Scala (which builds on Java)\nbecause lower-level languages like Java scale better. When it comes to\nhandling heavy processes and caching layers, languages like Java will continue\nto be invaluable. However, apps as large as Twitter are the exception rather\nthan the rule, meaning that growing pains are not hindering the mass of\ndevelopers from using JavaScript and TypeScript. As a postscript, it is worth\nnoting that Java 22 is adopting radically simplified syntax that resembles the\nhigher level languages outcompeting it in terms of commits.\n\n> Check out this concise @java 22 (& 23, probably) syntax!! \ud83d\ude31\n>\n> Updates like these make Java look like languages closer to the top of the\n> stack. This will absolutely appeal to many of the fullstack engineers I\n> know. @redmonk pic.twitter.com/9Qmuos5ltW\n>\n> \u2014 Dr. Kate Holterhoff (@KateHolterhoff) February 26, 2024\n\nIn addition to scaling issues, managed services and products that abstract\naway complexity are frequently costly. Vercel simplifies deployments by\nwrapping AWS primitives in a simple build experience requiring zero\nconfiguration, but users pay for this convenience. This has lead some\ndevelopers to complain Vercel Is Ridiculously Expensive. Despite increased\noverhead, many companies are finding the tradeoff of not having to hire\nengineers to manage infrastructure to be well worth it. Joe Emison, cofounder\nand CTO at Branch Insurance, has made the business case for leveraging cloud\nservices in conjunction with hiring and training up junior developers that\nspecialize in frontend skills:\n\n> as we have better and more powerful cloud services to build on (e.g., AWS,\n> GCP, Azure, Netlify, Twilio, Stripe), more developer focus turns to\n> interfaces.\n\nIn other words, by offloading operations to managed providers Branch\u2019s\nengineering department is able to focus wholly on UI and frontend interfaces.\nAlthough Branch is an extreme case, the future of software development is\nmoving in the direction Emison charts.\n\nNow, let me address the final and least charitable interpretation of so many\ndevelopers\u2019 reliance upon abstractions and managed services: the supposed\nexistential threat to the profession. I have already discussed the stereotypes\nagainst the frontend, which dismisses this category of engineers for being\nfeminine and overrun by under-qualified junior developers. For those taking\nthese stereotypes seriously, a frontend-dominated future spells the end of\nsoftware engineering. According to this way of thinking, frontend engineers\nare little better than citizen developers who rely exclusively on low-code and\nno-code solutions. If we take seriously James Somers\u2019s experience witnessing\nAI and low/no-code replace the labor of software engineers, then we are indeed\nat the cusp of \u201cthe waning days of the craft.\u201d\n\nBut I don\u2019t subscribe to this gloomy interpretation of our frontend-driven\nfuture. I argue instead that the frontend is where a tremendous amount of\ninnovation is happening. Any vendor betting on the notion that frontend\nengineers aren\u2019t savvy or accomplished, and therefore sitting duck targets for\noverpriced, black box solutions, will ultimately fail.\n\n## The Frontend is Dead, Long Live the Frontend\n\nWhich brings me to my last point about the newest new Kingmaker. Like any\nshift the transition to elevate the frontend has been uneven, but in the\nparticular case of software development it has also been accompanied by a\nredistribution of roles and a blurring of the lines that traditionally\nseparated front from back end, client from server, and static from\ninteractive. Many in the space like Melissa Mcewan have long criticized the\nterms frontend and backend, noting that: \u201cThis distinction hasn\u2019t been\nrelevant in probably over a decade, but it persists.\u201d Reddit user n9iels\nechoes this point:\n\n> In my experience the front-end domain is shifting from only HTML/CSS/JS to\n> also include backend-for-fronted. Especially with websites that are entirely\n> build with React or Angular (SPA) the line between backend and frontend gets\n> gray.\n\nBecause the terms frontend, backend, and full-stack don\u2019t offer an accurate\nreflection of the SDLC today they will eventually be replaced by new developer\ntypes. While I don\u2019t anticipate the term frontend\u2019s jettisoning anytime soon,\nin terms of real world practice this domain must continue to shift. In place\nof the frontend developer will appear a new breed of engineers that work with\nAPIs and cloud services to achieve performant, interactive UIs. These\ndevelopers will operate across the stack, not by presuming to know everything,\nas was expected of a full-stack engineer, but rather by leveraging the tools\nat their disposal and innovating where these don\u2019t pass muster.\n\nThe frontend\u2019s sun has risen, but this discipline is a revolving star.\nAlthough the software industry appears particularly unstable these days owing\nto the uncertainty bred from the AI technology boom and the evaporation of\nZIRP funding conditions, vendors recognize that developers working at the top\nof the stack are well positioned for success. The industry and market is\nbecoming more complex and sophisticated, but developers working in the\nfrontend space have met these challenges head-on. What seems more likely to me\nthan a proliferation of lobotomized developers, mindlessly enthralled to their\nhyperscaler overlords, is that as the labor of development continues to move\nup-stack improvements in client-side and UI experiences (think caching,\nWebAssembly, hydration, containerized micro-frontends) will grow in parallel.\nMany of the brightest lights and most pioneering developers in the software\nindustry today are working in the frontend because this domain leverages the\ncutting edge technologies they prefer.\n\nDisclaimer: Cloudflare, Oracle (Java), MongoDB, Microsoft (GitHub), Google,\nand AWS are RedMonk clients.\n\n## No Comments\n\n### Leave a Reply Cancel reply\n\n## Recent Posts\n\n  * The Future of Frontend is Already Here\n  * Why the Frontend Kingmaker isn\u2019t Full-Stack: A History\n  * Frontend Developers: the Newest New Kingmakers\n  * Mobile App Development is Broken: Are Progressive Web Apps the Remedy?\n  * Can AI Code Assistants Really Teach Junior Developers to Code? Ask a Redditor\n\n## Recent Comments\n\n  1. Alex o on Checking In on the State of TDD\n  2. Oxford Harrison on SPA Wars\n  3. Maria on Can AI Code Assistants Really Teach Junior Developers to Code? Ask a Redditor\n  4. Bina Oak on How to Reach Software Engineers through Social Media\n  5. Reasonable Coward on The Indie, Open Source JavaScript Frameworks Developers Love, and the Risks of Commercial Relationships\n\n### Subscribe to Blog via Email\n\n  * Clients\n  * Contact\n  * Services\n\nBriefings briefings@redmonk.com\n\nRedMonk\n\n48 Union Wharf\n\nPortland, ME 04101\n\nTwitter YouTube\n\n", "frontpage": false}
