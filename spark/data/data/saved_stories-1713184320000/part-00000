{"aid": "40037583", "title": "My list of challenging software projects some programmers should try", "url": "https://www.andreinc.net/2024/03/28/programming-projects-ideas", "domain": "andreinc.net", "votes": 5, "user": "cmpit", "posted_at": "2024-04-15 06:30:05", "comments": 0, "source_title": "My list of challenging software projects some programmers should try", "source_text": "My list of challenging software projects some programmers should try | andreinc\n\n### Andrei Ciobanu\n\nSoftware Engineer from Eastern Europe.\n\n  * Bucharest, Romania\n  * GitHub\n  * Spotify\n\n# My list of challenging software projects some programmers should try\n\nMarch 28, 2024 10 minute read\n\nBefore we begin, I\u2019d like to clarify that the project ideas I am about to\nsuggest are mainly intended for those who are interested in exploring new\nareas of knowledge. However, it\u2019s important to note that most of these ideas\nmay not be relevant to today\u2019s job market. If you\u2019re looking to add something\nimpressive to your portfolio for recruitment purposes, it might be worth\nconsidering other options. For example, instead of building yet another TODO\napp in React (75k repos on GitHub), you might want to focus on back-end or\nfront-end development by cloning a well-known site. Such projects are likely\nto be more beneficial in terms of knowledge gained and job perspectives.\n\nThat said, some developers are more interested in exploring creative fields\nbeyond the traditional job market. For these individuals, programming is more\nof a hobby than a means of earning a living. If you fall into this category,\nyou may find the following project suggestions more appealing.\n\nYou can also check other articles on this topic:\n\n  * Challenging projects every programmer should try\n  * More challenging projects every programmer should try\n  * Challenging algorithms and data structures every programmer should try\n  * (Even more) challenging programming projects you should try\n\n# My listPermalink\n\n  * Lesser Known Data Structures\n  * Write a distributed Hash Table\n  * Write a scientific calculator\n  * Write your own HTTP Server in C + POSIX\n  * Write an esoteric programming language\n  * Write your own Virtual Machine\n  * Write a game for UXN\n  * Write a game for TIC-80\n  * Write your original markdown language\n  * Write a static site-generator\n  * Mandelbrot Set Navigator\n  * Simulate various phenomena from physics\n  * Experiment with Conway\u2019s Game Of Life\n  * Approximate the reality with polynomials\n  * A calculator for symbolic differentiation\n  * A slot machine\n  * Write a game engine for text-based adventures\n  * A tiling window manager\n\n# Lesser Known Data StructuresPermalink\n\nFor example, Austin Z. Henley recommends writing your own Topological Sort,\nRecursive Descent Tree Parsing, Bloom Filter, Piece Table, Splay Tree\nimplementations.\n\nThe truth is that many Computer Science curricula have been diluted. In fact,\nsome schools only teach the basics, such as Dynamic Arrays, Linked Lists,\nQueues, Stacks, and Hash Tables. However, there are many other Data Structures\nand Algorithms that are worth exploring beyond these fundamental concepts.\n\nPersonally, I would also go for:\n\n  * B-Tree - I would defintely implement this one. It\u2019s an interesting data structure that is used in database systems or filesystems. It also opens you to new ways of thinking about improving your memory and data layout in your applications;\n  * Circular Buffer - This is a data structure that solves the Consumer-Producer problem elegantly, especially when the Consumer cannot (momentarily) keep up with the Producer.\n  * Cuckoo Filter and Cuckoo Hash Table - The practicality of the Cuckoo approach is yet to be proven, but this is definitely something that\u2019s worth your time for fun purposes. Simply put, the idea behind those data structures is fun and creative.\n  * Open-Addressing Hash Tables - Most schools and courses focus on the Separate Chaining technique and blatantly ignore the elegant ways of open addressing. So why don\u2019t you want write a few open-addressing implementations and benchmark them against existing library implementations? Try to make your implementation faster, brag, and learn.\n\n# Write a distributed Hash TablePermalink\n\nIf you already know how to write your own Hash Table, building a Distributed\nHash Table won\u2019t be an impossible task. Although it might seem like a\ncomplicated project, it doesn\u2019t necessarily have to be production-ready or\nbecome the next Redis.\n\nBy the end of the project, you will likely become more comfortable with\nnetwork programming and managing concurrency issues.\n\nBonus: Thoroughly testing your DHT will be a journey in itself.\n\n^Don\u2019t get demotivated if you get stuck or the result is terrible!\n\n# Write a scientific calculatorPermalink\n\nThis is a relatively easy project, but it\u2019s worth witnessing the power of the\nStack data structure. You can do this by learning how to evaluate RPN\nexpressions and implementing the Shunting Yard algorithm. As you work on this\nproject, challenge yourself to learn a new GUI library, one that you haven\u2019t\ntouched before.\n\nOnce you have a working calculator, start exploring crazy ideas:\n\n  1. Implement your own sine function just for the thrills.\n  2. Implement your own big numbers library to operate on huge numbers.\n  3. Can your calculator handle raising 3 to the power of 2.27?\n  4. Write a module that enables users to operate on matrices, including adding, multiplying, calculating the inverse, computing the determinant, and solving systems of linear equations, among other things.\n  5. Can your calculator check if a number is prime?\n  6. Can you write a module that gives the user random insights about numbers?\n\nIt can also work in the browser.\n\n# Write your own HTTP Server in C + POSIXPermalink\n\n^First, start learning C if you haven\u2019t already. Contrary to popular belief,\nlearning C early in your career will make you a better programmer in the long-\nrun. I am more convinced of this now than I ever was before. However, this is\nnot the time or the article to support my claim.\n\nWhen implementing the HTTP protocol, keep in mind that you don\u2019t have to cover\neverything. The purpose of this exercise is not to write the fastest HTTP\nserver out there. Instead, you do it to:\n\n  * Accumulate frustrations that come with dealing with char* frequently. Of course, you can create an abstraction over char* to solve this problem, and while it may be buggy, it will be uniquely yours!\n  * Learn about fork(), pthreads, and all the other low-level knowledge you don\u2019t usually have to deal with, except in your Operating Systems course.\n  * Gain an understanding of how TCP and Networking Programming work.\n\nIf mentioning C has offended you, you can always rewrite the project in Rust.\nThat would be new.\n\n# Write an esoteric programming languagePermalink\n\n^An esoteric programming language (sometimes shortened to esolang) is a\nprogramming language designed to test the boundaries of computer programming\nlanguage design, as a proof of concept, as software art, as a hacking\ninterface to another language (particularly functional programming or\nprocedural programming languages), or as a joke. (source)\n\nThis is a side project that lets you unleash your creativity. Here are some\ntips to help you get started:\n\n  1. Your language can have a simple grammar, so you don\u2019t need to use a parser generator. Write the parser yourself. An APL-like language with a limited set of special graphic symbols is not impossible to implement or parse.\n  2. Have you heard of UIUA ?\n  3. Altough it may seem like a long shot, take a look at Tsevhu and Koilang. Tsevhu is not a programming language but a language in itself. Can you create similar with code?\n  4. Speaking of Koilang, have you checked out piet?\n  5. It can also be a better joke than the Albanian Laundry Machine.\n\nFor more inspiration, check the esolangs wiki.\n\n# Write your own Virtual MachinePermalink\n\nI\u2019ve personally tackled this challenge (check this article). However, I regret\nnot designing an original set of instructions and instead implementing the\nLC-3 instruction set.\n\nYour project can be register-based, stack-based, or a hybrid. It can even have\na JIT compiler if you are feeling brave.\n\nWhatever you choose to do, the key is to be creative.\n\nFor instance, please look at uxn, which can run on multiple operating Systems\nor devices, and has a small community of dans writing software for it. Even\ntsoding, one of my favourite Tech Youtubers, recently implemented Conway\u2019s\nGame Of Life as an uxn program.\n\n# Write a game for UXNPermalink\n\nFirstly, understand how uxn works by reading the official documentation or by\nfollowing this excellent tutorial.\n\nLook at existing examples:\n\n  * flappy bird\n  * snake\n\nCome up with an original game idea.\n\nEveryone seems to prefer Snake, Tetris, Pong, and Space Invaders. But there\nare other (now forgotten) games that deserve your attention.\n\nWhy don\u2019t you try implementing something different:\n\n  * Volfied;\n  * Q*Bert;\n  * Jumping Jack\n\n# Write a game for TIC-80Permalink\n\nTIC-80 is a fantasy computer for making, playing, and sharing tiny games.\n\nIf you don\u2019t know what game to write, take inspiration from here.\n\nThis is more of an artistic project than a programming one, but still.\n\n# Write your original markdown languagePermalink\n\n  1. Write a markdown language that is not precisely markdown but something alien.\n\n  2. Extend an existing markdown implementation. You can get inspiration from LiaScript or R Markdown.\n\n# Write a static site-generatorPermalink\n\nYes, it\u2019s boring, but something needs to use the newly invented markdown\nlanguage.\n\n# Mandelbrot Set NavigatorPermalink\n\nYou don\u2019t have to be Arthur C. Clarke or a mathematican to appreciate the\nuseless beauty of the Mandelbrot Set.\n\nHave you ever considered building your own Mandelbrot Set Explorer using HTML\nCanvas? There are plenty of examples on the internet:\n\n  * https://mandelbrot.site/\n  * https://mandelbrot.silversky.dev/\n  * https://mandelbrotandco.com/en.hub169.html\n  * https://mandelbrot.page/\n  * https://mandelbrot.jayvv.com/\n\nAdd a creative touch! For example:\n\n  * To make your Mandelbrot Set Navigator unique, you can incorporate an intelligent coordinate system to help you navigate through infinity.\n  * Additionally, you can add a bookmark feature so you can save and revisit interesting patterns that you discover during your exploration. For instance, if you stumble upon the Elephant Valley, you can bookmark the location for future reference and easily share it with others.\n\n# Simulate various phenomena from physicsPermalink\n\nStart with optics; it might be easier, and there are tons of examples on the\ninternet:\n\n  * https://www.oeabt.com/en/dome/\n  * https://phet.colorado.edu/sims/html/geometric-optics/latest/geometric-optics_en.html\n\nIf you understand what you are doing, jump to other areas:\n\n  * https://github.com/cselab/aphros?tab=readme-ov-file\n\nStart small and slowly become Bartosz Ciechanowski.\n\n# Experiment with Conway\u2019s Game Of LifePermalink\n\nI suppose you are already familiar with Conway\u2019s Game Of Life.\n\nMake something creative out of it:\n\n  * Change the rules, add more states, add colors, emoticons and animations;\n  * Put the cells in a labyrinth, add portals, let the cells teleport;\n  * Write a slot machine that\u2019s powered this cellular automaton;\n  * Interfere with the cells in real-time, see how they react, throw them some meat;\n\nThere\u2019s so much you can do.\n\n# Approximate reality with polynomialsPermalink\n\nIf you\u2019ve studied computer graphics, you might\u2019ve encountered the concept of\nBezier Curves. Why don\u2019t you start approximating reality with them?\n\nSome fans of Pierre Bezier and Jamiroquai have already played this game:\n\n  * Virtual Insanity but, it\u2019s in Desmos Graphing Calculator;\n  * Virtual Insanity but, it\u2019s played on an oscilloscope.\n  * Desmos Bezier Renderer\n\nMaybe now it\u2019s your time to write a different renderer.\n\nWhy don\u2019t you pick sines and cosines instead of polynomials? I hope you see\nwhere I am going.\n\n# A calculator for symbolic differentiationPermalink\n\n^To understand what I am referring to, check this question on StackOverflow.\n\nThis is going to be a challenging project, but not as hard as you would\nimagine. Basically, you need to come up with something WolframAlpha is already\ncapable of.\n\nYou will have to be able to parse mathematical expressions. Then, you will\nhave to (recursively) apply specific rules for differentiation (e.g. the chain\nand product). In the end, you will have to simplify the resulting expression.\n\nYou don\u2019t have to implement everything.\n\nYou will have to remember the fundamentals of calculus.\n\nIt\u2019s going to be fun.\n\n# A slot machinePermalink\n\n... In the name of science.\n\nI wouldn\u2019t put to much effort into the graphics. It\u2019s not like you want to\ncontribute to people\u2019s misfortune and addiction. But the mathematics behind a\nslot machine can be interesting, plus you can be creative:\n\n  * Why don\u2019t you write a \u03c0 slot machine that uses the decimals of \u03c0 to give prizes.\n  * Why don\u2019t you use a Game Of Life Slot Machine, where you stop on specific cell configurations and give prizes;\n  * Why don\u2019t you build a Sinusoidal Slot Machine (you can get inspiration from a previous project of mine called The Sinusoidal Tetris).\n\n# Write a game engine for text-based gamesPermalink\n\n^This idea was suggested by @snej on the lobste.rs\n\nFew of our generation have played text-based games, and it\u2019s fine - we need to\nput our hardware to better use than rendering fonts in a terminal.\n\nBut there was a time when games like Zork or Colossal Cave were extremely\npopular.\n\nSo why don\u2019t you build a game engine for text-based adventures?\n\nMake the engine cross-platform - allow the game to work in the terminal,\nbrowser, or an SDL window.\n\nOr leave it terminal only. There are beautiful TUI libraries nowadays, so you\ndon\u2019t have to stay cursed because you are stuck with ncurses:\n\n  * bubbletea\n  * CursedGL\n  * ... or check out this list.\n\n# Write a Tiling Window ManagerPermalink\n\nNow that Wayland is almost here, I am sure there\u2019s a lot of new room for\ncreativity. Look at sway.\n\nOk, writing a Tiling Window Manager is not the most approachable project you\ncan think of. But at the same time, you can keep things simple. For example,\nXMonad, when launched, had roughly 1000 lines of code.\n\nUpdated: March 28, 2024\n\nTwitter Facebook LinkedIn\n\n#### Comments\n\n#### You May Also Enjoy\n\n## 10 algebra problems selected from the Romanian Olympiad (Part 2)\n\nMarch 25, 2024 8 minute read\n\nA selection of non-trivial algebra problems.\n\n## Friday Links, March 2024\n\nMarch 15, 2024 2 minute read\n\nA collection of interesting links I\u2019ve discovered in February and March 2024\n\n## A surprising matrix problem\n\nMarch 14, 2024 4 minute read\n\nA surprising math problem from the Spanish Math Olympiad of 1988\n\n## Friday nostalgia: Supaplex\n\nFebruary 23, 2024 less than 1 minute read\n\nNostalgia hits\n\n  * Feed\n\n\u00a9 2024 andreinc. Powered by Jekyll & Minimal Mistakes.\n\n", "frontpage": true}
