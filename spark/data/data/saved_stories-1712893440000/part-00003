{"aid": "40007121", "title": "Next.js 14.2", "url": "https://nextjs.org/blog/next-14-2", "domain": "nextjs.org", "votes": 1, "user": "davidbarker", "posted_at": "2024-04-11 21:42:18", "comments": 0, "source_title": "Next.js 14.2", "source_text": "Next.js 14.2 | Next.js\n\nSkip to content\n\nBack to Blog\n\nThursday, April 11th 2024\n\n# Next.js 14.2\n\nPosted by\n\nDelba de Oliveira@delba_oliveira\n\nTim Neutkens@timneutkens\n\nNext.js 14.2 includes development, production, and caching improvements.\n\n  * Turbopack for Development (Release Candidate): 99.8% tests passing for next dev --turbo.\n  * Build and Production Improvements: Reduced build memory usage and CSS optimizations.\n  * Caching Improvements: Configurable invalidation periods with staleTimes.\n  * Error DX Improvements: Better hydration mismatch errors and design updates.\n\nUpgrade today or get started with:\n\nTerminal\n\n    \n    \n    npx create-next-app@latest\n\n## Turbopack for Development (Release Candidate)\n\nOver the past few months, we\u2019ve been working on improving local development\nperformance with Turbopack. In version 14.2, the Turbopack Release Candidate\nis now available for local development:\n\n  * 99.8% of integrations tests are now passing.\n  * We\u2019ve verified the top 300 npm packages used in Next.js applications can compile with Turbopack.\n  * All Next.js examples work with Turbopack.\n  * We\u2019ve integrated Lightning CSS, a fast CSS bundler and minifier, written in Rust.\n\nWe\u2019ve been extensively dogfooding Turbopack with Vercel\u2019s applications. For\nexample, with vercel.com, a large Next.js app, we've seen:\n\n  * Up to 76.7% faster local server startup.\n  * Up to 96.3% faster code updates with Fast Refresh.\n  * Up to 45.8% faster initial route compile without caching (Turbopack does not have disk caching yet).\n\nTurbopack continues to be opt-in and you can try it out with:\n\nTerminal\n\n    \n    \n    next dev --turbo\n\nWe will now be focusing on improving memory usage, implementing persistent\ncaching, and next build --turbo.\n\n  * Memory Usage - We\u2019ve built low-level tools for investigating memory usage. You can now generate traces that include both performance metrics and broad memory usage information. These traces allows us to investigate performance and memory usage without needing access to your application\u2019s source code.\n  * Persistent Caching - We\u2019re also exploring the best architecture options, and we\u2019re expecting to share more details in a future release.\n  * next build - While Turbopack is not available for builds yet, 74.7% of tests are already passing. You can follow the progress at areweturboyet.com/build.\n\nTo see a list of supported and unsupported features in Turbopack, please refer\nto our documentation.\n\n## Build and Production Improvements\n\nIn addition to bundling improvements with Turbopack, we\u2019ve worked to improve\noverall build and production performance for all Next.js applications (both\nPages and App Router).\n\n### Tree-shaking\n\nWe identified an optimization for the boundary between Server and Client\nComponents that allows for tree-shaking unused exports. For example, importing\na single Icon component from a file that has \"use client\" no longer includes\nall the other icons from that package. This can largely reduce the production\nJavaScript bundle size.\n\nTesting this optimization on a popular library like react-aria-components\nreduced the final bundle size by -51.3%.\n\n> Note: This optimization does not currently work with barrel files. In the\n> meantime, you can use the optimizePackageImports config option:\n>\n> next.config.ts\n>  \n>  \n>     module.exports = { experimental: { optimizePackageImports: ['package-\n> name'], }, };\n\n### Build Memory Usage\n\nFor extremely large-scale Next.js applications, we noticed out-of-memory\ncrashes (OOMs) during production builds. After investigating user reports and\nreproductions, we identified the root issue was over-bundling and minification\n(Next.js created fewer, larger JavaScript files with duplication). We\u2019ve\nrefactored the bundling logic and optimized the compiler for these cases.\n\nOur early tests show that on a minimal Next.js app, memory usage and cache\nfile size decreased from 2.2GB to under 190MB on average.\n\nTo make it easier to debug memory performance, we\u2019ve introduced a\n--experimental-debug-memory-usage flag to next build. Learn more in our\ndocumentation.\n\n### CSS\n\nWe updated how CSS is optimized during production Next.js builds by chunking\nCSS to avoid conflicting styles when you navigate between pages.\n\nThe order and merging of CSS chunks are now defined by the import order. For\nexample, base-button.module.css will be ordered before page.module.css:\n\nbase-button.tsx\n\n    \n    \n    import styles from './base-button.module.css'; export function BaseButton() { return <button className={styles.primary} />; }\n\npage.tsx\n\n    \n    \n    import { BaseButton } from './base-button'; import styles from './page.module.css'; export function Page() { return <BaseButton className={styles.primary} />; }\n\nTo maintain the correct CSS order, we recommend:\n\n  * Using CSS Modules over global styles.\n  * Only import a CSS Module in a single JS/TS file.\n  * If using global class names, import the global styles in the same JS/TS too.\n\nWe don\u2019t expect this change to negatively impact the majority of applications.\nHowever, if you see any unexpected styles when upgrading, please review your\nCSS import order as per the recommendations in our documentation.\n\n## Caching Improvements\n\nCaching is a critical part of building fast and reliable web applications.\nWhen performing mutations, both users and developers expect the cache to be\nupdated to reflect the latest changes. We've been exploring how to improve the\nNext.js caching experience in the App Router.\n\n### staleTimes (Experimental)\n\nThe Client-side Router Cache is a caching layer designed to provide a fast\nnavigation experience by caching visited and prefetched routes on the client.\n\nBased on community feedback, we\u2019ve added an experimental staleTimes option to\nallow the client-side router cache invalidation period to be configured.\n\nBy default, prefetched routes (using the <Link> component without the prefetch\nprop) will be cached for 30 seconds, and if the prefetch prop is set to true,\n5 minutes. You can overwrite these default values by defining custom\nrevalidation times in next.config.js:\n\nnext.config.ts\n\n    \n    \n    const nextConfig = { experimental: { staleTimes: { dynamic: 30, static: 180, }, }, }; module.exports = nextConfig;\n\nstaleTimes aims to improve the current experience of users who want more\ncontrol over caching heuristics, but it is not intended to be the complete\nsolution. In upcoming releases, we will focus on improving the overall caching\nsemantics and providing more flexible solutions.\n\nLearn more about staleTimes in our documentation.\n\n### Parallel and Intercepting Routes\n\nWe are continuing to iterate on on Parallel and Intercepting Routes, now\nimproving the integration with the Client-side Router Cache.\n\n  * Parallel and Intercepting routes that invoke Server Actions with revalidatePath or revalidateTag will revalidate the cache and refresh the visible slots while maintaining the user\u2019s current view.\n  * Similarly, calling router.refresh now correctly refreshes visible slots, maintaining the current view.\n\n## Errors DX Improvements\n\nIn version 14.1, we started working on improving the readability of error\nmessages and stack traces when running next dev. This work has continued into\n14.2 to now include better error messages, overlay design improvements for\nboth App Router and Pages Router, light and dark mode support, and clearer dev\nand build logs.\n\nFor example, React Hydration errors are a common source of confusion in our\ncommunity. While we made improvements to help users pinpoint the source of\nhydration mismatches (see below), we're working with the React team to improve\nthe underlying error messages and show the file name where the error occurred.\n\nBefore:\n\nAn example of the Next.js error overlay before version 14.2.\n\nAfter:\n\nAn example of the Next.js error overlay after version 14.2.\n\n## React 19\n\nIn February, the React team announced the upcoming release of React 19. To\nprepare for React 19, we're working on integrating the latest features and\nimprovements into Next.js, and plan on releasing a major version to\norchestrate these changes.\n\nNew features like Actions and their related hooks, which have been available\nwithin Next.js from the React canary channel, will now all be available for\nall React applications (including client-only applications). We're excited to\nsee wider adoption of these features in the React ecosystem.\n\n## Other Improvements\n\n  * [Docs] New documentation on Video Optimization (PR).\n  * [Docs] New documentation on instrumentation.ts (PR)\n  * [Feature] New overrideSrc prop for next/image (PR).\n  * [Feature] New revalidateReason argument to getStaticProps (PR).\n  * [Improvement] Refactored streaming logic, reducing the time to stream pages in production (PR).\n  * [Improvement] Support for nested Server Actions (PR).\n  * [Improvement] Support for localization in generated Sitemaps (PR).\n  * [Improvement] Visual improvements to dev and build logs (PR)\n  * [Improvement] Skew protection is stable on Vercel (Docs).\n  * [Improvement] Make useSelectedLayoutSegment compatible with the Pages Router (PR).\n  * [Improvement] Skip metadataBase warnings when absolute URLs don\u2019t need to be resolved (PR).\n  * [Improvement] Fix Server Actions not submitting without JavaScript enabled when deployed to Vercel (PR)\n  * [Improvement] Fix error about a Server Action not being found in the actions manifest if triggered after navigating away from referring page, or if used inside of an inactive parallel route segment (PR)\n  * [Improvement] Fix CSS imports in components loaded by next/dynamic (PR).\n  * [Improvement] Warn when animated image is missing unoptimized prop (PR).\n  * [Improvement] Show an error message if images.loaderFile doesn't export a default function (PR)\n\n## Community\n\nNext.js now has over 1 million monthly active developers. We're grateful for\nthe community's support and contributions. Join the conversation on GitHub\nDiscussions, Reddit, and Discord.\n\n## Contributors\n\nNext.js is the result of the combined work of over 3,000 individual\ndevelopers, industry partners like Google and Meta, and our core team at\nVercel. This release was brought to you by:\n\n  * The Next.js team: Andrew, Balazs, Ethan, Janka, Jiachi, Jimmy, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Steven, Tim, Wyatt, and Zack.\n  * The Turbopack team: Donny, Leah, Maia, OJ, Tobias, and Will.\n  * Next.js Docs: Delba, Steph, Michael, Anthony, and Lee.\n\nHuge thanks to @taishikato, @JesseKoldewijn, @Evavic44, @feugy, @liamlaverty,\n@dvoytenko, @SukkaW, @wbinnssmith, @rishabhpoddar, @better-salmon, @ziyafenn,\n@A7med3bdulBaset, @jasonuc, @yossydev, @Prachi-meon, @InfiniteCodeMonkeys,\n@ForsakenHarmony, @miketimmerman, @kwonoj, @williamli, @gnoff, @jsteele-\nstripe, @chungweileong94, @WITS, @sogoagain, @junioryono, @eisafaqiri,\n@yannbolliger, @aramikuto, @rocketman-21, @kenji-webdev, @michaelpeterswa,\n@Dannymx, @vpaflah, @zeevo, @chrisweb, @stefangeneralao, @tknickman,\n@Kikobeats, @ubinatus, @code-haseeb, @hmmChase, @byhow, @DanielRivers,\n@wojtekmaj, @paramoshkinandrew, @OMikkel, @theitaliandev, @oliviertassinari,\n@Ishaan2053, @Sandeep-Mani, @alyahmedaly, @Lezzio, @devjiwonchoi,\n@juliusmarminge, @szmazhr, @eddiejaoude, @itz-Me-Pj, @AndersDJohnson,\n@gentamura, @tills13, @dijonmusters, @SaiGanesh21, @vordgi, @ryota-murakami,\n@tszhong0411, @officialrajdeepsingh, @alexpuertasr, @AkifumiSato, @Jonas-PFX,\n@icyJoseph, @florian-lp, @pbzona, @erfanium, @remcohaszing, @bernardobelchior,\n@willashe, @kevinmitch14, @smakosh, @mnjongerius, @asobirov, @theoholl, @suu3,\n@ArianHamdi, @adrianha, @Sina-Abf, @kuzeykose, @meenie, @nphmuller,\n@javivelasco, @belgattitude, @Svetoslav99, @johnslemmer, @colbyfayock,\n@mehranmf31, @m-nakamura145, @ryo8000, @aryaemami59, @bestlyg, @jinsoul75,\n@petrovmiroslav, @nattui, @zhuyedev, @dongwonnn, @nhducit, @flotwig,\n@Schmavery, @abhinaypandey02, @rvetere, @coffeecupjapan, @cjimmy,\n@Soheiljafarnejad, @jantimon, @zengspr, @wesbos, @neomad1337, @MaxLeiter, and\n@devr77 for helping!\n\n#### Resources\n\nDocsLearnShowcaseBlogAnalyticsNext.js ConfDX Platform\n\n#### More\n\nNext.js CommerceContact SalesGitHubReleasesTelemetryGovernance\n\n#### About Vercel\n\nNext.js + VercelOpen Source SoftwareGitHubX\n\n#### Legal\n\nPrivacy Policy\n\n#### Subscribe to our newsletter\n\nStay updated on new releases and features, guides, and case studies.\n\n\u00a9 2024 Vercel, Inc.\n\n", "frontpage": false}
