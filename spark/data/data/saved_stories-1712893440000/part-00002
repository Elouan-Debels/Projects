{"aid": "40007120", "title": "Asymmetric Routing Around the Firewall", "url": "https://devnonsense.com/posts/asymmetric-routing-around-the-firewall/", "domain": "devnonsense.com", "votes": 1, "user": "sprawl_", "posted_at": "2024-04-11 21:42:12", "comments": 0, "source_title": "asymmetric routing around the firewall", "source_text": "asymmetric routing around the firewall\n\n# asymmetric routing around the firewall\n\n2024-04-03 #networking\n\nThis is a follow-up to my previous post about some mysterious TCP connection\ntimeouts in the UC Berkeley wired network.\n\nI received many thoughtful emails in response to that post, and there was an\nexcellent discussion on Hacker News. I\u2019m very grateful to everyone who spent\ntime helping with my ridiculous home networking issues.\n\nSince then, I\u2019ve learned some new information that (mostly) solves the\nmystery. In this post, I\u2019ll first summarize the main theories people\nsuggested, then tell the story of how a Bunny CDN engineer came to the rescue,\nand finally describe the root cause. If you just want to know the answer,\nplease skip to the end.\n\n## Theories\n\n### Theory #1: MTU\n\nMany people suggested that packets might be larger than the maximum\ntransmission unit (MTU) somewhere along the path to Bunny CDN. However, I\ndon\u2019t find this theory plausible because:\n\n  * The packet captures show the client ACK is getting dropped. The entire Ethernet frame is only 66 bytes, with zero bytes in the TCP payload.\n  * The same symptoms occur after setting the MTU lower on the interface (ip link set dev <iface> mtu 1300) and clamping the MSS (using iptables, as described here)\n\n### Theory #2: Firewall rejects SNI\n\nSome people suggested that a firewall might be rejecting the server name\nindication (SNI) in the TLS Client Hello sent immediately after the client\nACK.\n\nI mentioned briefly in the post that I was seeing the same behavior with HTTP,\nnot just HTTPS, but didn\u2019t provide a packet capture. To clarify, when I say\nthe issue happens with HTTP, I mean the exact same symptoms showing a dropped\nclient ACK. There is no HTTP redirect to the HTTPS site, because the TCP\nconnection is never successfully established.\n\nAdditionally, I discovered later that other Bunny CDN IPs worked correctly.\nFor example, Bunny CDN uses IP 107.182.163.162 located in Utah, and I\u2019m able\nto connect with\n\n    \n    \n    curl https://fonts.bunny.net --resolve fonts.bunny.net:443:107.182.163.16\n\neven though this command sends the exact same SNI (fonts.bunny.net).\n\n### Theory #3: Misconfigured firewall rule for link local address space\n\nSeveral people noticed that the destination IP address 169.150.221.147 is very\nsimilar to the link local address range 169.254.0.0/16 (see section 2.1 in RFC\n3927). The theory is that someone accidentally configured a firewall rule to\nblock 169.0.0.0/8 instead of 169.254.0.0/16, inadvertently blocking the Bunny\nCDN IP address 169.150.221.147.\n\nI didn\u2019t say it in the original post, but I see the same behavior with another\nBunny CDN IP 143.244.50.88, which isn\u2019t in the 169.0.0.0/8 address space. So\nunfortunately this theory doesn\u2019t quite fit either.\n\n### Theory #4: Misconfigured firewall drops outbound established connections\n\nOne person reproduced the same symptoms in their home network by adding a\nfirewall rule to drop packets to 169.150.221.147. The trick was to configure\nthe rule only in the outbound direction and only for established connections.\nThis causes the client ACK to be dropped, and the packet captures show exactly\nthe same pattern of retransmitted ACKs (from the client) and SYN+ACKs (from\nthe server).\n\nThis theory aligns really well with the symptoms I\u2019m observing . However, it\nseemed unlikely someone would configure a rule to block a connection after\nit\u2019s established, and Berkeley IT told me there were no firewall rules\nblocking destinations 169.150.221.147 or 143.244.50.88.\n\n### Theory #5: Asymmetric routing\n\nThis was the guess I made in the original post, and a few people agreed with\nme. Someone suggested checking the IP header TTL field or using traceroute\nwith different ports/probes. I learned about some traceroute flags I\u2019d never\nused before; for example\n\n    \n    \n    sudo traceroute 169.150.221.147 -p 443 -q 1 -T -O syn\n\nsends a TCP probe on port 443 with the SYN flag set. Unfortunately, I didn\u2019t\nfind any evidence in the IP TTL field or traceroute output to prove that the\ntimeouts were caused by asymmetric routing.\n\nAs you can probably guess from the title of this post, I was eventually able\nto confirm this theory, but not without some help from an engineer at Bunny\nCDN.\n\n## Help from a Bunny CDN engineer\n\nIn response to my post, an infrastructure engineer from Bunny CDN offered to\ninvestigate. I can\u2019t express enough how grateful I am that someone at Bunny\nCDN spent time helping to solve this mystery!\n\nThe Bunny CDN engineer suggested testing the following IPs to narrow down the\nissue:\n\nIP Address| Location| Hosting Provider  \n---|---|---  \n169.150.221.147| San Jose| DataPacket  \n143.244.50.88| Los Angeles| DataPacket  \n107.182.163.162| Utah| WebNX  \n  \nThe two IPs hosted by DataPacket timed out, but I could connect successfully\nto the IP hosted by WebNX.^1\n\nThe engineer also offered to take a packet capture from a Bunny CDN server. I\nran this script on a machine in my apartment:\n\n    \n    \n    while true; do curl -vvv -4 https://fonts.bunny.net \\ --connect-timeout 10 \\ --no-progress-meter -D - -o /dev/null; sleep 10; done\n\nand he took the packet capture filtering for my public IP address. The packet\ncaptures showed:\n\n  * Bunny CDN receives the SYN from my IP.\n  * Bunny CDN sends the SYN+ACK.\n  * Bunny CDN never receives the client ACK and continues retransmitting the SYN+ACK\n  * Bunny CDN never receives the FIN+ACK from my IP either.\n\nThis confirmed that the client ACK was being dropped somewhere before reaching\nBunny CDN, almost certainly within the UC Berkeley network.\n\nFinally, the Bunny CDN engineer used mtr to trace the path from\n169.150.221.147 back to my IP address. This turned out to be the critical\nclue, as described in the next section.\n\n## (Mostly) solving the mystery\n\nTracing the path in the outbound direction from my IP to Bunny CDN, I noticed\nwhat looked like a firewall, \u201creshall-fw\u2013ethernet1-21-682.sait-\nwest.berkeley.edu\u201d:\n\n    \n    \n    HOST: fedora 1.|-- _gateway 0.0% 3 1.5 2.8 1.5 5.5 2.3 2.|-- ucv-cdf-r1--irb-525.net.berkeley.edu 0.0% 3 2.4 26.0 2.4 60.8 30.8 3.|-- sut-mdc-cr1--xe-1-1-11.net.berkeley.edu 0.0% 3 20.2 12.8 5.6 20.2 7.3 4.|-- sut-mdc-sr7--irb-204.net.berkeley.edu 0.0% 3 4.4 7.5 4.4 12.5 4.3 5.|-- reshall-fw--ethernet1-21-682.sait-west.berkeley.edu 0.0% 3 6.8 5.1 3.1 6.8 1.9 6.|-- sut-mdc-sr7--irb-199.net.berkeley.edu 0.0% 3 3.6 3.6 3.4 3.7 0.1 7.|-- reccev-cev-cr1--et-0-0-3.net.berkeley.edu 0.0% 3 5.0 5.2 4.1 6.4 1.2 8.|-- reccev-cev-br1--et-1-1-1.net.berkeley.edu 0.0% 3 45.5 24.6 3.7 45.5 20.9 9.|-- emvl1-agg-01--ucb--100g.cenic.net 0.0% 3 4.2 4.7 3.0 7.1 2.1 10.|-- sacr2-agg-01--emvl1-agg-01--400g--01.cenic.net 0.0% 3 7.9 7.4 5.4 8.8 1.7 11.|-- hundredge-0-0-0-24.98.core2.sacr.net.internet2.edu 0.0% 3 11.5 13.9 10.9 19.3 4.7 12.|-- fourhundredge-0-0-0-0.4079.core2.sunn.net.internet2.edu 0.0% 3 9.0 8.8 8.3 9.0 0.4 13.|-- fourhundredge-0-0-0-49.4079.agg2.sanj.net.internet2.edu 0.0% 3 11.3 11.2 10.8 11.4 0.3 14.|-- 162.252.69.142 0.0% 3 7.5 7.6 7.5 7.7 0.1 15.|-- be-2111-cs01.9greatoaks.ca.ibone.comcast.net 0.0% 3 10.5 9.0 8.1 10.5 1.3 16.|-- be-2113-pe13.9greatoaks.ca.ibone.comcast.net 0.0% 3 7.1 8.6 7.1 9.9 1.4 17.|-- 71.25.198.98 0.0% 3 7.0 7.3 7.0 7.6 0.3 18.|-- vl201.sjc-eq10-dist-1.cdn77.com 0.0% 3 7.6 8.8 7.6 10.2 1.3 19.|-- 169-150-221-147.bunnyinfra.net 0.0% 3 7.9 7.6 7.1 7.9 0.4\n\nWhen the Bunny CDN engineer traced the path in the reverse direction (Bunny\nCDN back to my IP), he saw this:\n\n    \n    \n    HOST: edge-915.bunnyinfra.net Loss% Snt Last Avg Best Wrst StDev 1.|-- unn-169-150-221-156.datapacket.com 0.0% 3 0.5 0.5 0.5 0.5 0.0 2.|-- vl202.sjc-eq10-core-2.cdn77.com 0.0% 3 0.4 0.5 0.4 0.5 0.0 3.|-- vl250.sjc-eq10-core-1.cdn77.com 0.0% 3 0.6 0.6 0.6 0.6 0.0 4.|-- be-111-pe13.9greatoaks.ca.ibone.comcast.net 0.0% 3 0.8 1.0 0.8 1.1 0.1 5.|-- be-2113-cs01.9greatoaks.ca.ibone.comcast.net 0.0% 3 0.9 1.2 0.9 1.4 0.2 6.|-- be-36311-ar01.hayward.ca.sfba.comcast.net 0.0% 3 2.3 2.3 2.3 2.3 0.0 7.|-- be-398-rar01.pleasanton.ca.sfba.comcast.net 0.0% 3 2.7 2.8 2.7 3.0 0.1 8.|-- be-12-sur04.pinole.ca.sfba.comcast.net 0.0% 3 3.6 3.6 3.6 3.6 0.0 9.|-- ??? 100.0 3 0.0 0.0 0.0 0.0 0.0 10.|-- sut-mdc-cr1--xe-1-0-5.net.berkeley.edu 0.0% 3 6.3 5.6 5.1 6.3 0.6 11.|-- ucv-cdf-r1--irb-525.net.berkeley.edu 0.0% 3 12.1 10.0 6.0 12.1 3.4 12.|-- ??? 100.0 3 0.0 0.0 0.0 0.0 0.0\n\nComparing the outbound and inbound paths, I noticed something strange: inbound\ntraffic from 169.150.221.147 was bypassing the firewall!\n\nThis perfectly explains the dropped client ACK and TCP connection timeouts:\n\n  1. Outbound client SYN goes through the firewall.\n  2. Inbound server SYN+ACK is routed back to the client without going through the firewall.\n  3. Client sends ACK to complete the TCP handshake.\n  4. Since the firewall never saw the server SYN+ACK, it drops the client ACK.\n  5. Since the server never receives the (dropped) client ACK, the TCP handshake never completes.\n\nI don\u2019t know which router the \u201c???\u201d represents, but I\u2019m fairly certain inbound\ntraffic isn\u2019t supposed to skip the firewall.^2 This is most likely caused by a\nroute table misconfigured somewhere in the UC Berkeley network. Unfortunately,\nI cannot investigate further without the cooperation of Berkeley IT.\n\n## Conclusion\n\nWill Berkeley IT fix the routing misconfiguration? I\u2019ve done everything in my\npower to escalate this to the appropriate team, including directly emailing\nthe Executive Director of Campus IT.^3 Since that email, Berkeley IT has at\nleast stopped trying to close the ticket (good!) but assigned it low priority\nbecause I\u2019m the only person who has reported the problem.^4 Later, when I\nrealized that inbound traffic was bypassing the firewall, I notified UC\nBerkeley\u2019s Information Security Office of the potential security\nvulnerability, but their response was somewhat lacking in urgency.^5 So we\u2019ll\nsee.\n\nI want to again thank everyone who took the time to respond to my last post.\nEven though the issue hasn\u2019t been fixed, I feel better knowing why it\u2019s\nhappening, and I learned a lot from all the feedback. I especially want to\nthank the infrastructure engineer at Bunny CDN for providing the crucial clue\nthat solved the mystery!\n\nFinally, a few people suggested using a VPN as a workaround, which makes a lot\nof sense. However, I realized there\u2019s one workaround no one suggested, and it\nhappens to be the one I\u2019m actually pursuing (albeit for unrelated reasons):\nmoving to a new home where I can manage the network myself.\n\n  1. I later discovered two other IPs from DataPacket, not used by Bunny CDN, that showed the exact same symptoms: www.datapacket.com at IP 185.152.67.7 and assets.gentoo.org at IP 156.146.53.32. \u21a9\ufe0e\n\n  2. The Bunny CDN engineer also shared the mtr output from IP 107.182.163.162 (hosted by WebNX) to my IP. That path correctly included the firewall, which explains why I was able to connect successfully. \u21a9\ufe0e\n\n  3. I went up the org chart until I found someone who had both a technical background and publicly listed email address. To his credit, the Executive Director responded within a day and forwarded the email to the network services team. \u21a9\ufe0e\n\n  4. Berkeley IT at least acknowledged in their response that other people may have seen this issue without reporting it. Anecdotally, when a page fails to load, people tend blame the website rather than the network. For example, after my wife saw repeated timeouts on ravelry.com, she believed for months that the company had simply gone out of business. \u21a9\ufe0e\n\n  5. Full text of the response from security@berkeley.edu: \u201cGood afternoon. Thank you for the alert. Please keep us posted on the Network Services investigation. If this is determined to be a Security issue, let me ask you to send us a reply. Thank you.\u201d \u21a9\ufe0e\n\n", "frontpage": false}
