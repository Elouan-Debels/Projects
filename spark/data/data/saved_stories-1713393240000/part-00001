{"aid": "40066995", "title": "Proof-of-Diligence: Model trust and maintainability in open source", "url": "https://stacklok.com/blog/announcing-the-proof-of-diligence-pod-algorithm-a-new-approach-to-evaluating-open-source-safety-and-sustainability", "domain": "stacklok.com", "votes": 1, "user": "trickleup", "posted_at": "2024-04-17 16:31:47", "comments": 0, "source_title": "Announcing the Proof-of-Diligence (PoD) algorithm: A method of modeling trust and maintainability in open source ecosystems", "source_text": "Announcing the Proof-of-Diligence (PoD) algorithm: A method of modeling trust and maintainability in open source ecosystems | Stacklok\n\nHome\n\nProducts\n\nMinder\n\nA software security platform for open source developers and communities\n\nTrusty\n\nA free-to-use service to help developers vet the supply chain risk of OSS\npackages\n\nCompany\n\nAbout\n\nCareers\n\nOpen Source\n\nPress\n\nResources\n\n### Resources\n\nBlog\n\nVideos\n\nTrusty Docs\n\nMinder Docs\n\nView all resources\n\n### Featured Content\n\nBlog\n\n#### Driving safe and sustainable open source consumption with two new\nStacklok capabilities\n\nBlog\n\n#### Announcing the Proof-of-Diligence (PoD) algorithm: A method of modeling\ntrust and maintainability in open source ecosystems\n\n#### Software Supply Chain Security (S3C) Weekly\n\nExplore our weekly newsletter on software supply chain security, featuring\nincidents, tips, tools, and community updates. Powered by Stacklok.\n\nSubscribe Now\n\nContact\n\nLogin\n\nHome\n\nProducts\n\nMinder Trusty\n\nCompany\n\nAbout Careers Open Source Press\n\nResources\n\nBlog Videos Trusty Docs Minder Docs View all resources\n\nContact\n\nLogin\n\nStacklok On Twitter (X)\n\nStacklok On Github\n\nStacklok On LinkedIn\n\nStacklok On Discord\n\nStacklok On YouTube\n\n##### Blog\n\n# Announcing the Proof-of-Diligence (PoD) algorithm: A method of modeling\ntrust and maintainability in open source ecosystems\n\nThe OSS Trust Graph is an implementation of the Proof-of-Diligence algorithm\ncreated at Stacklok. Proof-of-Diligence (PoD) provides a robust mechanism to\nmodel trust, quality and maintainability in open source ecosystems. This blog\npost provides details on the reasoning behind the algorithm, how it is\nimplemented, and how it can be used.\n\nAuthors: Luke Hinds & Pankaj Telang\n\n/\n\n15 mins read\n\n/\n\nApr 17, 2024\n\n  1. Introduction\n\n  2. Proof-of-Diligence Algorithm\n\n  3. Methodology and Application\n\n  4. Fraud Protections\n\n  5. Anomaly Detection\n\n  6. Potential Future Applications\n\n  7. Conclusion\n\nIn November 2023, Stacklok introduced Trusty, a free-to-use service that\nutilizes source-of-origin code provenance and data-science algorithms to\nquantify the supply chain risk of open source projects and help developers\nchoose safer, more trustworthy dependencies. Today, we\u2019re introducing the OSS\nTrust Graph (available now in private beta\u2014sign up here), an implementation of\nthe Proof-of-Diligence algorithm created at Stacklok. Proof-of-Diligence (PoD)\nprovides a robust mechanism to model trust, quality and maintainability in\nopen source projects. This blog post provides details on the reasoning behind\nthe algorithm, how it is implemented, and how it can be used.\n\n## Introduction\n\nOpen source software (OSS) is characterized by its collaborative and\ndecentralized development model, engaging a global and diverse community.\nThese communities operate asynchronously and non-linearly, reflecting the\ninherently open nature of OSS that encourages anyone to contribute,\nirrespective of their affiliation with recognized institutions, corporations\nor global locality. Contributors often adopt pseudonyms or usernames on cloud-\nbased code-hosting platforms like GitHub or GitLab, preserving a level of\nanonymity while participating in these digital ecosystems. An intrinsic\nelement of OSS communities is understanding the quality of an OSS project,\nwhich is critical when developers and organizations choose to integrate OSS\ninto their own projects. In turn, many OSS projects depend on each other,\ncreating a complex graph of thousands of transitive dependencies.\n\nComputers are very good at establishing trust between machines when it comes\nto cryptography-based verification, but they struggle to grasp the more\nsocial, human aspects of trust. Trust within a social context is more nuanced\nand is typically the domain of people, more than machines.\n\nIn everyday life, we often rely on a construct known as a \u201csocial graph,\u201d both\nin the digital and physical world, to make decisions about whom to trust. For\nexample, when hiring a tradesperson, I'm more likely to trust them if someone\nfrom my immediate social network recommends them. This could be because they\nhave a direct relationship with the tradesperson, such as a family member, or\nthey know them indirectly through another trusted acquaintance.\n\nThe concept of a social graph, although less obvious, also applies when\ndevelopers or organizations select open source software dependencies. They may\nlook at how popular a software project is by checking how many times it's been\ndownloaded, the number of social likes it has on the code hosting platform,\nand the profiles and past contributions of the developers involved. They might\nalso visit forums like StackOverflow or seek advice from a LLM (large language\nmodel), or they might referrence what other similar projects are using. They\nattempt to derive a signal of quality from others to help them form their\nchoices. An outlier to this, might be manual review of every line of code\nwithin a dependency, but that is far more likely the exception, than the rule.\n\nHowever, this method of assessing the quality and safety of open-source\nsoftware projects has its drawbacks. First, it doesn\u2019t scale well and lacks a\nstandard, agreed-upon consensus or approach. Secondly, it\u2019s vulnerable to\ndeceptive practices, such as artificially boosting a project\u2019s popularity, or\nunintentional hallucinated outputs from a LLM. Typically, security companies\nmeasure a project\u2019s safety by counting the number of known common\nvulnerabilities and exposures (CVEs).\n\nYet, as previously discussed, CVEs are not always reliable indicators of\nsafety. Very few CVEs are exploitable in the first place, and more\nsophisticated attacks often go undetected by standard CVE scanners. An attack\nbecoming more prolific and seeing a marked increase is where an individual\noffers to take over the maintenance of a project and then proceeds to\nintroduce a backdoor (as with the recent XZ attack). The importance of the\npeople is becoming increasingly recognized within the software industry.\n\n## Proof-of-Diligence Algorithm\n\nWe seek to solve many of these aforementioned problems using a new Algorithm\nwe have named Proof of Diligence (PoD). PoD is a means of measuring and\nquantifying the relationships between open source contributors and open source\nprojects. We further combine Proof of Diligence (PoD) with foundational trust\nsystems such as sigstore or Stacklok\u2019s historical provenance, to ensure the\ndata we use to compute scores is legitimate. PoD also benefits from its\ningested data being derived from git, which possesses an immutable,\ntimestamped and distributed architecture.\n\nOpen source communities intrinsically possess an untapped proof-of-diligence\nbased on contributions, quality code curation, and meritocracy. This proof is\nsituated upon, but not limited to, the effort required to receive (review and\nscrutinize code) and contribute (develop) useful, quality code (a bug fix or a\nfeature that provides utility).\n\nWe effectively have a two-way signal. When a contributor with a track record\nof successful engagements with well-regarded quality projects contributes to\nanother project, it strongly indicates that the second project very likely\nmeets a high standard of quality itself. Conversely, if a reputable and\npopular project accepts contributions from an individual, it suggests that the\ncontributions\u2014and by extension, the contributor\u2014are of high quality and\ndemonstrate diligence and utility in their work.\n\nAbove: Prototype of the Package Graph view of the next.js project\n\nSo the open source ecosystem effectively records an inherent proof-of-\ndiligence that is intrinsic to the ecosystem's flow of trust in an open and\ntransparent manner. Developers invest significant time to produce quality code\nand/or documentation: code that passes continuous integration tests, code that\nis easy to read and review by others, and, most obvious of all, code that\nprovides meaningful value to a project (fixes a bug, adds a useful feature).\n\nThis long-term curated effort is captured within a proof-of-diligence based\ngraph through a series of interconnected nodes, in the form of developers,\nrepositories and packages. This is a type of consensus algorithm that is\nincredibly difficult and challenging to game, which is why it has applicable\nutility to software security, most notably software supply chain security. It\nalso respects pseudonymity, an important ethos to many OSS communities. PoD\nallows for individuals to be measured based on their contribution footprint\nand not on their real life identity or affiliation with recognized\ninstitutions or corporations.\n\nAbove: Prototype of the Contributor Graph view of a next.js contributor\n\nFurthermore, projects are often presented as a package, which typically has\ndependency on other packages. The quality of a package often depends on the\nother packages (in the form of a dependency). Each of these\nprojects/dependencies can recursively have additional package dependencies,\nthus creating a transitive structure. All of these packages undergo a\nlifecycle where they elevate or decrease in popularity and eventually go into\nmaintenance. The Proof-of-Diligence protocol will be capable of measuring the\nlifecycle of a software package and the influence of its entire dependency\nchain.\n\n## Methodology and Application of PoD\n\nPoD utilizes a network graph, capable of propagating trust and establishing a\nfinal PoD score. The graph contains three types of nodes: project, contributor\n(aka developer), and package. The edges in the graph represent the influence\nrelations among these nodes, indicating the direction in which the trust\nflows. The edges in the graph are weighted where the edge weights represent\nthe strength of influence. Here are the different types of edges.\n\n  * Project \u2192 Contributor: A project influences a contributor\u2019s score.\n\n  * Contributor \u2192 Project: A contributor influences the score of the project.\n\n  * Project \u2192 Package: A project influences the score of a package.\n\n  * (Dependent) Package \u2192 Package: A dependent package influences the score of the parent package.\n\n  * (Author) Contributor \u2192 Package: A package author influences the score of the package.\n\nConsider the following mocked example. The numbers shown next to each node are\nthe initial seed scores.\n\nAfter score propagation, the updated scores may look like below. For example,\nnotice the score of contributor C3 increased from 0.4 to 0.53, since C3\ncontributed to well reputed repository R1 with initial score of 0.9. Also, the\nscore of R1 computes to 0.83 due to the reverse propagation effect.\n\nObserve that the graph does not have the following edges.\n\n  * Package \u2192 Project edge, that is, a package does not influence the project score.\n\n  * Package \u2192 Contributor edge, that is, a package does not influence the contributor score.\n\n  * Package \u2192 (Dependent) Package edge, that is, a package does not influence the dependent package score.\n\nThe extent of influence of a contributor on a project depends upon the recency\nof their contribution. A contributor with a more recent contribution should\ninfluence a project more than a contributor with an older contribution. The\nweight of the edge between a contributor and a project captures such extent of\ninfluence.\n\nWith the PoD Algorithm, we compute a score for each of the nodes in the graph\nin two steps.\n\nFirstly, when constructing the OSS Trust Graph, we compute a seed score, using\nTrusty\u2019s existing scoring models. The metrics used for the score are\nattributes such as the project having a legitimate source of origin claim,\nusing sigstore, or Stacklok\u2019s historical provenance algorithm (in that order).\nConfirming source of origin and provenance ensures the data we use to\ncalculate the initial seed score is accurate, and not the result of\nillegitimate representation, such as starjacking.\n\nThe table below shows the metrics used for calculating the seed scores for the\ndifferent nodes and the weights for the different edges.\n\nNode/Edge| Feature  \n---|---  \nProvenance: Package->Project Edge| Sigstore provenance or Stacklok\u2019s\nhistorical provenance  \nContributor Influence: Contributor->Project Edge| Size and recency of the\ncontribution  \nProject Node| forks, open_issues, watchers, contributors, stargazers  \nContributor Node| repos, followers  \nPackage Node| downloads, versions, age  \n  \nBefore using the metrics such as forks, stars and watchers, we verify their\nauthenticity using anomaly detection techniques. See Fraud Protections for\nfurther details.\n\nSecondly, we update the seed scores by propagating the trust along all edges\nin the graph.\n\nLet\u2019s explore several scenarios that demonstrate the trust propagation in the\nOSS Trust graph.\n\n## Scenario One: Project to Contributor Influence\n\nJoeSmith is a relatively new developer, having just started contributing to\nopen source. Their initial computed score is 2.\n\nJoeSmith makes a contribution to the Kubernetes Project with a computed score\nof 9.\n\nMaintainers of the Kubernetes project review and approve the merging of\nJoeSmith\u2019s code.\n\nThis suggests that JoeSmith produces quality code, is able to pass CI tests\nand acceptable to the maintainers of a high scoring project (in this case\nKubernetes).\n\nAfter PoD propagation, JoeSmith\u2019s score has increased to 4.\n\n## Scenario Two: Project to Contributor Influence\n\nA project called acme exists. It's largely unknown and has low activity. Its\ninitial score is 3.\n\nA user (JaneDoe) contributes to acme. JaneDoe has a high contributor score,\nbased on merged pull requests to high scored projects. JaneDoe\u2019s initial score\nis 7.5.\n\nThis would suggest that JaneDoe sees acme as a quality useful project,\nsufficient to the point they would take time curating a contribution to the\nproject.\n\nAfter PoD score propagation, due to JaneDoe\u2019s higher initial score, project\nacme\u2019s score increases to 4.2.\n\n## Scenario Three: Project to Package Influence\n\nA popular project called acme exists with an initial score of 9.\n\nThe package acme-pkg is a newly created package with a low initial score of 4.\nThe score of acme-pkg is influenced by project acme.\n\nAfter PoD propagation, the score of acme-pkg increases to 5.5. Note that\nunlike the earlier project-contributor scenarios, in this scenario, project\nacme\u2019s PoD score remains unchanged since the influence is unidirectional.\n\n## Fraud Protections\n\nThe Proof of Diligence (PoD) Algorithm is designed to be \u2018hard to game\u2019.\nDevelopers may curate and build a PoD score over months or years via prolific\ncontribution to OSS projects. A developer will increase their PoD score\ndirectly from contributions to projects of value and utility, by writing\nquality code. We believe this creates an expensive set of conditions to\nreplicate via bots and automation. An attacker cannot game the PoD algorithm\njust by mass-generating many repositories, along with fake contributor\naccounts and illegitimate metrics such as GitHub stars, commits and forks.\nThis would only result in many low-scored packages, repositories and\ncontributors propagating low scores to one another.\n\n### Provenance\n\nIn Stacklok\u2019s coming application of the PoD algorithm and graph within its\nfree-to-use service Trusty, all data provided to the PoD algorithm is vetted\nfor veracity. We require this foundation of truth to establish credible\nscores. Many security solutions offering OSS package risk scores, do not vet\nthe information they use to calculate scores, making them susceptible to\nfraudulent data.\n\nWe first ensure every package ingested from all ecosystems (Java, Go, Python,\nRust, Javascript) has a legitimate claim on the source code repository. We do\nthis using two methods created by stacklok engineers.\n\nSigstore Provenance\n\nSigstore is an open source project started by Stacklok CTO Luke Hinds, to help\nopen source projects sign artifacts and produce a legitimate source of origin\nclaim, or provenance statement. For every package ingested by Trusty, we\nattempt to map the package to the source repository by validation of a\nsigstore claim.\n\nThis allows us to detect activity such as starjacking, where a project\nillegitimately claims another project's repository as its own.\n\nHistorical Provenance\n\nHistorical Provenance is an algorithm developed by Stacklok Data Scientist\nNigel Brown. Not all OSS packaging registries have deployed Sigstore. To\naddress this, we created \u201chistorical provenance.\u201d Historical provenance\nconsists of mapping Git tags to package versions to verify proof of origin for\nopen source packages.\n\nIn the case of Go and the go.sum database, an existing signal of provenance is\nalready available.\n\n### Anomaly Detection\n\nThe PoD algorithm implemented within Trusty\u2014the \u201cOSS Trust Graph\u201d\u2014over time\nwill also implement univariate and multivariate anomaly detection using\ntechniques such as: isolation forest and one class SVM (Unsupervised Outlier\nDetection). PoD will employ time-series analysis techniques such as ARIMA\n(auto-regressive integrated moving average), EWMA (exponential weighted moving\naverage) and FFT (fast Fourier transform) for detecting temporal anomalies.\nThis allows us to detect abnormalities within the context of project metrics\nsuch as stars. Quite often, suspicious packages try to inflate their\nimportance by orchestrating bots to provide them with a high count of metrics\nthat indicate popularity. Further, we plan to investigate anomaly detection\napproaches in dynamic graphs. For example, these approaches will allow us to\ndetect a sudden increase in the number of contributors to a repository which\nmight be indicative of malicious activity.\n\n## Potential Future Applications of the PoD Algorithm\n\nBeyond the measure of safety and quality, we have also recognised other\nutility for the PoD Algorithm.\n\n  1. Identifying open source projects that need support. The score changes of a project can help us detect when a high-contributing maintainer leaves the high-ranking project, leaving it vulnerable to being abandoned and to a hostile takeover. Likewise, the Trust graph can help identify high-ranking projects with a low number of high-ranking maintainers that could benefit from additional support and funding.\n\n  2. Identifying malicious activity. We can\u2019t say with confidence that the PoD Algorithm would have uncovered the XZ vulnerability, but we believe it\u2019s a step in the right direction. We know that the hostile actors\u2019 introduction of many relatively unknown \u201csock puppet\u201d accounts would have driven down the ranking of the project. While there would be a fair amount of activity, the introduction of relatively unknown individuals all contributing to the same project would lower the project\u2019s ranking. We plan to implement more techniques to aid discovery of such scenarios - stay tuned!\n\n  3. Observing technology trends. It is very common to observe projects become popular, and then later fall in popularity. In-line with the expansion or decline in popularity stands a migration of developers from one project to the next. With the PoD algorithm and the Trust graph, we can detect these patterns and predict technology changes and adoption using the real-world data.\n\n## Conclusion\n\nAfter months of research and validation, we are now able to share the PoD\nAlgorithm with others for review and feedback.\n\nWe are releasing the Trusty implementation of the PoD Algorithm\u2014the \u201cOSS Trust\nGraph\u201d\u2014initially as a private beta. We believe it has potential to help make\nthe open source ecosystem safer, and intend to open it up more broadly\u2014but we\nneed to do this responsibly. Our goal is to make sure that it won\u2019t be harmful\nto open source communities, or create unintended and unwelcome behaviors. We\nalso see this as a part of a \u2018multipronged\u2019 approach to this problem space and\nnot a panacea solution to the problem, which is why we combine the graph with\nother signals of potential risk.\n\nStacklok has a long history of acting as good custodians of open source. Our\nco-founders started projects such as Kubernetes and Sigstore and many others,\nso we always try to adhere to a community serving approach.\n\nWe believe that insight and controls around open source dependency decision\nmaking will be critical to sustainability of the communities that drive so\nmuch innovation in the software industry. As attackers become more\nsophisticated and have access to more sophisticated tools, we will need to\ncome together and collaborate in an effort to drive sustainability over time.\n\n### If you\u2019re a developer, open source contributor, or security researcher, we\ninvite you to join our private beta. Be among the first to test this out, and\nlet us know what you think.\n\n### Sign up for the OSS Trust Graph private beta here.\n\nWe look forward to continuing to iterate and engage on this, and engaging with\nthe broader technology and open source community to make open source software\nsafer for everyone.\n\nLuke Hinds\n\nCTO\n\nLuke Hinds is the CTO of Stacklok. He is the creator of the open source\nproject sigstore, which makes it easier for developers to sign and verify\nsoftware artifacts. Prior to Stacklok, Luke was a distinguished engineer at\nRed Hat.\n\nLuke Hinds On Twitter (X)\n\nLuke Hinds On Github\n\nLuke Hinds On LinkedIn\n\nPankaj Telang\n\nPrincipal Engineer, Data Science & ML\n\nPankaj has over 20 years of experience in the areas of AI, ML, computer\nvision, cybersecurity, and software development. Prior to Stacklok, Pankaj\nworked as a Principal Staff Scientist for SAS, focused on cybersecurity and\ncomputer vision, where he developed ML algorithms for detecting suspicious\nuser and device activities from network communications.\n\nPankaj Telang On Github\n\nPankaj Telang On LinkedIn\n\n#### Private Beta Registration: OSS Trust Graph\n\nLuke Hinds / Pankaj Telang /\n\nApr 16, 2024\n\nContinue Reading\n\n#### Driving safe and sustainable open source consumption with two new\nStacklok capabilities\n\nCraig McLuckie /\n\nApr 17, 2024\n\nContinue Reading\n\n#### New features in Trusty: Historical provenance, new scoring dimensions,\nand more\n\nStacklok /\n\nJan 17, 2024\n\nTrusty\n\nContinue Reading\n\n##### Newsletter\n\n## Stay in the loop\n\nSubscribe to our newsletter for the latest news about our products and about\nopen source supply chain security.\n\n\u00a9 2024 Stacklok\n\nPrivacy Policy\n\n##### Main Menu\n\nHome About Careers Contact\n\n##### Products\n\nTrusty Minder\n\n##### Resources\n\nAll Resources Blog Videos Trusty Docs Minder Docs\n\n##### Contact Us\n\nhello@stacklok.com\n\nStacklok On Twitter (X)\n\nStacklok On Github\n\nStacklok On LinkedIn\n\nStacklok On Discord\n\nStacklok On YouTube\n\n##### For Developers\n\n### Find and evaluate open source packages\n\nTrusty provides a free-to-use service with scoring and metrics about a\npackage\u2019s repo and author activity.\n\nGet Started with Trusty\n\n##### For Open Source Communitites\n\n### Secure and govern software projects\n\nMinder is an open source platform that helps project owners build more secure\nsoftware and prove that what they\u2019ve built is secure.\n\nGet Started with Minder\n\n##### For Developers\n\n### Find and evaluate open source packages\n\nTrusty provides a free-to-use service with scoring and metrics about a\npackage\u2019s repo and author activity.\n\nGet Started with Trusty\n\n##### For Open Source Communitites\n\n### Secure and govern software projects\n\nMinder is an open source platform that helps project owners build more secure\nsoftware and prove that what they\u2019ve built is secure.\n\nGet Started with Minder\n\n# Notice\n\nWe and selected third parties use cookies or similar technologies for\ntechnical purposes and, with your consent, for experience, measurement and\nmarketing (personalized ads) as specified in the cookie policy.\n\nWith respect to advertising, we and 839 selected , may use precise geolocation\ndata, and identification through device scanning in order to store and/or\naccess information on a device and process personal data like your usage data\nfor the following : personalised advertising and content, advertising and\ncontent measurement, audience research and services development.\n\nYou can freely give, deny, or withdraw your consent at any time by accessing\nthe preferences panel. If you give consent, it will be valid only in this\ndomain. Denying consent may make related features unavailable.\n\nUse the \u201cAccept all\u201d button to consent. Use the \u201cReject all\u201d button or close\nthis notice to continue without accepting.\n\nPress again to continue 0/1\n\n", "frontpage": false}
