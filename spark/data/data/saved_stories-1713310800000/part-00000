{"aid": "40054884", "title": "How to Monitor and Optimize Google Core Web Vitals", "url": "https://www.smashingmagazine.com/2024/04/monitor-optimize-google-core-web-vitals/", "domain": "smashingmagazine.com", "votes": 1, "user": "ulrischa", "posted_at": "2024-04-16 17:39:38", "comments": 0, "source_title": "How To Monitor And Optimize Google Core Web Vitals", "source_text": "How To Monitor And Optimize Google Core Web Vitals \u2014 Smashing Magazine\n\nSkip to main content Start reading the article Jump to list of all articles\nJump to all topics\n\n  * Matt Zeunert\n  * Apr 16, 2024\n  * 0 comments\n\n# How To Monitor And Optimize Google Core Web Vitals\n\n  * 7 min read\n  * Performance, Core Web Vitals, Optimization\n  * Share on Twitter, LinkedIn\n\n#### About The Author\n\nMatt has worked as a developer for over ten years. He started DebugBear with\nthe goal of making web performance data easier to understand. DebugBear helps\n... More about Matt \u21ac\n\n#### Email Newsletter\n\nWeekly tips on front-end & UX. Trusted by 200,000+ folks.\n\nThe three Core Web Vitals metrics don\u2019t only tell you how visitors experience\nyour website but also impact your Google search result rankings. In this\narticle, we\u2019ll look at what Core Web Vitals are, how they are measured, and\nhow you can use DebugBear to monitor them continuously.\n\nThis article has been kindly supported by our dear friends at DebugBear, who\nhelp optimize web performance to improve user experience. Thank you!\n\nGoogle\u2019s Core Web Vitals initiative has increased the attention website owners\nneed to pay to user experience. You can now more easily see when users have\npoor experiences on your website, and poor UX also has a bigger impact on SEO.\n\nThat means you need to test your website to identify optimizations. Beyond\nthat, monitoring ensures that you can stay ahead of your Core Web Vitals\nscores for the long term.\n\nLet\u2019s find out how to work with different types of Core Web Vitals data and\nhow monitoring can help you gain a deeper insight into user experiences and\nhelp you optimize them.\n\n## What Are Core Web Vitals?\n\nThere are three web vitals metrics Google uses to measure different aspects of\nwebsite performance:\n\n  * Largest Contentful Paint (LCP),\n  * Cumulative Layout Shift (CLS),\n  * Interaction to Next Paint (INP).\n\n(Large preview)\n\n### Largest Contentful Paint (LCP)\n\nThe Largest Contentful Paint metric is the closest thing to a traditional load\ntime measurement. However, LCP doesn\u2019t track a purely technical page load\nmilestone like the JavaScript Load Event. Instead, it focuses on what the user\ncan see by measuring how soon after opening a page, the largest content\nelement on the page appears.\n\nThe faster the LCP happens, the better, and Google rates a passing LCP score\nbelow 2.5 seconds.\n\n(Large preview)\n\n### Cumulative Layout Shift (CLS)\n\nCumulative Layout Shift is a bit of an odd metric, as it doesn\u2019t measure how\nfast something happens. Instead, it looks at how stable the page layout is\nonce the page starts loading. Layout shifts mean that content moves around,\ndisorienting the user and potentially causing accidental clicks on the wrong\nUI element.\n\nThe CLS score is calculated by looking at how far an element moved and how big\nthe element is. Aim for a score below 0.1 to get a good rating from Google.\n\n(Large preview)\n\n### Interaction to Next Paint (INP)\n\nEven websites that load quickly often frustrate users when interactions with\nthe page feel sluggish. That\u2019s why Interaction to Next Paint measures how long\nthe page remains frozen after user interaction with no visual updates.\n\nPage interactions should feel practically instant, so Google recommends an INP\nscore below 200 milliseconds.\n\n(Large preview)\n\n## What Are The Different Types Of Core Web Vitals Data?\n\nYou\u2019ll often see different page speed metrics reported by different tools and\ndata sources, so it\u2019s important to understand the differences. We\u2019ve published\na whole article just about that, but here\u2019s the high-level breakdown along\nwith the pros and cons of each one:\n\n  * Synthetic Tests These tests are run on-demand in a controlled lab environment in a fixed location with a fixed network and device speed. They can produce very detailed reports and recommendations.\n  * Real User Monitoring (RUM) This data tells you how fast your website is for your actual visitors. That means you need to install an analytics script to collect it, and the reporting that\u2019s available is less detailed than for lab tests.\n  * CrUX Data Google collects from Chrome users as part of the Chrome User Experience Report (CrUX) and uses it as a ranking signal. It\u2019s available for every website with enough traffic, but since it covers a 28-day rolling window, it takes a while for changes on your website to be reflected here. It also doesn\u2019t include any debug data to help you optimize your metrics.\n\n## Start By Running A One-Off Page Speed Test\n\nBefore signing up for a monitoring service, it\u2019s best to run a one-off lab\ntest with a free tool like Google\u2019s PageSpeed Insights or the DebugBear\nWebsite Speed Test. Both of these tools report with Google CrUX data that\nreflects whether real users are facing issues on your website.\n\nNote: The lab data you get from some Lighthouse-based tools \u2014 like PageSpeed\nInsights \u2014 can be unreliable.\n\n(Large preview)\n\nINP is best measured for real users, where you can see the elements that users\ninteract with most often and where the problems lie. But a free tool like the\nINP Debugger can be a good starting point if you don\u2019t have RUM set up yet.\n\n## How To Monitor Core Web Vitals Continuously With Scheduled Lab-Based\nTesting\n\nRunning tests continuously has a few advantages over ad-hoc tests. Most\nimportantly, continuous testing triggers alerts whenever a new issue appears\non your website, allowing you to start fixing them right away. You\u2019ll also\nhave access to historical data, allowing you to see exactly when a regression\noccurred and letting you compare test results before and after to see what\nchanged.\n\nScheduled lab tests are easy to set up using a website monitoring tool like\nDebugBear. Enter a list of website URLs and pick a device type, test location,\nand test frequency to get things running:\n\n(Large preview)\n\nAs this process runs, it feeds data into the detailed dashboard with\nhistorical Core Web Vitals data. You can monitor a number of pages on your\nwebsite or track the speed of your competition to make sure you stay ahead.\n\n(Large preview)\n\nWhen regression occurs, you can dive deep into the results using DebuBears\u2019s\nCompare mode. This mode lets you see before-and-after test results side-by-\nside, giving you context for identifying causes. You see exactly what changed.\nFor example, in the following case, we can see that HTTP compression stopped\nworking for a file, leading to an increase in page weight and longer download\ntimes.\n\n(Large preview)\n\n## How To Monitor Real User Core Web Vitals\n\nSynthetic tests are great for super-detailed reporting of your page load time.\nHowever, other aspects of user experience, like layout shifts and slow\ninteractions, heavily depend on how real users use your website. So, it\u2019s\nworth setting up real user monitoring with a tool like DebugBear.\n\nTo monitor real user web vitals, you\u2019ll need to install an analytics snippet\nthat collects this data on your website. Once that\u2019s done, you\u2019ll be able to\nsee data for all three Core Web Vitals metrics across your entire website.\n\n(Large preview)\n\nTo optimize your scores, you can go into the dashboard for each individual\nmetric, select a specific page you\u2019re interested in, and then dive deeper into\nthe data.\n\nFor example, you can see whether a slow LCP score is caused by a slow server\nresponse, render blocking resources, or by the LCP content element itself.\n\nYou\u2019ll also find that the LCP element varies between visitors. Lab test\nresults are always the same, as they rely on a single fixed screen size.\nHowever, in the real world, visitors use a wide range of devices and will see\ndifferent content when they open your website.\n\n(Large preview)\n\nINP is tricky to debug without real user data. Yet an analytics tool like\nDebugBear can tell you exactly what page elements users are interacting with\nmost often and which of these interactions are slow to respond.\n\n(Large preview)\n\nThanks to the new Long Animation Frames API, we can also see specific scripts\nthat contribute to slow interactions. We can then decide to optimize these\nscripts, remove them from the page, or run them in a way that does not block\ninteractions for as long.\n\n(Large preview)\n\n## Conclusion\n\nContinuously monitoring Core Web Vitals lets you see how website changes\nimpact user experience and ensures you get alerted when something goes wrong.\nWhile it\u2019s possible to measure Core Web Vitals using a wide range of tools,\nthose tools are limited by the type of data they use to evaluate performance,\nnot to mention they only provide a single snapshot of performance at a\nspecific point in time.\n\nA tool like DebugBear gives you access to several different types of data that\nyou can use to troubleshoot performance and optimize your website, complete\nwith RUM capabilities that offer a historial record of performance for\nidentifying issues where and when they occur. Sign up for a free DebugBear\ntrial here.\n\n(gg, yk)\n\nExplore more on\n\n#### Browse All Smashing Magazine Topics\n\n  * Accessibility\n  * Best practices\n  * Business\n  * Career\n  * Checklists\n  * CSS\n  * Data Visualization\n  * Design\n  * Design Patterns\n  * Design Systems\n  * E-Commerce\n  * Figma\n  * Freebies\n  * HTML\n  * Illustrator\n  * Inspiration\n  * JavaScript\n  * Mobile\n  * Performance\n  * Privacy\n  * React\n  * Responsive Design\n  * Round-Ups\n  * SEO\n  * Typography\n  * Tools\n  * UI\n  * Usability\n  * UX\n  * Vue\n  * Wallpapers\n  * Web Design\n  * Workflow\n\nWith a commitment to quality content for the design community.\n\nFounded by Vitaly Friedman and Sven Lennartz. 2006\u20132024.\n\nSmashing is proudly running on Netlify, TinaCMS and Swell.\n\nFonts by Latinotype.\n\n  * \u270e Write for us\n  * Contact us\n  * About us (Impressum)\n  * Privacy policy\n  * Membership login\n  * Delivery times\n  * Advertise\n\n", "frontpage": false}
