{"aid": "40043576", "title": "PostgreSQL Extensions or Protocols: Architecture Roulette", "url": "https://materializedview.io/p/postgresql-extensions-or-protocols", "domain": "materializedview.io", "votes": 2, "user": "samwillis", "posted_at": "2024-04-15 17:49:13", "comments": 0, "source_title": "PostgreSQL Extensions or Protocols: Architecture Roulette", "source_text": "PostgreSQL Extensions or Protocols: Architecture Roulette\n\nShare this post\n\n#### PostgreSQL Extensions or Protocols: Architecture Roulette\n\nmaterializedview.io\n\n#### Discover more from Materialized View\n\nSoftware infrastructure hot takes, projects, papers, developer interviews, and\ndeep dives. Brought to you by Chris Riccomini.\n\nOver 1,000 subscribers\n\nContinue reading\n\nSign in\n\n# PostgreSQL Extensions or Protocols: Architecture Roulette\n\n### Should new infrastructure use PostgreSQL as a query engine, or aim for\nprotocol compatibility instead?\n\nChris Riccomini\n\nApr 15, 2024\n\n3\n\nShare this post\n\n#### PostgreSQL Extensions or Protocols: Architecture Roulette\n\nmaterializedview.io\n\nShare\n\nPostgreSQL has a lot of momentum right now. Nearly every startup I talk to is\nusing PostgreSQL or a PostgreSQL-compatible database. Most database vendors\noffer some form of PostgreSQL compatibility through extensions, protocol\ncompatibility, or PostgreSQL SQL dialect support.\n\nA big part of PostgreSQL\u2019s success is its extension ecosystem. Users no longer\nneed to adopt Elasticsearch for search, Pinecone for vector search, Neo4J for\ngraph operations, and Snowflake for online analytical processing (OLAP).\nInstead, users are opting for PostgreSQL extensions like pg_bm25, pgvector,\npostgis, pg_analytics, hydra_columnar, and so on. The operational footprint is\nsmaller, users have to deal with fewer (if any) vendors, and PostgreSQL\u2019s\narchitecture is tried-and-true.\n\nTwo architectures are emerging. The first embraces PostgreSQL as a query\nengine to build extensions for. Vendors such as Hydra, Tembo, ParadeDB, and\nNeon use this approach. The other approach uses PostgreSQL\u2019s protocols and/or\nSQL dialect, but builds a new query engine and storage layer from ground up.\nCedarDB, Yugabyte, CockroachDB, Spanner, and AuroraDB represent the latter\napproach.\n\nAdopting PostgreSQL as your query engine confers many advantages. You get a\nlot from PostgreSQL: its excellent write-ahead log (WAL), its parser frontend,\nits network layer, and so on. Infrastructure developers are free to focus only\non the area of the system that differentiates their project. Neon, for\nexample, has chosen to focus heavily on the storage layer to provide\nbottomless storage. In Postgres is eating the database world, Ruohang Feng\nwrites:\n\n> PostgreSQL is already a near-perfect database kernel for the vast majority\n> of scenarios, making the idea of a kernel \u201cbottleneck\u201d absurd. Forks of\n> PostgreSQL and MySQL that tout kernel modifications as selling points are\n> essentially going nowhere.\n>\n> This is similar to the situation with the Linux OS kernel today; despite the\n> plethora of Linux distros, everyone opts for the same kernel. Forking the\n> Linux kernel is seen as creating unnecessary difficulties, and the industry\n> frowns upon it.\n>\n> Accordingly, the main conflict is no longer the database kernel itself but\n> two directions\u2014 database extensions and services! The former pertains to\n> internal extensibility, while the latter relates to external composability.\n> Much like the OS ecosystem, the competitive landscape will concentrate on\n> database distributions. In the database domain, only those distributions\n> centered around extensions and services stand a chance for ultimate success.\n>\n> Kernel remains lukewarm, with MariaDB, the fork of MySQL\u2019s parent, nearing\n> delisting, while AWS, profiting from offering services and extensions on top\n> of the free kernel, thrives. Investment has flowed into numerous PG\n> ecosystem extensions and service distributions: Citus, TimescaleDB, Hydra,\n> PostgresML, ParadeDB, FerretDB, StackGres, Aiven, Neon, Supabase, Tembo,\n> PostgresAI, and our own PG distro \u2014 \u2014 Pigsty.\n\nFeng\u2019s kernel analogy is interesting, as is his comparison between Linux and\nPostgreSQL distributions. But I think the post misses the significance of\nPostgreSQL\u2019s protocol being an easy integration point. The question is not\nwhether to package or fork PostgreSQL, but whether to extend PostgreSQL using\nthe extensions API or the protocol.\n\nI disagree with Feng\u2019s statement that, \u201cPostgreSQL is already a near-perfect\ndatabase kernel for the vast majority of scenarios, making the idea of a\nkernel \u201cbottleneck\u201d absurd.\u201d Tying yourself to PostgreSQL is always going to\nbe more limiting than building your own database. You\u2019re limited by what\nPostgreSQL can offer you. The more control you want, the more PostgreSQL is\ngoing to feel like a straight jacket. One of Feng\u2019s own examples\u2014Neon\u2014has had\nto fork PostgreSQL to support a remote write-ahead log (something they hope to\nmerge upstream).\n\nAnd building your own database doesn\u2019t sound as crazy as it used to. Query\nengine components like DataFusion, Substrait, and Velox are maturing. Storage\nformats like Parquet and storage layers like RocksDB are well known. As I\nwrote about in Databases Are Falling Apart: Database Disassembly and Its\nImplications, databases are easier than ever to build. Using these systems\nwhile maintaining protocol and dialect compatibility with PostgreSQL seems to\nget you the best of both worlds.\n\nDeployment complexity is still important, though. Extensions are easier to\nadopt than a new system (with a caveat that I\u2019ll get to in a moment). New\ninfrastructure must justify its upfront adoption cost. Not only must new\nsystems be PostgreSQL compatible, but they must be easier to run and offer\nmore functionality than the PostgreSQL extensions they\u2019re competing with.\n\nVendors will follow the standard playbook to make their systems easier to run:\nserverless SaaS, bring your own cloud (BYOC), virtual private clouds (VPCs),\nbring your own object store, and so on.\n\nWhen it comes to functionality, I believe new databases will need to be multi-\nmodel, something I wrote about in, Databases Are Commodities. Now What? Multi-\nmodel databases amortize the adoption cost across multiple use cases. Users\nmay choose to keep PostgreSQL as their online transaction processing (OLTP)\nsystem but adopt a single multi-model system for search, GIS, graph, and\ncaching use cases. Multi-model system can take over OLTP workload as users get\ncomfortable with them. SinleStoreDB and CedarDB exemplify this approach.\n\nFurther pushing users away from extensions is the caveat I alluded to above.\nThe big three cloud providers have limited extension support. Amazon\u2019s Aurora\nPostgreSQL has an extensive but not exhaustive list of supported extensions.\nThe same is true for Google Cloud\u2019s AlloyDB. If you want to use an extension\nthat\u2019s not on the list, you\u2019re out of luck. This is an opportunity for third-\nparty providers like Tembo and Neon, and also for multi-model databases that\noffer missing functionality.\n\nThere\u2019s no clear winner between the two architectures. I suspect that both\ntypes of systems will exist; indeed, they already do. My gut says that\nPostgreSQL\u2019s protocol, not its query engine, will be its most defining\ncharacteristic. But I also think there\u2019s room in the market for multi-model\nPostgreSQL vendor distributions.\n\nShare\n\n####\n\nJobs\n\n  * Eventual [$] - Eventual Computing is a startup from some of the folks that work on Daft. The team is is hiring a full stack engineer, open-source product growth engineer, and a distributed query engine engineer. Code Rust, write a distributed query engine, what's not to like?\n\n  * Stealth [$] - A stealth seed-funded startup that I invested in is looking for a founding staff software engineer. You\u2019ll work closely with the founders and be responsible for creating the technical roadmap, architecting/designing a complex query engine, and building out the initial platform that re-imagines how data pipelines are built and managed. Work with exciting technologies like Velox, DataFusion, Firecracker, etc. The role is Bay Area based. Message me if you\u2019re interested.\n\n  * Ditto - In Edge Databases Are a Thing, I mentioned that my friend (and former manager), Chris Conrad, joined Ditto as their VP of engineering. Their product is an interesting mix of CRDT, networking, database, and systems programming. The team is now hiring for a bunch of roles including a senior Rust engineer, senior C++ engineer. and Site Reliability Engineer.\n\n####\n\nBook\n\nSupport this newsletter by purchasing The Missing README: A Guide for the New\nSoftware Engineer for yourself or gifting it to someone.\n\nBuy Now\n\n####\n\nDisclaimer\n\nI occasionally invest in infrastructure startups. Companies that I\u2019ve invested\nin are marked with a [$] in this newsletter. See my LinkedIn profile for a\ncomplete list.\n\n4 Likes\n\n\u00b7\n\n2 Restacks\n\n3\n\nShare this post\n\n#### PostgreSQL Extensions or Protocols: Architecture Roulette\n\nmaterializedview.io\n\nShare\n\nDatabases Are Falling Apart: Database Disassembly and Its Implications\n\nWhy are engineers taking databases apart and putting them back together,\nagain?\n\nJan 29 \u2022\n\nChris Riccomini\n\n19\n\nShare this post\n\n#### Databases Are Falling Apart: Database Disassembly and Its Implications\n\nmaterializedview.io\n\nDatabase Isolation Is Broken and You Should Care\n\nThe database zeitgeist has decided that ANSI SQL '92 isn't enough. We need\nsomething better.\n\nDec 22, 2023 \u2022\n\nChris Riccomini\n\n10\n\nShare this post\n\n#### Database Isolation Is Broken and You Should Care\n\nmaterializedview.io\n\nFrom Samza to Flink: A Decade of Stream Processing\n\nWhy Samza failed, how it led to Kafka Streams and Kafka Connect, and why I'm\nskeptical of Apache Flink.\n\nFeb 20 \u2022\n\nChris Riccomini\n\n28\n\nShare this post\n\n#### From Samza to Flink: A Decade of Stream Processing\n\nmaterializedview.io\n\nReady for more?\n\n\u00a9 2024 Chris Riccomini\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n", "frontpage": false}
