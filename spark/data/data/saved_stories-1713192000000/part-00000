{"aid": "40038134", "title": "Pl/dotnet Postgres extension enabling C#/F# as languages", "url": "https://github.com/Brick-Abode/pldotnet", "domain": "github.com/brick-abode", "votes": 1, "user": "kieranbenton2", "posted_at": "2024-04-15 08:37:41", "comments": 0, "source_title": "GitHub - Brick-Abode/pldotnet: Build PostgreSQL functions, procedures, and triggers in C# and F#", "source_text": "GitHub - Brick-Abode/pldotnet: Build PostgreSQL functions, procedures, and\ntriggers in C# and F#\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nBrick-Abode / pldotnet Public\n\n  * Notifications\n  * Fork 8\n  * Star 78\n\nBuild PostgreSQL functions, procedures, and triggers in C# and F#\n\npldotnet.brickabode.com\n\n### License\n\nPostgreSQL license\n\n78 stars 8 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# Brick-Abode/pldotnet\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ntlewis-baMerge pull request #5 from Brick-Abode/v0.99-rc1d31d5b8 \u00b7\n\n## History\n\n5 Commits  \n  \n### debian\n\n|\n\n### debian\n\n| Update changelog  \n  \n### docker\n\n|\n\n### docker\n\n| First beta release of pl/dotnet:  \n  \n### docs\n\n|\n\n### docs\n\n| First beta release of pl/dotnet:  \n  \n### dotnet_src\n\n|\n\n### dotnet_src\n\n| First beta release of pl/dotnet:  \n  \n### src\n\n|\n\n### src\n\n| First beta release of pl/dotnet:  \n  \n### tests\n\n|\n\n### tests\n\n| First beta release of pl/dotnet:  \n  \n### .gitmodules\n\n|\n\n### .gitmodules\n\n| First beta release of pl/dotnet:  \n  \n### INSTALL.md\n\n|\n\n### INSTALL.md\n\n| First beta release of pl/dotnet:  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Version 0.9 of pl/dotnet  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| First beta release of pl/dotnet:  \n  \n### PL-NET_LOGO.png\n\n|\n\n### PL-NET_LOGO.png\n\n| Version 0.9 of pl/dotnet  \n  \n### README.md\n\n|\n\n### README.md\n\n| First beta release of pl/dotnet:  \n  \n### docker-compose.yml\n\n|\n\n### docker-compose.yml\n\n| First beta release of pl/dotnet:  \n  \n### pldotnet--0.9.sql\n\n|\n\n### pldotnet--0.9.sql\n\n| Version 0.9 of pl/dotnet  \n  \n### pldotnet.control\n\n|\n\n### pldotnet.control\n\n| Version 0.9 of pl/dotnet  \n  \n## Repository files navigation\n\n# PL/.NET\n\npl/dotnet adds full support for C# and F# to PostgreSQL. 0.99 is our public\nbeta release.\n\n  * In our benchmarks, pl/dotnet is the fastest PL in PostgreSQL\n  * We support all Procedural Language (PL) operations: functions, procedures, DO, SPI, triggers, records, SRF, OUT/INOUT, table functions, etc\n  * We natively support 38 out of 46 standard user types, the most of any non-native PL\n  * We are the only PL using the native database API; our database access(SPI) is fully NPGSQL-compatible\n  * We support both SQL-embedded code blocks and also loading functions from DLLs\n  * We have extensive testing, with 1065 unit tests across both C# and F#\n  * 100% free software under the PostgreSQL license\n\nOur white paper has extensive discussion of all of these items; check it out.\n\n## Usage examples\n\nHere is an example that returns a set of records in C#:\n\n    \n    \n    CREATE OR REPLACE FUNCTION dynamic_record_generator_srf(lim INT8) RETURNS SETOF record AS $$ var upperLimit = lim.HasValue ? lim : System.Int32.MaxValue; for(long i=0;i<upperLimit;i++){ yield return new object?[] { i, $\"Number is {i}\" }; } $$ LANGUAGE plcsharp; select * from dynamic_record_generator_srf(10) as record(a int8, b text);\n\nThe same example in F#:\n\n    \n    \n    CREATE OR REPLACE FUNCTION dynamic_record_generator_srf_fsharp(lim INT8) RETURNS SETOF record AS $$ let upperLimit = if lim.HasValue then lim.Value else int64 System.Int32.MaxValue seq { for i in 0L .. upperLimit - 1L do yield [| box i; $\"Number is {i}\" |] } $$ LANGUAGE plfsharp; select * from dynamic_record_generator_srf_fsharp(10) as record(a int8, b text);\n\nThe tests/ folder has a complete suite of unit tests in both C# and F#; we\nencourage you to consult it for examples of SQL code for your favorite\ndatatype or SQL feature.\n\n## Major features\n\nWe support all SQL function modes:\n\n  * normal procedures and functions\n  * full support for trigger functions: trigger arguments, old/new row, row rewriting (where allowed), and all the standard trigger information\n  * set-returning functions, nicely mapped to iterators in C# and sequences in F#\n  * table functions, as well as functions returning records or sets of records\n  * full support for IN/OUT/INOUT functions\n  * full support for trigger functions:\n\n    * trigger function arguments,\n    * old row and new row,\n    * row rewriting (where allowed by SQL), and\n    * all the standard trigger information: Name, When, Level, Event, Table Name, Table Schema, etc\n\nData types and SPI are described below.\n\n## Data type support\n\nWe support 36 PostgreSQL types, with all mapped to their NPGSQL-standard\ndotnet types. The only notable exceptions are multirange, enum, and struct\ntypes, all of which we hope to add in the future. All datatypes are nullable,\nhave full array support, and are fully unit-tested for C# and F#.\n\nPostgreSQL type| Dotnet type  \n---|---  \nBitString| BitArray  \nBool| bool  \nBox| NpgsqlBox  \nBytea| byte[]  \nCidr| (IPAddress Address, int Netmask)  \nCircle| NpgsqlCircle  \nDate| DateOnly  \nDateRange| DateOnly, DateHandler  \nDouble| double  \nFloat| float  \nInet| (IPAddress Address, int Netmask)  \nInterval| NpgsqlInterval  \nInt| int  \nIntRange| int, IntHandler  \nJson| string  \nLine| NpgsqlLine  \nLineSegment| NpgsqlLSeg  \nLong| long  \nLongRange| long, LongHandler  \nMacaddr8| PhysicalAddress  \nMacaddr| PhysicalAddress  \nMoney| decimal  \nPath| NpgsqlPath  \nPoint| NpgsqlPoint  \nPolygon| NpgsqlPolygon  \nRecord| object[]  \nShort| short  \nString| string  \nTimestamp| DateTime  \nTimestampRange| DateTime, TimestampHandler  \nTimestampTz| DateTime  \nTimestampTzRange| DateTime, TimestampTzHandler  \nTime| TimeOnly  \nTimeTz| DateTimeOffset  \nUuid| Guid  \nVarBitString| BitArray  \n  \n## SPI\n\nOur SPI leverages the NPGSQL client library to provide a native dotnet\nimplementation, making it maximally compatible with existing client code. We\nintercepted the NPGSQL calls at a very low level to replace the client\nprotocol handling with SPI calls; NPGSQL was otherwise unmodified. We imported\nthe NPGSQL test suite as stored procedures and are using it for our testing,\ngiving us high confidence in our compatibility.\n\nWork remains to improve the compatibility and add features. Our biggest\ncategory of NPGSQL incompatibility is error mapping, because SPI throws\nexceptions differently than NPGSQL does. Such incompatibilities are minor, and\nwork continues to improve them.\n\nHere are our currently tested SPI operations:\n\n  * Data Manipulation Language (DML) Operations\n\n    * Select\n    * Insert\n    * Update\n    * Delete\n  * Data Definition Language (DDL) Operations\n\n    * Create Table\n    * Alter Table\n    * Drop Table\n    * Truncate\n    * Create Index\n    * Drop Index\n    * Create View\n    * Drop View\n    * Create Function\n    * Call Function\n    * Drop Function\n    * Create Procedure\n    * Call Procedure\n    * Drop Procedure\n  * Transaction Control\n\n    * Begin Transaction\n    * Commit\n    * Rollback\n  * Supported Data Types\n\n    * Basic types\n    * Array types\n    * Record\n\n## What we don't have\n\nWe lack support for multirange, enum, and composite/table types.\n\nOur SPI implementation lacks some minor features like sub-transactions.\n\nWe fully support Linux and provide dpkg's for Debian and Ubuntu, but we do not\nyet have packaging on Windows or OS/X.\n\nOur package build system for dpkg is functional but not as tidy as we would\nlike.\n\nWe welcome code submissions to address any of these features, and we hope to\nimprove them all in time.\n\n## Getting started\n\nTo get started with pldotnet, you will need to install it on your PostgreSQL\nserver. Detailed installation instructions can be found in the pldotnet Wiki\npages, along with examples and information on the supported PostgreSQL data\ntypes.\n\nFeel free to open an issue or a discussion topic on our GitHub repository.\n\n## About\n\nBuild PostgreSQL functions, procedures, and triggers in C# and F#\n\npldotnet.brickabode.com\n\n### Topics\n\nsql csharp fsharp dotnet postgresql dotnet-core postgresql-extension\n\n### Resources\n\nReadme\n\n### License\n\nPostgreSQL license\n\nActivity\n\nCustom properties\n\n### Stars\n\n78 stars\n\n### Watchers\n\n9 watching\n\n### Forks\n\n8 forks\n\nReport repository\n\n## Releases\n\n1 tags\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * C# 54.7%\n  * PLpgSQL 34.9%\n  * C 6.9%\n  * F# 1.3%\n  * Java 0.7%\n  * Makefile 0.6%\n  * Other 0.9%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
