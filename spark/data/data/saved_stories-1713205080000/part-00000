{"aid": "40039544", "title": "Show HN: Python.cards \u2013 Learn Python with spaced repetition", "url": "https://python.cards", "domain": "python.cards", "votes": 1, "user": "victorlf", "posted_at": "2024-04-15 12:16:11", "comments": 0, "source_title": "Python.cards", "source_text": "Python.cards\n\n# The steady path to Python mastery\n\n##\n\nLearn Python with spaced repetition and boost your productivity\n\n# 426\n\n# cards\n\n# 95\n\n# reviews today\n\n# 3446\n\n# reviews all time\n\n# Try it\n\n# Are you ready to master Python?\n\nJoin the waitlist and we'll you when Python cards goes live.\n\nWhat are pathlib pure paths?\n\nPure paths allow you to manipulate paths without any input/output operation.\n\nIn which two main scenarios are PurePaths useful?\n\nThey are useful:\n\n  * To manipulate Windows paths on a Unix machine or vice versa.\n\n  * To make sure that your code manipulates paths without actually accessing the OS.\n\nWhat path does a PureWindowsPath point to if it is instantiated without any\nparameter?\n\nWhat is the output of the following code?\n\n    \n    \n    >>> from pathlib import PureWindowsPath >>> PureWindowsPath() PureWindowsPath('.')\n\nIt points to the current working directory.\n\nWhat happens if you try to instantiate a WindowsPath on a Unix-based machine?\n\n    \n    \n    >>> from pathlib import WindowsPath >>> WindowsPath() Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"/usr/lib/python3.8/pathlib.py\", line 1044, in __new__ raise NotImplementedError(\"cannot instantiate %r on your system\" NotImplementedError: cannot instantiate 'WindowsPath' on your system\n\nIt doesn't work, it raises a NotImplementedError exception.\n\nYou cannot use concrete paths for the wrong OS.\n\nThe same thing happens if you try to use PosixPath on a Windows machine.\n\n# nomenclature\n\nWhat is the / operator called? For example in:\n\n    \n    \n    from pathlib import Path Path(\"directory\") / \"file.txt\"\n\nIt's called the slash operator. It allows you to join paths.\n\nHow can you access the different components of a Path?\n\n    \n    \n    >>> from pathlib import Path >>> p = Path(\"/home/user/file.txt\") >>> print(p.parts) ('/', 'home', 'user', 'file.txt')\n\nPurePath.parts\n\nHow do you get the last path component of a path?\n\n    \n    \n    >>> PurePosixPath(\"/home/user/file.txt\").name 'file.txt' PurePosixPath(\"/home/user/\").name 'user'\n\nUsing PurePath.name.\n\nWhat does POSIX mean?\n\nPOSIX stands for Portable Operating System Interface, it is a family of\nstandards that defines system and user-level APIs, command line shells, and\nutility interfaces for software compatible with variants of Unix.\n\nOperating systems such as Linux, MacOS and FreeBSD are POSICX compliant.\n\nHow do you get the file extension of the final component of the path?\n\n    \n    \n    >>> PurePosixPath(\"my/library/setup.py\").suffix '.py'\n\nUsing PurePath.suffix.\n\nHow can you represent a Windows path with forward slashes?\n\n    \n    \n    >>> from pathlib import PureWindowsPath >>> p = PureWindowsPath('c:\\\\windows') p.as_posix() >>> 'c:/windows'\n\n# The decks\n\n### A Tour of the Standard Library (285 cards) Free\n\nThe Python standard library is big, but how big is it? Did you know you can do\nlow-level network communications with socket? And measure the execution time\nof code with timeit? Have you ever analyzed the syntax tree of a Python code\nwith ast or drawn a plot with turtle? It even has a full sqlite3\nimplementation!\n\nGet a grasp of all the functionality just one import away.\n\n### pathlib in depth (137 cards) $ 9.99\n\nThe pathlib library offers the most convenient way of managing files and file\npaths in Python. Learn its full power and master its API.\n\n### Peter Norvig's pytude tricks Coming soon\n\nIf you have ever read Peter Norvig's code from his pytudes, you will agree\nthat his code is odd, surprisingly clear and insultingly concise.\n\nIn this deck, we have collected dozens of tricks in Pytudes so you can come\ncloser to his genius.\n\n### Nomenclature Coming soon\n\nLearn the concepts and words of Python: type hints, context managers, methods,\ncomprehensions, generic functions...\n\nKnowing the words is a first step towards a complete mental model of Python.\n\n### Built-ins Coming soon\n\nBuilt-in functions are always available in Python without needing to import\nthem. We are talking about print, range, enumerate, but also isinstance, map\nand staticmethod.\n\nThe list is short, but holds huge power.\n\n## It's easy\n\nGet daily reminders and build the habit of reviewing your cards.\n\n## It's fun\n\nKeep your streak and learn bit by bit.\n\n## It works\n\nFeel your knowledge growing and be amazed by your progress.\n\n# Our secret sauce: the cards\n\n  * Cards are atomic: only one concept per card, takes seconds to review.\n  * Decks are comprehensive: each topic is covered in depth.\n  * Decks are ordered: the right concept at the right time.\n  * Cards are improving: your feedback makes them better.\n\n# Built in public\n\nCheck my Youtube channel to see how the site and the decks are built.\n\n# Join now\n\nFill your email and start reviewing cards.\n\nEvery day you will receive a new email with a link to your daily session.\n\n# Frequently Asked Questions\n\nCan you really learn Python without writing code?\n\nOf course not. Python.cards is not a replacement for coding, it's a shortcut\nto level up your Python skills. If you want to improve your overall\nprogramming skills, check out my Software Design School.\n\nAre you planning to support other languages?\n\nYes. I'm working on Rust.cards, following the same philosophy as Python.cards.\n\nWhat spaced repetition algorithm does Python.cards use?\n\nWe use the classic Anki algorithm, which is a modified version of SM-2. We\nhave actually open sourced our implementation of the algorithm as the Python\nmodule simple-spaced-repetition. You can find the code on Github.\n\n\u00a9 2024 by The Diligent Developer\n\n", "frontpage": false}
