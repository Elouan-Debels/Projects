{"aid": "40001229", "title": "I (accidentally) uploaded a photo of my ID to Lemmy, and I couldn't delete it", "url": "https://tech.michaelaltfield.net/2024/03/04/lemmy-fediverse-gdpr/", "domain": "michaelaltfield.net", "votes": 2, "user": "dulvui", "posted_at": "2024-04-11 12:05:05", "comments": 0, "source_title": "Nightmare on Lemmy Street (A Fediverse GDPR Horror Story) - Michael Altfield's Tech Blog", "source_text": "Nightmare on Lemmy Street (A Fediverse GDPR Horror Story) - Michael Altfield's\nTech Blog\n\n|\n\n## Michael Altfield's Tech Blog\n\nTechnology, Science, and the pursuit of Enlightenment| CommentsPosts  \n---|---  \n  \n  * Home\n  * About\n  * Resume\n\n  \n  \nGuide to Finding Lemmy Communities (Subreddits) \u00bb\n\n# Nightmare on Lemmy Street (A Fediverse GDPR Horror Story)\n\nBy Michael Altfield, on March 4th, 2024\n\n  * share\n  * tweet\n  * share\n  * share\n  * share\n  * donate\n\nThis article will describe how lemmy instance admins can purge images from\npict-rs (click here if you just want to know how).This is (also) a horror\nstory about accidentally uploading very sensitive data to Lemmy, and the\n(surprisingly) difficult task of deleting it.\n\n# Intro\n\ntl;dr I (accidentally) uploaded a photo of my State-issued ID to Lemmy, and I\ncouldn't delete it.Friends don't let friends compose jerboa comments in bed\nbefore coffee (@theyshane)A few weeks ago I woke up to my 06:00 AM alarm,\nsnoozed my phone, rubbed my eyes, and started reading /c/worldnews (on\nLemmy).Still half-asleep, I was typing a comment when my thumb accidentally\nhit the \"upload media\" button. Up popped a gallery of images. I tried to click\nthe back button, but I missed. I tapped on a photo. The photo that I tapped-on\nwas a KYC selfie image (that I took the previous day for a service that has no\nbusiness having such PII anyway).That was all it took -- two consecutive mis-\ntaps while half-asleep in bed, and my dumb-ass just inadvertently uploaded a\nKYC selfie onto the public internet. And thanks to archaic State\nauthentication systems, anyone with the URL can now steal my identity.Like\nadrenaline to the heart, I jumped out of bed. In such an incident, at least\ntwo actions should follow:1\\. Delete the credential from the Internet and 2.\nRevoke & replace the credential.Thanks to our moronic State authentication\nsystems, #2 is all but impossible. Sigh.As for #1, I tried to delete the image\n-- but I discovered that the ability to delete images from the Lemmy WUI is a\npending feature. Wow.Yes, Lemmy users cannot delete images that they've\nuploaded. Well, there is an API call that you can make, but you need to first\nget the image's \"delete token\".(Update: after writing this, I found another\nLemmy bug preventing lemmy users from deleting their own images via the API\nusing the documented DELETE query.)But this is time-sensitive. What other\noptions do we have? Well, you can delete your whole account, right? In fact,\nwhen you go to the page to delete your account, it \"assures\" you with the\nfollowing messageLemmy lies. Deleting your account does not delete the photos\nyou've uploaded.Perfect! That's what I want. I mean, it's a bit overkill --\nbut it will certainly delete the credential from being publicly-accessible\nASAPSo I delete the account, confirm the user profile and posts are gone, and\nrefresh the image. It's still there. I clear cache. It's still there. I launch\na new VM with a fresh install of vanilla firefox. Motherfucker, it's still\nthere!Yes, Lemmy has a bug where uploaded images are not deleted when the\naccount is deleted. Good lord.Well, I guess self-help is out the window. Let's\ncontact the admin. Oh, but I can't do that unless I have an account. And I\njust deleted my account.I create a new account and message the admin. Of\ncourse, PMs sent on Lemmy are not secure. In fact, there's a message at the\ntop of the PM page that saysLemmy PMs are not meant to be secureUnfortunately,\nthe message doesn't provide the matrix handle for the admin (but I created a\nfeature request for this). At this point the credential leak is publicly\naccessible, but only with a known URL. If, however, I send the URL insecurely\nthen I draw more attention to it -- making the situation worse. Fortunately,\nafter a few hours, I'm able to open an encrypted matrix chat with the instance\nadmin.Their response:\n\n> I can look into how to delete images, I havent actually done that before.\n> Its supposed to be possible using some REST API call but not sure, need to\n> look into it.The admin tools in lemmy arent very good. :/-Lemmy Instance\n> Admin\n\nActually, I wasn't surprised by this. I've never run a Lemmy server instance,\nbut I was googling while waiting for the admins's response -- and I couldn't\nfind any information on how to purge images in Lemmy. In fact, admins don't\nhave a WUI (or lemmy API calls) to moderate images on lemmy (only for posts &\ncomments). In lemmy, images are handled by a third party component pict-rs.\n\n# How to purge images in Lemmy\n\npict-rs is a third-party simple image hosting service that runs along-side\nLemmy for instances that allow users to upload media.At the time of writing,\nthere is no WUI for admins to find and delete images. You have to manually\nquery the pict-rs database and execute an API call from the command-line.\nWorse: Lemmy has no documentation telling instance admins how to delete\nimagesFor the purposes of this example, let's assume you're trying to delete\nthe following image|\nhttps://monero.town/pictrs/image/001665df-3b25-415f-8a59-3d836bb68dd1.webp  \n---  \n  \nThere are two API endpoints in pict-rs that can be used to delete an image\n\n## Method One: /image/delete/{delete_token}/{alias}\n\nThis API call is publicly-accessible, but it first requires you to obtain the\nimage's `delete_token`\n\nThe `delete_token` is first returned by Lemmy when POSTing to the\n`/pictrs/image` endpoint\n\n{\"msg\":\"ok\",\"files\":[{\"file\":\"001665df-3b25-415f-8a59-3d836bb68dd1.webp\",\"delete_token\":\"d88b7f32-a56f-4679-bd93-4f334764d381\"}]}  \n---  \n  \nTwo pieces of information are returned here:\n\n  1. file (aka the \"alias\") is the server filename of the uploaded image\n  2. delete_token is the token needed to delete the image\n\nOf course, if you didn't capture this image's `delete_token` at upload-time,\nthen you must fetch it from the postgres DB.\n\nFirst, open a shell on your running postgres container. If you installed Lemmy\nwith docker compose, use `docker compose ps` to get the \"SERVICE\" name of your\npostgres host, and then enter it with `docker exec`\n\ndocker compose ps --format \"table {{.Service}}\\t{{.Image}}\\t{{.Name}}\"docker\ncompose exec <docker_service_name> /bin/bash  \n---  \n  \nFor example:\n\nuser@host:/home/user/lemmy# docker compose ps --format \"table\n{{.Service}}\\t{{.Image}}\\t{{.Name}}\"SERVICE IMAGE NAMElemmy\ndessalines/lemmy:0.19.3 lemmy-lemmy-1lemmy-ui dessalines/lemmy-ui:0.19.3\nlemmy-lemmy-ui-1pictrs docker.io/asonix/pictrs:0.5.4 lemmy-pictrs-1postfix\ndocker.io/mwader/postfix-relay lemmy-postfix-1postgres\ndocker.io/postgres:15-alpine lemmy-postgres-1proxy docker.io/library/nginx\nlemmy-proxy-1user@host:/home/user/lemmy#user@host:/home/user/lemmy# docker\ncompose exec postgres /bin/bashpostgres:/#  \n---  \n  \nConnect to the database as the `lemmy` user\n\npsql -U lemmy  \n---  \n  \nFor example\n\npostgres:/# psql -U lemmypsql (15.5)Type \"help\" for help.lemmy=#  \n---  \n  \nQuery for the image by the \"alias\" (the filename)\n\nselect * from image_upload where pictrs_alias = '<image_filename>';  \n---  \n  \nFor example\n\nlemmy=# select * from image_upload where pictrs_alias = '001665df-3b25-415f-8a59-3d836bb68dd1.webp';local_user_id | pictrs_alias | pictrs_delete_token | published\\---------------+--------------+---------------------+-----------1149 | 001665df-3b25-415f-8a59-3d836bb68dd1.webp | d88b7f32-a56f-4679-bd93-4f334764d381 | 2024-02-07 11:10:17.158741+00(1 row)lemmy=#  \n---  \n  \nNow, take the `pictrs_delete_token` from the above output, and use it to\ndelete the image.\n\nThe following command should be able to be run on any computer connected to\nthe internet.\n\ncurl -i\n\"https://<instance_domain>/pictrs/image/delete/<pictrs_delete_token>/<image_filename>\"  \n---  \n  \nFor example:\n\nuser@disp9140:~$ curl -i\n\"https://monero.town/pictrs/image/delete/d88b7f32-a56f-4679-bd93-4f334764d381/001665df-3b25-415f-8a59-3d836bb68dd1.webp\"HTTP/2\n204 No Contentserver: nginxdate: Fri, 09 Feb 2024 15:37:48 GMTvary: Origin,\nAccess-Control-Request-Method, Access-Control-Request-Headerscache-control:\nprivatereferrer-policy: same-originx-content-type-options: nosniffx-frame-\noptions: DENYx-xss-protection: 1; mode=blockX-Firefox-Spdy: h2user@disp9140:~$  \n---  \n  \ni Note: If you get an `incorrect_login` error, then try [a] logging into the\ninstance in your web browser and then [b] pasting the\n\"https://<instance_domain>/pictrs/image/delete/<pictrs_delete_token>/<image_filename>\"\nURL into your web browser.\n\nThe image should be deleted.\n\n## Method Two: /internal/purge?alias={alias}\n\nAlternatively, you could execute the deletion directly inside the pictrs\ncontainer. This eliminates the need to fetch the `delete_token`.\n\nFirst, open a shell on your running `pictrs` container. If you installed Lemmy\nwith docker compose, use `docker compose ps` to get the \"SERVICE\" name of your\npostgres host, and then enter it with `docker exec`\n\ndocker compose ps --format \"table {{.Service}}\\t{{.Image}}\\t{{.Name}}\"docker\ncompose exec <docker_service_name> /bin/sh  \n---  \n  \nFor example:\n\nuser@host:/home/user/lemmy# docker compose ps --format \"table\n{{.Service}}\\t{{.Image}}\\t{{.Name}}\"SERVICE IMAGE NAMElemmy\ndessalines/lemmy:0.19.3 lemmy-lemmy-1lemmy-ui dessalines/lemmy-ui:0.19.3\nlemmy-lemmy-ui-1pictrs docker.io/asonix/pictrs:0.5.4 lemmy-pictrs-1postfix\ndocker.io/mwader/postfix-relay lemmy-postfix-1postgres\ndocker.io/postgres:15-alpine lemmy-postgres-1proxy docker.io/library/nginx\nlemmy-proxy-1user@host:/home/user/lemmy#user@host:/home/user/lemmy# docker\ncompose exec pictrs /bin/sh~ $  \n---  \n  \nExecute the following command inside the `pictrs` container.\n\nwget --server-response --post-data \"\" --header \"X-Api-Token:\n${PICTRS__SERVER__API_KEY}\"\n\"http://127.0.0.1:8080/internal/purge?alias=<image_filename>\"  \n---  \n  \nFor example:\n\n~ $ wget --server-response --post-data \"\" --header \"X-Api-Token:\n${PICTRS__SERVER__API_KEY}\"\n\"http://127.0.0.1:8080/internal/purge?alias=001665df-3b25-415f-8a59-3d836bb68dd1.webp\"Connecting\nto 127.0.0.1:8080 (127.0.0.1:8080)HTTP/1.1 200 OKcontent-length: 67connection:\nclosecontent-type: application/jsondate: Wed, 14 Feb 2024 12:56:24 GMTsaving\nto 'purge?alias=001665df-3b25-415f-8a59-3d836bb68dd1.webp'purge?alias=001665df\n100%\n|*****************************************************************************************************************************************************************************************************************************|\n67 0:00:00 ETA'purge?alias=001665df-3b25-415f-8a59-3d836bb68dd1.webp' saved~ $  \n---  \n  \ni Note: There's an error in the pict-rs reference documentation. It says you\ncan POST to `/internal/delete`, but that just returns 404 Not Found.\n\nThe image should be deleted\n\n# Enumeration of Bad ThingsTM\n\nWhen accidents happen, usually there's multiple things that went wrong.\n\n## 1\\. I fucked up\n\nAdmittedly, I made some mistakes here.\n\n### Don't use Lemmy in bed\n\nI should probably not have been using Lemmy when I was half-asleep. Good luck\nadhering to that policy, self.\n\n### Device Compartmentalization\n\nI should own a second device for taking pictures of super-sensitive documents\nlike State-issued IDs. I should never copy such sensitive files onto my\neveryday phone.\n\nUnfortunately, I only own one phone. And it's a bit unrealistic to expect most\npeople to have more than one phone (though I do hope one day we'll have a\nsecure way to run dozens of distinct Android VMs on our laptops)\n\n### Data Hygiene\n\nImmediately after I take a photo of sensitive data, I should transfer it into\nencrypted storage and then securely wipe the storage on which it was taken.\n\n## 2\\. Lemmy fucked up\n\nBut there's also many bugs in Lemmy that allowed this nightmare to realize.\n\n  1. lemmy users should be able to easily delete photos that they've uploaded from the WUI. I created a feature request for this.\n  2. lemmy users should at least be able to delete their photos via the API. I created a bug report for this. See also this related ticket.\n  3. To facilitate GDPR \"Right to Erasure\" requests, lemmy admins should also be given an easy-to-use WUI for finding & purging images uploaded by their users. I created a feature request for this.\n  4. In the meantime, lemmy should document how lemmy admins can purge photos via the CLI. I created a feature request for this.\n  5. And, to contact lemmy admins, the private_message_disclaimer shouldn't just tell lemmy users to use matrix -- it should tell them the matrix handle of their instance's admin. I created a feature request for this.\n  6. Also, deleting a user account should also delete all of the user's data (as it says it will), including the photos that the user uploaded. I created a bug report for this.\n  7. lemmy users should be able to easily delete photos that they've uploaded from Jerboa App. I created a feature request for this.\n  8. jerboa should add a confirmation step to the UX before uploading files to a lemmy instance. I created a feature request for this.\n  9. finally, jerboa should add a setting to never upload any files. I created a feature request for this.\n\n## 3\\. Android fucked up\n\nIf you click this button, you're one mis-tap away from a world of pain\n\nAOSP needs more granular permission settings.\n\nIn this instance, Android says that the phone has \"No permissions requested.\"\nIt doesn't, for example, have access to my system's storage.\n\nIf I could deny apps from being able to initiate an ACTION_GET_CONTENT Intent,\nthen I could completely prevent apps from spawning a file-picker -- thereby\nreducing the risk of accidental information leakage.\n\n## 4\\. The archaic state of State Auth (in 2024)\n\nObama was issued an eID card by Estonia in 2014. What about US? Thanks Obama.\n\nThe current moronic solution for authentication by State-issued ID is to just\ngive the document to someone else to read. In this design, the card itself\n(and a picture of the card) serves as the user's private key. There are\nglaring flaws with this design:\n\n  * A picture of the ID is a private key\n  * You give your private key to others\n  * Authentication sessions are vulnerable to replay attacks\n\nThese problems are easily solved by implementing a State-issued eID system\nusing public key cryptography.\n\nIdeally, the eID system would allow users to easily revoke & replace their\n(sub)keys, and allow them to make (encrypted) software backups of their eID.\n\n## 5\\. KYC must follow PoLP\n\nDue to the issues above, we should very rarely be handing out KYC selfies.\n\nBusinesses have no reason to collect KYC data, except to avoid money\nlaundering. For the purposes of AML, it's unreasonable to track transactions\nlower than $10,000. Now, this number should be increased for inflation -- but\nthere's a reason you don't declare currency when you're moving less than\n$10,000 in cash.\n\nSimilarly, if I'm paying an artist $600 on Upwork, there's zero reason for me\nto risk identity theft by uploading my secret auth PII to your platform, which\nis hardly regulated to handle such data with the care it deserves.\n\nAsking for KYC data from customers who transact <$10,000 is a clear violation\nof the Principle of Least Privilege, and we need consumer protection and data\nprotection laws that prohibit companies from discriminating against customers\nwho protect themselves by not providing this information to companies that\ndon't need it.\n\n# Why This Matters\n\nGDPR Violation fines are often millions of EUR or a percent of revenue --\nwhichever is higher\n\nExposing basic moderation tools (eg POST /delete-this-thing) to the WUI is\nneither a bell nor a whistle. It's a basic component that should be added\nbefore shipping.\n\nIf admins can't click to delete an image, but users can click to upload an\nimage, then that feature should not be released.\n\nThis isn't just annoying -- it's of significant moral, legal, and financial\nconcern.\n\nThis is a legal risk to Lemmy instance admins (GDPR violation). This law\napplies to any website operating anywhere in the world (not just to websites\nor businesses located in the EU) that has users who are residents of the EU\n(so it likely affects >90% of public Lemmy instances with >100 active users).\n\nThe fines for this violation are commonly millions of euros or a percent of\nrevenue, whichever is higher. At the time of writing, websites have been fined\n98.4 million EUR for violating this class of GDPR violation (Insufficient\nfulfillment of data subjects rights).\n\nMaking the endpoint accessible over an API is not trivial and therefore\ndoesn't satisfy this requirement. Google received one fine of 150 million EUR\nin 2022 simply for making it more than 1-click to reject cookies. Certainly\nrequiring a user to figure out how to make API calls (including figuring out\nthe darn delete token, which makes even seasoned admins scratch their heads)\nwould not satisfy the GDPR's \"Right to Erasure\" requirement.\n\n# Further Reading\n\nThe Lemmy devs appear to be intentionally throwing their users and instance\nadmins under the bus\n\nSince this incident occurred, I've opened numerous bug reports and feature\nrequests.\n\nOn GitHub, I've been trying to stress the importance of these risks to the\nlemmy developers. Unfortunately, it seems that they were not taking these\nmoral and legal risks seriously (they said it may take years before they\naddress them), and they threatened to ban me for trying to highlight the\nseverity of this risk, get them to tag GDPR-related bugs, and to prioritize\nthem.\n\n  * lemmy #4433: Deleted Account should delete uploaded media (pictures) too\n  * lemmy #4441: Users unable to delete their images (pictrs API)\n  * lemmy #4434: Unapproved users cannot delete their accounts/data\n  * lemmy #3973: Banned users cannot delete their accounts/data\n  * lemmy #4445: Create an interface for local users to view and remove images\n  * lemmy-ui #2359: Allow users to delete images they uploaded\n  * lemmy-ui #2360: Allow admins to view & delete uploaded images\n  * lemmy-ui #2361: private_message_disclaimer to include user's matrix handle\n  * jerboa #1361: UI for deleting uploaded files\n  * jerboa #1362: Setting to hide \"upload media\" button\n  * jerboa #1363: Add \"confirm upload\" step to UX\n  * lemmy-docs #293: Document image moderation\n\nIf GDPR-compliance is important to you on the fediverse, then please provide\nfeedback to the Lemmy developers in the GitHub links above.\n\nLemmy devs getting hostile when I try to advocate for prioritization of\nLemmy's GDPR bugs\n\n  * share\n  * tweet\n  * share\n  * share\n  * share\n  * donate\n\n### Related Posts\n\n    Trusted Boot (Anti-Evil-Maid, Heads, and PureBoot)\n\n    Monitoring Tor .onion Websites (uptime alerts)\n\n    WordPress Multisite on the Darknet (Mercator .onion alias)\n\nMichael Altfield\n\nHi, I\u2019m Michael Altfield. I write articles about opsec, privacy, and devops\n\nAbout Michael\n\nfeatured, fediverse ActivityPub, aml, android, api, bash,\ncompartmentalization, cryptography, curl, docker, eID, encryption, fediverse,\ngdpr, jerboa, kyc, lemmy, matrix, obama, postgres, privacy, security, upwork\n\nGuide to Finding Lemmy Communities (Subreddits) \u00bb\n\n### Leave a Reply Cancel reply\n\nGuide to Finding Lemmy Communities (Subreddits) \u00bb\n\n### Michael Altfield\n\nHi, I'm Michael Altfield. I write articles about opsec, privacy, and\ndevopsAbout Michael\n\n### Follow me\n\n### Donate\n\nBTC 1DXyJpmu2KQMw2v4QJVzzjZo6f87BBndu6XMR\n4B5ra5N1SN4d7BqDtkxAE5G5kGNz5mA5oCob41RzzoduM1uPAcr7QmNLzXtci5HvtkNXC7SowkxMjUUCXF2hm57MMS4jwkx\n\n### .onion address\n\nmichaelahgu 3sqef5yz3u2 42nok2uczdu q5oxqfkwq64 6tvjhdnl35i d.onion\n\n    We\u2019re on the Darknet! Visit this site at our tor .onion\n\n### Tags\n\nandroid apache bash centos centos5 compartmentalization debian devops dns eff\nencryption facebook fingerprint firefox firewall gentoo git github gpg\nhardware hpkp https https everywhere lets encrypt linux MITM openvpn pgp php\nportage privacy proxy python qubes rhel rhel5 security site-specific browser\nssh tails tor ubuntu vpn whonix wordpress\n\n### Feautred Articles\n\n    Introducing BusKill: A Kill Cord for your Laptop\n\n    Howto Guide: Whole House VPN with Ubiquiti + Cryptostorm (netflix safe!)\n\n    Ephemeral Firefox as a Site-Specific Browser (3/3)\n\n    Hardening Guide for phpList\n\n    Mitigating Poisoned PGP Certificates (CVE-2019-13050)\n\n    Continuous Documentation: Hosting Read the Docs on GitHub Pages (1/2)\n\n### Recent Posts\n\n  * Nightmare on Lemmy Street (A Fediverse GDPR Horror Story)\n  * Guide to Finding Lemmy Communities (Subreddits)\n  * Trusted Boot (Anti-Evil-Maid, Heads, and PureBoot)\n  * Crowdfunding on Crowd Supply (Review of my experience)\n  * WordPress Profiling with XHProf (Debugging & Optimizing Speed)\n\n### Related Posts\n\n    Trusted Boot (Anti-Evil-Maid, Heads, and PureBoot)\n\n    Monitoring Tor .onion Websites (uptime alerts)\n\n    WordPress Multisite on the Darknet (Mercator .onion alias)\n\n    Guide to Finding Lemmy Communities (Subreddits)\n\n    Introducing BusKill: A Kill Cord for your Laptop\n\n### Links\n\n  * My Cycling Blog\n  * My Resume\n  * My Sustainability Blog\n\n  \nCopyright \u00a9 2024 Michael Altfield's Tech Blog - All Rights Reserved Powered by\nWordPress & Atahualpa\n\n", "frontpage": false}
