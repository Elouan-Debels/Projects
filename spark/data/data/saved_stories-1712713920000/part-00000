{"aid": "39983490", "title": "A MySQL compatible database engine written in pure Go", "url": "https://github.com/dolthub/go-mysql-server", "domain": "github.com/dolthub", "votes": 32, "user": "mliezun", "posted_at": "2024-04-09 19:50:43", "comments": 4, "source_title": "GitHub - dolthub/go-mysql-server: A MySQL-compatible relational database with a storage agnostic query engine. Implemented in pure Go.", "source_text": "GitHub - dolthub/go-mysql-server: A MySQL-compatible relational database with\na storage agnostic query engine. Implemented in pure Go.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndolthub / go-mysql-server Public\n\n  * Sponsor\n  * Notifications\n  * Fork 173\n  * Star 1.4k\n\nA MySQL-compatible relational database with a storage agnostic query engine.\nImplemented in pure Go.\n\n### License\n\nApache-2.0 license\n\n1.4k stars 173 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# dolthub/go-mysql-server\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n28 Branches\n\n20 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\njycorsupport ALTER TABLE ... RENAME CONSTRAINT ... for foreign key\nconst...6b139de \u00b7\n\n## History\n\n10,253 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| /.github/workflows: remove check-latest option  \n  \n### _example\n\n|\n\n### _example\n\n| fix dbName not being used in the example (#2403)  \n  \n### _integration\n\n|\n\n### _integration\n\n| Bump ruby-mysql from 2.9.14 to 2.10.0 in /_integration/ruby  \n  \n### driver\n\n|\n\n### driver\n\n| Refactor JSON and stats interfaces (#2081)  \n  \n### enginetest\n\n|\n\n### enginetest\n\n| support ALTER TABLE ... RENAME CONSTRAINT ... for foreign key const...  \n  \n### eventscheduler\n\n|\n\n### eventscheduler\n\n| Allowing a period parameter to be passed into event executor to overr...  \n  \n### internal\n\n|\n\n### internal\n\n| implement JSON_QUOTE() (#2372)  \n  \n### memory\n\n|\n\n### memory\n\n| [stats] costed index scan perf (#2421)  \n  \n### optgen\n\n|\n\n### optgen\n\n| Various aggregation/indexing fixes (#2292)  \n  \n### server\n\n|\n\n### server\n\n| server trace timer includes parsing (#2429)  \n  \n### sql\n\n|\n\n### sql\n\n| support ALTER TABLE ... RENAME CONSTRAINT ... for foreign key const...  \n  \n### test\n\n|\n\n### test\n\n| [no-release-notes] edits for stat funcs (#2313)  \n  \n### .gitattributes\n\n|\n\n### .gitattributes\n\n| LOAD DATA PR feedback  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| fix example package  \n  \n### ARCHITECTURE.md\n\n|\n\n### ARCHITECTURE.md\n\n| Rewrote readme and related docs  \n  \n### BACKEND.md\n\n|\n\n### BACKEND.md\n\n| typos  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Copy edits and PR feedback  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Revert \"update license with year and org name\"  \n  \n### MAINTAINERS\n\n|\n\n### MAINTAINERS\n\n| Rewrote readme and related docs  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Make oniguruma as a default regex engine.  \n  \n### README.md\n\n|\n\n### README.md\n\n| fix dbName not being used in the example (#2403)  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| Add SECURITY.md.  \n  \n### SUPPORTED_CLIENTS.md\n\n|\n\n### SUPPORTED_CLIENTS.md\n\n| Documentation update  \n  \n### check_repo.sh\n\n|\n\n### check_repo.sh\n\n| /check_repo.sh: fix goimports download in check script  \n  \n### engine.go\n\n|\n\n### engine.go\n\n| have status variables use go routines (#2430)  \n  \n### engine_test.go\n\n|\n\n### engine_test.go\n\n| Reinstate PR 1944  \n  \n### format_repo.sh\n\n|\n\n### format_repo.sh\n\n| Updated copyright headers, including adding them to all files that la...  \n  \n### go.mod\n\n|\n\n### go.mod\n\n| support ALTER TABLE ... RENAME CONSTRAINT ... for foreign key const...  \n  \n### go.sum\n\n|\n\n### go.sum\n\n| support ALTER TABLE ... RENAME CONSTRAINT ... for foreign key const...  \n  \n### log.go\n\n|\n\n### log.go\n\n| log.go: Remove glog dependency.  \n  \n### mascot.png\n\n|\n\n### mascot.png\n\n| Smaller tray  \n  \n### processlist.go\n\n|\n\n### processlist.go\n\n| support Threads_connected and Threads_running status variables (#...  \n  \n### processlist_test.go\n\n|\n\n### processlist_test.go\n\n| update information_schema.processlist to correctly display status o...  \n  \n### tools.go\n\n|\n\n### tools.go\n\n| [ga-format-pr] Run ./format_repo.sh to fix formatting  \n  \n## Repository files navigation\n\n# A MySQL compatible database engine written in pure Go\n\ngo-mysql-server is a data-source agnostic SQL engine and server which runs\nqueries on data sources you provide, using the MySQL dialect and wire\nprotocol. A simple in-memory database implementation is included, and you can\nquery any data source you want by implementing your own backend.\n\nDolt, a SQL database with Git-style versioning, is the main production\ndatabase implementation of this package. Check out that project for reference\na implementation. Or, hop into the Dolt discord here if you want to talk to\nthe core developers behind go-mysql-server and Dolt.\n\n## Compatibility\n\nWith the exception of specific limitations (see below), go-mysql-server is a\ndrop-in replacement for MySQL. Any client library, tool, query, SQL syntax,\nSQL function, etc. that works with MySQL should also work with go-mysql-\nserver. If you find a gap in functionality, please file an issue.\n\nFor full MySQL compatibility documentation, see the Dolt docs on this topic.\n\n## Scope of this project\n\n  * SQL server and engine to query your data sources.\n  * In-memory database backend implementation suitable for use in tests.\n  * Interfaces you can use to implement new backends to query your own data sources.\n  * With a few caveats and using a full database implementation, a drop-in MySQL database replacement.\n\ngo-mysql-server has two primary uses case:\n\n  1. Stand-in for MySQL in a golang test environment, using the built-in memory database implementation.\n\n  2. Providing access to arbitrary data sources with SQL queries by implementing a handful of interfaces. The most complete real-world implementation is Dolt.\n\n## Installation\n\nAdd go-mysql-server as a dependency to your project. In the directory with the\ngo.mod file, run:\n\n    \n    \n    go get github.com/dolthub/go-mysql-server@latest\n\n## Using the in-memory test server\n\nThe in-memory test server can replace a real MySQL server in tests. Start the\nserver using the code in the _example directory, also reproduced below.\n\n    \n    \n    package main import ( \"context\" \"fmt\" \"time\" \"github.com/dolthub/vitess/go/vt/proto/query\" sqle \"github.com/dolthub/go-mysql-server\" \"github.com/dolthub/go-mysql-server/memory\" \"github.com/dolthub/go-mysql-server/server\" \"github.com/dolthub/go-mysql-server/sql\" \"github.com/dolthub/go-mysql-server/sql/types\" ) // This is an example of how to implement a MySQL server. // After running the example, you may connect to it using the following: // // > mysql --host=localhost --port=3306 --user=root mydb --execute=\"SELECT * FROM mytable;\" // +----------+-------------------+-------------------------------+----------------------------+ // | name | email | phone_numbers | created_at | // +----------+-------------------+-------------------------------+----------------------------+ // | Jane Deo | janedeo@gmail.com | [\"556-565-566\",\"777-777-777\"] | 2022-11-01 12:00:00.000001 | // | Jane Doe | jane@doe.com | [] | 2022-11-01 12:00:00.000001 | // | John Doe | john@doe.com | [\"555-555-555\"] | 2022-11-01 12:00:00.000001 | // | John Doe | johnalt@doe.com | [] | 2022-11-01 12:00:00.000001 | // +----------+-------------------+-------------------------------+----------------------------+ // // The included MySQL client is used in this example, however any MySQL-compatible client will work. var ( dbName = \"mydb\" tableName = \"mytable\" address = \"localhost\" port = 3306 ) func main() { pro := createTestDatabase() engine := sqle.NewDefault(pro) session := memory.NewSession(sql.NewBaseSession(), pro) ctx := sql.NewContext(context.Background(), sql.WithSession(session)) ctx.SetCurrentDatabase(\"test\") // This variable may be found in the \"users_example.go\" file. Please refer to that file for a walkthrough on how to // set up the \"mysql\" database to allow user creation and user checking when establishing connections. This is set // to false for this example, but feel free to play around with it and see how it works. if enableUsers { if err := enableUserAccounts(ctx, engine); err != nil { panic(err) } } config := server.Config{ Protocol: \"tcp\", Address: fmt.Sprintf(\"%s:%d\", address, port), } s, err := server.NewServer(config, engine, memory.NewSessionBuilder(pro), nil) if err != nil { panic(err) } if err = s.Start(); err != nil { panic(err) } } func createTestDatabase() *memory.DbProvider { db := memory.NewDatabase(dbName) db.BaseDatabase.EnablePrimaryKeyIndexes() pro := memory.NewDBProvider(db) session := memory.NewSession(sql.NewBaseSession(), pro) ctx := sql.NewContext(context.Background(), sql.WithSession(session)) table := memory.NewTable(db, tableName, sql.NewPrimaryKeySchema(sql.Schema{ {Name: \"name\", Type: types.Text, Nullable: false, Source: tableName, PrimaryKey: true}, {Name: \"email\", Type: types.Text, Nullable: false, Source: tableName, PrimaryKey: true}, {Name: \"phone_numbers\", Type: types.JSON, Nullable: false, Source: tableName}, {Name: \"created_at\", Type: types.MustCreateDatetimeType(query.Type_DATETIME, 6), Nullable: false, Source: tableName}, }), db.GetForeignKeyCollection()) db.AddTable(tableName, table) creationTime := time.Unix(0, 1667304000000001000).UTC() _ = table.Insert(ctx, sql.NewRow(\"Jane Deo\", \"janedeo@gmail.com\", types.MustJSON(`[\"556-565-566\", \"777-777-777\"]`), creationTime)) _ = table.Insert(ctx, sql.NewRow(\"Jane Doe\", \"jane@doe.com\", types.MustJSON(`[]`), creationTime)) _ = table.Insert(ctx, sql.NewRow(\"John Doe\", \"john@doe.com\", types.MustJSON(`[\"555-555-555\"]`), creationTime)) _ = table.Insert(ctx, sql.NewRow(\"John Doe\", \"johnalt@doe.com\", types.MustJSON(`[]`), creationTime)) return pro }\n\nThis example populates the database by creating memory.Database and\nmemory.Table objects via golang code, but you can also populate it by issuing\nCREATE DATABASE, CREATE TABLE, etc. statements to the server once it's\nrunning.\n\nOnce the server is running, connect with any MySQL client, including the\ngolang MySQL connector and the mysql shell.\n\n    \n    \n    > mysql --host=localhost --port=3306 --user=root mydb --execute=\"SELECT * FROM mytable;\" +----------+-------------------+-------------------------------+----------------------------+ | name | email | phone_numbers | created_at | +----------+-------------------+-------------------------------+----------------------------+ | Jane Deo | janedeo@gmail.com | [\"556-565-566\",\"777-777-777\"] | 2022-11-01 12:00:00.000001 | | Jane Doe | jane@doe.com | [] | 2022-11-01 12:00:00.000001 | | John Doe | john@doe.com | [\"555-555-555\"] | 2022-11-01 12:00:00.000001 | | John Doe | johnalt@doe.com | [] | 2022-11-01 12:00:00.000001 | +----------+-------------------+-------------------------------+----------------------------+\n\n## Limitations of the in-memory database implementation\n\nThe in-memory database implementation included with this package is intended\nfor use in tests. It has specific limitations that we know of:\n\n  * Not threadsafe. To avoid concurrency issues, limit DDL and DML statements (CREATE TABLE, INSERT, etc.) to a single goroutine.\n  * No transaction support. Statements like START TRANSACTION, ROLLBACK, and COMMIT are no-ops.\n  * Non-performant index implementation. Indexed lookups and joins perform full table scans on the underlying tables.\n\n## Custom backend implementations\n\nYou can create your own backend to query your own data sources by implementing\nsome interfaces. For detailed instructions, see the backend guide.\n\n## Technical documentation for contributors and backend developers\n\n  * Architecture is an overview of the various packages of the project and how they fit together.\n  * Contribution guide for new contributors, including instructions for how to get your PR merged.\n\n## Powered by go-mysql-server\n\n  * dolt\n  * gitbase (defunct)\n\nAre you building a database backend using go-mysql-server? We would like to\nhear from you and include you in this list.\n\n## Security Policy\n\ngo-mysql-server's security policy is maintained in this repository. Please\nfollow the disclosure instructions there. Please do not initially report\nsecurity issues in this repository's public GitHub issues.\n\n## Acknowledgements\n\ngo-mysql-server was originally developed by the {source-d} organzation, and\nthis repository was originally forked from src-d. We want to thank the entire\n{source-d} development team for their work on this project, especially Miguel\nMolina (@erizocosmico) and Juanjo \u00c1lvarez Martinez (@juanjux).\n\n## License\n\nApache License 2.0, see LICENSE\n\n## About\n\nA MySQL-compatible relational database with a storage agnostic query engine.\nImplemented in pure Go.\n\n### Topics\n\nmysql sql sql-server database mysql-server query-engine relational-database\nsql-engine\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\n### Security policy\n\nSecurity policy\n\nActivity\n\nCustom properties\n\n### Stars\n\n1.4k stars\n\n### Watchers\n\n22 watching\n\n### Forks\n\n173 forks\n\nReport repository\n\n## Releases 13\n\nQ2 2023 Release Patch Latest\n\nApr 9, 2024\n\n\\+ 12 releases\n\n## Sponsor this project\n\ndolthub DoltHub\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Used by 108\n\n\\+ 100\n\n## Contributors 81\n\n\\+ 67 contributors\n\n## Languages\n\n  * Go 100.0%\n  * Python 0.0%\n  * Shell 0.0%\n  * Java 0.0%\n  * Makefile 0.0%\n  * C 0.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": true}
