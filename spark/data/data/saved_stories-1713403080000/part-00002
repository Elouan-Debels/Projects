{"aid": "40068967", "title": "Breaching Microsoft via DeepSpeed GitHub Repository", "url": "https://johnstawinski.com/2024/04/15/fixing-typos-and-breaching-microsofts-perimeter/", "domain": "johnstawinski.com", "votes": 5, "user": "cyberbender", "posted_at": "2024-04-17 19:16:21", "comments": 3, "source_title": "Fixing Typos and Breaching Microsoft\u2019s Perimeter", "source_text": "Fixing Typos and Breaching Microsoft\u2019s Perimeter \u2013 John Stawinski IV\n\nSkip to content\n\n# John Stawinski IV\n\nMaking Hacking Accessible\n\nApril 15, 2024\n\n# Fixing Typos and Breaching Microsoft\u2019s Perimeter\n\nProgressing through certifications, developing as a red teamer, breaking into\nBug Bounty \u2014 many steps along my security journey have been difficult.\n\n#### One of the easiest things I\u2019ve done was breach Microsoft\u2019s perimeter.\n\nTwo weeks before compromising a domain-joined Microsoft server, former\ncoworker Adnan Khan discovered a critical supply chain vulnerability in\nGitHub\u2019s Runner Images. Inspired by this attack and CI/CD research we\u2019d\nperformed during Red Team engagements, we teamed up to see who else was\nvulnerable.\n\nMicrosoft DeepSpeed was our first joint target, and my first time ever\nperforming public vulnerability research.\n\nDuring our attack on DeepSpeed, we compromised a server joined to Microsoft\u2019s\nlargest Active Directory domain with the privileges of a Microsoft Senior\nDeveloper.\n\nThis is the story of how we breached Microsoft, kick-started a partnership\nthat would change the landscape of self-hosted GitHub CI/CD security, and the\ngrowing pains we experienced along the way.\n\n# What is DeepSpeed?\n\nMicrosoft DeepSpeed is an open-source deep-learning optimization library.\n\u201cOpen-source\u201d means that anyone can see the application\u2019s code on the public\ninternet. If you don\u2019t understand ML, don\u2019t worry \u2013 it is mostly irrelevant to\nthis vulnerability. What\u2019s more important is the fact that Microsoft uses\nGitHub to store DeepSpeed\u2019s source code.\n\nIf you\u2019ve been following the research we\u2019ve released so far, you probably\nsuspect that the Microsoft DeepSpeed repository uses self-hosted runners.\nYou\u2019re correct.\n\nIf you haven\u2019t been following and are unfamiliar with self-hosted runners,\nhere\u2019s the TL;DR.\n\n# Self-hosted Runner Background\n\nGitHub allows organizations to attach machines (computers) to repositories\ncalled \u201cself-hosted runners\u201d. These runners execute code specified within\nworkflows as part of the GitHub Actions CI/CD process.\n\nFor example, let\u2019s say Microsoft wants to run a set of tests when a GitHub\nuser wants to contribute their own code by submitting a pull request.\nMicrosoft can define these tests in a YAML workflow file used by GitHub\nActions and configure the workflow to run on the pull_request trigger. Now,\nwhenever a user submits a pull request, the tests will execute on a runner.\nThis way, repository maintainers don\u2019t need to manually test everyone\u2019s code\nbefore merging.\n\nGitHub recommends against using self-hosted runners on a public repository, as\nmisconfigurations could allow external attackers to compromise the runners and\ngain a foothold in the organization\u2019s infrastructure or tamper with subsequent\nbuilds. Instead, GitHub recommends using GitHub-hosted runners, which are\navailable for free (up to a limit) to all GitHub repositories.\n\nIt is possible for an organization to securely use self-hosted runners on a\npublic repository if the runners are ephemeral, isolated, and permissions are\nlocked down.\n\n# Where did Microsoft Go Wrong?\n\nMicrosoft violated all of the guidelines I just laid out. They used a domain-\njoined workstation as a non-ephemeral, self-hosted runner on the public\nDeepSpeed repository. Essentially, an employee took one of their computers and\noffered it up to everyone on the internet.\n\nMany of our other attacks, like our attack on PyTorch, required implantation,\nreconnaissance, crazy token pivots, and secret stealing to prove impact. With\nDeepSpeed, all we had to do was get RCE and we had breached one of the largest\norganizations in the world.\n\nBy default, when a self-hosted runner is attached to a repository, any of that\nrepository\u2019s workflows can use that runner. This setting also applies to\nworkflows from fork pull requests. The result of these settings is that, by\ndefault, any repository contributor can execute code on the self-hosted runner\nby submitting a malicious PR.\n\nNote: A \u201ccontributor\u201d to a GitHub repository is anyone who has added code to\nthe repository. Typically, someone becomes a contributor by submitting a pull\nrequest that then gets merged into the default branch. More on this later.\n\n# Finding Typos\n\nIt didn\u2019t take long to identify DeepSpeed as a target. We didn\u2019t have any of\nour advanced search and scanning infrastructure yet, but a simple GitHub\nsearch for \u201cself-hosted\u201d brought up DeepSpeed in the Fall of 2023, with its\n32,000 stars, as one of the first results. The repository had enough traffic\nthat we could identify workflows from contributors that ran without approval.\n\nStep one was becoming a contributor. To do this, we had to submit a pull\nrequest that got accepted and merged by a DeepSpeed maintainer. Typically,\nengineers will submit PRs for bug fixes or feature additions, but we didn\u2019t\nwant to spend the time doing that. Instead, we decided to try submitting a\ntypo fix \u2013 finding a typo in their documentation and submitting a PR that\nfixes that typo.\n\nWe fired up Grammarly and got to work.\n\nThis pic is officially a staple of all my CI/CD blog posts.\n\nQuickly we discovered a sentence in SECURITY.md that had an additional word.\nThe sentence read \u201c...please download it from the the Microsoft\u2019s Security\nResponse Center...\u201d. We removed the extra \u201cthe\u201d and submitted our PR.\n\nAfter finding a typo in SECURITY.md, we submitted a pull request. Once\nMicrosoft merged the PR, we were now a \u201cContributor\u201d to the DeepSpeed\nrepository.\n\nMicrosoft merged our PR within days. We hadn\u2019t identified any accessible\nrepository secrets, and the self-hosted runner workflows had limited\nGITHUB_TOKEN permissions, so to prove impact we\u2019d need to get on the runner\nand search for secrets on the filesystem. At the time, we knew very little\nabout the runner aside from architecture data in workflow logs.\n\n# 3,2,1, Launch\n\nI was confident we could execute code on DeepSpeed\u2019s self-hosted runners, but\nthat didn\u2019t stop nerves from setting in as I prepared for my first attempt at\npublic vulnerability research. As you\u2019ll see shortly, CI/CD attacks can always\nsurprise you.\n\nNow that we had contributor status, we created a new workflow in our\nrepository fork and configured the workflow to run on one of DeepSpeed\u2019s self-\nhosted runners (an example workflow is shown further down).\n\nGiven that we didn\u2019t need to persist on the runner, we opted not to use our\n\u201cRunner-on-Runner\u201d C2 payload and instead get a more traditional reverse\nshell. If you\u2019re unfamiliar with Runner-on-Runner, Adnan explains it well\nduring his walkthrough of a critical GitHub vulnerability he found.\n\nWhat we didn\u2019t know is that the self-hosted runner we were targeting was a\nREDMON domain-joined machine (REDMON is Microsoft\u2019s largest domain, created in\n1999), and because of that, it had full EDR and firewall restrictions.\nUnsurprisingly, it did not play nice when we tried to manipulate SSH keys.\n\nDuring this attempt, we learned the employee couldn\u2019t modify their own\n`authorized_keys` file.\n\nNote: Installing C2 or getting reverse shells may be considered out-of-scope\nfor bug bounty programs and could be treated as unnecessary malicious activity\nby the organization. During these operations, we felt our actions were\njustified due to the fact that post-exploitation was critical to determining\nimpact. Bug bounty programs we have submitted to agree with this sentiment.\n\nIn hindsight, we should have installed RoR right away, as it would have saved\na lot of time battling file system and egress restrictions. After several\nfailed attempts to get shell access, we decided to run a simple `ls` command\non the user\u2019s home directory so we could learn more about the system. We\npushed a workflow that looked like this:\n\n    \n    \n    name: nv-h100 on: pull_request jobs: unit-tests: runs-on: [self-hosted, nvidia, h100] steps: - uses: actions/checkout@v3 - name: unit-tests continue-on-error: true run: | whoami pwd ls\n\nThis workflow runs the `whoami`, `pwd`, and `ls` commands on the self-hosted\nrunner.\n\nThe output revealed the self-hosted runner was actually the server of a\nMicrosoft employee and was joined to the REDMOND domain.\n\nWe\u2019ve blurred the employee\u2019s name to preserve their anonymity. Regardless of\nwho was responsible, Microsoft should have technical controls and review\nrequirements in place that prevent these mistakes.\n\nUpon seeing that command output, the operation shifted from a curious foray\ninto CI/CD security to \u201cHoly Sh** we just breached Microsoft\u201d.\n\nA heavy feeling followed the initial shock of this discovery. If we were able\nto discover and exploit this vulnerability during my first-ever bug bounty\nattack, surely nation-states could as well.\n\nAt this point, we stopped the operation and wrote our report. We never\nexpected Microsoft would use a domain-joined machine as a self-hosted runner \u2013\nmost likely, there were secrets to be discovered on the machine, but given the\nsignificance of this vulnerability, we wanted to submit our report as soon as\npossible.\n\n# How bad could it have been?\n\nAn advanced threat actor discovering this vulnerability in the wild would\nstart by installing Command-and-Control (C2) on the machine. If they were\nsophisticated, this C2 would evade detection. Then they would look for lateral\nmovement within the domain.\n\nPersonally, I don\u2019t know the state of Microsoft\u2019s Active Directory security\nposture. Considering that Microsoft invented Active Directory, you\u2019d hope they\nknow how to lock it down, but we\u2019ve seen firsthand examples of organizations\nnot using their own software securely.\n\nRegardless of their Active Directory hygiene, the compromised runner was\nrunning in the context of a user who was a Senior Developer working at\nMicrosoft. This means that anyone who compromised the runner would have that\nuser\u2019s privileges in the REDMOND domain. Again, I can\u2019t comment on Microsoft\u2019s\nposture, but let\u2019s just say that an Active Directory foothold as a Senior\nDeveloper is very, very attractive to an attacker.\n\nIn the worst-case scenario, they could escalate their privileges to the domain\nadministrator and compromise every server, database, and application in the\ndomain. In the best-case scenario, Microsoft\u2019s IR team would have detected\ntheir activities quickly and evicted them from the network. All we can do is\nhope we found this vulnerability before the bad guys.\n\n# Lessons Learned\n\nThis attack prompted us to be more thorough in future operations, developing\nstable RoR C2 that works across several architectures. We also started making\nexhaustive game plans prior to launching any attack.\n\nPersonally, this attack prompted me to embrace how serious these\nvulnerabilities could be. Hacking can feel fun, like an exciting game or a\nchallenge, and it\u2019s easy to lose track of the impact you can have on\nindividuals and corporations. This attack brought home the fact that these\nthings matter.\n\n#### I remember wondering if our future attacks would reach this level of\nimpact.\n\n# Who Else is Vulnerable?\n\nSince hacking Microsoft, we\u2019ve leveraged similar attack paths to discover\ncritical supply chain vulnerabilities in PyTorch, TensorFlow, GitHub, Crypto\nwallets, Web3 blockchains, and more, earning hundreds of thousands of dollars\nin bug bounties along the way. In part due to the lessons learned during\nDeepSpeed, these future attacks were more sophisticated, orchestrated, and\nsmooth. Several of these exploits could have led to a supply chain attack\nsimilar to SolarWinds or the recent XZ compromise had they been discovered by\na malicious attacker.\n\nAs we\u2019ve slowly released our research, we\u2019ve seen many organizations take\nsteps to secure their self-hosted CI/CD security. Outlets like SecurityWeek,\nThe Hacker News, YCombinator HN, CSOOnline, and others have covered our\nresearch and helped spread the word. However, this vulnerability class is far\nfrom closed, as we see new repositories weekly that are susceptible to self-\nhosted runner takeover.\n\nThis attack set the stage for Adnan and I\u2019s collaboration, propelling us to\npush the limits of CI/CD security in future operations. Hopefully, we\u2019ll be\nable to dive into the full breadth of our research at a certain hacking\nconference that takes place every August.\n\n# Remediation\n\nMicrosoft took very quick action to remediate the issue. At the time,\nMicrosoft had a lot more repositories with self-hosted runners that were\nlikely vulnerable to similar attacks.\n\nAfter we submitted our report, they remediated the issue in less than three\ndays by enforcing workflow approval requirements to the entire Microsoft\norganization, removing the domain-joined self-hosted runner, and switching to\nmostly ephemeral runners.\n\n# A Whopping Zero Dollars\n\nMicrosoft Security Response Center (MSRC) does not have the best reputation in\nvulnerability research. I was hopeful they would reward us due to the critical\nnature of the vulnerability, but they stayed true to their reputation.\n\nThree months after receiving our report, they determined our submission was\n\u201cnot eligible for a bounty\u201d. Microsoft has very specific categories for\ndetermining what products and services are eligible for rewards, and DeepSpeed\nwas not one of them (even though the vulnerability impacted their Active\nDirectory environment).\n\nYes, DeepSpeed didn\u2019t fall under an explicit category that was eligible for a\nbounty, but more reputable programs will typically grant rewards in scenarios\nwhere a critical vulnerability like this is discovered. By refusing to bend\ntheir categorization, MSRC is telling bounty hunters everywhere that they\nwon\u2019t be rewarded for disclosing these types of vulnerabilities. That\u2019s not a\nmessage an organization like Microsoft should send, given how prominent of a\ntarget they are for real attackers.\n\nJust look at the CISA report of the Microsoft Exchange hack that occurred in\nthe summer of 2023, which allowed the nation-state group Storm-0558 to access\nthe email accounts \u201cof 22 enterprise organizations, including government\nagencies and three think tanks.\u201d Microsoft has been targeted by nation-states\nbefore, and probably will be again. They need to do everything in their power\nto secure their perimeter, including encouraging good-faith vulnerability\nresearch.\n\nAt the very least, breaching Microsoft should not be this easy. Typically,\nsignificant CI/CD knowledge around GitHub Actions is required to execute these\nattacks.\n\n#### But with DeepSpeed, the only thing standing between the public internet\nand Microsoft\u2019s internal network was a single typo and some shell commands.\n\nWant to hear more? Subscribe to the official John IV newsletter to receive\nlive, monthly updates of my interests and passions.\n\n### Share this:\n\n  * Twitter\n  * Facebook\n\nLike Loading...\n\nCategories:\n\nUncategorized\n\n\u00b7 Tagged:\n\nazure, cybersecurity, devops, github, security\n\nPrevious Post\n\n### Leave a comment Cancel reply\n\n# John Stawinski IV\n\n  * Instagram\n  * LinkedIn\n  * Mail\n  * Link\n\nBlog at WordPress.com.\n\nLoading Comments...\n\n  * Comment\n  * Reblog\n  * Subscribe Subscribed\n\n    * John Stawinski IV\n    * Already have a WordPress.com account? Log in now.\n\n  * Privacy\n  *     * John Stawinski IV\n    * Edit Site\n    * Subscribe Subscribed\n    * Sign up\n    * Log in\n    * Copy shortlink\n    * Report this content\n    * View post in Reader\n    * Manage subscriptions\n    * Collapse this bar\n\n%d\n\n", "frontpage": false}
