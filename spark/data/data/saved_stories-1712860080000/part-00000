{"aid": "40001380", "title": "A Spritely distributed-computing library", "url": "https://lwn.net/Articles/960912/", "domain": "lwn.net", "votes": 2, "user": "ColinWright", "posted_at": "2024-04-11 12:26:23", "comments": 0, "source_title": "A Spritely distributed-computing library [LWN.net]", "source_text": "A Spritely distributed-computing library [LWN.net]\n\nLWN .net News from the source\n\n  * Content\n\n    * Weekly Edition\n    * Archives\n    * Search\n    * Kernel\n    * Security\n    * Events calendar\n    * Unread comments\n    * LWN FAQ\n    * Write for us\n  * Edition\n\n    * Return to the Front page\n\n| |\n\nSubscribe / Log in / New account\n\n# A Spritely distributed-computing library\n\nDid you know...?LWN.net is a subscriber-supported publication; we rely on\nsubscribers to keep the entire operation going. Please help out by buying a\nsubscription and keeping LWN on the net.  \n---  \n  \nBy Daroc Alden February 19, 2024\n\nSpritely is a project seeking to build a platform for sovereign distributed\napplications \u2014 applications where users run their own nodes in order to\ncontrol their own data \u2014 as the basis of a new social internet. While there\nare many such existing projects, Spritely takes an unusual approach based on a\nnew interoperable protocol for efficient, secure remote procedure calls (RPC).\nThe project is in its early stages, with many additional features planned, but\nit is already possible to play around with Goblins, the distributed actor\nlibrary that Spritely intends to build on.\n\nThe Spritely project states its long-term goal as building \"\"a new\narchitecture for the internet: removing the necessity of client-server\narchitecture, replacing it with a participatory peer-centric model\"\". The\nproject is working toward a future where many different distributed\napplications communicate over the same protocol, and users' data is contained\non their own devices. The Spritely Institute \u2014 the charitable organization\nwhich provides funding for the Spritely project \u2014 presents this vision as\n\"\"social media done right\"\". An early example is visible in the form of\nFantasary, a distributed, collaborative, text-based virtual world initially\nbuilt for the 2023 Spring Lisp Game Jam. There is also Goblin Chat, a simple\nchat application demonstrating what it might be like to write a distributed\nchat application using Spritely's libraries.\n\nChristine Lemmer-Webber, the founder of the project and a co-author of the\nActivityPub specification, initially phrased the goal of the project as\n\"\"building the next generation of the fediverse as a distributed game\"\". She\nnoted that while ActivityPub was a great success, \"\"there are a few things\nthat bother me\"\". She views the Spritely project as a chance to correct some\nof the shortcomings of ActivityPub and focus on building a social environment\nthat permits rich interactions.\n\nLemmer-Webber is not alone in believing that a better foundational\narchitecture for distributed systems is possible. The Spritely Institute has a\ngrant from the NLnet Foundation to work on creating a specification for a\nprotocol called OCapN (short for \"Object Capability Network\"). Jessica Tallon,\nanother ActivityPub co-author, is one of several people being paid by that\ngrant to further develop Spritely. In an interview, she said that she hoped\nthe project could make OCapN a new foundational layer of the internet which\nnot only permits the creation of performant peer-to-peer applications, but\nthat makes decentralization \"\"the natural way to develop\"\" applications on the\nweb.\n\n#### OCapN\n\nOCapN is not yet a standard and is subject to change. Unlike other\ndistributed-computing projects, the OCapN pre-standardization group has\nsupport from several different projects with existing code that is at least\ntheoretically compatible. The Spritely Institute is the primary contributor to\nOCapN, though Agoric and performance-oriented open-source RPC library Cap'n\nProto are two other regular contributors.\n\nOCapN is designed around the concept of a capability \u2014 an unforgeable token\nrepresenting the bearer's right to take some action. They should not be\nconfused with Linux capabilities \u2014 which are based on POSIX capabilities,\nthemselves inspired by the same security research as OCapN-style capabilities.\nLinux capabilities have notably different security properties from those\ndiscussed in capability-based-security research. In the POSIX model, a program\nrunning as a user has permission to do everything that user can do. In a\ncapability-based model, the program only has permission to do the specific\nthings that it has been given a capability for. This is especially useful in a\ndistributed system, because it allows a program to securely delegate certain\noperations to remote systems, without giving those remote systems any ability\nto act beyond their allowed interfaces.\n\nIn OCapN, a capability is a reference that grants permission to send messages\nto a remote object. When a local object sends a message to a remote one, the\nlocal protocol implementation immediately returns a \"promise\", representing\nthe eventual response to that message. If the remote computer responds to the\nmessage, the promise will be \"kept\" and associated with the returned value. If\nthe remote computer runs into an error or goes offline, the promise will be\n\"broken\".\n\nRepresenting responses from remote machines in this way permits an important\nperformance optimization: promise pipelining. When a promise will resolve (in\nthe successful case) to another reference to a different object, OCapN permits\nsending messages to that eventual object using the promise, even if the object\nhas not been created yet. This lets applications avoid unnecessary round\ntrips, by streaming batches of related messages to remote objects before\nreceiving the replies. The Cap'n Proto project lists this as one of the major\nbenefits of its existing RPC mechanism in comparison to other RPC libraries.\n\nAnother important performance advantage of OCapN is third-party handoff. In a\nscenario with three different nodes, A, B, and C, A can send a capability that\nreferences an object on B to C, and then C will connect directly to B to make\nuse of it. This is in contrast to some other RPC mechanisms where node A would\ncontinue to act as a relay, requiring node A to remain online for any\ncontinuing communication to occur between nodes B and C.\n\nOCapN is not the first attempt to build a mechanism along these lines.\nSpritely is directly inspired by the E programming language; Spritely adopts\nsome of the same terminology, as well as OCapN's basic design. In order to\nmake implementing compatible libraries easier, however, the Spritely project\nwill intentionally avoid including some features of E.\n\n#### What exists today\n\nDespite continuing work on the OCapN protocol, the Spritely project has a long\nway to go before reaching its goal of a complete platform on which to build\ndistributed social applications. The project's discussion forum has many plans\nfor additional network transports, a distributed debugger, serialization of\ndistributed networks of objects, and more. Right now, only one component of\nthe eventual Spritely ecosystem has been written: the actor-based concurrency\nand RPC library Goblins. There is a version for Guile (the GNU project's\nScheme implementation), and a version for Racket. The documentation for\nGoblins explains how to begin experimenting with the library.\n\nThese different versions of the library are kept in sync with each other, and\nare interoperable \u2014 code written for Racket can call code written for Guile\nand vice versa. The 0.12.0 versions of the library support connecting over\nTLS-encrypted TCP sockets, although the project has not yet implemented\nNetwork Address Translation (NAT) traversal, making communicating with nodes\nthat are not on the local network difficult. To address this, the libraries\nalso support communicating via Tor, which can connect even between networks\nthat are both behind NATs. This was actually the first network transport the\nproject implemented, to permit testing connections between remote\ncollaborators right from the beginning of the project. Work on a network\ntransport using libp2p (the communication library that powers IPFS) is planned\nfor version 0.14.0.\n\nLibp2p support will theoretically set the stage for Goblins to be usable in\nthe browser, since libp2p permits WebSocket-based connections between nodes.\nOne barrier to adopting Goblins in the browser is the fact that neither Guile\nnor Racket support compiling to WebAssembly. Spritely is looking to fix that\nwith Guile Hoot, a compiler that targets WebAssembly. Guile maintainer and\nSpritely contributor Andy Wingo has written a series of posts about the\nchallenges that he has encountered trying to compile Scheme to WebAssembly.\nThe recent 0.3.0 version of Hoot is the first version to support whole-program\ncompilation.\n\nWhile still young, Spritely has a charitable institute, a growing body of\nsupporters, increasingly usable prototypes, and a long history of supporting\nresearch. The project provides an interesting alternative to other\ndistributed-systems projects, with a focus on interoperability, performance,\nand interacting directly with remote systems. The monthly standardization\nmeetings are open to everyone with an interest, and scheduled through the\nproject's GitHub issues.\n\n(Log in to post comments)\n\n### A Spritely distributed-computing library\n\nPosted Feb 19, 2024 21:13 UTC (Mon) by paroneayea (subscriber, #96661) [Link]\n\nGreat article, well researched! (Really well researched!) Wasn't expecting\nthis article and it's nice to see such a thorough but approachable dive into\nthings.\n\nOne note, Hoot 0.3.0 isn't the first version to support whole-program\ncompilation... that's been the approach from the start! But it did lay down\nsome new techniques to enable proper module support... for now that's just\nused internally, but user-defined modules will be properly integrated into\n0.4.0 we hope. It is true that Guile itself has been receiving upgrades to\nmake Hoot's compilation techniques possible... we're very happy to be working\nwith Andy Wingo, who knows how to do that better than anyone!\n\n### A Spritely distributed-computing library\n\nPosted Feb 19, 2024 21:19 UTC (Mon) by intelfx (subscriber, #130118) [Link]\n\n> a protocol called OCapN (short for \"Object Capability Network\")\n\nAs soon as I saw these words I thought about Cap'n Proto, and was quite happy\nto find out a paragraph later it wasn't just me :-)\n\nI'm extremely glad to see the (absolutely brilliant) ideas of Cap'n Proto\nfinally getting development and use they deserve.\n\n### A Spritely distributed-computing library\n\nPosted Feb 19, 2024 21:46 UTC (Mon) by intelfx (subscriber, #130118) [Link]\n\nAs a side-note: this is one of the oh so many technologies that could've found\nan absolutely organic use within Linux, but instead were half-assed in the\nmost ugly way possible in the name of performance and time-to-market :(\n\nI'd kill to see a fantasy version of io_uring that's built on top of\ncapabilities and promise pipelining instead of the absolute botch job that is\nfixed buffers/fixed file descriptors and the related pile of hacks to\nimplement some kind of \"pipelining\" on top of that pseudo-fd space.\n\n### A Spritely distributed-computing library\n\nPosted Feb 20, 2024 8:12 UTC (Tue) by SLi (subscriber, #53131) [Link]\n\nInteresting. Previously when I read of things like io_uring and the DRM\npipelines, they yelled \"monadic conputation\" to me (I may have done too much\nHaskell). It feels like there's many probably quite separate pipeline systems\nin the Linux kernel and other places. This sounds a lot like that, too. Feels\nlike a common monadic abstraction should simplify things and allow avoiding\ncomplex context switches\u2014here between separate computers; in the kernel\nbetween kernel and userspace. I see no principled reason why you shouldn't be\nable to pipeline operations like \"read this from disk and push it to GPU\",\nwith room for optimizations that don't break anything if the system is capable\nof reading from disk directly to GPU memory, otherwise merely avoiding return\nto user space.\n\n### A Spritely distributed-computing library\n\nPosted Feb 19, 2024 22:20 UTC (Mon) by Karellen (subscriber, #67644) [Link]\n\nMy first thought was OCapN MyCapN (\"O captain, my captain\", reference to Dead\nPoets Society), but that probably says more about me than it does about the\nchoice of name :-)\n\n### O, come now...\n\nPosted Feb 19, 2024 23:31 UTC (Mon) by jreiser (subscriber, #11027) [Link]\n\nhttps://www.poetryfoundation.org/poems/45474/o-captain-my-captain\n\n\u201cO Captain! My Captain!\u201d is an elegy written by Walt Whitman in 1865 to\ncommemorate the death of President Abraham Lincoln. It was first published in\nSequel to Drum-Taps (1865), a collection of Whitman\u2019s poems inspired by the\nevents of the American Civil War.\n\n### O, come now...\n\nPosted Feb 20, 2024 1:56 UTC (Tue) by jfred (guest, #126493) [Link]\n\nAnd it's indeed not a coincidence!\n\n### A Spritely distributed-computing library\n\nPosted Feb 20, 2024 2:27 UTC (Tue) by kentonv (\u272d supporter \u272d, #92073) [Link]\n\nThanks for the kind words about Cap'n Proto! But I should note Cap'n Proto\ndidn't invent those ideas. I took them from the E programming language, and\nits distributed RPC protocol, CapTP -- the very same projects that inspired\nOCapN. Mark S Miller, the architect of E and CapTP, has been directly\nassisting OCapN and also directly helped me in designing Cap'n Proto. At one\npoint there was a lot of talk about interoperability, although the person who\nwas spearheading that (Ian Denhardt) tragically passed away last summer,\nleaving a hole in the discussion. :(\n\n### A Spritely distributed-computing library\n\nPosted Feb 20, 2024 2:51 UTC (Tue) by intelfx (subscriber, #130118) [Link]\n\nPleased to meet you here, Kenton! Let me just directly thank you for Cap'n\nProto \u2014 it's been an absolute joy to use, both on $dayjob and for personal\nprojects alike.\n\nAnd yes, I realized that it's all likely based on fundamental ideas and\nresearch from somewhere else, just never bothered to actually learn about the\nheritage. Thanks for educating me :-)\n\n> At one point there was a lot of talk about interoperability, although the\n> person who was spearheading that (Ian Denhardt) tragically passed away last\n> summer, leaving a hole in the discussion. :(\n\nI'm sorry to hear that.\n\nCopyright \u00a9 2024, Eklektix, Inc. This article may be redistributed under the\nterms of the Creative Commons CC BY-SA 4.0 license Comments and public\npostings are copyrighted by their creators. Linux is a registered trademark of\nLinus Torvalds\n\n", "frontpage": false}
