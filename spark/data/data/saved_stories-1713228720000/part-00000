{"aid": "40044243", "title": "XZ Utils Review Notes", "url": "https://tukaani.org/xz-backdoor/review.html", "domain": "tukaani.org", "votes": 4, "user": "todsacerdoti", "posted_at": "2024-04-15 18:49:43", "comments": 0, "source_title": "XZ Utils review notes", "source_text": "XZ Utils review notes\n\ntukaani.org \u00bb XZ Utils backdoor \u00bb XZ Utils review notes\n\n# XZ Utils review notes\n\nLasse Collin\n\nTable of Contents\n\n  * Introduction\n  * v5.2, v5.4, and v5.6\n  * Timezones\n  * Commits\n\n    * 2023-08\n    * 2023-09\n    * 2023-10\n    * 2023-11\n    * 2023-12\n    * 2024-01\n    * 2024-02\n    * 2024-03\n\n## Introduction\n\nThis document is work-in-progress.\n\nI never reviewed anything under the .github directory and those are skipped\nhere as well.\n\nChanges to translations will be checked separately, not per commit basis.\n\n## v5.2, v5.4, and v5.6\n\nCherry-picks to v5.2, v5.4, and v5.6 are OK. This means that it\u2019s enough to\nreview the master branch. If master is fine then the stable branches are too.\n\n## Timezones\n\nThere has been discussion about commit timezones and if those could be giving\nclues about something. There are mundane explanations for at least most of\nthese though:\n\n  * Putting a commit in other person\u2019s name with permission.\n\n  * Use of git commit --reset-author-date.\n\n  * Possibly use of git rebase --committer-date-is-author-date.\n\nOf these I never did the last one but I don\u2019t know if he did.\n\n## Commits\n\nTrivial commits like updates to THANKS or typo fixes in comments aren\u2019t\nmentioned here.\n\nThe months refer to commit date, not author date.\n\n### 2023-08\n\nTests: Style fixes to test_lzip_decoder.c.\n\nOK.\n\nmythread.h: Fix typo error in Vista threads mythread_once().\n\nOK.\n\nBuild: Conditionally allow win95 threads and --enable-small. and CMake:\nConditionally allow win95 threads and --enable-small.\n\nOK.\n\nliblzma: Add overflow check for Unpadded size in lzma_index_append(). and\nliblzma: Update assert in vli_ceil4(). and Tests: Improve invalid unpadded\nsize check in test_lzma_index_append().\n\nThis was pondered for a while and determined that in practice the only problem\nwas an assertion failure (but assertions rarely are enabled for production\ncode). A proper fix was good to do still.\n\nTests: Improve comments in test_index.c.\n\nThe diff might appear misleading. The intent is to move the comment but diff\nshows it as a move of the lzma_index_end call.\n\n### 2023-09\n\nCMake: Fix unconditionally defining HAVE_CLOCK_MONOTONIC.\n\nOK.\n\nCMake: Fix time.h checks not running on second CMake run.\n\nOK.\n\nFrom lib: Copy new header files from Gnulib without modification. to lib:\nSilence -Wsign-conversion in getopt.c.\n\nThese are OK, including getopt.m4 which was simplified a lot. xz doesn\u2019t need\nsupport for all corner cases of getopt_long so checking for those corner cases\nisn\u2019t needed either.\n\nThe GNU getopt_long isn\u2019t used on GNU/Linux, *BSDs, Solaris, or MinGW-w64.\n\nFrom Docs: Change quoting style from `...' to '...'. to Scripts: Change\nquoting style from `...' to '...'.\n\nThis was an overdue change. It\u2019s also done properly (I verified it back then\nas well). It missed one change around in CLOCK_MONOTONIC but that turned out\nto be mildly convenient as it avoided a simple merge conflict with Build:\nCheck for clock_gettime() even if not using POSIX threads..\n\nTo verify these commits, the following can be helpful:\n\n    \n    \n    git diff ce162db07f03^..9fb5de41f2fb \\ | sed \"/^-/{s/\\`/'/g;s/^-/+/}\" \\ | grep ^+ | sort | uniq -u\n\n### 2023-10\n\nBuild: Update visibility.m4 from Gnulib.\n\nIt matches the file in Gnulib.\n\nThe x86 CRC32 CLMUL commits begin from liblzma: Rename crc_macros.h to\ncrc_common.h. and there is a lot of code churn as the code was moved around\nmore than once.\n\nI made further changes that moved the code. He didn\u2019t like them at first but\nhe changed his mind in January 2024. I merged my changes on 2024-01-11, the\nbig one being liblzma: Avoid extern lzma_crc32_clmul() and\nlzma_crc64_clmul()..\n\nThe final version is fine.\n\nliblzma: Fix -fsanitize=address failure with crc_clmul functions.\n\nThis commit is a continuation to my commit liblzma: Mark crc64_clmul() with\n__attribute__((__no_sanitize_address__)). where I added no_sanitize_address\nthe first time. It just was needed in more places with some compiler versions\nwhen the code was rearranged.\n\nThis attribute is obviously scary but it is unfortunately required with the\nx86 SIMD code. The code makes aligned 16-byte reads which may read up to 15\nbytes before the beginning or past the end of the buffer if the buffer is\nmisaligned. The unneeded bytes are then ignored. It cannot cross page\nboundaries and thus cannot cause access violations.\n\nThe correctness is easy to review because memory is read only in a few places.\nIf you do this, I suggest looking at the latest code in the master branch as\nthat is the code that is actually in use now.\n\nCMake: Add ALLOW_CLMUL_CRC option to enable/disable CLMUL.\n\nOK.\n\nBuild: Remove check for COND_CHECK_CRC32 in check/Makefile.inc.\n\nOK.\n\nBuild: Fix text wrapping in an output message.\n\nOK.\n\n### 2023-11\n\nliblzma: Add missing comments to lz_encoder.h.\n\nOK.\n\nFrom xz: Detect when all data will be written to standard out earlier. to xz:\nMove the check for --suffix with --format=raw a few lines earlier.\n\nIn v5.4 these were squashed into these commits: xz: Fix suffix check. and\nTests: Create test_suffix.sh. and Tests: Fix typo in a comment.\n\nIt\u2019s simplest to review this as a whole. It was a a bit hilarious series of\ncommits in the master branch as I had spotted a regression that was introduced\nin xz: Refactor duplicated check for custom suffix when using --format=raw. We\ndiscussed it and gave ideas about the fix and then it turned out to be a bit\nwrong and needing another fix until he thought it\u2019s better to finish it\nanother day. Then the test script was added as well.\n\nxz: Create separate is_tty() function. and xz: Use is_tty() in message.c.\n\nThese are good although I clarified a comment in the next commit. It fixed a\nvery old bug in Windows build of xz.\n\nBuild: Change --enable-ifunc handling. and CMake: Change\n__attribute__((__ifunc__())) detection.\n\nIfunc detection was causing issues with musl. This seems fine but ifunc\nsupport was removed in liblzma: Remove ifunc support. so this doesn\u2019t matter\nanymore anyway.\n\nCMake: Use consistent indentation with check_c_source_compiles().\n\nIt really is just space change, no dots.\n\n### 2023-12\n\nFrom Tests: Rename OSS-Fuzz files. to Tests: Add fuzz_encode_stream ossfuzz\ntarget.\n\nThese are from PR #73 and have been merged correctly with cleanups to commit\nmessages and white space usage.\n\nTests: Minor cleanups to OSS-Fuzz files.\n\nOK. Needed one minor comment fix.\n\nTests: Silence -Wsign-conversion warning on GCC version < 10.\n\nOK.\n\nDocs: Update repository URL in Changelog.\n\nThe URL is correct.\n\nliblzma: Improve lzma encoder init function consistency.\n\nOK. options definitely must not be NULL, and in practice it never is because\nit would be a bug in the application too.\n\nliblzma: Make parameter names in function definition match declaration.\n\nOK, just like the commit message says.\n\nliblzma: Set all values in lzma_lz_encoder to NULL after allocation.\n\nThis together with the next commit liblzma: Initialize lzma_lz_encoder\npointers with NULL. were squashed into liblzma: Set all values in\nlzma_lz_encoder to NULL after allocation. in the v5.4 branch for the 5.4.6\nrelease. Together these commits only add two new lines to add missing\ninitializers.\n\nThe bug isn\u2019t as serious as the commit message makes it sound as no one has a\nreason to call lzma_filters_update on a LZMA1 encoder, a function that is very\nrarely used anyway.\n\nxzdec: Add sandbox support for Pledge, Capsicum, and Landlock.\n\nThe order of the macros in the #if directive is different from\nsrc/xz/sandbox.h but the directive is correct still.\n\nThe Capsicum code is slightly simpler and stricter than in xz because xzdec\nneeds to do less. Silently running without sandbox when kernel support is\nmissing (ENOSYS) is an intentional feature: without this, on such kernels xz\nwouldn\u2019t run at all.\n\nBuild: Allow sandbox to be configured for just xzdec.\n\nOK.\n\nCMake: Move sandbox detection outside of xz section.\n\nThis moves code around and edits it a little. Comparing the moved sections\nshows it\u2019s fine including the small edits. No suspicious typos (like\nmispelling SANDBOX_COMPILE_DEFINITION) are apparent.\n\n### 2024-01\n\nliblzma: Add RISC-V BCJ filter.\n\nThe riscv.c file in this commit was almost solely written by me and matched\nthe file I had outside of the Git tree. Jia had some minor work on it like\nadding macros to avoid repeated code and a few comment improvements. Those I\nreviewed and edited further.\n\nThe rest of the commit was by Jia. Those changes are good.\n\nliblzma: Update string_conversion.c to support RISC-V Filter.\n\nOK.\n\nTests: Add two RISC-V Filter test files.\n\nThis is the first commit preparing for the backdoor.\n\nxz: Update xz -lvv for RISC-V filter.\n\nIt\u2019s very similar to the ARM64 code below the new code.\n\nliblzma: RISC-V filter: Use byte-by-byte access. and xz: Man page: Add more\nexamples of LZMA2 options with BCJ filters.\n\nI did author these.\n\nTests: Skip RISC-V test files if decoder was not built.\n\nThis is fine although now that the backdoor has been removed, this commit\nalone doesn\u2019t do anything. But I left it there so that it\u2019s ready if proper\nfiles along with a generator program are added.\n\nTests: Use smaller dictionary size in RISC-V test files.\n\nI had mentioned the dictionary size and that gave a good excuse to update\nsomething in the backdoor code.\n\nCI: Use RISC-V filter when building with BCJ support.\n\nOK.\n\nFrom Speed up CRC32 calculation on ARM64 to liblzma: Update Authors list in\ncrc32_arm64.h.\n\nThere is some churn in these commits so it\u2019s simplest to review only the final\noutcome.\n\nFreeBSD case lacked error checking which was fixed in liblzma: ARM64 CRC32:\nAdd error checking to FreeBSD-specific code.\n\nThe check for the CRC32 table omission macro had an odd typo which was fixed\nin liblzma: ARM64 CRC: Fix omission of CRC32 table.\n\n### 2024-02\n\nliblzma: Fix build error if only RISC-V BCJ filter is enabled.\n\nOK.\n\nTests: Add RISC-V filter support in a few places.\n\nOK.\n\nliblzma: Creates separate \"safe\" range decoder mode. and liblzma: Creates Non-\nresumable and Resumable modes for lzma_decoder.\n\nThese are good and were created at my request. They are big but it\u2019s hard to\nsplit them into smaller pieces. The original versions of these are from\n2023-04-24. I made small edits but it was agreed that I would commit these in\nhis name.\n\nSince these commits are complex, it\u2019s understandable if they look scary. The\nnew code does input buffer bounds checking only once per loop iteration,\nchecking that there is at least 21 bytes available. At first this may look\ninsufficient because, in the worst case, rc_normalize may be executed up to 48\ntimes (22 bit model + 26 direct) per loop iteration. Each rc_normalize macro\nwill read one input byte if needed. However, the condition to read a new byte\ncannot be true everytime. This has been verified both with math and\nexperimentally. Comments in the code about this could be improved.\n\nThe small edits I made included fixing an off-by-one error with the loop\ncondition. The commit originally had 20 but I changed it to 21 because the\nfinal normalization after the end of payload marker (EOPM) was included in the\nnon-resumable path. The next commit by me (liblzma: LZMA decoder\nimprovements.) made the non-resumable variant jump to the safe code (goto\neopm) instead and thus 21 was changed to 20.\n\nXZ Embedded has had somewhat comparable code with the per-loop 20-byte check\nsince the beginning (2009) and it\u2019s been in the Linux kernel since 2010.\n\nAs most of the core compression code in XZ Utils, the original idea for this\ndetail comes from LZMA SDK. It\u2019s just fairly different-looking code.\n\nUpdate m4/.gitignore.\n\nModified build-to-host.m4 had the backdoor trigger. Ignoring the file here is\ncorrect because it is added among several other .m4 files when running\n./autogen.sh or autoreconf -fi.\n\nBuild: Fix ARM64 CRC32 instruction feature test.\n\nOK.\n\nxz: Fix Capsicum sandbox compile error.\n\nThis is correct.\n\nBuild: Define HAVE_MICROLZMA when it is configured. and Tests: Add\ntest_microlzma to .gitignore and CMakeLists.txt. and Tests: Replace\nHAVE_MICROLZMA usage in CMake and Autotools builds.\n\nI didn\u2019t like the extra macro that had been added solely for this test. The\nlast commit does more than reverting a single commit but the change is OK.\n\nTests: Add MicroLZMA test. and Tests: Replace HAVE_MICROLZMA usage in CMake\nand Autotools builds.\n\nThis test assumes that the encoder output doesn\u2019t change, that is, the test\nwill will fail if the encoder is modified too much. If the encoder is\nmodified, updating the test to match isn\u2019t much extra to do.\n\nTests: Add a few test files.\n\nBackdoor files.\n\nNote that tests/test_files.sh uses globs to pick the files. So just adding\nfiles means that a decompression test will be done with them.\n\nxzmore: Fix typo in xzmore.1. and Translations: Patch man pages to avoid fuzzy\nmatches.\n\nWe discussed this and I agreed to it. This way man page translations didn\u2019t\nneed to go via translators in the last days of the release rush to fix a typo\nin the English source text.\n\nBump version and soname for 5.7.0alpha. and Bump version and soname for 5.6.0.\n\nThe symbol name was supposed to be XZ_5.6 not XZ_5.6.0. It makes no difference\nin practice as it is merely a string.\n\nFix typos in NEWS and CMakeLists.\n\nOK. He liked to run codespell while I didn\u2019t.\n\nTests: Correct license header in test_microlzma.c.\n\nHe fixed it because I noticed it. Clearly the test file had been written some\ntime ago already.\n\nTests: Add test_microlzma to .gitignore and CMakeLists.txt.\n\nOK.\n\nBuild: Fix Linux Landlock feature test in Autotools and CMake builds.\n\nThis has a . at the beginning of a line in CMakeLists.txt that sabotages the\nLandlock detection. This was fixed in CMake: Fix sabotaged Landlock sandbox\ncheck..\n\nxz: Add missing RISC-V on the filter list in the man page\n\nThe need to add this fix had been discussed.\n\nxz: Change logging level for thread reduction to highest verbosity only.\n\nThis was discussed in length with multiple people. The commit matches what was\ndecided.\n\n### 2024-03\n\nBuild: Require attribute no_profile_instrument_function for ifunc usage. and\nliblzma: Use attribute no_profile_instrument_function with ifunc.\n\nThis is a real bug but the bug number in the commit message lacks one digit.\n\nliblzma: Fix false Valgrind error report with GCC.\n\nIt\u2019s one of the backdoor commits.\n\nliblzma: Fix typos in crc32_fast.c and crc64_fast.c. and Tests: Update RISC-V\ntest files. and Tests: Test --single-stream can decompress\nbad-3-corrupt_lzma2.xz. and Tests: Update two test files.\n\nMore backdoor commits.\n\nTranslations: Add missing --riscv option to man page translations.\n\nThis is a continuation for xz: Add missing RISC-V on the filter list in the\nman page. Almost always it\u2019s not good to touch the translations without\nupstream approval. In this case I felt mixed as I wondered if the date\ntranslations would be correct but didn\u2019t want to stop it so that the\ntranslation could be in the 5.6.1 release that was going to be made the same\nday.\n\nWhen translations are sent to the translators, they will remake these changes\nanyway (they only pick the original English text from the tarball).\n\nDocs: Simplify SECURITY.md.\n\nI got the impression that a lot of speculation happened around this commit.\n\nI had asked Jia to simplify the GitHub PR and Issue templates already, and\nsimplifying SECURITY.md seemed reasonable too. People reporting such bugs\ndon\u2019t need detailed handholding.\n\nI felt 21\u201330 days would be appropriate but Jia wanted to keep 90. With\nbackdoor like \u201cbugs\u201d, fast full disclosure is the only correct way though.\n\nLast updated 2024-04-15 19:28:19 +0300\n\ntukaani.org \u00bb XZ Utils backdoor \u00bb XZ Utils review notes\n\n", "frontpage": true}
