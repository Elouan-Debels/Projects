{"aid": "40066854", "title": "PostgreSQL Roles and Privileges Simplified", "url": "https://stormatics.tech/blogs/postgres-roles-and-privileges-simplified", "domain": "stormatics.tech", "votes": 1, "user": "belalebrar", "posted_at": "2024-04-17 16:23:17", "comments": 0, "source_title": "PostgreSQL Roles and Privileges Simplified - Stormatics", "source_text": "PostgreSQL Roles and Privileges Simplified - Stormatics\n\n(678) 345-3456\n\n380 Albert St, Melbourne, Australia\n\nenvato@mail.com\n\n  * Services\n\n    * Optimized Scaling Services\n\n      * Performance Tuning for PostgreSQL\n      * PostgreSQL Health Check\n      * Database Security Hardening\n      * High Availability & Disaster Recovery\n    * Managed Services for PostgreSQL\n    * Migrations and Upgrades\n    * PostgreSQL Training\n  * Projects\n\n    * pg_cirrus \u2013 Hassle-free PostgreSQL Cluster Setup\n  * Resources\n\n    * Webinars\n\n      * pgvector: How to transform your search capabilities with AI\n    * Case Studies\n\n      * FinTech \u2013 High Availability Cluster\n      * Ventrata \u2013 Migration and Performance Tuning\n    * Whitepapers\n\n      * Transparent Data Encryption and High Availability\n      * Data Ingestion Benchmark Comparison between PostgreSQL and MongoDB\n  * Blogs\n  * About Us\n\n    * Meet the Team\n    * News\n  * Contact Us\n\nGet a quote now\n\n  * Services\n\n    * Optimized Scaling Services\n\n      * Performance Tuning for PostgreSQL\n      * PostgreSQL Health Check\n      * Database Security Hardening\n      * High Availability & Disaster Recovery\n    * Managed Services for PostgreSQL\n    * Migrations and Upgrades\n    * PostgreSQL Training\n  * Projects\n\n    * pg_cirrus \u2013 Hassle-free PostgreSQL Cluster Setup\n  * Resources\n\n    * Webinars\n\n      * pgvector: How to transform your search capabilities with AI\n    * Case Studies\n\n      * FinTech \u2013 High Availability Cluster\n      * Ventrata \u2013 Migration and Performance Tuning\n    * Whitepapers\n\n      * Transparent Data Encryption and High Availability\n      * Data Ingestion Benchmark Comparison between PostgreSQL and MongoDB\n  * Blogs\n  * About Us\n\n    * Meet the Team\n    * News\n  * Contact Us\n\n# Blog Details\n\n  * Stormatics\n  * Ali's Planet PostgreSQL\n  * PostgreSQL Roles and Privileges Simplified\n\n  * April 8, 2024\n  * By Muhammad Ali\n  * Ali's Planet PostgreSQL, Blog\n\n## PostgreSQL Roles and Privileges Simplified\n\nPostgreSQL has a fine grained system for for managing user roles and\nprivileges. This helps admins decide who can access certain data and what\nthey\u2019re allowed to do with it. It\u2019s about managing permissions, where you can\ncreate different roles and roles can be a member of other roles.\n\nIn this blog, we will dive into PostgreSQL user roles and permissions,\ncovering databases, schemas, and other objects level privileges, following a\nFAQ format.\n\n## What is the Difference between user, roles and groups?\n\nIn PostgreSQL, users, groups, and roles are essentially the same, but users\nhave the added ability to log in by default. The commands CREATE USER and\nCREATE GROUP are the same as CREATE ROLE.\n\nSource: AWS\n\nNote: When you use the CREATE ROLE command, the created role doesn\u2019t have\nlogin privileges by default. In our blog, we\u2019ll be using the terms role and\nuser interchangeably.\n\nIn PostgreSQL, every connection to the database server is linked to a specific\nrole. Initially, the connection passes through the authentication module\n(pg_hba.conf), and then this role decides the initial access privileges for\ncommands executed during that connection.\n\n## Roles attributes\n\nRoles have various attributes that define what they can do within the database\nsystem. These attributes are important because they determine the extent of\nactions a role can take. Here are some key attributes and what they mean:\n\nAttribute| Description  \n---|---  \nLOGIN| This attribute enables the role to authenticate and connect to the\ndatabase cluster. Roles without this attribute are unable to establish\nconnections, limiting their access to the database.  \nPASSWORD| Enables the role to authenticate using a password for secure access\nto the database. All PostgreSQL users must have a password for authentication.  \nSUPERUSER| Provides the highest level of privileges within the database\ncluster. Superusers can do anything and everything such as access all\ndatabases, perform any operation, and manage other roles. In PostgreSQL this\ninitial superuser account is called postgres by default, which typically\nmatches the system username that is running the PostgreSQL cluster process.  \nCREATEDB| Allow role to create new databases within the PostgreSQL cluster.  \nCREATEROLE| Allow role the ability to create new roles within the database\nsystem and manage them.  \nINHERIT| This attribute decides if a role can inherit privileges from other\nroles. When activated, the role gains the privileges of roles it\u2019s a part of.\nIf NOINHERIT is specified, the role must use the SET command to access the\nprivileges of the parent role.  \n  \n## How to create and assign a role?\n\n    \n    \n    CREATE ROLE readonly; => This role cannot login inside database\n\nCREATE ROLE testuser LOGIN ENCRYPTED PASSWORD \u2018SECRET\u2019; => This role can login\nand access databases inside the cluster.\n\nGRANT readonly to testuser; => All privileges assigned to readonly role with\nbe inherit by testuser\n\n## What is a PUBLIC role?\n\nThe PUBLIC role in PostgreSQL is a special role that grants a privilege to\nevery role on the system. It\u2019s like a default group that indicates all roles,\neven those created later. It ensures that all roles have access to certain\nprivileges. All other roles are automatically granted membership in PUBLIC by\ndefault and inherit its privileges.\n\nBefore PostgreSQL 15, every user had full privileges (create/usage) on the\npublic schema, which was shared among all users. However, starting with\nPostgreSQL 15, users no longer have the ability to create any objects within\nthe public schema. This change applies to the public role, which represents\nall users. It\u2019s now standard practice to revoke the CREATE privilege for the\npublic schema.\n\n## What database level privileges are provided in PostgreSQL?\n\nPostgreSQL provides various privileges at the database level, including:\n\nPrivilege| Description  \n---|---  \nCONNECT| Allows users to connect to a specific database.  \nCREATE| Grants the ability to create new objects within the database.  \nTEMPORARY| Permits the creation of temporary tables.  \n  \nBy default, the CONNECT privilege is granted to the PUBLIC role (all users).\nHowever, it\u2019s not possible to revoke this privilege from individual users\ndirectly. Instead, you would need to revoke it from the PUBLIC role and then\ngrant it individually to other users who require it.\n\n    \n    \n    REVOKE CONNECT ON DATABASE postgres FROM PUBLIC;\n\nNow connect testuser with postgres database\n\n    \n    \n    psql -U testuser -d postgres psql: error: connection to server on socket \"/var/run/postgresql/.s.PGSQL.5432\" failed: FATAL: permission denied for database \"postgres\" DETAIL: User does not have CONNECT privilege.\n\n## How to assign schema level privileges?\n\nPostgreSQL database can consist of one or more schemas, which contains tables\nand other objects like views, data types, functions, procedures and operators.\nDifferent schemas can have objects with the same name without conflict. For\ninstance, both schema1 and schema2 can contain tables named table1. Unlike\ndatabases, schemas aren\u2019t strictly separated. A user can access objects in any\nschema within the database they\u2019re connected to, provided they have the\nnecessary privileges.\n\nBy default, users can\u2019t access objects in schemas they don\u2019t own. To allow\naccess, the owner of the schema must grant the USAGE privilege on the schema.\nFor instance:\n\n    \n    \n    GRANT USAGE ON SCHEMA schema1 TO testuser;\n\nUsers can also be permitted to create objects in someone else\u2019s schema. To\nallow this, the CREATE privilege on the schema must be granted. For example:\n\n    \n    \n    GRANT CREATE ON SCHEMA schema1 TO abc;\n\nIn order to provide both privileges in a single command, run the following:\n\n    \n    \n    GRANT ALL ON SCHEMA schema1 TO testuser;\n\n## How to assign table level privileges?\n\nPostgreSQL offers various DDL and DML privileges at the table level:\n\n  * SELECT: Allows fetching data from a table.\n  * INSERT: Enables adding new rows into a table.\n  * UPDATE: Modifying existing rows in a table.\n  * DELETE: Grants the ability to remove rows from a table.\n  * REFERENCES: Allows creating foreign key constraints.\n  * TRIGGER: Enables the creation of triggers on a table.\n  * TRUNCATE: Permits the use of TRUNCATE on a table.\n\nGranting INSERT and UPDATE Privileges:\n\n    \n    \n    Grant insert,update on table tablename to testuser;\n\nGranting All Privileges on a Single Table:\n\n    \n    \n    Grant all on table tablename to testuser;\n\nGranting All Privileges on All Tables in a Schema:\n\n    \n    \n    Grant all on all tables in schema schemaname to testuser;\n\n## What is the purpose of the ALTER DEFAULT PRIVILEGE command?\n\nALTER DEFAULT PRIVILEGES command allow admins to define default access levels\nfor objects created by specific roles within a schema. This is useful for\nscenarios where newly created objects require consistent access controls. By\ndefault, newly created objects are only accessible to the owner (the user who\ncreated them) unless explicit privileges are granted. For example:\n\n    \n    \n    ALTER DEFAULT PRIVILEGES FOR ROLE developer IN SCHEMA test GRANT SELECT, INSERT ON TABLES TO reporting;\n\nThe above command implies that each time the developer role creates any new\ntable inside the test schema, the SELECT and INSERT privilege will be\nautomatically granted on that table to the reporting role.\n\nNote: It\u2019s important to understand that GRANT permissions are separate for\neach object. Granting privileges on a database does not automatically extend\nthose rights to the schema within it. Similarly, granting permissions on a\nschema does not automatically grant rights on the tables within that schema.\n\nWhen accessing a table, the permission checks occur in a specific order:\n\n  1. Do you have USAGE privilege on the schema?\n\n     * If no: Access is denied.\n     * If yes: Proceed to the next step.\n  2. Do you also have the appropriate rights on the table?\n\n     * If no: Access is denied.\n     * If yes: Proceed to check column privileges.\n\nThis means if you have access on all tables within a schema but lack the USAGE\nprivilege on that schema, PostgreSQL will throw permission denied error.\n\n## What are predefined roles in PostgreSQL?\n\nA predefined role refers to a built-in role designed to grant access to\ncommonly needed information. This simplifies the task for administrators,\nallowing them to easily provide access to others without the need to execute\nmultiple SQL queries for the same grants. These roles are outlined as follows:\n\nRole| Description  \n---|---  \npg_read_all_data| Read all data (tables, views, sequences), as if having\nSELECT rights on those objects, and USAGE rights on all schemas, even without\nhaving it explicitly. This role does not have the role attribute BYPASSRLS\nset. If RLS is being used, an administrator may wish to set BYPASSRLS on roles\nwhich this role is GRANTed to.  \npg_write_all_data| Write all data (tables, views, sequences), as if having\nINSERT, UPDATE, and DELETE rights on those objects, and USAGE rights on all\nschemas, even without having it explicitly. This role does not have the role\nattribute BYPASSRLS set. If RLS is being used, an administrator may wish to\nset BYPASSRLS on roles which this role is GRANTed to.  \npg_read_all_settings| Read all configuration variables, even those normally\nvisible only to superusers.  \npg_read_all_stats| Read all pg_stat_* views and use various statistics related\nextensions, even those normally visible only to superusers.  \npg_stat_scan_tables| Execute monitoring functions that may take ACCESS SHARE\nlocks on tables, potentially for a long time.  \npg_monitor| Read/execute various monitoring views and functions. This role is\na member of pg_read_all_settings, pg_read_all_stats and pg_stat_scan_tables.  \npg_database_owner| None. Membership consists, implicitly, of the current\ndatabase owner.  \npg_signal_backend| Signal another backend to cancel a query or terminate its\nsession.  \npg_read_server_files| Allow reading files from any location the database can\naccess on the server with COPY and other file-access functions.  \npg_write_server_files| Allow writing to files in any location the database can\naccess on the server with COPY and other file-access functions.  \npg_execute_server_program| Allow executing programs on the database server as\nthe user the database runs as with COPY and other functions which allow\nexecuting a server-side program.  \npg_checkpoint| Allow executing the CHECKPOINT command.  \npg_use_reserved_connections| Allow use of connection slots reserved via\nreserved_connections.  \npg_create_subscription| Allow users with CREATE permission on the database to\nissue CREATE SUBSCRIPTION.  \n  \nPostgreSQL 14 has introduced two new roles that offer significant benefits\nfrom the perspective of application developers:\n\npg_read_all_data pg_write_all_data\n\nFor example when providing read-only privileges to an application user, the\nnormal approach involves executing multiple commands for each schema:\n\n    \n    \n    GRANT SELECT on all tables in schema1 to application_user; GRANT SELECT on all tables in schema2 to application_user; ALTER DEFAULT PRIVILEGES in schema1 GRANT select on tables to application_user; ALTER DEFAULT PRIVILEGES in schema2 GRANT select on tables to application_user;\n\nThe issue is that this process becomes repetitive when dealing with numerous\nschemas and write users.\n\nWith a predefined role like pg_read_all_data, we only need to run a single\ncommand:\n\n    \n    \n    GRANT pg_read_all_data to application_user;\n\n## Best practices\n\nThe recommended approach for setting up fine-grained access control in\nPostgreSQL is as follows:\n\n  * Create separate users for each application or service. This can help in identifying any connection issues easily and assists in tracking access through audit logs.\n  * Define multiple roles with specific permissions based on application access requirements. Assign these roles to users accordingly as it helps in streamlining administration and simplifying the process of granting or revoking permissions.\n  * Grant users and roles only the permissions necessary for their respective tasks.\n  * Beware of superuser privileges as they possess unrestricted access to the database, presenting a significant security risk if compromised.\n  * Implement strong password policies for database users to prevent unauthorized access. Rotate passwords periodically.\n  * Utilize SSL/TLS protocols to encrypt communication between clients and the database server.\n\nContinue reading our blog posts below, or reach out if you have any questions\nusing our contact form.\n\n  * The Beginner\u2019s Guide to PostgreSQL Database Security Hardening\n  * Unlocking Secure Connections: A Guide to PostgreSQL Authentication Methods\n\nPrevious Post\n\nPitfalls of using SELECT *\n\n### Leave A Comment Cancel Comment\n\n## Latest from the Blog\n\n  * PostgreSQL Roles and Privileges Simplified\n  * Pitfalls of using SELECT *\n  * Fireside Chat Blog: Oracle to PostgreSQL Migration\n  * Peak Performance \u2013 pgvector vs. PostgreSQL ARRAY for mass spectrometry databases\n  * Build HNSW 80% Faster with Parallel Index Build in pgvector\n\n## Sign up for the Stormatics Newsletter\n\n#### Our Services\n\n  * PostgreSQL Consulting\n  * Managed Services\n  * Performance Tuning\n  * PostgreSQL Health Check\n  * Database Security Hardening\n  * High Availability & Disaster Recovery\n  * Migrations and Upgrades\n  * PostgreSQL Training\n\n#### Our Projects\n\n  * pg_cirrus \u2013 Hassle-free PostgreSQL Cluster Setup\n\n#### Quick Links\n\n  * Blog\n  * Meet the Team\n  * Webinars\n  * News\n  * Contact Us\n\n### Contact Info\n\nSend us an email\n\ninfo@stormatics.tech\n\n### Follow us at\n\nLinkedin Youtube Flaticon-twitter Facebook\n\nOur mission is to help businesses scale PostgreSQL reliably for critical data\n\nAll rights reserved | Privacy Policy\n\n\u2715\n\nHi, I am PostgresAI by Stormatics!\n\nHave a question about PostgreSQL? Just ask, I'm here to help!\n\n", "frontpage": false}
