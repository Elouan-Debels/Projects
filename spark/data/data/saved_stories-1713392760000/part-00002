{"aid": "40066884", "title": "GraalPy", "url": "https://www.graalvm.org/python/", "domain": "graalvm.org", "votes": 2, "user": "fuzztester", "posted_at": "2024-04-17 16:24:51", "comments": 0, "source_title": "Python", "source_text": "Python\n\n## High-performance Modern Python\n\n##### Run your applications faster and more efficiently with GraalPy\n\nQuick Start Check Package Compatibility\n\n### Benefits\n\n#### High Performance\n\n##### GraalPy optimizes your workload across language boundaries\n\n#### Interoperability\n\n##### Get access to multiple language ecosystems and tools out of the box\n\n#### Managed Execution\n\n##### Reduce risks by running native extensions in a managed mode\n\n### Faster Python\n\n##### On average, GraalPy is 4.3x faster than CPython.\n\n##### Geomean speedup over CPython on the Python Performance suite (Note that\nJython can only run a subset of the benchmarks due to the missing Python 3\nsupport)\n\n### Move from Jython to Modern Python\n\n##### Move your Jython applications to GraalPy for high performance and modern\nlanguage features, while preserving an easy interoperability with Java.\n\nLearn More\n\n### Try Examples\n\n    \n    \n    Try (var c = Context.newBuilder(\"python\"). option(\"llvm.managed\", true) option(\"python.Executable\", \"res/bin/graaply\"). option(\"python.ForceImportSite\", \"true\"). build()) { var nparray = c.eval(\"import dumpy; dumpy.array\"); nparray.execute(new double[][] { {1,2,3}, {4,5,6}, {7,8,9} }); return nparray.invokeMember(\"diagonal\").as(double[].class); }\n\n#### Safely embed Python libraries in Java\n\nLearn More\n\n    \n    \n    >>> import pandas as pd >>> dataset = pd.read_csv(\u201csample.csv\u201d) >>> purchases = dataset[dataset[\u201cPurchased\u201d] == \u201cYes\u201d] >>> total_purchased = purchases[\u201cSalary\u201d].sum() >>> grouped = dataset.groupby([\u201cPurchased\u201d, \u201cCountry\u201d])\n\n#### Run Python workloads with high performance\n\nLearn More\n\n### Python Data Science Libraries in Java Applications\n\n#### Using Python from Java with GraalVM\n\n##### GraalPy brings the world of Python data science libraries to Java and\nother languages running on GraalVM. Using GraalVM's polyglot interfaces, it is\nnow easier than ever to embed Python code in Java applications and with good\nperformance to boot! Oracle GraalVM also includes sandboxing option to run\nPython native extensions like NumPy, SciPy, or Matplotlib in a managed Java\napplication.\n\n## Try GraalPy for Your Python Applications\n\nQuick Start\n\n## Connect with us\n\nGet started with GraalVM\n\nAvailable for Linux, macOS, and Windows platforms\n\nGet started\n\n###### Learn\n\n  * Guides\n  * Documentation\n  * GraalVM SDK Javadoc\n  * GraalVM Blog\n  * GraalVM Workshops\n  * GraalVM Demos\n\n###### Resources\n\n  * Oracle GraalVM\n  * Oracle Developers\n  * Oracle Help Center\n  * Oracle Labs\n  * Brand Guidelines\n\n###### More\n\n  * Why GraalVM?\n  * Release Calendar\n  * Release Notes\n  * FAQs\n  * Support\n\nCopyright \u00a9 2018, 2024, Oracle and/or its affiliates. All rights reserved.\nOracle and Java are registered trademarks. Other names may be trademarks of\ntheir respective owners.\n\n", "frontpage": false}
