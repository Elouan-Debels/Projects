{"aid": "40007684", "title": "Steam Controller reverse engineering and customization project", "url": "https://github.com/greggersaurus/OpenSteamController", "domain": "github.com/greggersaurus", "votes": 1, "user": "xenophonf", "posted_at": "2024-04-11 22:56:29", "comments": 0, "source_title": "GitHub - greggersaurus/OpenSteamController: Steam Controller reverse engineering and customization project.", "source_text": "GitHub - greggersaurus/OpenSteamController: Steam Controller reverse\nengineering and customization project.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ngreggersaurus / OpenSteamController Public\n\n  * Notifications\n  * Fork 35\n  * Star 394\n\nSteam Controller reverse engineering and customization project.\n\n394 stars 35 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# greggersaurus/OpenSteamController\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ngreggersaurusJingle: Fixes #63258015 \u00b7\n\n## History\n\n409 Commits  \n  \n### Firmware\n\n|\n\n### Firmware\n\n| Doc: Added video for building firmware  \n  \n### Jingle\n\n|\n\n### Jingle\n\n| Jingle: Fixes #6  \n  \n### ReverseEngineering\n\n|\n\n### ReverseEngineering\n\n| Doc: Attempt to make project more user friendly  \n  \n### UsbConfiguration\n\n|\n\n### UsbConfiguration\n\n| Doc: Attempt to make project more user friendly  \n  \n### img\n\n|\n\n### img\n\n| Doc: Update img size  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Everything: Reorganization  \n  \n### LoadingFirmware.md\n\n|\n\n### LoadingFirmware.md\n\n| Doc: Better formatting  \n  \n### README.md\n\n|\n\n### README.md\n\n| Doc: Update img size  \n  \n### TODO.md\n\n|\n\n### TODO.md\n\n| Doc: Attempt to make project more user friendly  \n  \n## Repository files navigation\n\n# Open Steam Controller\n\nWelcome to the Open Steam Controller Project!\n\nThis is a project where I have been working to deconstruct, document,\nrepurpose and expand upon the Steam Controller firmware and hardware.\n\n# The Steam Controller\n\nFirst, it is important to talk a little about the Steam Controller (the\nhardware that this project is focused on).\n\nThe Steam Controller is a video game controller released by Valve Corporation\non November 10, 2015. This was part of Valve's initiative to give PC gamers\nthe option of a console-like experience (i.e. the couch gamer who sits in\nfront of a TV and uses a controller instead of keyboard and mouse).\n\nThe Steam Controller tried to keep some aspects familiar to modern video game\ncontrollers (i.e. a left analog stick, four face buttons, two shoulder and\nbumper buttons) while also changing up some of the norms we have come to\nexpect (i.e. replacing the directional pad and right analog stick with\ntrackpads).\n\nAdditional details on the controller can be found on the official Product Page\n\n# Why?\n\nYou may be wondering why this project exists and why I have invested a non-\nnegligible amount of my time and energy into it over the past couple of years.\n\nFirst, I found the design of this controller to be compelling. Having two\ntrackpads in place of the D-pad and right analog stick is an interesting idea.\nThe trackpads can be configured to act in a variety of ways and not only mimic\nwhat they replaced, but also provide new interaction paradigms. Also, the idea\nof using the haptics to play a little Jingle when the controller starts up or\nshuts down is a neat touch that made the controller further stand out. Being\nable to fully customize these Jingles was a near immediate desire when I first\nstarted using the controller.\n\nSecond, the controller was left fairly accessible. Being able to upload\nfirmware updates manually made the barrier to entry for running custom\nfirmware much lower. There was still a considerable challenge to get even a\n\"Hello World\" (i.e. blink the Steam Button LED) working. However, this was not\nnearly as tough as I imagine doing something similar on a controller that is\ndesigned to be more temper resistant would be. I really appreciate the fact\nthat Valve left this hardware as accessible as they did and do not discourage\npeople from trying to hack it.\n\nThird, iFixit did a really nice teardown of the controller. This gave me an\nidea of what the controller had going on internally, without needing to\n(initially) take apart my hardware. This pointed out a lot of neat peripherals\nand processors that I thought would be neat to work with, especially in the\ncontext of a product that already was designed for a particular purpose.\n\n# The Open Steam Controller Project\n\nNow that the controller and some of its (default) capabilities have been\nexplained, we can start talking about this project. Namely I want to cover\nwhat has been accomplished, and what I hope to accomplish moving forward.\n\nNote, the following is a bit verbose and narrative. There is a lot of content\nin this project and this is an attempt to break down the details in a way that\nwill give an easy to follow lay of the land for people new to this effort. If\nyou are a TLDR kind of person, check out the Notice and Warning Section below\nand then feel free to jump into the Subprojects Section to get to the meat of\neffort. You should also be sure to check out the demo videos that show some of\nthe major accomplishments in action.\n\nAs mentioned previously, the primary intention of this project is to explore,\ndeconstruct and expand upon configuration options and usages for the Steam\nController. However, that is a bit vague. So let's start with some examples.\nFirst, a major goal of this project was to be able to write custom firmware\nfor the main processor on the controller. This is what opens up the door for a\nlot of other possibilities moving forward.\n\nHowever, before I could start writing firmware I needed more info on the\ncontroller. Valve was nice enough to leave the door open to accessing the\nbinary version of their firmware and the ability to update the main processor\neasily. However, they did not provide schematics or a list of components or\ndatasheets that an embedded software engineer would typically have if tasked\nwith the process of writing custom firmware. Therefore, I needed to turn to\nreverse engineering. This essentially boils down to deconstructing the\nhardware and official firmware so that I could understand how to write my own\nfirmware. At this point the Reverse Engineering effort has mostly run its\ncourse, as a lot has been discovered, documented and utilized for other\nefforts. Details on the Reverse Engineering effort can be found in the Reverse\nEngineering Subproject.\n\nNow that a Reverse Engineering effort has been established and I have started\ngathering information on the hardware, I was able to start writing custom\nFirmware. Check out the Firmware Subproject to see the current state of\nsoftware. Mostly this is utility software to allow a user to query different\nperipherals or take measurements at different states (as some of that\ninformation needed to be captured and fed back into the Reverse Engineering\nprocess to keep it moving forward). However, it eventually became clear that\nthere was enough functionality that was captured here that it would not be too\nmuch additional work to make this hardware act as a controller for other\nconsoles (i.e. the Nintendo Switch).\n\nNext we come to what was originally the sole intention of this project. That\nis, the goal of being able to have full control of the songs (Jingles) that\nthe Steam Controller plays (via the Trackpad Haptics) on power up and shut\ndown. Due to some discoveries via the Reverse Engineering effort, this project\nallows for Jingles to be fully customized and for these customizations to\npersist while still running Valve's official firmware. For details on how to\ncustomize the Jingles on your controller, or for more details (i.e. how Jingle\nData is formatted and how we can customize Jingles without modifying the\nofficial firmware) see The Jingles Subproject.\n\nFinally, it is important to mention that another intention of this project is\nfor it to to be an educational and/or motivational resource. Maybe you are\ninterested in the Steam Controller. Or maybe you are interested in writing\nembedded software for a commercial device. Either way the hope is for this\nproject to provide clear and concise information to inspire and enable people\nto to learn and do more. I know I learned a lot from this effort, and if any\nof that can be shared and help others out that would be great.\n\nFor a starting point on additional details and the accomplishments and future\nintentions of this project please see the Subprojects section below.\n\n# Notice and Warning\n\nPlease recognize that by utilizing any part of this project you are doing so\nat your own risk. This is a reverse engineering effort and I make no claims to\nhave a complete understanding of the hardware I am providing custom or\nmodified firmware for. Hopefully the testing I perform before publishing my\nfindings and modifications will prevent damage to your Steam Controller or\nanything you may connect your Steam Controller to (i.e. the Nintendo Switch).\nHowever, I cannot guarantee that.\n\nAlso please note this is being shared primarily for educational purposes.\nWhile this may allow a user to do things such as use the Steam Controller on\nthe Nintendo Switch, please recognize that this is almost definitely going to\nbe coming with trade-offs compared to officially supported hardware and\nfirmware. If you want a cheap Switch Controller and are OK with it being\nwired, check out the ones PowerA or Hori makes. If you want a fully featured\ncontroller, consider spending the extra money and get a Pro Controller (it\nreally is worth it).\n\nFinally note that I say all of this with the hope of not discouraging anyone.\nPlease dive in and get your hands dirty. Just please be aware that there is a\n(hopefully) very small, but non-zero, chance that a mistake could lead to\nbricked or broken hardware.\n\n# Subprojects\n\nThis section gives brief outlines and demonstrations (if applicable) of the\nmajor efforts of this project. Further details on each Subproject can be found\nin their respective directories.\n\n## Firmware\n\nThe work in this directory is geared towards creating a completely custom\nfirmware build for the Steam Controller. This project can be configured to\nhave the controller act as a development system that allows for querying\nperipherals and exploring or verifying system behaviors. Additionally the\nproject can be configured for more practical purpose, such as behaving like a\nwired Nintendo Switch controller.\n\nBelow are some videos demonstrating the different firmware builds:\n\nOpen Steam Controller: Nintendo Switch\n\nOpen Steam Controller: Development Board\n\n## Jingle\n\nThe work in this directory is geared towards creating a user friendly way to\ncustomize what Jingles are played when the Steam Controller starts up and\nshuts down.\n\nBelow is a video demonstrating how to customize Jingles on the Steam\nController:\n\nOpen Steam Controller: Jingle Customization\n\n## Reverse Engineering\n\nThe work in this directory focuses on deconstructing the firmware and hardware\nof the Steam Controller. The understanding gained from this often is a\nsignificant part of the other Subprojects.\n\n## USB Configuration\n\nSteam offers the ability to change certain configuration options for a Steam\nController (i.e. change LED brightness, change which Jingle will be played\nfrom system memory). This directory contains work for understanding,\nreproducing and, maybe, expanding upon this functionality.\n\n# Contributing\n\nThis is an open source project, so please make use of this however you would\nlike (as long as it does not violate any licenses stated within).\n\nIf you would like to offer contributions back to this repo that would be\ngreat. That could come in the form of issues/discussions on how this could be\nmore user friendly or by adding features or support that is not yet there.\n\nNote that there are TODO documents for each Subproject. The idea is to outline\ngoals I would like to accomplish. If you want to help with any of these that\nwould be awesome. It would be even more awesome if you started a conversation\nregarding your intentions so as to limit the chances of duplicated effort or\nincongruous designs.\n\n# Bugs and Issues\n\nI will do my best to provide easy to use and robust software. However, there\nwill still most likely be bugs. If you find a bug, please report it.\n\nThe best way to report a bug is to use the Issues tab on GitHub.\n\nWhen reporting a bug/issue, please make sure to provide sufficient details.\nKey details to include are:\n\n  * Exactly what steps did you take?\n  * Can you reproduce the error by following your own steps?\n  * Do you have any files that make the bug occur (i.e. specific .musicxml file)?\n\n# Resources and Influences\n\nThis section lists some projects that influenced this project, as well as\nlinks to some resources that may continue to be helpful to stay current on.\n\n## Pilatomic Steam Controller Singer\n\n  * Example of using the haptics to play music.\n  * Example of PC side code written in C using libusb.\n  * Allows for playing songs of any length, but at cost of controller being occupied by Singer software.\n\n## HID Joy-Con Whispering\n\n  * Application for communicating with Pro Controller via USB HID.\n  * Helpful for Switch Faux Controller development to get USB communications in place.\n\n## Nintendo Switch Reverse Engineering\n\n  * Notes on Reverse Engineering of Nintendo Switch Controllers.\n  * Helpful details on HID communications with Pro Controller.\n\n## Standalone Steam Controller Driver\n\n  * Source for breaking down some USB commands.\n  * Goal of this project is to be able to use Steam Controller as a game controller outside of the Steam platform.\n\n## Steam Controller Update News\n\n  * Useful to get an idea of what changed from official firmware to firmware release.\n\n## UnBricking Steam Controller (Manual Firmware Update, Rollback)\n\n  * Step by step guide on how to manually change the Steam Controller firmware.\n  * Much of this information is captured in Loading Firmware.\n\n    * Loading Firmware presents the information in the context of how it applies to Open Steam Controller Project and its Subprojects.\n\n## Steam Communities\n\n  * Official Group\n  * Custom Sounds Discussion\n\n# TODO\n\nWhile a lot has been accomplished in this project thus far, there is still so\nmuch that can be done with the Steam Controller (especially given the\ngroundwork that has been laid up to this point). In order to capture and track\nthese ideas TODO documents have been made for each Subproject. A good place to\nstart is the top-level TODO Document. This covers the highest level goals for\nthe project while providing links to Subproject specific TODOS.\n\n## About\n\nSteam Controller reverse engineering and customization project.\n\n### Topics\n\nfirmware reverse-engineering steam-controller haptics nintendo-switch\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n394 stars\n\n### Watchers\n\n48 watching\n\n### Forks\n\n35 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * greggersaurus Greg Gluszek\n  * rigidsh Alexander Petrov\n\n## Languages\n\n  * C 98.7%\n  * C++ 1.2%\n  * Other 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
