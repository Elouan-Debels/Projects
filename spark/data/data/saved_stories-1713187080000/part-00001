{"aid": "40037777", "title": "How to Use Feature Flags to Increase Deployment Frequency", "url": "https://www.featbit.co/practices/original-articles/how-to-use-feature-flags-to-increase-deployment-frequency", "domain": "featbit.co", "votes": 1, "user": "dudubird", "posted_at": "2024-04-15 07:17:13", "comments": 0, "source_title": "How to Use Feature Flags to Increase Deployment Frequency \u2013 FeatBit", "source_text": "How to Use Feature Flags to Increase Deployment Frequency \u2013 FeatBit\n\nCTRL K\n\n  * Practices Overview\n  *     * Monitoring & Managing your Server SDK Connections\n\n  *     * Overview\n    * Write a Release Plan\n    * Making Feature Flags Consistent Across Environments\n\n  *     * overview\n\n  *     * How to Use Feature Flags to Increase Deployment Frequency\n\nArticles\n\nHow to Use Feature Flags to Increase Deployment Frequency\n\n# How to Use Feature Flags to Increase Deployment Frequency\n\nDeployment frequency is one of the key metrics that DORA (DevOps Research and\nAssessment) uses to measure software delivery performance. Many feature flag\nvendors will tell you that feature flags can significantly increase deployment\nfrequency. But how? Here, I will give you a step-by-step guide on how to use\nfeature flags to increase deployment frequency.\n\nPrerequisites:\n\n  1. Readers should have a working understanding of continuous delivery (opens in a new tab).\n  2. Readers should have a basic understanding of feature flags (opens in a new tab).\n\n## Why we need to deploy frequently.\n\nIt's all about \"Money\". The more frequently you deploy, the earlier you can\ndeliver value to the customer. The earlier you deliver value to the customer,\nthe earlier you can get feedback from the customer. The earlier you get\nfeedback from the customer, the earlier you can adjust your product to meet\nthe customer's needs. The earlier you adjust your product to meet the\ncustomer's needs, the more money you can make.\n\nThe delivery value gap isn't too big for each deployment, but it's a huge gap\nif you accumulate it over time. If you can't deploy frequently as what your\ncompetitors do, you will be out of the game.\n\n## Understanding what prevents us from deploying frequently\n\nFear of deployment risks. The more frequently you deploy, the more likely it\nis that failures will occur. Each failure increases your fear, leading to less\nfrequent deployments. Why does failure cause more fear?\n\n  * Failure can impact customer experience, cause customer churn, then revenue loss.\n  * Rollback, fix and re-deploy will take more time and exhaust the team.\n\nBig story or big feature. Many teams wouldn't break the big story into small\npieces. They think the big story is a whole, and they can't deploy it until\nit's all done.\n\n## What we may have done wrong and thought wrong.\n\nYour team may set a fixed deployment day for each iteration. They merge some\nfeatures into the main branch (or main development branch, it depends on the\nteam), then do as much testing as possible before the deployment day. During\nthe testing period, no new features are allowed to be merged (and even no\ndevelopment is allowed).\n\nIt's considered a compromised way to keep the release safe. But the bugs will\nstill happen in production, and unmerged feature branches can become long-\nlived feature branches. There's a better way to make the delivery safer and\nallow you to ship more features in an iteration.\n\nmore features in an iteration.\n\nWhy do we need to break the big story into small pieces? Because one big story\ncan introduce a long-lived feature branch that carries a high risk of code\nconflict, review, and testing. If you have many of them, it will be a\nnightmare for the team. You may think it's technically difficult to break the\nbig story into small pieces and merge them into the main code without breaking\nthe existing service. Feature flags (opens in a new tab) can help you to solve\nthis problem.\n\n## Feature flags solve the problem\n\nThe main key to solving this problem is to decouple the feature release from\nthe deployment. This means that you can deploy the feature to UAT, SIT, or\nproduction, but don't release it immediately. You can test the feature after\ndeployment, and then release it when it's ready.\n\nWhen you do release the feature, the feature flag allows you to release the\nfeature in a more secure manner:\n\n  1. Involve related teams (such as QA, Products) to test the feature online (in uat, sit, production or a production-like environment).\n  2. Enable the feature flag for a small group of users (such as 10% of end users), and then monitor the feature's performance.\n  3. Gradually roll out the feature to more users (20%, 50%, 80%...) until all users can use the feature without any problems.\n\nIf you encounter a bug during the feature rollout, you can immediately roll\nback or disable the feature without having to redeploy the service. The other\nfeatures won't be affected, and you can fix the bug in a more relaxed way.\n\nSo you can change the deployment process in a Zen and safer way:\n\nThe image above shows the game-changing deployment process with feature flags.\n\n  * You can merge a feature into the main branch after feature development is complete. Whenever a UAT deployment request is submitted, you can immediately deploy new features to the UAT environment. By default, new features are disabled.\n  * You can enable the feature flag to enable the new features in the UAT environment, and then test the new features.\n\n    * If the feature is OK, do nothing.\n    * If the feature has a bug, report the bug, disable the feature without code changing and redeploy, then do nothing.\n  * Whenever a prod deployment request is submitted, you can deploy to a prod immediately. New features are disabled by default.\n  * Release the features individually in the production environment, as mentioned earlier in this chapter.\n\n## How to implement feature flags\n\nThis article doesn't cover how to implement feature flags in your service. But\nI can give you some advice:\n\n  * Choose an open source feature flags (opens in a new tab) service, like Featbit (opens in a new tab).\n  * Select the SDKs that support your service. For example if your team use .NET tech stacks to develop the service, you might consider using .NET Feature Flags (opens in a new tab) SDKs.\n  * Follow the documentation of the feature flags service, and implement the feature flags in your service.\n\n## Conclusion\n\nFeature flags can help you to increase the deployment frequency. It's not only\na technical solution, but also a cultural change. It's a good way to make the\ndelivery safer and faster.\n\nLast updated on April 15, 2024\n\noverview\n\n\u00a9 2024 FeatBit\n\n", "frontpage": false}
