{"aid": "39981271", "title": "How do you get a Spring Bean without Dependency Injection?", "url": "https://martinelli.ch/how-do-you-get-a-spring-bean-without-dependency-injection/", "domain": "martinelli.ch", "votes": 1, "user": "mooreds", "posted_at": "2024-04-09 16:45:08", "comments": 0, "source_title": "Spring Bean Access Without Dependency Injection", "source_text": "Spring Bean Access Without Dependency Injection\n\nSimon Martinelli\n\n# How do you get a Spring Bean without Dependency Injection?\n\nBy Simon Martinelli\n\n04.01.2024\n\nSometimes, you want to use a Spring Bean in a class that is not a Spring Bean,\nbut then dependency injection doesn\u2019t work. This article shows a way to get\naround that limitation. This article delves into a solution to circumvent this\nlimitation by introducing a method to access Spring Beans without relying on\ndependency injection.\n\n## Introducing ApplicationContextHolder\n\nThe Spring Framework provides an interface called\n\nApplicationContextAware\n\nApplicationContextAware. From the JavaDoc: \u201cInterface to be implemented by any\nobject that wishes to be notified of the\n\nApplicationContext\n\nApplicationContext that it runs in.\u201d. Sound precisely what we need. So, let\u2019s\ncreate an implementation of this interface:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\n@Component\n\npublic class ApplicationContextHolder implements ApplicationContextAware {\n\n@Override\n\npublic void setApplicationContext(ApplicationContext applicationContext)\nthrows BeansException {\n\n}\n\n}\n\n@Component public class ApplicationContextHolder implements\nApplicationContextAware { @Override public void\nsetApplicationContext(ApplicationContext applicationContext) throws\nBeansException { } }\n\n    \n    \n    @Component public class ApplicationContextHolder implements ApplicationContextAware { @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { } }\n\nFine, but what do we do with the\n\nApplicationContext\n\nApplicationContext passed to the\n\nsetApplicationContext\n\nsetApplicationContext method? We could store it in a static variable, and the\nadded methods get Spring Beans! Let\u2019s have a look at the final implementation:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\n@Component\n\npublic class ApplicationContextHolder implements ApplicationContextAware {\n\nprivate static ApplicationContext applicationContext;\n\npublic static <T> T getBean(Class<T> type) {\n\nreturn applicationContext.getBean(type);\n\n}\n\npublic static <T> T getBean(String name, Class<T> type) {\n\nreturn applicationContext.getBean(name, type);\n\n}\n\n@Override\n\npublic void setApplicationContext(ApplicationContext applicationContext)\nthrows BeansException {\n\nApplicationContextHolder.applicationContext = applicationContext;\n\n}\n\n}\n\n@Component public class ApplicationContextHolder implements\nApplicationContextAware { private static ApplicationContext\napplicationContext; public static <T> T getBean(Class<T> type) { return\napplicationContext.getBean(type); } public static <T> T getBean(String name,\nClass<T> type) { return applicationContext.getBean(name, type); } @Override\npublic void setApplicationContext(ApplicationContext applicationContext)\nthrows BeansException { ApplicationContextHolder.applicationContext =\napplicationContext; } }\n\n    \n    \n    @Component public class ApplicationContextHolder implements ApplicationContextAware { private static ApplicationContext applicationContext; public static <T> T getBean(Class<T> type) { return applicationContext.getBean(type); } public static <T> T getBean(String name, Class<T> type) { return applicationContext.getBean(name, type); } @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { ApplicationContextHolder.applicationContext = applicationContext; } }\n\nExcellent, now we have two static methods to access Spring Beans by type or by\nname! Let\u2019s see how we can use it. For example, we want to access the\napplicationTaskExecutor by name to run a task asynchronously:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nvar taskExecutor = getBean(\"applicationTaskExecutor\", TaskExecutor.class);\n\ntaskExecutor.execute(() -> {\n\n...\n\n});\n\nvar taskExecutor = getBean(\"applicationTaskExecutor\", TaskExecutor.class);\ntaskExecutor.execute(() -> { ... });\n\n    \n    \n    var taskExecutor = getBean(\"applicationTaskExecutor\", TaskExecutor.class); taskExecutor.execute(() -> { ... });\n\nOr we want to get a Bean by type:\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\nvar translationProvider =\nApplicationContextHolder.getBean(TranslationProvider.class);\n\ntranslationProvider.getTranslation(\"Offen\", getLocale());\n\nvar translationProvider =\nApplicationContextHolder.getBean(TranslationProvider.class);\ntranslationProvider.getTranslation(\"Offen\", getLocale());\n\n    \n    \n    var translationProvider = ApplicationContextHolder.getBean(TranslationProvider.class); translationProvider.getTranslation(\"Offen\", getLocale());\n\n## Cautions and Best Practices\n\nAfter publishing the article R\u00e9da Housni Alaoui sent me a message on Twitter\nexplaining that this approach can lead to problems in situations where you\nhave multiple ApplicationContexts, for example when you run tests. Spring Boot\nTest tries to cache the Application Context, but when you have different\nconfigurations or in certain other situations you will have more than one. I\ncreated a test project, and R\u00e9da helped me to reproduce the issue. You can see\nthe test failing in the branch \u201ccouple-a-and-b\u201d.\n\nTo overcome this problem, you can set the ApplicationContext in the\nApplicationContextHolder before the test runs. In the main branch, you\u2019ll find\nthe AbstractBaseTest that sets the ApplicationContext in the BeforeEach\nmethod. This way, we make sure that the ApplicationContextHolder uses the\nApplicationContext that is active during the test.\n\nPlain text\n\nCopy to clipboard\n\nOpen code in new window\n\nEnlighterJS 3 Syntax Highlighter\n\npublic abstract class AbstractBaseTest {\n\n@Autowired\n\nprotected ApplicationContext applicationContext;\n\n@Autowired\n\nprivate ApplicationContextHolder applicationContextHolder;\n\n@BeforeEach\n\nvoid setApplicationContext() {\n\napplicationContextHolder.setApplicationContext(applicationContext);\n\n}\n\n}\n\npublic abstract class AbstractBaseTest { @Autowired protected\nApplicationContext applicationContext; @Autowired private\nApplicationContextHolder applicationContextHolder; @BeforeEach void\nsetApplicationContext() {\napplicationContextHolder.setApplicationContext(applicationContext); } }\n\n    \n    \n    public abstract class AbstractBaseTest { @Autowired protected ApplicationContext applicationContext; @Autowired private ApplicationContextHolder applicationContextHolder; @BeforeEach void setApplicationContext() { applicationContextHolder.setApplicationContext(applicationContext); } }\n\n## Conclusion and Use Cases\n\nAs you can see, it\u2019s straightforward to create a helper class that holds the\nApplicationContext and provides methods to get Beans. But you have to be\ncareful when using it in tests where you could have multiple\nAppllicationContexts.\n\nIf you develop UIs, for example, with Vaadin, this is very handy because you\ndon\u2019t want to make every UI component a Spring Bean, and on the other side,\nyou don\u2019t want to pass references to Spring Beans to all UI components.\n\n## Get Expert Guidance on Spring Bean Access\n\nNeed help implementing Spring Bean access strategies for your unique project?\nContact me today.\n\n### Related Posts\n\n  * Durable Subscription with JMS and Spring Boot\n  * Testing Spring Boot JMS with ActiveMQ Artemis and Testcontainers\n  * Build Secure Web Apps with Vaadin & Spring Boot\n\n  * Author\n  * Recent Posts\n\nFollow Me\n\nSimon Martinelli\n\nSimon Martinelli is a Java Champion, Vaadin Champion, and Oracle ACE\nAssociate, and he writes and speak about architecture and software development\nwith Java. His favorite tools are Vaadin, jOOQ, Spring Boot, Apache Camel, and\nPostgreSQL.\n\nFollow Me\n\nLatest posts by Simon Martinelli (see all)\n\n  * Hibernate Schema-based Multi-Tenancy using StatementInspector - 08.01.2024\n  * How do you get a Spring Bean without Dependency Injection? - 04.01.2024\n  * 2023 \u2013 What a Year! - 27.12.2023\n\n#### Previous\n\nHibernate Schema-based Multi-Tenancy using StatementInspector\n\n#### Next\n\n2023 - What a Year!\n\n2022 All right reserved by Simon Martinelli\n\nWe use cookies on our website to give you the most relevant experience by\nremembering your preferences and repeat visits. By clicking \u201cAccept All\u201d, you\nconsent to the use of ALL the cookies. However, you may visit \"Cookie\nSettings\" to provide a controlled consent.\n\nCookie SettingsAccept All\n\nManage consent\n\n#### Privacy Overview\n\nThis website uses cookies to improve your experience while you navigate\nthrough the website. Out of these, the cookies that are categorized as\nnecessary are stored on your browser as they are essential for the working of\nbasic functionalities of the ...\n\nNecessary\n\nAlways Enabled\n\nNecessary cookies are absolutely essential for the website to function\nproperly. These cookies ensure basic functionalities and security features of\nthe website, anonymously.\n\nCookie| Duration| Description  \n---|---|---  \ncookielawinfo-checkbox-analytics| 11 months| This cookie is set by GDPR Cookie\nConsent plugin. The cookie is used to store the user consent for the cookies\nin the category \"Analytics\".  \ncookielawinfo-checkbox-functional| 11 months| The cookie is set by GDPR cookie\nconsent to record the user consent for the cookies in the category\n\"Functional\".  \ncookielawinfo-checkbox-necessary| 11 months| This cookie is set by GDPR Cookie\nConsent plugin. The cookies is used to store the user consent for the cookies\nin the category \"Necessary\".  \ncookielawinfo-checkbox-others| 11 months| This cookie is set by GDPR Cookie\nConsent plugin. The cookie is used to store the user consent for the cookies\nin the category \"Other.  \ncookielawinfo-checkbox-performance| 11 months| This cookie is set by GDPR\nCookie Consent plugin. The cookie is used to store the user consent for the\ncookies in the category \"Performance\".  \nviewed_cookie_policy| 11 months| The cookie is set by the GDPR Cookie Consent\nplugin and is used to store whether or not user has consented to the use of\ncookies. It does not store any personal data.  \n  \nFunctional\n\nFunctional cookies help to perform certain functionalities like sharing the\ncontent of the website on social media platforms, collect feedbacks, and other\nthird-party features.\n\nPerformance\n\nPerformance cookies are used to understand and analyze the key performance\nindexes of the website which helps in delivering a better user experience for\nthe visitors.\n\nAnalytics\n\nAnalytical cookies are used to understand how visitors interact with the\nwebsite. These cookies help provide information on metrics the number of\nvisitors, bounce rate, traffic source, etc.\n\nAdvertisement\n\nAdvertisement cookies are used to provide visitors with relevant ads and\nmarketing campaigns. These cookies track visitors across websites and collect\ninformation to provide customized ads.\n\nOthers\n\nOther uncategorized cookies are those that are being analyzed and have not\nbeen classified into a category as yet.\n\nSAVE & ACCEPT\n\n", "frontpage": false}
