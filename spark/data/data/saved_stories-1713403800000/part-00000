{"aid": "40069091", "title": "Types of Estimates", "url": "https://dan.turnerhallow.co.uk/types-of-estimates.html", "domain": "turnerhallow.co.uk", "votes": 1, "user": "kqr", "posted_at": "2024-04-17 19:27:51", "comments": 0, "source_title": "Types of estimates", "source_text": "Forkcasting -- Types of estimates\n\nForkcasting\n\nAs clear as a puddle of mud\n\n# Types of estimates\n\n2024-Apr-13\n\nThere's at least 4 \"types\" of estimates\n\nBottom line up-front, I think there are at least 4 types of estimate:\n\n  1. Delivery date\n  2. Cycle time\n  3. Dev-time\n  4. Relative\n\nI only intend to define these here, not advocate for any specific type.\n\n## Delivery date\n\nEstimates like \"we'll have it to you by 2024-Oct-01\" are delivery date\nestimates. They're pinned to a specific date in the calendar and most often\ngiven to customers and used for sequencing \"resources\" (i.e. people). That is,\nif a staff engineer is expected to finish project A by a given date, then\nthat's roughly when they can start work on project B.\n\nThese incorporate many sources of uncertainty, such as how long the work will\ntake, who will be available to work on it, what projects are ahead of it in\nthe queue, and so on.\n\nThis is closely related to the concept of \"lead time\", which is the duration\nbetween receiving the request and the customer getting the goods. This is\neffectively the lead time with a fixed start date, so I don't differentiate\nbetween the two.\n\n## Cycle time\n\nAn estimate like \"this will take 5 days from start to finish\" is a cycle time\nestimate. It's not pinned to a specific date in the calendar, and unlike lead\ntime it ignores any spent waiting for someone to start work on it. it does not\ncare that it'll take 2 devs to write it, 1 to review, and 1 to deploy it. Some\ntools offer this number directly as the duration between pulling a ticket into\nthe InProgress state and Done state.\n\nLike a delivery date estimate they incorporate sources of uncertainty, such as\ntime spent waiting for a reviewer or deployer to get to the task.\n\n## Dev-time\n\nDev-time is the first type of estimate that makes the cost of parallel work\nexplicit. This is the sum of the hours that we expect the devs to work on a\ngiven ticket. For example, if it takes 3 developers 5 hours each to complete a\nticket [1] , then the ticket \"cost\" 15 dev-hours.\n\nThis ignores both time waiting for the work to start and hand-off time between\ndevelopers. It's main sources of uncertainty are how much work a given\ndeveloper can \"actually\" do in one hour and it assumes some degree of\nfungibility between staff.\n\n## Relative\n\nHere, you might say that ticket A is twice the \"size\" of ticket B. There's\nsome idealised ticket with size \"1\" against which all others are measured.\nThis type of esimtate includes story points and task points. In some tellings,\nit also includes t-shirt sizes. I've heard folks say that these estimates\nshould include \"risk\" in the estimate.\n\nFor these types of estimates, there's uncertainty between the estimates\nthemselves; e.g. is task A twice the \"size\" of B, or is it only 1.5x the size\nwith some extra thrown in to account for \"risk\". Risk is also often not well\ndefined in these discussions. If you only use specific multiples (e.g.\nFibonacci numbers), then you introduce quantization error. Despite defining\nthese relative to an idealised task, team members usually develop private\ndefinitions that add to the overall uncertainty.\n\nDespite these uncertainties, most teams find they finish a predictable [2]\nnumber of story points per week [3].\n\n## Estimate confidence\n\nAll of the above estimates incorporate uncertainty but do not make their\nuncertainty explicit. For example, \"I'm 50% confident we can deliver to the\ncustomer by 2024-Oct-01\" is a different estimate to \"I'm 85% confident we can\ndeliver to the customer by 2024-Oct-01\". Personally, I would hesitate to give\neither estimate to a customer, but I'd prefer the later (assuming they cost\nthe same to produce.)\n\nThis speaks to calibration. An estimator is calibrated when their\nprobabilities consistently represent the future. That is, things with 50%\nconfidence happen roughly 50% of the time, 80% confidence 80% of the time, and\nso on.\n\nConfidence can easily change over time as developers learn more about the\nproblem or their processes. For example, the depth of the queue, a tasks'\nposition in the queue, and the queue order stability all affect a delivery\ndate estimate.\n\n## Moving between different estimate types\n\nWe can convert most of these estimates into one another, but we have to accept\nmodel error when we do.\n\nFor example, if we know a task's position in our queue, the average cycle\ntime, and the number of developers on the team, then we can create a delivery\ndate estimate. We may have much lower confidence in the delivery date\nestimate, but we get it for free.\n\nSimilarly, given a tasks' relative size we can create rough estimates for the\ndev-time or cycle time. Dev-time can be roughly turned into cycle time by\ndividing by the expected number of developers and the number of hours we think\na developer can work per day.\n\nAs mentioned, this introduces model errors. For example converting dev-time to\ncycle time as above assumes all of the developers work perfectly in parallel.\nIf you only need a very imprecise estimate, this may be preferable to\ninterrupting someone while they're working.\n\n## Why does this matter?\n\nAs a rule of thumb, having shared operational definitions helps a team\ncommunicate. If a project manager asks \"how long will this take?\", I answer \"3\ndays\", and I meant \"cycle time\" but they understood \"lead time\", then I'm\nprobably going to burn some customer trust when I don't deliver the good 3\ndays from now.\n\nSimilarly, if we use delivery dates to calculate return on invested capital,\nthat will inflate the apparent cost. There may be a significant amount of time\nworking on higher-value projects before starting on the given project. That'll\nthrow off decisions about what projects have the highest business value.\n\n## Conclusion\n\nThere are different types of estimates, each with different strengths and\nweaknesses. If you're having trouble with estimates, it's worth checking\nyou're all talkng about the same thing.\n\n## Footnotes\n\n[1]| And they all work for the full 5 hours  \n---|---  \n[2]| Here, I mean predictable in the same sense that we use in statistical\nprocess control: The measure shows only routine variation, so it will\nconsistently fall within the computed limits. Predicting more narrowly than\nthose limits is usually folly.  \n---|---  \n[3]| This is less remarkable than it first seems, since most teams also\ndeliver a predictable number of stories per week, so E[StoryPoints/week] =\nE[StoryPoints/Story] * E[Stories/Week] (i.e. they're sort-of measuring the\nsame thing.)  \n---|---  \n  \nDan Turner Licensed under CC BY-NC-SA 4.0\n\nRSS\n\n", "frontpage": false}
