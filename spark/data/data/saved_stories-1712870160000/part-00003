{"aid": "40003071", "title": "MLtraq: Track your AI experiments at hyperspeed [slides]", "url": "https://speakerdeck.com/micheda/mltraq-track-your-ai-experiments-at-hyperspeed", "domain": "speakerdeck.com", "votes": 2, "user": "micheda", "posted_at": "2024-04-11 15:13:55", "comments": 0, "source_title": "MLtraq: Track your AI experiments at hyperspeed", "source_text": "MLtraq: Track your AI experiments at hyperspeed - Speaker Deck\n\nUpgrade to Pro \u2014 share decks privately, control downloads, hide ads and more\n...\n\nSpeaker Deck\n\n#### MLtraq: Track your AI experiments at hyperspeed\n\nMichele Dallachiesa\n\nApril 11, 2024\n\nResearch\n\n1\n\n21\n\n# MLtraq: Track your AI experiments at hyperspeed\n\nSlides from my talk at Munich MLOps Community Meetup #7\n\nEvery second spent waiting for initializations and obscure delays hindering\nhigh-frequency logging, further limited by what you can track, an experiment\ndies. Wouldn't it be nice to start tracking in nearly zero time? What if we\ncould track more and faster, even handling arbitrarily large, complex Python\nobjects with ease?\n\nIn this talk, I will present the results of comparative benchmarks covering\nWeights & Biases, MLflow, FastTrackML, Neptune, Aim, Comet, and MLtraq. You\nwill learn their strengths and weaknesses, what makes them slow and fast, and\nwhat sets MLtraq apart, making it 100x faster and capable of handling tens of\nthousands of experiments.\n\nThe talk will be inspiring and valuable for anyone interested in AI/ML\nexperimentation and portable, safe serialization of Python objects.\n\n## Michele Dallachiesa\n\nApril 11, 2024\n\nTweet\n\n## Other Decks in Research\n\nSee All in Research\n\n\u52d5\u7269\u502b\u7406\u5b66\u3053\u3068\u306f\u3058\u3081:\u4eba\u9593\u4ee5\u5916\u306e\u52d5\u7269\u3068\u306e\u502b\u7406\u7684\u306a\u4ed8\u304d\u5408\u3044\u65b9\u3092\u8003\u3048\u308b\n\ntakeshit_m\n\n0\n\n260\n\n\u7b2c4\u56de\u30ca\u30ec\u30c3\u30b8\u30b0\u30e9\u30d5\u52c9\u5f37\u4f1a:ISWC2023\u8ad6\u6587\u8aad\u307f\u4f1a\n\nkg_wakate\n\n1\n\n190\n\nExperiments on ROP Attack with Various Instruction Set Architectures\n\nyumulab\n\n0\n\n320\n\nAccurate Method and Variable Tracking in Commit History\n\ntsantalis\n\n0\n\n220\n\nWeb\u30b9\u30b1\u30fc\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u5b9f\u7528\u7684\u306a\u30dd\u30a4\u30ba\u30cb\u30f3\u30b0\u624b\u6cd5 / Poisoning Web-Scale Training Datasets is\nPractical\n\nnttcom\n\n0\n\n100\n\nSchr\u00f6dinger Bridge\u554f\u984c\u306b\u57fa\u3065\u304f\u62e1\u6563\u751f\u6210\u30e2\u30c7\u30eb\u5b66\u7fd2\n\ntakeshi_koshizuka\n\n1\n\n550\n\nEquivalence of Geodesics and Importance Weighting from the Perspective of\nInformation Geometry\n\nmkimura\n\n0\n\n130\n\nAlexander Mielke Hellinger--Kantorovich (a.k.a. Wasserstein-Fisher-Rao) Spaces\nand Gradient Flows\n\njjzhu\n\n3\n\n170\n\n\u81ea\u5df1\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306b\u3088\u308b\u4e8b\u524d\u5b66\u7fd2(CVIM\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb)\n\nnaok615\n\n2\n\n1.3k\n\n\u97f3\u58f0\u51e6\u7406\u30c4\u30fc\u30eb\u30ad\u30c3\u30c8ESPnet\u306e\u73fe\u5728\u3068\u672a\u6765\n\nkanbayashi1125\n\n2\n\n510\n\n\u8ad6\u6587\u7d39\u4ecb DSRNet: Single Image Reflection Separation via Component Synergy (ICCV\n2023)\n\ntattaka\n\n0\n\n170\n\n10-ot-generic-bio.pdf\n\ngpeyre\n\n0\n\n120\n\n## Featured\n\nSee All Featured\n\nProduct Roadmaps are Hard\n\niamctodd\n\n43\n\n9.7k\n\nNavigating Team Friction\n\nlara\n\n177\n\n13k\n\nFontdeck: Realign not Redesign\n\npaulrobertlloyd\n\n75\n\n4.9k\n\nReactJS: Keep Simple. Everything can be a component!\n\npedronauck\n\n657\n\n120k\n\nFantastic passwords and where to find them - at NoRuKo\n\nphilnash\n\n35\n\n2.5k\n\nThe Straight Up \"How To Draw Better\" Workshop\n\ndenniskardys\n\n227\n\n130k\n\nSharpening the Axe: The Primacy of Toolmaking\n\nbcantrill\n\n15\n\n1.3k\n\nA Modern Web Designer's Workflow\n\nchriscoyier\n\n689\n\n190k\n\nBuilding a Scalable Design System with Sketch\n\nlauravandoore\n\n455\n\n32k\n\nRailsConf 2023\n\ntenderlove\n\n0\n\n520\n\nCode Reviewing Like a Champion\n\nmaltzj\n\n513\n\n39k\n\nHow STYLIGHT went responsive\n\nnonsquared\n\n92\n\n4.8k\n\n## Transcript\n\n  1. ### Michele Dallachiesa Data Products & AI Consulting michele.dallachiesa@sigforge.com MLtraq: Track\n\nyour AI experiments at hyperspeed\n\n  2. ### Scope of this talk https://mltraq.com/ benchmarks/speed/ You will learn: \u2022\n\nWhat is experiment tracking \u2022 What makes different frameworks fast and slow \u2022\nHow to select an experiment tracker for your projects\n\n  3. ### Experimentation \u2022 Definition: \u201cThe process of systematically changing and testing\n\ndifferent input values in an algorithm to observe their impact on performance,\nbehavior, or outcomes.\u201d\n\n  4. ### Experiment tracking \u2022 Definition: \u201cThe process of recording the inputs,\n\noutputs, and performance metrics of an experiment.\u201d \u2022 Examples: Code,\nnotebooks, scripts, environment setup, parameters, configurations, evaluation\nmetrics, model weights, system stats, inputs, outputs, accuracy, prompts, cost\nmetadata, ...\n\n  5. ### Applications of experiment tracking \u2022 Explore and understand the impact\n\non performance of different algorithms, parameters, and datasets \u2022 Automation\nand observability: live monitoring of long-term experiments, reproducibility,\ndocumentation, collaboration, ...\n\n  6. ### Modelling experiments \u2022 An experiment is a collection of runs\n\n\u2022 A run is an instantiation of the experiment with a fixed set of inputs\n\n  7. ### Why tracking speed matters: Initialization (1/3) \u2022 Slow imports negatively\n\nimpact development, CI/CD tests, and debugging speed \u2022 High run initialization\ntimes impact on our ability to experiment with hundreds of thousands of runs\nWouldn't it be nice to start tracking almost instantly?\n\n  8. ### Why tracking speed matters: High frequency (2/3) \u2022 At times,\n\nit's necessary to record metrics that occur frequently (loss, reward, state,\n...) \u2022 Workarounds to handle too much information come at a\ncomplexity/completeness/accuracy cost: threading, downsampling, summarization,\nand histograms What if we could avoid these limitations altogether?\n\n  9. ### Why tracking speed matters: Large, complex objects (3/3) \u2022 Python\n\ndata structures (dictionaries, lists, tuples), NumPy arrays, data frames,\ndatasets, model weights, timeseries, forecasts, media files such as images,\naudio recordings, and videos, ... \u2022 Existing solutions are primitive and slow,\nusing tech (JSON, uuencoding) from 25-40 years ago What if we could track more\nwith less constraints?\n\n  10. ### \u2022 A new open-source experiment tracker designed to work with\n\nany SQL database, fast and interoperable \u2022 Serialization powered by native SQL\ndatabase types, Numpy, PyArrow, and safe Python pickles \u2022 Funding: You can\nstar the project on GitHub and/or hire me to make your experiments run faster\n\n  11. ### Tracking an experiment\n\n  12. ### Benchmarking experiment tracking frameworks Frameworks \u2022 Weights & Biases (0.16.3)\n\n\u2022 MLflow (2.11.0) \u2022 FastTrackML (0.5.0b2) \u2022 Neptune (1.9.1) \u2022 Aim (3.18.1) \u2022\nComet (3.38.1) \u2022 MLtraq (0.0.125) Latest update: 2024.03.06 Varying \u2022 Value\ntype: float, ndarray \u2022 Count of values \u2022 Count of runs \u2022 Array length How \u2022 As\nMLtraq experiments! \u2022 10 independent runs \u2022 Local storage\n\n  13. ### What takes most of the time? \u2022 W&B: threading, IPC\n\n\u2022 MLflow: Alembic migration \u2022 Aim: threading, RocksDB \u2022 Comet: threading \u2022\nFastTrackML: fast but requires running server \u2022 MLtraq: SQLite operations \u2022\nNeptune: direct writes to FS How much time to track 1 run and 1 value? Start\nup time Neptune vs W&B: 400x\n\n  14. ### MLflow: Alembic migration\n\n  15. ### \u2022 Entity-attribute-value database model with no batching kills MLflow/FastTrackML performance\n\nHow much time to track 1 run and 100-10K values? 0.85 \u201caccuracy\u201d Experiment\nID/name Source: https://community.intersystems.com/post/entity-attribute-\nvalue-model-relational-databases-should-globals-be-emulated-tables-part-1 High\nfrequency tracking MLtraq vs MLflow: 355x\n\n  16. ### \u2022 Threading/IPC expensive for W&B How much time to track\n\n10 runs and 1 value? MLtraq vs W&B: 1563x\n\n  17. ### How much time to track 1K runs and 1K values?\n\nWhat makes MLtraq faster \u2022 SQLite vs filesystem \u2022 Safe pickling vs JSON MLtraq\nvs Neptune: 23x\n\n  18. ### Source: https://www.sqlite.org/fasterthanfs.html\n\n  19. ### Python pickles harmless if limited to safe opcodes Source: https://infosecwriteups.com/vulnerabilities-in-python-serialization-pickle-d2385de642f6\n\nand https://www.scaler.com/topics/pickle-python/\n\n  20. ### How much time to track 10^6 float64 values (8MB)? \u2022\n\nMLtraq: Pickle, numpy.lib.format \u2022 W&B: wandb.Table, JSON format \u2022 Neptune:\nJSON, uuencoded binary blob \u2022 MLflow: mlflow.log_text, binary blob \u2022\nFastTrackML: c.log_text, binary blob \u2022 Aim: run.track, binary blob \u2022 Comet:\nrun.log_text, binary blob binary blob = weak semantics! MLtraq vs W&B: 113x\nTracking large objects\n\n  21. ### \u2022 Write speed of np.zeros(size, dtype=np.int8) \u2022 Variants: MLtraq-fs vs\n\nMLtraq-db-mem vs MLtraq-db-fs How much time to track up to 10^9 int8 values\n(1GB)?\n\n  22. ### \u2022 Trade-offs: threading/IPC, data storage design, batching vs streaming \u2022\n\nUuencoding and JSON-like formats are slow with poor semantics, the future is\nnative types with PyArrow \u2022 Beyond \u201ctracking speed\u201d: backward compatibility,\ncloud, backend, third-party integrations, reporting, complete model lifecycle\nmanagement, ... \u2022 Disclaimer: lots of simplifications in these slides, check\nout full article and notebooks for details! Conclusion\n\n  23. ### Thank You! Michele Dallachiesa Data Products & AI Consulting michele.dallachiesa@sigforge.com\n\nSpeakerDeck\n\nCopyright \u00a9 2024 Speaker Deck, LLC.\n\nAll slide content and descriptions are owned by their creators.\n\n  * About\n  * Terms\n  * Privacy\n  * DMCA\n  * Accessibility Statement\n\n", "frontpage": false}
