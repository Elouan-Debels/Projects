{"aid": "40042318", "title": "Text Adventure vs. MUD vs. Roguelike vs. Dwarf Fortress (2013)", "url": "http://inventwithpython.com/blog/2013/06/05/text-adventure-vs-mud-vs-roguelike-vs-dwarf-fortress/", "domain": "inventwithpython.com", "votes": 1, "user": "raytopia", "posted_at": "2024-04-15 16:01:00", "comments": 0, "source_title": "Text Adventure vs. MUD vs. Roguelike vs. Dwarf Fortress", "source_text": "Text Adventure vs. MUD vs. Roguelike vs. Dwarf Fortress - The Invent with\nPython Blog\n\n# The Invent with Python Blog\n\nWritings from the author of Automate the Boring Stuff.\n\n# Text Adventure vs. MUD vs. Roguelike vs. Dwarf Fortress\n\nWed 05 June 2013 Al Sweigart\n\nA text-style game is a common project for beginner programmers. These can be\nfun to do, but also require spending time up-front to design it is worthwhile.\nBefore you start designing your own game, look at the design decisions of a\nfew different text-style game genres.\n\n## Text Adventures\n\nAlso known as interactive fiction or IF, a text adventure game were the first\nincarnations of these types of games. They are single-player, turn-based (the\ngame paused while the player typed in commands), and presented the user with\nan English text description of each room the player was in. The player was\noften a single character with an inventory of items picked up in the rooms.\nCommands were simple English phrases like \"open door\" or \"get lamp\".\n\nWest of House You are standing in an open field west of a white house, with a\nboarded front door. There is a small mailbox here. > open mailbox\n\nWhile the player could die, often the player did not have stats such as hit\npoints, money, or experience points. Text adventures are puzzle-based (such as\nfinding different rooms or figuring out which items to use where), rather than\nbased on progressing in stats or levels.\n\nText adventure games are more than just \"Choose Your Own Adventure\" programs,\nbecause they take place in open sandbox worlds that the player can freely\nexplore.\n\nThese are the simplest types of games to make. In fact, you don't even need a\nreal programming language to make one of these games. There is software\nspecifically for creating text adventure games.\n\nThe 1993 hit Myst is an example of a graphical version of this genre. These\ngames became more sophisticated with the graphic adventure game genre (or\n\"point-and-click adventure games\"), the most notable coming from LucasArts.\nSpecialized software for making graphic adventure games also exists, chief of\nwhich is Adventure Game Studio.\n\n  * Single-player\n  * Turn-based\n  * Player directly controls a single character\n  * English text descriptions (not ASCII art)\n  * English phrases for commands\n  * Inventory\n  * No stats or levels\n  * Puzzle-based and role-playing story elements\n\n## Multi-User Dungeons\n\nA MUD (also sometimes called a Multi-User Dimension) was a multiplayer form of\ntext adventures that incorporated hack-and-slash combat. Players connected to\na server with telnet client software. Although MUDs still had English text\ndescriptions for rooms and accepted English phrase commands, the games were in\nreal-time: things could happen while you were typing in commands. Players\ncontrolled a single character that moved around an open sandbox world,\nfighting monsters and leveling up. Players could also treat the game as a\nlarge chat room to talk to each other.\n\nBecause many things could be happening at once, most MUDs made use of colorful\ntext to make the descriptions easier to read (for example, room descriptions\nin gray, items in the room in white, chat messages in red, etc.)\n\nMUDs still exist today and are often free to play. The Mud Connector is site\nwith a large list of still-active MUD servers.\n\nA Cage [Exits: north south up] There is a wimpy goblin here. kill goblin Your\npierce hits the wimpy goblin. The wimpy goblin is slain by a final deadly\nstab. You receive 170 experience points. You hear the wimpy goblin's death\ncry. You get a metal helmet from the perforated corpse of the wimpy goblin.\n\nMUDs are a bit more difficult to program since they require network\nprogramming (and all the concurrency issues that come with that). Although it\nis entirely possible to create a single-player, turn-based MUD (which is\nessentially a hack-and-slash text adventure).\n\nModern MMORPGs such as World of Warcraft are the graphical equivalents of\nMUDs.\n\n  * Multiplayer\n  * Real-time\n  * Player directly controls a single character\n  * Colorful text\n  * English text descriptions (not ASCII art)\n  * English phrases for commands\n  * Centered around advancing stats/levels and acquiring money/items\n\n## Roguelikes\n\nRoguelikes get their name from the UNIX game Rogue. Roguelikes dropped the\nEnglish-based commands and descriptions for rooms. Instead, ASCII art (in\nwhich text characters represent objects and are used for simple line drawing)\ntook their place. Commands were done using single-key presses (hotkeys) or\nmenus to do things such as moving the character around the room.\n\nMost roguelikes are single-player and turn-based, but do not necessarily have\nto be. The player still controlled a single character (often represented by a\n@ symbol). Colorful text was used to differentiate between different types of\nthings displayed on the map.\n\n\\------ - Wall |....| ############ # Unlit hallway |....| # # . Lit area |.$..+######## # $ Some quantity of gold |....| # ---+--- + A door ------ # |.....| | Wall # |.!...| ! A magic potion # |.....| # |..@..| @ The adventurer ---- # |.....| |..| #######+..D..| D A red dragon |<.+### # |.....| < Stairs to a higher level ---- # # |.?...| ? A magic scroll ###### -------\n\nGameplay was centered around hack-and-slash and progressing in levels and\nitems by fighting monsters in dungeons. Since the rooms were not created with\nEnglish descriptions but rather ASCII art, roguelikes had procedurally-\ngenerated levels that were unique (although formulaic) each time the player\nstarted a game.\n\nBecause there is an actual geometry and space for the map (as opposed to a\nMUD's English description), \"line of sight\" calculations become a factor for\nwhat the player and dungeon monsters can perceive. Rather than display the\nfull map, a \"fog of war\" might shroud unexplored areas.\n\nOther aspects of roguelikes: \"pets\" that would follow you and attack nearby\nmonsters, permanent-death, and magical items that are initially unidentified.\n(These also commonly appear in MUDs.)\n\nBecause the text characters are easily interchangeable with simple tile\ngraphics, graphical roguelikes are also available. The Diablo games are\ngraphical, real-time modern equivalents of roguelikes.\n\n  * Single-player\n  * Real-time\n  * Player directly controls a single character\n  * ASCII art\n  * Hotkeys/menus for input\n  * Centered around advancing stats/levels and acquiring money/items\n\n## Dwarf Fortress\n\nDwarf Fortress is a single game (rather than a genre) first released in 2006\nprogrammed solely by Tarn Adam. It uses procedural generation to create an\nentire game world, along with history, lore, and natural resources. It\nextensively uses ASCII art and colors and looks like a roguelike except with a\nmuch more extensive system of menus and screens.\n\nThe player controls a entire tribe of semi-autonomous dwarves (each with a\nunique name, personality traits, skills, and stats) as they build a fortress\nand try to survive. The learning curve is incredibly steep for this game due\nto the complexity of its simulation. It is a single-player game that runs in\nreal-time.\n\nDwarf Fortress is a monstrously complicated game, so programming something\nlike it would not be too difficult so much as the large amount of design\nneeded.\n\n  * Single-player\n  * Real-time (but can be paused since it is single-player)\n  * Player indirectly controls several autonomous dwarves\n  * ASCII art\n  * Hotkeys and menus for input\n  * City-building and simulation genre\n\n## Creating Your Own Text-Style Game\n\nThe largest advantage to creating a text-style game is that you do not need to\nbe a good artist or spend time acquiring graphic assets for your game.\nHowever, these games still require design work to be done beforehand, along\nwith decisions about how the gameplay should work.\n\nWhen making your own game, consider between the following design decisions:\n\n  1. Single-player or multiplayer. Single-player is easier but multiplayer is more fun and social. Multiplayer requires learning network programming.\n  2. Turn-based or real-time. Turn-based is easier, but real-time is often more fun. Single-player games can be turn-based or real-time (with pausing and controllable time-speed) but multiplayer games almost always must be real-time (adding to their programming difficulty).\n  3. English descriptions or ASCII art. Writing English descriptions is easy, but it requires a lot of work to create an expansive game world. Using ASCII art to draw out worlds is also easy-but-a-lot-of-work, however you can use procedural generation algorithms to automatically create large, unique (but formulaic and often repetitive) worlds, monsters, and characters.\n  4. English commands or hotkeys/menus. Typing an English command like \"get lamp\" or \"say 'Hello' to elf\" offers a richer way to engage with the game, although it can also be opaque at times. (And nothing is more frustrating than constantly reading, \"I did not understand that command.\") While hotkeys and menus are more limited, they are also more obvious. Games with story and role-playing are often better suited for English commands, while hack-and-slash games use hotkeys and menus.\n  5. Story-base or hack-and-slash. Story-based games require more design work, and players may or may not like the story and writing. Hack-and-slash games are simple, but can become repetitive.\n  6. Player directly or indirectly controls one or multiple characters. The player can either directly control the movements of one or more characters, or indirectly give instructions. Indirect control requires more complicated AI for the characters but makes it easy to control multiple characters by issuing orders and letting the character carry them out.\n  7. Monochrome or colorful text. Colorful text is almost always better, but might require the use of a curses library to program this.\n  8. Puzzles or stats-progression Similar to story-versus-hack-and-slash, puzzles require more design which the players may or may not end up liking. Stats-progression games where the player acquires better weapons or advances in levels can be fun but also repetitive.\n\nGame design is all about decisions and trade-offs, but knowing what these\nchoices are gives a hobbyist programmer more insight as to what's been done,\nand what can be possible.\n\nLearn to program for free with my books for beginners:\n\nSign up for my \"Automate the Boring Stuff with Python\" online course with this\ndiscount link.\n\nEmail | Mastodon | Twitter | Twitch | YouTube | GitHub | Blog | Patreon | LinkedIn | Personal Site\n\n", "frontpage": false}
