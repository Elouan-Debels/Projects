{"aid": "40002259", "title": "Query Handling as a Complex Optimization Problem", "url": "https://www.postgresql.org/docs/current/geqo-intro.html", "domain": "postgresql.org", "votes": 2, "user": "sz4kerto", "posted_at": "2024-04-11 14:01:35", "comments": 0, "source_title": "62.1. Query Handling as a Complex Optimization Problem", "source_text": "PostgreSQL: Documentation: 16: 62.1. Query Handling as a Complex Optimization\nProblem\n\n8th February 2024: PostgreSQL 16.2, 15.6, 14.11, 13.14, and 12.18 Released!\n\nDocumentation \u2192 PostgreSQL 16\n\nSupported Versions: Current (16) / 15 / 14 / 13 / 12\n\nDevelopment Versions: devel\n\nUnsupported versions: 11 / 10 / 9.6 / 9.5 / 9.4 / 9.3 / 9.2 / 9.1 / 9.0 / 8.4\n/ 8.3 / 8.2\n\n62.1. Query Handling as a Complex Optimization Problem  \n---  \nPrev| Up| Chapter 62. Genetic Query Optimizer| Home| Next  \n  \n## 62.1. Query Handling as a Complex Optimization Problem #\n\nAmong all relational operators the most difficult one to process and optimize\nis the join. The number of possible query plans grows exponentially with the\nnumber of joins in the query. Further optimization effort is caused by the\nsupport of a variety of join methods (e.g., nested loop, hash join, merge join\nin PostgreSQL) to process individual joins and a diversity of indexes (e.g.,\nB-tree, hash, GiST and GIN in PostgreSQL) as access paths for relations.\n\nThe normal PostgreSQL query optimizer performs a near-exhaustive search over\nthe space of alternative strategies. This algorithm, first introduced in IBM's\nSystem R database, produces a near-optimal join order, but can take an\nenormous amount of time and memory space when the number of joins in the query\ngrows large. This makes the ordinary PostgreSQL query optimizer inappropriate\nfor queries that join a large number of tables.\n\nThe Institute of Automatic Control at the University of Mining and Technology,\nin Freiberg, Germany, encountered some problems when it wanted to use\nPostgreSQL as the backend for a decision support knowledge based system for\nthe maintenance of an electrical power grid. The DBMS needed to handle large\njoin queries for the inference machine of the knowledge based system. The\nnumber of joins in these queries made using the normal query optimizer\ninfeasible.\n\nIn the following we describe the implementation of a genetic algorithm to\nsolve the join ordering problem in a manner that is efficient for queries\ninvolving large numbers of joins.\n\nPrev| Up| Next  \n---|---|---  \nChapter 62. Genetic Query Optimizer| Home| 62.2. Genetic Algorithms  \n  \n## Submit correction\n\nIf you see anything in the documentation that is not correct, does not match\nyour experience with the particular feature or requires further clarification,\nplease use this form to report a documentation issue.\n\nPrivacy Policy | Code of Conduct | About PostgreSQL | Contact\n\nCopyright \u00a9 1996-2024 The PostgreSQL Global Development Group\n\n", "frontpage": false}
