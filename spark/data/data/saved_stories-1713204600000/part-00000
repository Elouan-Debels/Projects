{"aid": "40039461", "title": "License Compatibility Verification for Open-Source Software", "url": "https://morningcoffee.io/steps-we-took-to-automate-license-compatibility-verification.html", "domain": "morningcoffee.io", "votes": 1, "user": "shiroyasha", "posted_at": "2024-04-15 12:08:07", "comments": 0, "source_title": "Steps We Took to Automate License Compatibility Verification", "source_text": "Steps We Took to Automate License Compatibility Verification \u2014 by Igor\n\u0160ar\u010devi\u0107\n\nYou are reading Morning Coffee, a blog about software engineering written by\nIgor \u0160ar\u010devi\u0107. Have a nice day!\n\n# Steps We Took to Automate License Compatibility Verification\n\nIgor wrote this in April 2024\n\nWe are actively developing Operately, an open-source software licensed under\nApache 2.0. As such, we need to carefully consider whether our dependencies\u2019\nlicenses are compatible with ours. Starting to build features based on\nfunctionality from a non-compatible license, only to realize this too late,\ncould lead to wasted time and energy in rewriting those features.\n\nAs we are a small team, my attention is intensely focused on building and\nrefining the core features of Operately. Whenever possible, I take\nopportunities to automate tasks that can save significant time in the coming\nmonths. One question arises: can license compatibility checks be automated to\na reasonable degree within a day\u2019s work, with a return on the time invested\nover the next few months? I implemented such a system a few months ago at\nOperately. The return on investment has been decidedly positive, and on\nseveral occasions, it has prevented me from proceeding with features based on\nan incompatible AGPL license\u2014a scenario that could have cost me weeks or even\na full month of work if not caught early.\n\nMy requirements for a license compatibility checking system are as follows:\n\n  1. Integration into the CI Build & Test Phase: The system should be integrated into every continuous integration (CI) run. Whenever someone pushes code or opens a pull request, the system must provide a clear YES/NO answer regarding license compatibility. I prefer this real-time check over asynchronous systems that only notify of issues after code submission.\n\n  2. Comprehensive Dependency Testing: The solution must be capable of testing not only direct dependencies but also their nested dependencies recursively. It is crucial that it supports Elixir libraries and NPM packages, given that Operately is developed with a combination of Elixir and React. While Docker build compatibility would be beneficial, it is not essential.\n\n  3. Open-Source: The solution should be open-source. We are committed to supporting and utilizing open-source solutions, aligning with our principles and contributing back to the community.\n\nPivotal\u2019s License Finder is an excellent solution that meets most of our\nneeds. It is a Ruby-based CLI tool that can be installed in our repository and\nintegrated into our continuous integration build process. It is compatible\nwith Elixir Mix and NPM, which are essential for Operately, given our use of\nElixir and React. Additionally, it supports many other programming languages\nand build systems, offering flexibility should we decide to incorporate other\ntechnologies into Operately in the future.\n\nThe initial setup of the License Finder can be complex as it involves listing\nall the dependencies in your projects and requiring approval for each\ndiscovered license. Here\u2019s the strategy I recommend:\n\n  1. Approve MIT and BSD Licenses: These licenses are well-established, clearly written, and have judicial precedence confirming their compatibility with the Apache 2.0 license. Approving these is straightforward.\n\n  2. Assess Other Open Source Licenses: Navigating other open-source licenses can be more challenging. OpenSource.org lists at least 10 pages of recognized open-source licenses. Some, like GPL3 and AGPL, are not compatible with Apache 2.0 and are considered restrictive or even parasitic. Others, such as Unlicense or WTFPL, lack clear legal status and are potentially problematic. Since I\u2019m not a lawyer, we have decided not to use such licenses.\n\n  3. Handle Unknown Licenses: License Finder sometimes cannot identify a license for a dependency, like with TipTap used for rich text editing. In these cases, License Finder allows for the manual approval of packages. It requires you to specify your identity, the basis of your authorization, and the reason for approving the use of the license.\n\n  4. Deal with License-Less Dependencies: Many public repositories on GitHub are intended to be open-source but lack a clear license, making their use legally risky. I recommend removing these dependencies or contacting the contributors to obtain permission to use their software.\n\n  5. Automate the Process: Once you have approved all licenses, you can automate the process by running License Finder in CI. It will check all dependencies and provide a report on the licenses used. If a new dependency is added, License Finder will notify you of the new license, allowing you to approve or reject it.\n\nOnce the setup and initial license triage are completed, this system requires\nalmost no maintenance. It will continuously check every new dependency and\nevery update to your existing dependencies in the background.\n\nA note of warning: While this system is great at detecting most license\nincompatibilities, it is not infallible. I recommend a periodic manual reviews\nof all your dependencies, particularly for infrastructure software that this\nsolution does not cover.\n\nBy investing a day in setting up the License Finder, I have saved myself weeks\nof potential rework and legal headaches. I highly recommend this system to\nanyone working on open-source projects, especially those with a small team and\nlimited resources. It is a small investment that can prevent significant\nheadaches down the road.\n\nInvesting time and energy into automation can yield long-term benefits, but\nthere is a risk of automating too much too early. For instance, for an early\nstartup like Operately, it makes sense to automate processes that can provide\npositive outcomes within the upcoming quarter and can be completed in under a\nday. However, it would be unwise to spend several weeks on automation efforts\nthat do not promise returns in the foreseeable future.\n\nFinally, if you want to look at the specifics of how we implemented this\ncheck, start from here: Operately Makefile.\n\n\u2748\n\nFollow me on Twitter and LinkedIn. Copyright \u00a92014-2024 Igor \u0160ar\u010devi\u0107. All\nrights reserved.\n\nEnjoy the rest of your day!\n\n", "frontpage": false}
