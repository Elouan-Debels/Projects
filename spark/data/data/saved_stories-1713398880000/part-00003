{"aid": "40068187", "title": "How Antithesis Finds Bugs", "url": "https://antithesis.com/blog/sdtalk/", "domain": "antithesis.com", "votes": 29, "user": "wwilson", "posted_at": "2024-04-17 18:07:01", "comments": 6, "source_title": "How Antithesis finds bugs (with help from the Super Mario Bros.)", "source_text": "How Antithesis finds bugs (with help from the Super Mario Bros.)\n\nWhat is Antithesis? How we\u2019re different How it works See an example\n\nProblems we solve Case studies Working with Antithesis\n\nBackstory Leadership Careers Brand\n\nPricing Docs Blog\n\nLet's talk\n\nWill Wilson\n\nCEO\n\n# How Antithesis finds bugs (with help from the Super Mario Bros.)\n\nApril 17, 2024\n\nA year and a half ago, our friends at TigerBeetle invited me to give a sneak\npreview of Antithesis at Systems Distributed. This talk was recorded, but\nnever published (since we were in stealth at the time).\n\nWe\u2019re publishing it now because it answers one of the most common questions we\nget: how exactly does Antithesis explore the state spaces of complex systems,\nand how does it find bugs so quickly? It also explains something Alex alluded\nto in his post: our deterministic hypervisor isn\u2019t just about getting perfect\nreproducibility of the bugs we find, it also helps us find the bugs in the\nfirst place.\n\nAnd it explains all of this using everybody\u2019s favorite Italian plumber. Check\nit out:\n\nAs we announced before, our platform has been playing and beating Nintendo\ngames for many years. Hopefully you now have some idea of why we use these\nprograms for our bug-finding research. Far from being simple toy problems,\nthey\u2019re actually strictly harder to explore than \u201creal\u201d software in several\nimportant ways.\n\nIn the talk above I skipped to the end of the Super Mario Brothers solution\nthat our platform autonomously discovered, but we\u2019ve embedded the full video\nbelow (sped up so you can enjoy the whole thing). Antithesis can find this\nsolution in about forty-five minutes on a 2018-era workstation CPU. The only\nhints our platform received were the locations in memory that hold Mario\u2019s X\nand Y coordinates in a level, and which level he\u2019s on.\n\nAlong the way, we can draw heatmaps of where Antithesis spends most of its\ntime in the game. Since clipping through a wall is a relatively rare event,\nthese heatmaps end up visibly reproducing some very recognizable level\noutlines:\n\nAnd here we are (sped up) playing a Kaizo ROM hack with the exact same\nconfiguration \u2013 zero tweaking, zero hyperparameter tuning, and zero iteration\non the platform. This happened literally the first time we turned the system\non with the new levels. Notice that we actually get stuck at the end, but we\ndo play the game pretty well (and we find a bug!).\n\nFinally, the answer to the question I\u2019m sure you\u2019ve all been wondering about\nthis whole time! Does Antithesis make it to the Minus World? You better\nbelieve it does:\n\nSuper Mario Bros. is a simple game, but its state space is inconceivably vast.\nAs far as we know, we're the first autonomous system to explore that state\nspace efficiently enough to beat the game (albeit with one or two hints).\n\nThat same capability for efficient state space exploration is what enables us\nto find bugs and deliver value to our customers. If you're interested in\nlearning whether Antithesis can improve your software quality or development\nvelocity, contact us!\n\n\u00a9 Antithesis Operations LLC Privacy policy Terms of use Brand\n\n", "frontpage": true}
