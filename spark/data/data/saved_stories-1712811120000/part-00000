{"aid": "39996504", "title": "Do You Need IPv4 Anymore?", "url": "https://blog.daknob.net/do-you-really-need-ipv4-anymore/", "domain": "daknob.net", "votes": 12, "user": "DanAtC", "posted_at": "2024-04-10 22:49:46", "comments": 3, "source_title": "Do you really need IPv4 anymore?", "source_text": "Do you really need IPv4 anymore?\n\n# Do you really need IPv4 anymore?\n\n######\n\nApril 9, 2024\n\nSetting up and maintaining access networks today requires double the effort\ndue to the parallel coexistence of IPv6 and IPv4. Dual-stack has network\nengineers and sysadmins do twice the amount of work, so there must be a good\nreason for it, right?\n\nThe answer is \u201cprobably not\u201d! The IPv4 network is not really needed, with the\nexception of LANs with devices that do not support IPv6 after almost 30 years.\nAnd even there, solutions can minimize the impact of that considerably.\n\nWe\u2019ll go over the current state of the art for removing IPv4 networking from\nthe access. How it can happen, what it takes, and how to deal with most\nproblems during such a transition.\n\nFirst of all, let\u2019s start with stating the obvious: most devices will have to\ntalk to legacy services. This post will not argue against this, despite\nexcuses for this decreasing.\n\nLuckily, IPv6-only devices can still talk to IPv4-only ones, and this is\ngetting easier than ever before. But how?\n\n## NAT64\n\nBecause IPv6 has just shockingly more addresses available for use than its\nlegacy counterpart, we can map every single IPv4 address in the world into a\ntiny fraction of a single IPv6 subnet. We can have 1.1.1.1 be mapped to\n2a0d:3dc0::1.1.1.1, and 8.8.8.8 be mapped to 2a0d:3dc0::8.8.8.8, etc.\n\nWhat we achieved with that is that a device with an IPv6 address, and no IPv4\nwhatsoever, can still send packets to legacy hosts. It just needs to send this\nto a different address than before.\n\nBut how will this packet get to the intended destination?\n\nWe need a device that has both IPv6 and IPv4 that will make this translation\nfor us. This device can simply be the local router, or even live across the\nInternet. What it has to do is easy:\n\nFor incoming IPv6 packets to this special translation prefix, create an IPv4\npacket whose destination is the one encoded in the IPv6 destination. For the\nsource address, use one of your own addresses.\n\nFor incoming IPv4 packets to these special IPv4 NAT addresses, look up who\nmade it, and then convert it to IPv6, and send it back to them.\n\nThis is identical to how NAT works in the IPv4 world, there\u2019s no difference\nwhatsoever, with the exception of the inter-protocol conversion. If you are\ndoing NAT for IPv4 right now, you\u2019re not losing anything with this method.\nEverything still works the same way, including port forwarding.\n\nBut how do you know this magic prefix where you can send packets to it, and\nthey will magically turn into IPv4 packets?\n\nThe quick answer is that there\u2019s a special prefix assigned to this exact\npurpose, 64:ff9b::/96. But this would require devices to know it, and it\u2019s not\nguaranteed to work, and it can be a bit tricky. Some devices will try to see\nif the conversion happens, and use it, but it\u2019s not the best way. There\u2019s\nsomething better:\n\n## DNS64\n\nIt\u2019s a clever hack in the DNS. You are using a special DNS resolver that does\nthe following: if you receive a question about a non-A (IPv4) DNS record, then\nrespond normally. If someone is asking about the address of a domain name that\nhas AAAA (IPv6) records, just give it to them, and since they have IPv6,\nthey\u2019ll connect just fine. If however you get asked about an A record, then\n\u201clie\u201d to them. Tell them that the address of one.one.one.one is not 1.1.1.1,\nbut it\u2019s instead an AAAA record of 64:ff9b::1.1.1.1.\n\nWhat we achieve now is the following:\n\nIf I connect to daknob.net and it has IPv6, I\u2019ll be fine.\n\nIf I connect to github.com that does not have IPv6, I\u2019ll be told that it has,\nand I just need to reach it at 64:ff9b::A.B.C.D. My device will send packets\nto that address, and NAT64 that we saw earlier will magically convert them\ninto IPv4 packets.\n\nEvery connection that is established now to any domain name will work like\nmagic. But what about hard-coded IPv4 addresses? If my computer has no IPv4,\nand I ping or ssh e.g. 8.8.8.8, I will get an error message, and it won\u2019t\nwork. Why? Because I never asked the smart DNS64 server, I attempted to\nconnect directly to an IP address, and this is not fine.\n\nWhat can we do about this?\n\n## CLAT\n\nSince a lot of mobile networks (5G, 4G, etc.) in the world are IPv6-only, and\nhave no IPv4, there\u2019s luckily a solution for this already. It\u2019s baked into\ndevices such as iPhones, Androids, and Macs, and it\u2019s part of their operating\nsystem. The only difference is that they enable it on WiFi too, instead of\njust on the data connection.\n\nWhen this mechanism, called CLAT, is enabled, the devices will assign an IPv4\naddress to a local interface, usually 192.0.0.2, and anything sent to this\nIPv4 address will go through the operating system\u2019s IPv4->IPv6 translation.\n\nAlthough this is not a real IP address, and it\u2019s not assigned into a real\nphysical interface, everything still works fine. If there\u2019s a packet going to\n8.8.8.8 without using DNS, the application will deliver it to the OS, which is\nlying and telling it IPv4 exists, and it will convert this into an IPv6\npacket, and send it over IPv6 behind the scenes.\n\nThis is great: all applications, unmodified, even those that reach out to IPv4\nhosts directly, without DNS, will work just fine. All of the legacy traffic\nwill be carried over IPv6, and they don\u2019t even have to know what IPv6 is!\n\nBut when is this \u201cCLAT\u201d thing turned on? Surely, it can\u2019t be on all the\ntime...\n\nThis actually differs slightly depending on the operating system, with some\ntrying to determine this by checking for the presence of DNS64 and working\nNAT64, but there\u2019s a better and more reliable mechanism for this:\n\n## PREF64\n\nWhen a device connects to a network, and it needs to receive an IPv6 address,\na mechanism called SLAAC is used. There\u2019s also DHCP for IPv6, but it\u2019s not\nreally as good. Some of the things that the router is sending to the devices\nalong the prefix, much like with IPv4, include the DNS servers to use, etc.\n\nOne of these properties that can be transmitted is called PREF64. This can\ninclude the NAT64 magic prefix, so all of the clients can be informed that\nsuch service is offered, and it can be used.\n\nFor Apple operating systems and devices, and for a few major versions now, the\npresence of this value automatically enables CLAT. For Android and Windows,\nthis is usually also enough, but both are more fragmented and it\u2019s not as easy\nto be absolutely certain.\n\nWhat about devices, however, that can\u2019t even get an IPv6 address?\n\n## Translation at the router\n\nUnfortunately, even if it\u2019s been almost 30 years since IPv6 was introduced,\nthere are still devices out there that cannot get an IPv6 address. They are\nalmost always IoT / \u201csmart\u201d things or very old equipment. These still need to\nbe connected, so we have to come up with a solution.\n\nThe answer is simple: have the router do the translation for them. For the\nLANs that require it, you add an IPv4 address, you set up DHCP, like you\nnormally would, but instead of routing that network, you just convert it to\nIPv6 the moment it gets in.\n\nThere are two ways to do this:\n\n### CLAT + NAT44\n\nThe first one is by doing CLAT on your router, too, and doing NAT44\n(traditional IPv4 NAT) to the virtual IP address. Now all of the IPv4 traffic\ncoming in will be converted into IPv6, and then sent across the network.\n\nThis is actually what mobile devices will do if you use the hotspot\nfunctionality and connect devices there.\n\n### SIIT\n\nThe other way is by using SIIT. This is a stateless mechanism where all IPv4\ntraffic is encoded in IPv6 packets, be it source or destination. To understand\nthis better, let\u2019s look at the following diagram:\n\nThe \u201csmart\u201d light bulb has an IPv4 address. This address only needs to be\nunique within its router. It\u2019s okay if you have 100 routers and all of them\nhave 10.1.1.0/24 attached to them.\n\nThis device now sends all of its traffic to the local router, which has IPv6\nconnectivity, but it also has a special IPv6 prefix. When the IPv4 traffic is\nreceived, all packets are statelessly converted into IPv6 by setting the last\n32 bits to the Source IPv4 of the device. The destination is also stateless:\nit\u2019s the NAT64 magic prefix plus the last 32 bits of the Destination IPv4.\n\nWhen that packet is forwarded to the NAT64, it will get statefully translated\nand mapped in a public IPv4 address and allocated a port number.\n\nAfter continuing its path on the local network and/or the Internet, it will\nreach the destination, it will get a response, and the NAT64 will send its\nresponse:\n\nThe Source IP will be 64:ff9b::8.8.8.8, and the Destination IP will be\n2a0d:3dc0::10.1.1.2 (the SIIT prefix of the router, plus 10.1.1.2).\n\nWhen the router receives this, it will statelessly convert it back to IPv4,\nand send to the light bulb a packet with a Source IP of 8.8.8.8, and a\nDestination IP of 10.1.1.2.\n\nSide Note: You may notice that the SIIT prefix is /96 (32 bits), while we only\nhave an IPv4 /24 (8 bits). This may seem wasteful, but given how many IPv6\naddresses we have, it\u2019s okay to map all of IPv4 instead of individual LANs. A\ntypical residential customer gets 72 bits of public IPv6 anyways ;)\n\nAs access routers tend to be smaller, and can even be cheap CPEs, stateless\ntranslation tends to require less resources overall.\n\n## Mixed Access\n\nThis is all great, and we can get end-to-end connectivity with both the modern\nand the old Internet using our IPv6-only devices. But sometimes we may have a\nLAN where some devices play nicely, while some others still require IPv4. Or,\nit can be a migration to IPv6(-only) which is done in several phases.\n\nThe moment we turn on DHCP, all devices will get an IPv4 address too, and they\nmay not take full advantage of our IPv6-only infrastructure, or may\nunnecessarily offload a lot of the translation tasks to the router, when\nthey\u2019re perfectly capable of performing them themselves.\n\nThis is where the IPv6-only Preferred DHCP option comes in. It\u2019s a standard\n(RFC8925) where any devices that are able to operate in an IPv6-only\nenvironment include this information to a DHCP Request for an IPv4 address.\nBasically, when they ask for an IPv4 address, they tell the network that they\ndon\u2019t need it, unless there\u2019s no support for IPv6-only operation.\n\nIf the DHCP server is aware of this, or just blindly configured to reply, it\nwill tell them that it understands the request, and will not assign them an\nIPv4 address.\n\nThe good thing here is that we now are able to have a single LAN, and all\ndevices that feel confident about their IPv6-only abilities can skip the IPv4\npart completely, while all other devices that don\u2019t know what\u2019s going on will\ndo a best effort IPv6-only, or they will fall back to IPv4 (aaS over IPv6) for\nconnectivity.\n\nAccording to a 2022 post by APNIC, in one of their events, where the WiFi\nnetwork was running using this DHCP option, 65% of the devices did not get an\nIPv4 address because they sent this to the server. This is the same range that\nmy former colleague Jen reported in her IETF draft about this technology\n(60%-70%). From my own experience, operating a handful of public / open WiFi\nnetworks this can reach as high as 85% for some environments.\n\nDHCP Option 108, as it\u2019s also called, has several benefits:\n\n  * It reduces the need for IPv4 (2x-4x smaller subnets required)\n  * It surfaces issues with IPv6 connectivity (as they are no longer masked by graceful fallback into IPv4)\n  * It allows for a slower, smoother, and more controlled migration to IPv6\n\n## NAT64 vs NAT44\n\nSince IPv4 addresses are limited, most networks will require some sort of NAT\nto reach IPv4 anyways. Whether you translate IPv4 into IPv4 or IPv6 into IPv4,\nthe end result is the same. But it\u2019s actually easier operationally to run\nNAT64 gateways instead of NAT44 or CGNAT ones.\n\nThe way NAT44 works, there\u2019s a device on the critical path of the traffic,\nrewriting source IPs and ports. All traffic that has to be NATed needs to go\nthrough these devices, and unless you carry out complicated policy routing,\nthey have to sit between the private IP space and the Internet.\n\nWith NAT64, this is not the case. All traffic that has to reach an IPv4\nnetwork will go to the NAT64 prefix, which can be anywhere on the network. In\nfact, if you use a public IPv6 address, it can also be outside your network,\non the Internet! As far as all routers are concerned, this is IPv6 unicast\ntraffic.\n\nThis allows a great deal of flexibility: the critical path, between access\ndevices and the Internet, can run on 100% stateless IP routers, using high end\nsilicon, or even Terabit-class software routing. The IPv4-destined packets can\nthen branch off to a completely separate path, to be translated. The way to\nthese NAT64 gateways can be controlled with your IGP, such as OSPF, IS-IS, or\nBGP, and they can be managed the same way as any high availability,\nhorizontally scalable service.\n\nYou don\u2019t need to split your traffic across 50 CGNAT boxes, and try to do that\nevenly, when you can instead just add 50 NAT64 gateways, all advertising the\nNAT64 prefix over OSPF, with their own pools of IPv4s and Ports, and let ECMP\ndeal with the rest. When one of them goes down, the prefix is withdrawn, and\nnew connections hit the remaining gateways, without any intervention, and in\nseconds.\n\nYou can also operate NAT64 services in various locations. An ISP could, for\nexample, have these gateways in every city, keeping all translation local to\nits users. If there\u2019s a server (but not network) outage in a city, or simply\nthere are updates that require a reboot, the nearest city\u2019s translators pick\nup the slack.\n\n## Single-IPv4 installations\n\nDeploying an IPv6-first or IPv6-only network does not require advanced\nrouting, an Autonomous System, BGP, or your own addresses. Everything\ndescribed here can happen in a residential Internet connection that takes an\nIPv4 address via PPPoE and a /56 of IPv6 space over DHCPv6-PD. In fact, I\u2019ll\nsoon publish a post on how to achieve this here, so subscribe to my RSS Feed\n:)\n\nBut where do you translate your IPv6 to, in that case?\n\nYou can add a private IPv4 address in your router\u2019s loopback interface, e.g.\n10.10.10.10, and then NAT64 to that. Now all IPv6 traffic will get translated\nto 10.10.10.10, which will in turn be masqueraded by your WAN IPv4 address.\n\nYou don\u2019t need static IPv4 addresses or even more than one main address, you\njust need to make sure \u2013just like with IPv4\u2013 that you have enough source ports\nfor the amount of traffic you\u2019re having.\n\n## What about existing ACLs?\n\nIf you are running a corporate network, you may have a lot of Access Control\nLists and Firewall rules all over the place referencing your IPv4 addresses.\nIn a move to IPv6-mostly, especially if the access network goes first, you may\nneed NAT64 to reach other parts of your infrastructure.\n\nFor example, IT may use 10.0.0.0/24, Developers may use 10.0.1.0/24, and\ndepending on the source IP, they may get or not get access to various services\nin a 10.0.10.0/24 LAN.\n\nWhen IT and Developers migrate to IPv6, your NAT64 can check the source IPv6\naddress, and then map each LAN to an IPv4 address from within that network.\nYou can assign a new address (e.g. 10.0.0.254), or you can also use the\nrouter\u2019s address (e.g. 10.0.0.1). Now all of IT appears as 10.0.0.254 to\nservers in 10.0.10.0/24, which should still be within their existing ACLs and\nallowed.\n\n## A hopeful future present\n\nWith existing IPv6 Transition Mechanisms and the current state of OS and\nsoftware support, not only in network gear, but also end devices, I honestly\nbelieve that many modern access LANs can operate with IPv6-only setups without\nproblems. I have seen that happen in the real world, in large corporate and\nenterprise deployments, with extremely few problems, most of which can be\nsolved trivially.\n\nMoreover, the transition can happen smoothly. In existing IPv4-only networks,\nyou can simply turn on IPv6, for dual-stack operation. You can start with\nsmall timers in SLAAC, e.g. 5 or 10 minutes, and with your more tech-savvy\nusers first. You\u2019re then ready to turn it off at a moment\u2019s notice if\nsomething is not working.\n\nYou can then set up NAT64. Verify it\u2019s working by manually changing your DNS\nservers to some devices. If it\u2019s not, revert it. Then progressively move more\nLANs to the NAT64 DNS servers, which can again happen with small timers, and\nit\u2019s easily reversible.\n\nThe next step can be to add PREF64 into SLAAC, and see a lot of devices start\nmoving to IPv6-only. You guessed it! This can happen with small timers too,\nand can also be easily reverted. And you can do this to a few VLANs first, and\nthen gradually roll it out.\n\nFinally, you can have your DHCPv4 server send Option 108, which if you look\ncarefully into has a single 32-bit value: a timer, in seconds, again! So even\nthis can lead to a smooth rollout.\n\nThis document goes into much more detail and it\u2019s a very good resource of how\nthis can be done, and I\u2019d love to hear stories of people attempting it, and\nhow it turned out for them. It\u2019d be great to hear what was difficult, what\ndidn\u2019t work, what you learned, so we can make this even easier in the future\nfor everyone.\n\nFeel free to contact me about IPv6 deployments, as I\u2019d love to help!\n\n", "frontpage": true}
