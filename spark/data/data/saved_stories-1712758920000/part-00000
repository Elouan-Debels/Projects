{"aid": "39988269", "title": "Verified Curl", "url": "https://daniel.haxx.se/blog/2024/04/10/verified-curl/", "domain": "haxx.se", "votes": 32, "user": "TangerineDream", "posted_at": "2024-04-10 08:20:30", "comments": 0, "source_title": "Verified curl", "source_text": "Verified curl | daniel.haxx.se\n\n# daniel.haxx.se\n\nSearch\n\ncURL and libcurl\n\n# Verified curl\n\nApril 10, 2024 Daniel Stenberg Leave a comment\n\nDon\u2019t trust. Verify.\n\nI could not resist making a fake book cover\n\nHere follows a brief description on how you can detect if the curl package\nwould ever make an xz.\n\nxz (and its library liblzma) was presumably selected as a target because it is\nan often used component and by extension via systemd it often used by openssh\nin several Linux distros. libcurl is probably an even more widely used\nsoftware component and if infected, could potentially serve as an effective\nvessel to distribute evil into the world.\n\nConceivably, the xz attackers have infiltrated more than one other Open Source\nproject to cover their bases. Which ones?\n\n## No inexplicable binary blobs\n\nFirst, you can verify that there are no binary blobs stored in git that could\nhost an encrypted attack payload, planted there for the future.\n\nEvery file in the curl git repository has a benign meaning and purpose. As\npart of the products, the documentation, tooling or the test suites etc.\n\nWithout any secret \u201chide-out\u201d in the git repository, you know that any\nbackdoor needs to be provided either in plain code or using some crazy weird\nsteganography. Or get inserted into the tarballs with content not present in\ngit \u2013 read on for how to verify that this is not happening.\n\n## No disabled fuzzers\n\nThe xz attack would have been detected by proper fuzzing (and valgrind use)\nwhich is why the attacker made sure to sneakily disable such automated checks\nof code that was present in git.\n\nWhile somewhat hard to verify, you can make sure that no such activities have\nbeen done in curl\u2019s fuzzing or curl\u2019s automated and CI testing,\n\n## No hidden payloads in tarballs\n\nIn the curl project we generate several files as part of the release process\nand those files end up in the release tarball. This means that not all files\nin the tarball are found in the git repository. (Because we don\u2019t commit\ngenerated files.)\n\nThe generated files are produced with a small set of tools, and these tools\nuse the source code available in git at the release tag. Anyone can check out\nthe same code from that same release tag, make sure to have the corresponding\ntools (and versions) installed and then generate a version of the tarball\nthemselves \u2013 to verify that this tarball indeed becomes an identical copy of\nthe public release.\n\nThat process verifies that the tarballs we ship are generated only with\nlegitimate tools and that the release contents originate only from the files\npresent in git. No secret sauce added in the process. No malicious code can\nget inserted.\n\n## Reproducible tarballs\n\nWe have recently improved reproducibility as a direct result of the post xz-\nattack debate. To make sure that a repeated tarball creation actually produces\nthe exact same results, but also to make it easier for others to verify our\nrelease tarballs. With more documentation (releases now contain documentation\nof exactly which tools and versions that generated the tarball) and by making\nit easier to run the exact same virtual machine and tool setup like the one\nthat created the release. We aim to soon provide a Dockerfile to make this\nprocess even smoother.\n\nWe also verify tarball reproducibility in a CI job: generating a release\ntarball with a given timestamp produces the identical binary output when done\nagain for the same timestamp.\n\n## Signed tarballs\n\nAs an extra detail, everyone can also verify that the released tarballs are in\nfact shipped by me Daniel personally, as they are always signed with my GPG\nkey as part of the release process. This should at least prove that new\nreleases are made with the same keys as previous ones were, which should with\na reasonable probability be me.\n\nThe signatures also help verify that the tarballs have not been tampered with\nin transition, from the point I generated them to the moment they land in your\ndownload directory. curl downloads are normally distributed via a third-party\nCDN which we normally trust of course, but if it would ever be breached or\nsimilar, a modified tarball would be detected when the digital signature is\nverified.\n\nWe do not provide checksums for the tarballs simply because providing\nchecksums next to the downloads adds almost no extra verification. If someone\ncan tamper with the tarballs, they can probably update the webpage which a\nfake checksum as well.\n\n## Signed commits\n\nAll commits done to curl done by me are signed, You can verify that I did\nthem. Not all committers in the project do them signed, unfortunately. We hope\nto increase the share going forward. Over the last 365 days, 73% of the curl\ncommits were signed.\n\nThese signatures only verify that the commits where done by a maintainer of\nthe curl project (or someone who controls that account). A maintainer you may\nnot trust and who might not be known under their real name and you do not even\nknow in which country they live. And of course, even a trusted maintainer can\nsuddenly go rogue.\n\n## Is the content in git benign?\n\nThe process above only verifies that tarballs are indeed generated (only) from\ncontents present in git and that they are unaltered from the moment I made\nthem.\n\nHow do you know that the contents in git does not contain any backdoors or\nother vulnerabilities?\n\nWithout trusting anyone else\u2019s opinions and without just relying on the fact\nthat you can run the test suite, fuzzers and static code analyzers without\nfinding anything, you can review it. Or pay someone else to review it.\n\nWe have had curl audited several times by external organizations, but can you\ntrust claimed random audits?\n\n## Anonymous contributors\n\nWe regularly accept contributions from anonymous and pseudonymous contributors\nin curl \u2013 and we always have. Our policy says that if a contribution is good:\nif it passes review and all tests run green, we have no reason to deny it \u2013 in\nthe name of progress and improvement. That is also why we accept even single-\nletter typo fixes: even a very small fix is a step in the right direction.\n\nA (to me) surprisingly large amount of contributions are done by people who do\nnot state a full real name. They may chose to be anonymous for various reasons\n\u2013 we do not ask. Maybe they fear retaliation if they would propose something\nthat ends up buggy? Sometimes people want to hide their affiliation/origin so\nthat their contribution is not associated with the organization they work at.\nAnother reason sometimes mentioned is that women do it to avoid revealing\nthemselves as female. etc. As I said: we do not ask so I cannot tell for sure.\n\n## Anonymous maintainers\n\nWe do not have anonymous maintainers, but we don\u2019t actually have rules against\nit.\n\nRight now, we have 18 members in the GitHub curl organization with the rights\nto push commits. I have not met all of them. I have not even seen the faces of\nall of them. They have all proven themselves worthy of their administrative\nrights based on their track record. I cannot know if anyone of them is using a\nfalse identity and I do not ask nor keep track in which country they reside. A\nformer top maintainer in the curl projected even landed a large amount of\nchanges under a presumed/false name during several years.\n\nIf a curl maintainer suddenly goes rogue and attempts to land malicious\ncontent, our only effective remedy is review. To rely on the curl community to\nhave eyes on the changes and to test things.\n\n## Can curl be targeted?\n\nI think it would be very hard but I can of course not rule it out. Possibly I\nam also blind for our weaknesses because I have lived with them for so long.\n\nEveryone can help the greater ecosystem by verifying a package or two. If we\nall tighten all screws just a little bit more, things will get better.\n\n## Vulnerabilities\n\nI maintain that planting a backdoor in curl code is so infuriatingly hard to\nachieve that efforts and energy are probably much rather spent on finding\nsecurity vulnerabilities and ways to exploit them. After all, we have 155\npublished past vulnerabilities in curl so far, out of which 42 have been at\nseverity high or critical.\n\nI can be fairy sure that none of those 42 somewhat serious issues were\ndeliberately planted, because just about every one of them were found in code\nthat I personally authored...\n\nPeople often ask. But I have never seen a backdoor attempt in curl. Maybe that\nis just me being naive.\n\n## Credits\n\nTop Image by Gerd Altmann from Pixabay. Fake book cover by Daniel Stenberg.\n\ncURL and libcurl\n\n### Leave a Reply Cancel reply\n\nThis site uses Akismet to reduce spam. Learn how your comment data is\nprocessed.\n\n# Recent Posts\n\n# Recent Comments\n\n## tech, open source and networking\n\n## Daniel Stenberg\n\nSwedish open source developer and curl maintainer.\n\nSponsor me: on GitHub Follow me: @bagder Keep up: RSS-feed Email: weekly\nreports\n\nApril 2024M| T| W| T| F| S| S  \n---|---|---|---|---|---|---  \n1| 2| 3| 4| 5| 6| 7  \n8| 9| 10| 11| 12| 13| 14  \n15| 16| 17| 18| 19| 20| 21  \n22| 23| 24| 25| 26| 27| 28  \n29| 30  \n  \nPrivacy Proudly powered by WordPress\n\n", "frontpage": true}
