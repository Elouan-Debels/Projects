{"aid": "40002102", "title": "Media for Thinking the Unthinkable (2013)", "url": "https://worrydream.com/MediaForThinkingTheUnthinkable/", "domain": "worrydream.com", "votes": 2, "user": "Tomte", "posted_at": "2024-04-11 13:46:51", "comments": 0, "source_title": "Media for Thinking the Unthinkable", "source_text": "Media for Thinking the Unthinkable\n\n# Media for Thinking the Unthinkable\n\n#### Designing a new medium for science and engineering\n\n##### Bret Victor / April 2013\n\n## Introduction (2 min)\n\nThis talk is about a particular kind of media, which is \"media for thinking\nin.\" And it's about a particular kind of thinking, which is understanding\nsystems.\n\n\"Science\" is understanding a system in the world. \"Engineering\" is building a\nsystem in the world, where the challenge is often understanding what we're\nbuilding.\n\nMedia are our thinking tools. Our representations of a system are how we\nunderstand it.\n\nTo understand or build new complex systems, we need powerful new\nrepresentations, and we need a powerful new medium in which to work with these\nrepresentations.\n\nToday's representations were designed for the medium of paper. This talk will\nshow examples of new representations for systems, and offer hints as to what a\nnew medium might be like.\n\n## Demo 1 \u2014 Seeing behavior (3 min)\n\nThis first example shows a scientific paper. The example is about showing the\nbehavior of a system. (For more information, see Scientific Communication As\nSequential Art.)\n\nThe authors have a rich picture in their heads, which they'd like to transmit\nto the reader's head. But paper is a \"low-bandwidth channel\", and much\ninformation is lost.\n\nThis redesign of the paper uses words and pictures, tightly intertwined. Words\ndescribe the structure of the algorithm, and pictures depict the behavior of\nthe algorithm.\n\nReaders are shown the state of the system at each step of the algorithm,\ninstead of simulating it in their heads.\n\nReaders are shown relationships between variables, instead of reconstructing\nthem in their heads from expressions.\n\n## Demo 2 \u2014 Seeing the entire behavior (3 min)\n\nThis example shows an environment for working with electronic circuits. (For\nmore information, see Inventing on Principle, 23:22.)\n\nTo understand a system, it's not enough to see one variable at a time. This\nexample is about seeing all variables at once.\n\nIn this environment, the designer can see all voltages at once, visually\noverlay any voltage on all other voltages to compare, and adjust parameters to\nsee how the behavior responds.\n\nTo show current, the symbolic representation of each component is replaced\nwith a visual representation of the component's data.\n\nThis representation conveys the same structural information as a conventional\nschematic, but it conveys behavior as well. It's built out of live data, not\ndead symbols.\n\n## Interlude \u2014 Thinking the unthinkable (8 min)\n\nRichard Hamming suggested that, like sounds we cannot hear, there could be\nthoughts we cannot think.\n\nBut how do we even know about such sounds? We build tools which adapt\nunhearable sounds to our human senses.\n\nLikewise, thinking tools adapt unthinkable thoughts to our human minds. Two of\nthe greatest such tools are writing and mathematical notation.\n\nTo build a thinking tool, it helps to understand how people think. Jerome\nBruner considered three mentalities \u2014 interactive, visual, and symbolic.\n\nPencil-and-paper constrained us to mostly simple symbolic representations. In\nthe new medium, representations can draw on all three mentalities\nsimultaneously.\n\n## Demo 3 \u2014 Multiple representations of behavior (3 min)\n\nThis example is from signal processing, and is about multiple representations\nfor the same behavior. (For more information, see Explorable Explanations.)\n\nAs the designer adjusts parameters, five different ways of interpreting the\nbehavior are shown simultaneously. Each representation offers its own unique\ninsights.\n\nBy seeing how the different representations dance together, the designer\nbuilds associations between them. This leads to intuition \u2014 the ability to\n\"feel your way\" around a system.\n\n## Demo 4 \u2014 Interacting with behavior (5 min)\n\nThis example shows an environment for working with difference equations. The\nexample is about directly interacting with behavior as opposed to just\nparameters.\n\nDefining and seeing transformations of the system's variables.\n\nSelecting parts of the behavior, measuring them, and seeing reductions of\nthem.\n\nUsing search to dynamically select parts of the behavior that meet a\ncondition.\n\nAnd plotting any measurement against any parameter. This abstracts over the\nparameter, giving a representation of not just one particular system, but an\nentire family of systems. (For more information, see Up and Down the Ladder of\nAbstraction.)\n\n## Demo 5 \u2014 Linked representations (4 min)\n\nThis example shows an environment for working in the Nile programming\nlanguage. The example is about representations linked together. (For more\ninformation, see Nile on Github.)\n\nThis is the code for a vector graphics engine. Both the language and code are\nwell-designed, but it's still difficult to understand them because you can't\nsee the behavior of the system.\n\nIn this environment, the data in the pipeline is visualized at each stage.\n\nPointing to any object highlights where it came from in previous stages, where\nit went in later stages, and the lines of code that produced it. The\nrepresentations all work together.\n\nDifferent types of data use different visualizations. You can understand the\ngist of the how the system works by ignoring the code and just looking at how\nthe data was transformed.\n\n## Demo 6 \u2014 Creating representations (8 min)\n\nA medium for working with many dynamic representations must provide a good way\nto create all these representations. (For more information, see Drawing\nDynamic Visualizations.)\n\nVisualizations should be created by thinking visually. Hand-drawing is direct\nand expressive, but not dynamic. Code is dynamic, but coding is indirect,\nsymbolic, non-visual.\n\nThis example is a tool in which the designer specifies a picture by directly\ndrawing on a canvas, as in Illustrator. But drawing actions can then be\nparameterized with variable expressions.\n\nThe picture can therefore depend on data. With different data, we see a\ndifferent picture. These pictures can thus be used as representations in\nsystems.\n\nDesigners aren't confined to standard chart types, but can draw ad-hoc\nrepresentations to explore whatever they need to understand about a particular\nsystem.\n\n## Closing (3 min)\n\nSummary of the principles and examples presented in this talk.\n\nAll of the examples I've shown here are hints. They are nibbling at the\ncorners of a big problem \u2014 what is this new medium for understanding systems?\n\nWe must get away from pencil-and-paper thinking. Even when working on the\ncomputer, we still think in representations that were invented for the medium\nof paper.\n\nEspecially programming. Programming languages are written languages \u2014 they\nwere designed for writing.\n\nWe have an opportunity to reinvent how we think about systems, to create a new\nmedium. I don't know what that medium is, but if you'd like to help find it,\nlet me know.\n\nPresented at the MIT Media Lab on April 4, 2013.\n\nFor more information on the context behind this talk, see An Ill-Advised\nPersonal Note about \"Media for Thinking the Unthinkable\".\n\nAbout this page \u2014\n\nI publish talks because this work is best conveyed through live demos \u2014 show-\nand-tell \u2014 and the \"talk\" is a medium that supports that.\n\nBut a talk is a poor knowledge-container. It's opaque. The viewer can't skim,\nbrowse, or get a gist at a glance. Ideas can't be looked up as needed; they\nfeel fleeting. The medium works well for entertainment \u2014 watch and enjoy \u2014 but\nnot for a toolbox.\n\nThis page is an attempt to \"explode\" a demo-driven talk into a skimmable,\nbrowsable, gistable form, where individual ideas can be quickly referenced\nlater.\n\nComing at the problem from the other direction \u2014 a well-designed paper can be\nskimmed and referenced, but typically can't show and tell. For an attempt to\nincorporate live demos into prose, see Learnable Programming.\n\n", "frontpage": false}
