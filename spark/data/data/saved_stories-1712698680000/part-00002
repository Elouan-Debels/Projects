{"aid": "39980568", "title": "Tiger: Neuralink for Your AI Agents", "url": "https://github.com/Upsonic/Tiger", "domain": "github.com/upsonic", "votes": 2, "user": "panqueca", "posted_at": "2024-04-09 15:36:11", "comments": 0, "source_title": "GitHub - Upsonic/Tiger: Neuralink for your AI Agents", "source_text": "GitHub - Upsonic/Tiger: Neuralink for your AI Agents\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nUpsonic / Tiger Public\n\n  * Notifications\n  * Fork 1\n  * Star 13\n\nNeuralink for your AI Agents\n\ndocs.upsonic.co/tiger\n\n### License\n\nMIT license\n\n13 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# Upsonic/Tiger\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n5 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nonuratakanMerge pull request #4 from Upsonic/knowledge-module76143e8 \u00b7\n\n## History\n\n35 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Added upload.yml to upload paths  \n  \n### assets\n\n|\n\n### assets\n\n| Add files via upload  \n  \n### tiger\n\n|\n\n### tiger\n\n| Restyled by yapf  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| Create CODE_OF_CONDUCT.md  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Changed copyright holder  \n  \n### README.md\n\n|\n\n### README.md\n\n| Restyled by prettier-markdown  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| Restyled by whitespace  \n  \n## Repository files navigation\n\n# Tiger: Neuralink for your AI Agents\n\nSetup \u2022\n\nIntegrations: LangChain Integration \u2022 AutoGen Integration \u2022\n\nSources: Currently Tools \u2022 Custom Tools (On-Prem Docker) \u2022 Public Dashboard \u2022\n\n# What is Tiger ?\n\nTiger is an community project for developing reusable and integrated tool\necosystem for LLM Agent Revolution. Tiger uses Upsonic to storing tools in\nisolation and automaticaly generated documents. You can create your own tiger\nfor your agents or you can use the community maintained public and strongest\nTiger \ud83d\udc05.\n\n## Details\n\nTiger inspired from Neuralink and and provides AI computer interface with its\nthreads that connected to LLM interface. Tiger gives an opportunity to AI to\nuse computer by thinking.\n\nWith Tiger your LLM agents write codes and run, uses search engines, view your\ncalendar, use your mouse and keyboard. Saying somethink in your headphones and\nanythink that thinked by your agent. Tiger will transform this thinks to real\nactions. In this way the Tiger project philosophy is using AI knowladge to\ngenerate action and supporting with standart infrastructures. We aim to make:\n\n  * Utility point for tools for agents in any framework that have function call mechanism\n  * Great community for great tools support in different technologies and sources\n  * Free, Open and MIT licenced tool library for AI agent ecosystem\n\n# Setup\n\nTiger projects have a general usage public library at tiger.upsonic.co. Its\ninclude the tools that in tools library. For usage this you can use the\nstandart connection that in upsonic python library. After installing the\nupsonic library we will use the Tiger object wand integrate to your agents.\n\n  * Tiger requires equal or higher python version to 3.8\n\n    \n    \n    pip3 install upsonic\n\n## Currently Tools\n\nWe are working on Upsonic and the tools that inside the tools folder is\nsending to public tiger in each release. We are aiming to create tools without\nany api key and just like normal human events like searching on google with\nmouse, keyboard and browser.\n\n  * Interpreter\n\n    * python\n\n      * check_package\n      * execute\n      * install_package\n    * sh\n\n      * execute\n  * Search\n\n    * google\n    * duckduckgo\n    * read_website\n  * System\n\n    * os_name\n    * architecture\n    * python_version\n  * Knowledge\n\n    * put\n    * pull\n    * delete\n    * index\n    * reset\n\nIf you want to add functions to public and strongest Tiger you can see to\nAdding Tools section.\n\n## Public Dashboard\n\nFor the public Tiger you can see the functions and their documentations and\nreadmes in tiger.upsonic.co. You can use this place for documentation also.\n\nAuth\n\n  * username: tiger\n  * password: tiger\n\n## Documentation of Tiger Tools\n\nThanks to Upsonic we just write the codes and its gives us an storage system\nwith detailed documentation and cpu ram usage for each function. Also you can\nmake search and use functions in your other projects with connection code.\n\nAuth\n\n  * username: tiger\n  * password: tiger\n\n# LangChain Integration\n\nTiger is able to make a collabration for sharing tools with LangChain agents\nwith this your agents will able to use Tiger functions. In this example we are\nasking for an multiplation question and the agent will use the tiger\ninterpreter.python module and after that its write a python code and tiger\nwill give the result in behind. With this agent will able to make mathematical\noperations in just two lines of code.\n\n    \n    \n    # Geting the tiger tools about interpreter.python from upsonic import Tiger tools = Tiger().langchain() # Generating Agent and executor with tiger tool set from langchain_openai import ChatOpenAI from langchain import hub from langchain.agents import AgentExecutor, create_openai_functions_agent llm = ChatOpenAI(model=\"gpt-4\", api_key=\"OPENAI_API_KEY\") prompt = hub.pull(\"hwchase17/openai-functions-agent\") agent = create_openai_functions_agent(llm, tools, prompt) agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True) # Asking for 15231 * 64231 agent_executor.invoke({\"input\": \"What is the result of 15231 * 64231\"})\n\n# AutoGen Integration\n\nTiger is also have a integration with AutoGen agents. You can put a tiger to\nyour AutoGen agents. In this examples we will use the 'interpreter.python'\nmodule and with this your autogen agent able to run and view result of python\ncodes. With this your agent will able to wait 2 second as we request.\n\n    \n    \n    # Generating Agents with tiger tool set from typing_extensions import Annotated import autogen config_list = [ { 'model': 'gpt-4', 'api_key': 'OPENAI_API_KEY', }, ] llm_config = { \"config_list\": config_list, \"timeout\": 120, } chatbot = autogen.AssistantAgent( name=\"chatbot\", system_message=\"For coding tasks, only use the functions you have been provided with. Reply TERMINATE when the task is done.\", llm_config=llm_config, ) user_proxy = autogen.UserProxyAgent( name=\"user_proxy\", is_termination_msg=lambda x: x.get(\"content\", \"\") and x.get(\"content\", \"\").rstrip().endswith(\"TERMINATE\"), human_input_mode=\"NEVER\", max_consecutive_auto_reply=10, ) # Geting the tiger tools about interpreter.python from upsonic import Tiger Tiger().autogen(chatbot, userproxy) # Asking sleep 2 second user_proxy.initiate_chat( chatbot, message=\"What is Upsonic.co\", )\n\n## Adding Tools\n\nTiger project is open to any contribution for public tiger, also in the bottom\nwe have another way to create your own, offline tiger. For adding the public\ntiger you should create a pull request with your new tool.\n\n  1. Create a python file in tiger/tools section. for ex: tiger/tools/interpreter/python/execute.py\n\n  2. Write your function in this format\n\n    \n    \n    #imports def my_function(query:str) -> str: return query + \" hi\" tool_name = \"test.my_function\" tool_obj = my_function tool_requirements = [\"beautifulsoup4==4.12.3\"]\n\n  3. Create the pull request. When its merged its will be available at public Tiger and dashboard.\n\n## Creating your Own Tiger\n\nFor creating your own tiger you should install a Upsonic On-Prem docker\ncontainer. Its will give a dashboard for viewing your own tools and will make\ndocumentation automatic. After that you should use the Upsonic Client to\nconnect your On-Prem for this you should get the connection code from your\ndashboard and finaly you use the tiger function in upsonic client.\n\nInstallation document\n\n    \n    \n    #from upsonic import Tiger #Tiger().autogen(chatbot, userproxy) # to #Your Upsonic Connection Code upsonic.autogen(chatbot, userproxy)\n\n## Star History\n\n## About\n\nNeuralink for your AI Agents\n\ndocs.upsonic.co/tiger\n\n### Topics\n\nagent tools ai autogen neuralink llm langchain function-calling\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\nCustom properties\n\n### Stars\n\n13 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Contributors 2\n\n  * onuratakan Onur ULUSOY\n  * restyled-commits Restyled Commits\n\n## Languages\n\n  * Python 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
