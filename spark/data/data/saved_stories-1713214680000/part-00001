{"aid": "40041401", "title": "Helping the Average Programmer", "url": "https://www.teamten.com/lawrence/writings/average_programmer.html", "domain": "teamten.com", "votes": 2, "user": "andsoitis", "posted_at": "2024-04-15 14:56:54", "comments": 0, "source_title": "Helping the Average Programmer", "source_text": "Helping the Average Programmer\n\n# Helping the Average Programmer\n\nMarch 10, 2005\n\nPaul Graham is working on a new programming language called Arc. It\u2019s a\ndialect of Lisp. The design philosophy of Arc is to be a language for good\nprogrammers. He argues that languages designed for good programmers last (C,\nSmalltalk, Lisp), while those designed for average programmers don\u2019t (Cobol,\nPascal, Ada). He forgets Basic, which was not only designed for the average\nprogrammer but for the beginner programmer. Basic is one of the most-used\nprogramming languages today!\n\nI don\u2019t think there\u2019s anything inherently wrong with designing a language for\ngood programmers, but I do think it\u2019s a waste of time. It\u2019s an easy problem,\nplus it doesn\u2019t really contribute much. Good programmers make up a very small\npercentage of all the programmers, and they\u2019re already very efficient, so\nmaking them slightly more efficent will have negligable effect on the world.\n\nAverage programmers, though, are everywhere. Make them 5% more efficient, or\nmake them create 5% better programs, and you\u2019ve made a huge difference. That\u2019s\nwhy Basic (and the whole suite of Microsoft tools like Access) are so great.\n(Not \u201cgreat\u201d as in \u201cgood programs\u201d, \u201cgreat\u201d as in \u201cgood for the world\u201d.)\n\nArc\u2019s design philosophy page points to the 1973 Cadillac (though any GM or\nFord would have done) and the 1973 Porsche, saying that the Porsche\u2019s design\nis timeless. I think that\u2019s a great analogy, because how many people really\nbenefited from the Porsche? Developing Arc is like improving the Porsche. Not\ninherently bad, but how much are you really improving people\u2019s lives?\nShouldn\u2019t you be improving the GM car instead?\n\nMy wife Jennifer, who has a business degree, was a database programmer for\nseveral years using Access. Access allowed her to contribute in a significant\nway to her company. The resulting database was solid and useful; maybe not\nwhat an Oracle expert would have done, but the company couldn\u2019t afford that\nanyway, so it was either Jennifer\u2019s Access database or a bunch of Excel files.\nArc will not help that company, nor any of the thousands like it.\n\nInstead of making Arc, for example, make a system that creates better dialog\nboxes. Dialog boxes are used all the time and there are no good tools to\ncreate them. You either have to use the built-in ones that just have \u201cOK\u201d and\n\u201cCancel\u201d, or make your own by dragging a bunch of widgets onto a canvas and\nprogramming all the interaction. So you either end up with bizarre dialog\nboxes that offer you a binary choice phrased like, \u201cTo run the debugger press\nOK, to continue press Cancel\u201d or you get ugly dialog boxes with bad spacing\nand alignment and where Cancel is the default button.\n\nMy friend Drew Olbrich put together a library that lets users create dialog\nboxes by just specifying high-level structures like, \u201cI want to know the first\nname, last name, and company of the user\u201d and the program lays out the labels,\ntext boxes, and buttons, aligns the baseline of the labels with the baseline\nof the text boxes, and generally makes it look beautiful. It\u2019s extremely\nflexible in case you don\u2019t want the default, but by encouraging you to use the\ndefaults the program lets average programmers do what even good programmers\nhave trouble doing well.\n\n(Tragically, his programs can only be used internally to the company where he\nworks. You might think that \u201ctragically\u201d is too melodramatic a word, but you\nalso haven\u2019t seen his programs.)\n\nDesigning tools and languages for average programmers is hard. Drew spent many\nmonths on that program, working out all the different dialog boxes people\nmight want and all their special needs. Why hasn\u2019t Microsoft done this?\nProbably because the temptation for good programmers is to make tools for\nother good programmers.\n\nWhat will Arc accomplish? It will help several dozen programmers save time by\nwriting \u201cfn\u201d instead of \u201clambda\u201d. In other words, it will accomplish exactly\nnothing (statistically speaking). What a waste of our efforts! I\u2019m guessing\nthat making the average programmer more efficient is not a very useful goal\n(they don\u2019t care about efficiency), but making their programs better (with the\nsame amount of work) would make a giant difference. I don\u2019t know how to do\nthat. I could write a library for Visual Basic users, but no one will buy it.\n(Jennifer would have never fished around for a library to make better dialog\nboxes.) It needs to fall into their lap.\n\n", "frontpage": false}
