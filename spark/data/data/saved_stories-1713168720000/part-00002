{"aid": "40036435", "title": "Why Software Is Late", "url": "https://www.teamten.com/lawrence/writings/late_software.html", "domain": "teamten.com", "votes": 2, "user": "andsoitis", "posted_at": "2024-04-15 02:10:21", "comments": 0, "source_title": "Why Software is Late", "source_text": "Why Software is Late\n\n# Why Software is Late\n\nMay 11, 2003\n\n> The Programmer\u2019s Credo: We do these things not because they are easy, but\n> because we thought they were going to be easy. \u2014Pinboard\n\nI\u2019ve seen very few large software projects finish according to their original\nschedule. People have suggested all sorts of reasons to explain why that is.\nI\u2019d like to suggest another.\n\nLet\u2019s suppose that there are three types of people: optimists, realists, and\npessimists. We don\u2019t care about pessimists. I\u2019ve always prided myself on being\na realist: when evaluating a potential project, for example, I always try to\nthink through all the little details and try to factor in a certain number of\nunknown problems. My estimates have usually been fairly accurate; or, at\nleast, they\u2019ve been too long as often as too short. I\u2019ve also been annoyed at\noptimists, who always think that not only everything is possible, but\neverything is easy.\n\nMy experience at the company where I work, a startup, has made me rethink\nthis. I\u2019m mostly surrounded by optimists and I find that I spend much of my\ntime in meetings trying to convince people that the project or feature in\nquestion will take longer and be harder than they think. I usually fail, and\nprojects are late. But is that a bad thing?\n\n> In retrospect, if we had had any understanding of how complicated the\n> project was going to be, we never would have started. \u2014Daniel Hillis,\n> founder of Thinking Machines Corporation^1\n\nSay that a large project will take two years to complete, and an optimist\nestimates that it will take six months. The company launches into it, and the\nschedule slowly slips until the project takes two years. The software is very\nlate, but at least it\u2019s written.\n\n> I thought it would take 1\u20132 months. I underestimated. It took a year. Had I\n> known it would\u2019ve taken that long, I might not have begun. \u2014Philip Kaplan,\n> founder of DistroKid^2\n\nIf instead a realist had been asked, he would have estimated two years. The\ncompany may have decided against doing the project at all, especially when at\nthe same time an optimist was being asked about a competing project and his\nsounded far more worth the smaller investment.\n\n> If I had any idea how hard it was going to be, I wouldn\u2019t have done it.\n> Ignorance is very powerful. \u2014Jeff Bonwick, CTO of Storage for Sun^3\n\nSo that\u2019s my theory. Software projects are late because the only people who\nstart them are optimists, who by definition underestimate how long they will\ntake. Software projects are late by construction, not because of any failure\nof estimation or development. It\u2019s a modified version of the anthropic\nprinciple.\n\n> Bitcoin looked like a hard problem, and turned out to be a harder problem\n> than it appeared to be. Had the early contributors known how much effort it\n> would take, they probably wouldn\u2019t have attempted it.^4\n\nThe only projects I\u2019ve seen finish on time are the ones that were estimated by\nrealists and were not optional. They had to be done, so it was possible to\nmake an accurate (and discouraging) estimate and still carry on with the\nproject.\n\nWhat does that mean in practical terms? It means that it\u2019s okay (and even\nnecessary) if optimists start companies, launch projects, and wildly\nunderestimate schedules. It\u2019s okay for software to slip, because it\u2019s not\nreally slipping. Optimists are as valuable as realists: both are necessary in\na team.\n\nIt also means that a realist will, by himself, probably not start companies or\nlarge projects. If starting a company is important to him, he must temporarily\nbecome an optimist during the idea-exploration phase. He must believe that the\nidea in question, though it would seem overly complicated and not particularly\nworthwhile to his realistic self, is actually a useful and easy project to his\noptimistic alter ego. It is the only way that he\u2019ll get past the starting line\nand commit. The idea will later morph into something useful (initial ideas\nalways do) and the schedule will slip, and that\u2019s okay.\n\nUpdate 1/10/2006: A co-worker (one of the optimists) read this essay and\npointed out that realists aren\u2019t actually necessary in a team. But publishing\nsoftware isn\u2019t done in isolation. You need to synchronize with marketing,\nsales, PR, and in general have your product launch all ready to go when the\nsoftware is done. A realist can help make an accurate software schedule so\nthat the big marketing splash doesn\u2019t happen two months before the software is\nready.\n\n^1\u201cRichard Feynman and The Connection Machine\u201d\n\n^2\u201cWhat I\u2019ve been up to for the past 4 years\u201d\n\n^3\u201cFree Your Mind: How a Small, Persistent Team Created a Revolutionary File\nSystem\u201d (no longer online)\n\n^4\u201cThe Truth About Theranos\u201d\n\n", "frontpage": false}
