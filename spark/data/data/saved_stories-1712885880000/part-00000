{"aid": "40005949", "title": "Kubernetes Is Not the Point", "url": "https://www.bettyjunod.com/blog/kubernetes-is-not-the-point", "domain": "bettyjunod.com", "votes": 12, "user": "cloudytoday", "posted_at": "2024-04-11 19:36:20", "comments": 2, "source_title": "Kubernetes is not the point", "source_text": "Kubernetes is not the point \u2014 Betty Junod\n\n0\n\nSkip to Content\n\n# Kubernetes is not the point\n\nKubernetescloud nativetechplatform\n\nMar 26\n\nWritten By Betty Junod\n\nI have been a fangirl of the container ecosystem since 2014, when I started\nworking at this new startup named Docker, but it's time to talk about where we\nare today, how we got here, and what matters most going forward.\n\nDocker was born as DotCloud in the PaaS era of Heroku and CloudFoundry. The\nphilosophies espoused by Heroku\u2019s 12 factor app and Pivotal\u2019s haiku \u201cHere is\nmy code. Run it in the cloud. I do not care how.\u201d and 5 S\u2019s still hold the\nimaginations of many technology leaders. These platforms provided a great\ndeveloper and operator experience \u2013 one without the headaches of building and\nmaintaining the platform but simply focused on using it to get the application\noutcome you wanted.\n\n## A disturbance in the force awakens a new ecosystem\n\nIn 2013, Docker was born as the DotCloud team extracted some of the underlying\ntechnology in their PaaS and made it accessible to developers. Containers\nbecame a key pivot in the timeline. A year later Kubernetes was released and a\nyear after that the CNCF was formed.\n\nThe massive developer adoption of containers raised new questions about how to\nhandle these new apps beyond the developer\u2019s laptop, including...\n\n  * How do you group multiple containers together to form an app?\n\n  * How do containers communicate with each other?\n\n  * Where are we deploying to? How do we configure and manage that?\n\n  * How to schedule and orchestrate containers? and at scale? Can it be automated?\n\n  * How to secure containers along the SDLC and at runtime?\n\n  * ...and many more...\n\nLike virtualization was a paradigm shift from physical compute that created a\nnew set of tools for virtualized environments; containers required us to\nrethink how we addressed all of the concerns in dev and production to work in\nan ephemeral and dynamic environment and in this new era, we also need to make\nit open source.\n\nAnd a decade later, we\u2019ve ended up here.\n\nToday, we have thousands of individual technologies with loads of options\nwithin each category and I can\u2019t help but wonder if we may have lost sight of\nwhat the point of all this was. We are all still in search of that platform\nexperience.\n\n## Completely bespoke and completely complex\n\nSo where did we go wrong? Or did we? We got so excited about what a couple of\nnew components unlocked that it inspired us to chase every single component in\nthe stack. The great innovation that the CNCF brought on was that so much of\nthe experimentation and innovation was out in the open. You would see tipping\npoints in areas like storage, networking, or security that would drive vendors\nto create a host of new projects and then standards would emerge to agree upon\nthe interfaces. The many SIGs and project maturity stages helped to provide a\nstructure for big changes and setting expectations for end users.\n\nEven with that the rate of new projects introduced and the sometimes seemingly\nVHS vs. BETA type debates between technology approaches made it difficult for\nend users to decide which technology to choose and bet their enterprise\narchitecture on. In addition to weighing an ever growing and evolving list of\ntechnology choices, the pressure to be truly \u201cengineering-led\u201d or \u201cinnovative\u201d\nled many an IT organization to piece together their own platform from the open\nsource puzzle pieces, support it themselves, and engage publicly with the\nupstream. This alone requires an engineering culture that many companies were\nprepared for.\n\nWhile interesting from a technology point of view, this led to a complexity\nthat often bogged teams down with lifecycle and integration management and\nmaintenance of the system more than supporting getting apps built and deployed\nto production.\n\nOur excitement into the ingredients led us to over shop for the latest and\ngreatest without planning ahead for the final meal. Too many end user RFPs\nwere seen with project names or technology buzzwords sprinkled in without a\nmention of new or different capabilities to be delivered that will improve\nbusiness initiatives and application outcomes.\n\n> The question is really, does anyone remember what they were building and who\n> they were building for? How differentiated is your platform heavy lifting?\n\n## Coming full circle to the return of PaaS\n\nDon\u2019t call it a comeback and especially don\u2019t call it a PaaS but the idea is\nback and today it goes by Internal Developer Platform or Platform Engineering\nnow. Regardless of the name, the spirit remains that the idea we had with PaaS\nwas right. We still want that experience.\n\nThis past decade\u2019s boom in operations and lifecycle tooling, we completely\ncomplicated the interface for developers. It is one thing for the architects\nand IT to evaluate multiple infrastructure vendors, it is not advisable to\nmake developers do that \u2013 mostly because their choices may just get pushed\nback when the apps are headed for deployment anyways. And in the quest to\nimprove this developer experience, more new projects have emerged.\n\nThe rise of platform engineering as the buzzword du jour coincides a bit with\nthe end user shift to more abstracted solutions like CloudRun and Serverless\nas a way to get to the outcome faster and not worrying about the guts that\nmake it work. On some level, we expect that the underlying stack powering\nthese services are based on Kubernetes and conforms to standards, but more and\nmore end users are not as fixated on the details. Even those going down a DIY\nor composable path are looking for more prescriptive patterns for the most\ncommon scenarios. Why waste on undifferentiated heavy lifting?\n\n> The return of PaaS is the return to platform thinking instead of component\n> thinking - the container ecosystem is on the long journey home to its\n> origins.\n\n## Focusing on the purpose\n\nContainers and Kubernetes ushered in a new era of computing with a vibrant\necosystem and community. Even with that, it alone is not the point. The\nmissions that led teams to create containers and Kubernetes were about solving\nproblems facing developers, operators, and specific types of applications they\nwere building and running.\n\nWe (the collective we) need to re-focus on the purpose of the platform; for\nwho and what application patterns are we building for to have what kind of\ncharacteristics? This is often the harder part because it deals with people\nand nebulous things like expectations and goals, but the groundwork in\nidentifying your application patterns and their needs will help you match the\nright platform, services, or mix of technologies needed to get the job done.\n\nWant to keep the conversation going? Reach out at hello@bettyjunod.com\n\ntechKubernetescloud nativeplatform\n\nBetty Junod\n\nNext\n\nNext\n\n## Understanding product marketing and go-to-markets\n\n#### \u00a9 2024 Betty Junod\n\n#### hello@bettyjunod.com\n\n", "frontpage": true}
