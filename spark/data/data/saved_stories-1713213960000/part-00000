{"aid": "40041231", "title": "The Unison Blog Engine Library", "url": "https://www.unison-lang.org/blog/blog-engine/", "domain": "unison-lang.org", "votes": 1, "user": "beefman", "posted_at": "2024-04-15 14:44:55", "comments": 0, "source_title": "A spotlight on the Unison Blog Engine library", "source_text": "A spotlight on the Unison Blog Engine library \u00b7 Unison programming language\n\nhighlights\n\nApr 11, 2024\n\n# A spotlight on the Unison Blog Engine library\n\nRebecca Mark\n\nAs part of our ongoing work highlighting what you can do with theUnison Cloud\nplatform,we're excited to announce theUnison Blog Enginelibrary. This library\nmakes it incredibly easy to create and deploy a professional-looking blog,\nwith a particular focus on supporting developers writing about technical\nconcepts. The blog engine ships with an RSS/Atom feed, and supports email\nnotifications out of the box.\n\nLook familiar? This blog post was generated from the Unison doc format as\nwell.\n\nThe Unison Blog Engine uses Unison's powerfulbase.Docformat. Unlike\ntraditional markdown, Unison docs allow you to embed typechecked and evaluated\nUnison code snippets directly into your blog posts. The blog also supports\nsyntax highlighting for other programming languages and other forms of rich\ncontent, likemermaid diagramsand LaTeX markup rendering. This makes it an\nespecially useful tool for sharing code examples and other technical details\nwith your readers.\n\nWe designed the blog engine so your content can be authored, deployed, and\nedited entirely from your text editor and terminal. No more fiddling with\nwebsite builders, hosting providers, or content management systems\u2014your blog\nis just a Unison program that you manage with the Unison Codebase Manager.\n\nCheck out theUnison Blog Engine READMEfor detailed instructions on getting\nstarted.\n\n## An overview of how it works\n\nYour blog is a type which indexes Unison Share\n\nYou create your blog as an instance of theBlogtype which includes settings\nlike the blog's title, slug, and the Unison Share project where your posts are\nstored. While your blog ishosted and deployedon the Unison Cloud, posts are\nloaded from your Unison Share project.\n\n\ud83d\udca1\n\nBuilding on top of the existing Unison Share infrastructure offers a huge\nbenefit to authors: it means that the Unison code snippets transcluded in your\nposts support click-through-to-source linking for individual definitions in\nyour code. This means that readers can explore the implementation of your code\nsnippets directly, without needing to click on a static image and find their\nbearings in a huge file view of the code.\n\nThe hard part\u2014you have to write stuff\n\n\ud83d\ude05 We can't tell you what to write, but once you've figured that out, author\nyour blog posts asbase.Docvalues.You can read a quick primer on using the Doc\nformat here.\n\nBe sure topushyour posts to a Unison Share project and set the project's\nvisibility to \"public\" so that the blog engine can find them.\n\nDeploy your blog with one function\n\nWhen you're ready to publish your blog, you'll write a function that links\nyour posts to your blog and provides some additional metadata:\n\n    \n    \n    deploy = Cloud.main do _ = withBlog !myBlog do publish BlogEnv.post \"Hello World\" sampleAuthor (NamespacePath [\"posts\", \"firstPostEver\"]) |> withSummary \"My first post\" Blog.deploy !myBlog\n\nEnteringrun deployin your terminal will deploy your blog to the Unison Cloud.\nYou can then share the URL with your readers! \ud83d\ude80\n\nHappy blogging! \ud83d\udcdd\n\n\u00a9 2024\n\nUnison Computing, a public benefit corp\n\nand contributors.\n\n", "frontpage": false}
