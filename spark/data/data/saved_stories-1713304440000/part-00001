{"aid": "40053609", "title": "Top web application vulnerabilities in 2021\u20132023", "url": "https://securelist.com/top-10-web-app-vulnerabilities/112144/", "domain": "securelist.com", "votes": 1, "user": "baalimago", "posted_at": "2024-04-16 15:52:19", "comments": 0, "source_title": "Top 10 web application vulnerabilities in 2021\u20132023", "source_text": "Top 10 web application vulnerabilities in 2021\u20132023 | Securelist\n\nby Kaspersky\n\n  * CompanyAccount\n  * Get In Touch\n  * Dark mode off\n  * English\n\n    * Russian\n    * Spanish\n\n  * Subscribe Dark mode off Login\n  * Securelist menu\n  * English\n\n    * Russian\n    * Spanish\n  * Existing Customers\n\n    * Personal\n\n      * My Kaspersky\n      * Renew your product\n      * Update your product\n      * Customer support\n    * Business\n\n      * KSOS portal\n      * Kaspersky Business Hub\n      * Technical Support\n      * Knowledge Base\n      * Renew License\n  * Home\n\n    * Products\n    * Trials&Update\n    * Resource Center\n  * Business\n\n    * Kaspersky Next\n    * Small Business (1-50 employees)\n    * Medium Business (51-999 employees)\n    * Enterprise (1000+ employees)\n  * Securelist\n  * Threats\n\n    * Financial threats\n    * Mobile threats\n    * Web threats\n    * Secure environment (IoT)\n    * Vulnerabilities and exploits\n    * Spam and Phishing\n    * Industrial threats\n  * Categories\n\n    * APT reports\n    * Incidents\n    * Research\n    * Malware reports\n    * Spam and phishing reports\n    * Publications\n    * Kaspersky Security Bulletin\n  * Archive\n  * All Tags\n  * APT Logbook\n  * Webinars\n  * Statistics\n  * Encyclopedia\n  * Threats descriptions\n  * KSB 2021\n  * About Us\n\n    * Company\n    * Transparency\n    * Corporate News\n    * Press Center\n    * Careers\n    * Sponsorships\n    * Policy Blog\n    * Contacts\n  * Partners\n\n    * Find a Partner\n    * Partner Program\n\nContent menu Close\n\nSubscribe\n\nResearch\n\n# Top 10 web application vulnerabilities in 2021\u20132023\n\nResearch\n\n12 Mar 2024\n\n8 minute read\n\nTable of Contents\n\n  * Profile of participants and applications\n  * Top 10 web application vulnerabilities\n    * 1\\. Broken Access Control\n    * 2\\. Sensitive Data Exposure\n    * 3\\. Server-Side Request Forgery (SSRF)\n    * 4\\. SQL Injection\n    * 5\\. Cross-Site Scripting (XSS)\n    * 6\\. Broken Authentication\n    * 7\\. Security Misconfiguration\n    * 8\\. Insufficient Protection from Brute-Force Attacks\n    * 9\\. Weak User Password\n    * 10\\. Using Components with Known Vulnerabilities\n  * Conclusions\n\nAuthors\n\n  * Oxana Andreeva\n  * Kaspersky Security Services\n\nTo help companies with navigating the world of web application vulnerabilities\nand securing their own web applications, the Open Web Application Security\nProject (OWASP) online community created the OWASP Top Ten. As we followed\ntheir rankings, we noticed that the way we ranked major vulnerabilities was\ndifferent. Being curious, we decided to find out just how big the difference\nwas. That\u2019s why we set up our own rankings that reflected our take on the most\nwidespread and critical web application vulnerabilities as viewed through a\nprism of eight years\u2019 experience.\n\n## Profile of participants and applications\n\nWe collected the data from a sample of the application security assessment\nprojects our team completed in 2021\u20132023. Most of the web applications were\nowned by companies based in Russia, China and the Middle East.\n\nAlmost half of the applications (44%) were written in Java, followed by NodeJS\n(17%) and PHP (12%). More than a third (39%) used the microservice\narchitecture.\n\nDistribution of programming languages used in writing web applications,\n2021\u20132023 (download)\n\nWe analyzed data obtained through web application assessments that followed\nthe black, gray and white box approaches. Almost every application assessed\nwith gray box was analyzed with black box too, so we combined these two\napproaches in our statistics. Therefore, a vast majority (83%) of the web\napplication projects used the black and gray box methods.\n\nDiscrepancies caused by the differing approaches to analysis\n\nSince the black, gray and white box methods implied different levels of access\nto the applications, the types of vulnerabilities that were most likely to be\nfound were different as well. We compared vulnerabilities discovered with and\nwithout access to application source code. As a result, four out of five most\nwidespread vulnerabilities matched, but there were differences too.\n\nBlack/Gray Box| White Box  \n---|---  \n1\\. Sensitive Data Exposure| VS| 1\\. Broken Access Control  \n2\\. Broken Access Control| 2\\. SQL Injection  \n3\\. Cross-Site Scripting| 3\\. Sensitive Data Exposure  \n4\\. Server-Side Request Forgery| 4\\. Broken Authentication  \n5\\. Broken Authentication| 5\\. Cross-Site Scripting  \n  \nThe most widespread vulnerabilities found during black/gray and white box\nanalysis\n\nIn addition, statistics showed that the white box approach allowed finding a\ngreater number of severe vulnerabilities, such as SQL Injection. On the\naverage, black/gray box analysis revealed 23 vulnerabilities and white box\nanalysis, 30.\n\nShare of vulnerabilities of different risk levels found in per application on\nthe average discovered using black/gray box analysis, 2021\u20132023 (download)\n\nShare of vulnerabilities of different risk levels found in per application on\nthe average discovered using white box analysis, 2021\u20132023 (download)\n\nEven though the white box approach allows finding a greater number of\nvulnerabilities per application, the black and grey box approaches can be used\nto look at the application from the malicious actor\u2019s perspective and identify\nthe vulnerabilities that must be remediated first.\n\n## Top 10 web application vulnerabilities\n\nWe analyzed the results of web application assessment projects to identify the\nmost widespread and severe vulnerabilities the digital world had faced during\nthe previous three years.\n\nThe rankings are expert opinions based on the number of applications\ncontaining a specific vulnerability and the severity of the\nimpact.Recommendations provided in these rankings are general in nature and\nbased on information security best practices standards and guidelines, such as\nOWASP and NIST.  \n---  \n  \nKaspersky Top 10| OWASP ranking  \n---|---  \n1 Broken Access Control| A01  \n2 Sensitive Data Exposure| A02  \n3 Server-Side Request Forgery (SSRF)| A10  \n4 SQL Injection| A03  \n5 Cross Site Scripting (XSS)| A03  \n6 Broken Authentication| A07  \n7 Security Misconfiguration| A05  \n8 Insufficient Protection from Brute Force Attacks| A07  \n9 Weak User Password| A07  \n10 Using Components with Known Vulnerabilities| A06  \n  \n### 1\\. Broken Access Control\n\n70% of the web applications we analyzed contained vulnerabilities associated\nwith access control issues.\n\nDistribution of Broken Access Control vulnerabilities by risk level, 2021\u20132023\n(download)\n\nAlmost half of the Broken Access Control vulnerabilities carried a medium risk\nlevel, and 37%, a high risk level. High-risk vulnerabilities can cause errors\nin applications and affect customers\u2019 business. In one application, inadequate\nvalidation of data being submitted let us reach internal services and\npotentially execute attacks leading to financial loss.\n\nMitigation: implement authentication and authorization controls according to\nthe role-based access model. Unless the resource is intended to be publicly\naccessible, deny access by default.\n\n### 2\\. Sensitive Data Exposure\n\nThis type of vulnerabilities is another one frequently found in web\napplications. Compared to Broken Access Control, Sensitive Data Exposure\ncontained a greater number of low-risk vulnerabilities, but high-risk ones\nwere present as well.\n\nDistribution of Sensitive Data Exposure vulnerabilities by risk level,\n2021\u20132023 (download)\n\nAmong the sensitive data we identified during our analysis were plaintext one-\ntime passwords and credentials, full paths to web application publish\ndirectories and other internal information that could be used to understand\nthe application architecture.\n\nMitigation: do not store files containing sensitive data, such as passwords or\nbackups, in web application publish directories. Avoid disclosing sensitive\ndata when accessing application functions, unless the function itself is used\nto access sensitive data.\n\n### 3\\. Server-Side Request Forgery (SSRF)\n\nThe popularity of the cloud and microservice architectures is on the rise. The\nmicroservice architecture expands the attack surface for SSRF exploitation due\nto more services communicating over HTTP (or other lightweight protocols) when\ncompared to the traditional architecture. More than half (57%) of the\napplications we analyzed contained a vulnerability that let a malicious actor\ncommunicate with the internal services after bypassing application logic:\nServer-Side Request Forgery.\n\nDistribution of SSRF vulnerabilities by risk level, 2021\u20132023 (download)\n\nSpecifically, a malicious actor can use SSRF in a chain with other\nvulnerabilities to develop an attack on the web server or read the application\nsource code.\n\nMitigation: if possible, create an allowlist of resources that the application\ncan request. Prevent requests to any resources not on that list. Do not accept\nrequests that contain complete URLs. Set firewall filters to prevent access to\nunauthorized domains.\n\n### 4\\. SQL Injection\n\nMost high-risk vulnerabilities in 2021\u20132023 were associated with SQL\nInjection. Still, we placed this category fourth as only 43% of the\napplications we analyzed were vulnerable to it.\n\nDistribution of SQL Injection vulnerabilities by risk level, 2021\u20132023\n(download)\n\nVulnerabilities of this type can lead to theft of sensitive information or\nremote code execution. During one of the projects, an SQL injection into an\napplication that was open to signup by any internet user let us obtain the\ncredentials of an internal system administrator.\n\nMitigation: use parameterized SQL queries in application source code instead\nof combining them with a SQL query template. If you cannot use parameterized\nSQL queries, make sure that no data entered by the user and used in generating\nSQL queries can be used to modify the query logic\n\n### 5\\. Cross-Site Scripting (XSS)\n\nCross-Site Scripting vulnerabilities were discovered in 61% of the web\napplications we analyzed. In most cases, the vulnerability carried a medium\nrisk level, therefore we ranked it fifth, even though it was so widespread.\n\nDistribution of XSS vulnerabilities by risk level, 2021\u20132023 (download)\n\nMore than half (55%) of all XSS vulnerabilities were associated with\napplications used by IT companies, followed by the public sector (39%).\n\nAn XSS attack against the application\u2019s clients can be used for obtaining user\nauthentication information, such as cookies, phishing or spreading malware. In\none attack scenario, XSS in a chain with other vulnerabilities allowed\nchanging a user password to a known value and so obtaining access to the\napplication with that user\u2019s privileges.\n\nMitigation: provide processing of web application user input by replacing\npotentially insecure characters that could be used to format HTML pages to\ntheir equivalents that are not format characters. This should be done for any\ndata obtained from external sources and displayed in a browser (including HTTP\nheaders, like User-Agent and Referer).\n\n### 6\\. Broken Authentication\n\nAlthough almost half of the vulnerabilities we discovered in this category\ncarried a medium risk level (47%), there were high-risk ones as well, allowing\naccess to the web application on behalf of the customers\u2019 clients.\n\nDistribution of Broken Authentication vulnerabilities by risk level, 2021\u20132023\n(download)\n\nFor example, a certain application had no JWT (Jason Web Token) signature\ncheck, so a malicious actor could modify their own JWT (by specifying another\nuser\u2019s ID) and use the resulting token to perform various actions inside the\naccount.\n\nMitigation: implement proper validation of authentication data used for\naccessing the application. Verify token and session ID signatures when used.\nSecrets used for authentication (encryption keys, signatures and so on) should\nbe unique and have a high degree of entropy. Do not store secrets in\napplication code.\n\n### 7\\. Security Misconfiguration\n\nA little less than half of the applications we analyzed contained a Security\nMisconfiguration vulnerability. This category covers a spectrum of\nvulnerabilities from enabled debug mode to disabled authentication.\n\nDistribution of Security Misconfiguration vulnerabilities by risk level,\n2021\u20132023 (download)\n\nThe Nginx server of one application we analyzed allowed access to files in a\nparent directory (relative to the directory specified in the Alias directive).\nThis could be used for gaining access to files that contained confidential\ndata.\n\nMitigation: follow security best practices when configuring systems used in\nyour IT-infrastructure. Automate the setup process to eliminate errors when\nsetting up new systems. Use different credentials for test and production\nsystems. Disable unused components.\n\n### 8\\. Insufficient Protection from Brute-Force Attacks\n\nOver a third of the applications we analyzed allowed brute force attacks. One-\nTime Passwords and authentication against various resources, such as accounts\nor file systems, were some of the mechanisms we found to be vulnerable.\n\nDistribution of Insufficient Protection from Brute Force Attacks\nvulnerabilities by risk level, 2021\u20132023 (download)\n\nSpecifically, a poor OTP implementation can allow an attacker to brute-force\nan OTP, bypassing this authentication factor and making unauthorized access to\nthe application easier as a result.\n\nMitigation: use CAPTCHA to make it harder for the attacker to brute-force\ncredentials. You can also use prevention controls (WAF, IPS) to promptly block\nbrute-forcing attempts both in the case of multiple failed sign-ins to the\nsame account and multiple failed sign-ins to different accounts that originate\nwith the same source.\n\n### 9\\. Weak User Password\n\nWeak passwords were set for 22% of the web applications we analyzed.\n\nOne explanation for the relatively low percentage of vulnerabilities in this\ncategory is the fact that security analysts often get to work with customer\ntest benches rather than live systems.\n\nDistribution of Weak User Password vulnerabilities by risk level, 2021\u20132023\n(download)\n\nAlthough the number of applications containing this type of vulnerabilities is\nsmall, the consequences of exploiting weak credentials can be significant.\nDepending on the account type, an attacker can get access to basic application\nfeatures or administrative scenarios, which can impact business processes.\n\nMitigation: implement weak password checks, for example, by running new or\nchanged passwords against a list of the 10,000 weakest passwords. Enforce\npassword length, complexity and expiration requirements, along with other\nmodern evidence-based password policies.\n\n### 10\\. Using Components with Known Vulnerabilities\n\nThe last but not least widespread category is Using Components with Known\nVulnerabilities.\n\nDistribution of vulnerabilities caused by using components with known\nvulnerabilities by risk level, 2021\u20132023 (download)\n\nAmong the vulnerable components were frameworks and various application\ndependencies, such as libraries and modules. Some of these allowed us to get\naccess to servers used by the applications, and thus, penetrate the customers\u2019\ninternal networks.\n\nMitigation: take regular inventories of software components you use, and\nupdate as required. Use only trusted components that have successfully passed\nsecurity tests. Disable any unused components.\n\n## Conclusions\n\nRemediating the most widespread web application vulnerabilities described in\nthis study will help you to protect your confidential data and avoid\ncompromise of web applications and related systems. For improved security of\nweb applications and timely detection of attacks, we recommend you do the\nfollowing:\n\n  * Follow the Secure Software Development Lifecycle (SSDLC).\n  * Run regular application security assessment.\n  * Use logging and monitoring to track application activity.\n\nFor our part, we can offer help discovering vulnerabilities not just in web\napplications, but also in ATMs, IT infrastructure and ICSs. Through awareness\nof vulnerabilities and associated threats, you can better protect your\ninformation assets.\n\nP.S. If you want to discover vulnerabilities and help to develop protection,\nwhile this article sounded simplistic to you, you are welcome to take an\ninterview with us.\n\n  * Passwords\n  * Security assessment\n  * Security services\n  * SQL injection\n  * Vulnerabilities\n  * Vulnerability Statistics\n  * Web apps\n  * XSS\n\nAuthors\n\n  * Oxana Andreeva\n  * Kaspersky Security Services\n\nTop 10 web application vulnerabilities in 2021\u20132023\n\nTable of Contents\n\n  * Profile of participants and applications\n  * Top 10 web application vulnerabilities\n    * 1\\. Broken Access Control\n    * 2\\. Sensitive Data Exposure\n    * 3\\. Server-Side Request Forgery (SSRF)\n    * 4\\. SQL Injection\n    * 5\\. Cross-Site Scripting (XSS)\n    * 6\\. Broken Authentication\n    * 7\\. Security Misconfiguration\n    * 8\\. Insufficient Protection from Brute-Force Attacks\n    * 9\\. Weak User Password\n    * 10\\. Using Components with Known Vulnerabilities\n  * Conclusions\n\nGReAT webinars\n\n13 May 2021, 1:00pm\n\n### GReAT Ideas. Balalaika Edition\n\n  * Boris Larin\n  * Denis Legezo\n\n26 Feb 2021, 12:00pm\n\n### GReAT Ideas. Green Tea Edition\n\n  * John Hultquist\n  * Brian Bartholomew\n  * Suguru Ishimaru\n  * Vitaly Kamluk\n  * Seongsu Park\n  * Yusuke Niwa\n  * Motohiko Sato\n\n17 Jun 2020, 1:00pm\n\n### GReAT Ideas. Powered by SAS: malware attribution and next-gen IoT\nhoneypots\n\n  * Marco Preuss\n  * Denis Legezo\n  * Costin Raiu\n  * Kurt Baumgartner\n  * Dan Demeter\n  * Yaroslav Shmelev\n\n26 Aug 2020, 2:00pm\n\n### GReAT Ideas. Powered by SAS: threat actors advance on new fronts\n\n  * Ivan Kwiatkowski\n  * Maher Yamout\n  * Noushin Shabab\n  * Pierre Delcher\n  * F\u00e9lix Aime\n  * Giampaolo Dedola\n  * Santiago Pontiroli\n\n22 Jul 2020, 2:00pm\n\n### GReAT Ideas. Powered by SAS: threat hunting and new techniques\n\n  * Dmitry Bestuzhev\n  * Costin Raiu\n  * Pierre Delcher\n  * Brian Bartholomew\n  * Boris Larin\n  * Ariel Jungheit\n  * Fabio Assolini\n\nFrom the same authors\n\n### What to do if your company was mentioned on Darknet?\n\n### Understanding Malware-as-a-Service\n\n### Managed Detection and Response in 2022\n\n### Overview of Google Play threats sold on the dark web\n\n### Come to the dark side: hunting IT professionals on the dark web\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nIn the same category\n\n### Network tunneling with... QEMU?\n\n### An educational robot security research\n\n### A lightweight method to detect potential iOS malware\n\n### Operation Triangulation: The last (hardware) mystery\n\n### Windows CLFS and five exploits used by ransomware operators (Exploit #4 \u2013\nCVE-2023-23376)\n\n##### Latest Posts\n\nMalware reports\n\n### Android malware, Android malware and more Android malware\n\n  * GReAT\n\nIndustrial threats\n\n### Threat landscape for industrial automation systems. H2 2023\n\n  * Kaspersky ICS CERT\n\nSOC, TI and IR posts\n\n### A patched Windows attack surface is still exploitable\n\n  * Elsayed Elrefaei\n  * Ashraf Refaat\n  * Kaspersky GERT\n\nMalware descriptions\n\n### What\u2019s in your notepad? Infected text editors target Chinese users\n\n  * Sergey Puzan\n\n##### Latest Webinars\n\nTechnologies and services\n\n11 Dec 2023, 4:00pm 60 min\n\n### The Future of AI in cybersecurity: what to expect in 2024\n\n  * Vladimir Dashchenko\n  * Victor Sergeev\n  * Vladislav Tushkanov\n  * Dennis Kipker\n\nThreat intelligence and IR\n\n30 Nov 2023, 4:00pm 70 min\n\n### Responding to a data breach: a step-by-step guide\n\n  * Anna Pavlovskaya\n\nCyberthreat talks\n\n14 Nov 2023, 4:00pm 60 min\n\n### 2024 Advanced persistent threat predictions\n\n  * Igor Kuznetsov\n  * David Emm\n  * Marc Rivero\n  * Dan Demeter\n  * Sherif Magdy\n\nCyberthreat talks\n\n09 Nov 2023, 5:00pm 60 min\n\n### Overview of modern car compromise techniques and methods of protection\n\n  * Alexander Kozlov\n  * Sergey Anufrienko\n\n##### Reports\n\n### HrServ \u2013 Previously unknown web shell used in APT attack\n\nIn this report Kaspersky researchers provide an analysis of the previously\nunknown HrServ web shell, which exhibits both APT and crimeware features and\nhas likely been active since 2021.\n\n### Modern Asian APT groups\u2019 tactics, techniques and procedures (TTPs)\n\nAsian APT groups target various organizations from a multitude of regions and\nindustries. We created this report to provide the cybersecurity community with\nthe best-prepared intelligence data to effectively counteract Asian APT\ngroups.\n\n### A cascade of compromise: unveiling Lazarus\u2019 new campaign\n\nWe unveil a Lazarus campaign exploiting security company products and examine\nits intricate connections with other campaigns\n\n### How to catch a wild triangle\n\nHow Kaspersky researchers obtained all stages of the Operation Triangulation\ncampaign targeting iPhones and iPads, including zero-day exploits, validators,\nTriangleDB implant and additional modules.\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nThreats\n\nThreats\n\n  * APT (Targeted attacks)\n  * Secure environment (IoT)\n  * Mobile threats\n  * Financial threats\n  * Spam and phishing\n  * Industrial threats\n  * Web threats\n  * Vulnerabilities and exploits\n\nCategories\n\nCategories\n\n  * APT reports\n  * Malware descriptions\n  * Security Bulletin\n  * Malware reports\n  * Spam and phishing reports\n  * Security technologies\n  * Research\n  * Publications\n\nOther sections\n\n  * Archive\n  * All tags\n  * Webinars\n  * APT Logbook\n  * Statistics\n  * Encyclopedia\n  * Threats descriptions\n  * KSB 2023\n\n\u00a9 2024 AO Kaspersky Lab. All Rights Reserved. Registered trademarks and\nservice marks are the property of their respective owners.\n\n  * Privacy Policy\n  * License Agreement\n  * Cookies\n\n##### Subscribe to our weekly e-mails\n\nThe hottest research right in your inbox\n\nNotifications\n\n", "frontpage": false}
