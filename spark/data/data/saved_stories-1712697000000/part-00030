{"aid": "39978071", "title": "Why Review Code? (2018)", "url": "https://sophiebits.com/2018/12/25/why-review-code", "domain": "sophiebits.com", "votes": 1, "user": "alexharri", "posted_at": "2024-04-09 10:49:49", "comments": 0, "source_title": "Why review code? \u2013 Sophie Alpert", "source_text": "Why review code? \u2013 Sophie Alpert\n\n# Sophie Alpert\n\n## Why review code?\n\nDecember 25, 2018\n\nA friend asked me recently why it\u2019s valuable to do code review. Most Silicon\nValley tech companies, at least, do code review on every change to get at\nleast two sets of eyes on it. At one of my earlier jobs we did opt-in code\nreview (rarely) for a while, then a new employee coming from Google joined us\nand encouraged us to review all our code \u2014 which we did. It was a great\ndecision.\n\nIf you do it right, code review shouldn\u2019t feel onerous. You and your reviewer\naren\u2019t adversaries; you\u2019re working together to build the best software you can\ntogether. (It\u2019s important to not take feedback personally \u2014 even if your code\nneeds to be changed, that doesn\u2019t mean you are problematic. It\u2019s normal to get\nfeedback, and that\u2019s what helps you grow!)\n\nSome companies have complicated rules about how many people have to review\neach piece of code, with strict \u201cowners\u201d for who is responsible for each piece\nof code. I\u2019ve never felt that to be necessary; I prefer a simpler system where\nthe only rule is that each piece of code must be reviewed by one person. In\npractice you\u2019ll still send reviews to the people responsible for maintaining\nthe particular code you changed, but it\u2019s nice to not have the hard\nrequirement.\n\nHere are the biggest reasons I thought of for why code review is valuable.\nThere\u2019s a lot of them!\n\n  1. The code itself. The most obvious value in code review is often framed in \u201ccatching bugs\u201d. Or if you look a little further, catching cases where there are best practices or unspoken rules that the author didn\u2019t know about, where a reviewer can help make the actual concrete code better by responding to it.\n  2. Macro-level knowledge sharing. When you review other people\u2019s code, you tend to learn new techniques that can benefit you later \u2014 and vice versa, if someone suggests a better way to do something when your code is under review. If you can take what you learned and use it later, you\u2019ll grow as an engineer.\n  3. Micro-level knowledge sharing. Or, mitigating the \u201cbus factor\u201d by increasing the number of people who are familiar with any given piece of code.\n  4. Direction sharing. Relatedly, code review forces you to communicate to teammates what you\u2019re doing, which helps ensure that you don\u2019t end up going in a wrong direction for days or weeks by giving them a chance to push back.\n  5. Communication practice. Being able to communicate clearly, both within a team and beyond it, is one of the most important skills for succeeding at work! Code review gives you a chance to practice writing clearly, both in describing the purpose of a change and when giving feedback on one. With any luck, you\u2019ll be more prepared for the next time you need to write something that \u201creally matters\u201d.\n  6. Historical record. In my experience, people tend to write much better commit messages when they know someone\u2019s reading them. That\u2019s often useful later when looking back at old changes!\n  7. Something to discuss. When you\u2019re trying to agree on what change to make, it can sometimes be hard to verbally describe and agree on the specifics of, say, a particular algorithm. Communicating over a piece of code can be more precise, since code tends to be unambiguous.\n  8. Team cohesion. When you do regular code reviews, work feels a little more like a single team working together instead of each person operating \u201cin their own lane\u201d.\n  9. Reading practice. Getting practice reading other people\u2019s code helps you remember how to make your own code more readable (and thus, maintainable). Which leads to better code forever after!\n\nIf I had to pick, reasons 2, 5, and 6 probably stand out to me as the most\nvaluable.\n\nemail twitter github stack overflow linkedin\n\nrss\n\n", "frontpage": false}
