{"aid": "39977866", "title": "The Spiral of UX Decisions", "url": "https://www.conradakunga.com/blog/dogs-will-always-bark-part-i-you-make-i-check/", "domain": "conradakunga.com", "votes": 1, "user": "davidlemayian", "posted_at": "2024-04-09 10:05:26", "comments": 0, "source_title": "Dogs Will Always Bark - Part I - You Make I Check", "source_text": "Dogs Will Always Bark - Part I - You Make I Check | Conrad Akunga, Esquire. Code\n\nConrad Akunga, Esquire. Code\n\n# Dogs Will Always Bark - Part I - You Make I Check\n\nApr 5, 2024\n\n[The Business Of Software, Human Nature]\n\nIf you have not already, you will, inevitably, run into a system that has a\nconcept of a maker and a checker.\n\nThe concept is pretty simple:\n\n  1. The maker initiates a transaction\n  2. The checker verifies the details and approves the transaction for posting. Alternatively, they may reject it.\n\nThe maker, typically, will get a screen like this:\n\nThe maker is free to edit the trade, as long as the checker has not approved\nit.\n\nThe checker then is responsible for checking and approving the trade.\n\nIf you notice, the checker is not able to amend the trade transaction details.\nThey can only either approve or reject the trade.\n\nIn this fashion there is a Chinese Wall between the maker and the checker, and\nboth will take responsibility for the posted trade.\n\nAt least, that is the intent.\n\nIn theory, things should work like this:\n\n  1. The maker receives an order (via email, vocally, system posting, etc)\n  2. The maker proceeds to key in said order to the system\n  3. The checker sees the order\n  4. The checker retrieves the original customer order\n  5. The checker compares those details against what the maker keyed in.\n  6. If satisfied, approve. If not, reject and give reasons\n\nThen requests start to come like this:\n\nThis is accompanied by a mock-up.\n\nThey want to approve each trade easily without having to open each trade to\nconfirm the details. A button next to each trade makes sense.\n\nFair enough. This is implemented.\n\nWithin a few days, a follow up request comes:\n\nThe mock-up is not far behind.\n\nSound reasonable. They want to check each trade for approval and then approve\nthem as a batch.\n\nThen another request comes.\n\nThey want a button that will conveniently select all the trades for a single\nposting, saving the time to check each trade.\n\nIn this scenario, whether there is one trade one hundred, approval can be done\nin exactly two button clicks.\n\nAt this point the carefully prepared process of maker and checker has gone out\nthe window.\n\nWhat is in fact happening is the following:\n\nThis is just human nature at work - people will always optimize for the least\neffort, and will over-estimate their ability to spot problems. Especially if\nskimming through potential issues.\n\nI am reminded of an infamous \u201ctyping error\u201d that affected Kenya\u2019s budget some\nyears back:\n\nThis means all the clerks, line managers, senior managers going all the way to\nthe top failed to flag this error because \u201cthe speech kinda looks OK to me!\u201d\n\nOther than (tactfully) refusing to implement these features, is there a way to\nincentivize the right behaviour in scenarios such as these? And is there even\na guarantee that if you forced users to open the forms and read the trade\ndetails that they would, in fact, read them from the original email or order?\n\nYou can email me your ideas and suggestions!\n\nconradakunga -at- gmail.com\n\nHappy hacking!\n\n## Conrad Akunga, Esquire. Code\n\n  * Conrad Akunga, Esquire. Code\n  * conradakunga@gmail.com\n\n  * conradakunga\n  * roomthinker\n\nI have been writing software professionally in Nairobi, Kenya for over 25\nyears. And I'm still learning.\n\n", "frontpage": false}
