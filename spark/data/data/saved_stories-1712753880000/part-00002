{"aid": "39987735", "title": "Enhance WASM: Back End Agnostic SSR for Web Components", "url": "https://begin.com/blog/posts/2024-04-08-introducing-enhance-wasm", "domain": "begin.com", "votes": 1, "user": "robin_reala", "posted_at": "2024-04-10 06:56:40", "comments": 0, "source_title": "Introducing Enhance WASM \u2014 Begin Blog", "source_text": "Introducing Enhance WASM \u2014 Begin Blog\n\nBegin\n\n# Introducing Enhance WASM\n\nby Brian LeRoux @brian@indieweb.social on April 8, 2024\n\n## Backend agnostic server-side rendering (SSR) for Web Components\n\nWeb Components are the browser native way to extend HTML. But as a primarily\nbrowser based technology they are defined with JavaScript which limits them to\neither rendering solely client side \u2014 which has janky performance, poor SEO,\nand is not optimally accessible \u2014 or within a server-side JavaScript runtime,\nwhich isn\u2019t always an option for shops that use other backend runtimes.\n\nEnhance WASM unlocks server-side rendering Web Components for any backend\nruntime.\n\n  * Write Once, Render Anywhere: Author standard web components and deploy them with any backend. Enhance WASM takes care of rendering across any server environment.\n  * Seamless Integration: Easily integrate Enhance WASM into your existing projects with minimal setup. Extensive documentation, high quality baseline components, and broad community support make adoption a breeze.\n  * Better DX: Stop wasting time on slow build steps and reimplementing brittle frontend code that already works. Web standards ensure rock solid reliability and performance without rewrites.\n  * Performance Optimized: No more spinners or skeleton screens. Enjoy faster load times and improved SEO. Your users get a snappy experience, and you get better developer velocity.\n\nWe really believe this is a leapfrog moment for frontend development. Server-\nside rendering is a key requirement for personalized web applications.\nOrganizations that prioritize the stability, performance and accessibility of\nweb standards run workloads in a huge variety of backend runtimes. Now we can\nbuild browser native web interfaces that cross the runtime chasm.\n\n## Try it out and get involved!\n\nEnhance is completely open source code and we need your help! We\u2019re opening up\nEnhance WASM immediately with support for Node, Deno, Python, Ruby, PHP, Java,\nC#, Rust, and Go. We need your help testing and implementing support for these\nand other runtimes! If you want to see a runtime not mentioned here please let\nus know.\n\nExample starter projects:\n\n  * Node\n  * Deno\n  * Python\n  * Ruby on Rails\n  * PHP with Wordpress\n  * Java\n\n## FAQ\n\nHow are components authored?\n\nComponents are authored exactly per the Web Components specification. Enhance\nWASM also enables a more backend oriented pure functional style and has\nseveral helper libraries for making common client-side patterns cleaner.\n\nDo I need to run client JS to render components?\n\nNo. Web Components are completely rendered server-side HTML. You can then\noptionally run client-side upgrades should the element need it. It is worth\nnoting we\u2019ve found the majority of elements only need to be server rendered\nand do not require any client javascript at all.\n\nCan I use client-side JS with these components?\n\nOf course!\n\nWhat about Lit?\n\nWe definitely hear community folk when they say, \u201cjust use Lit\u201d, but per the\nLit documentation their own SSR renderer isn\u2019t production ready today, and\neven then is Node.js only. Lit is ultimately more focused on client-side\nupgrade than server-side usage which is totally cool! Enhance encourages SSR\nand \u201cHTML first\u201d and treats the client-side element upgrade as a progressive\nenhancement step. You can use Enhance to render initial HTML and Lit for\nclient-side interactions if that makes sense for your project. We find most\nelements are not client-side interactive anyhow.\n\nSay hello to Enhance WASM \u2014 backend agnostic server-side rendering for web\ncomponents.\n\nBrian LeRoux url\n\n\u00a9 2024 Beginner Web Corp. Made with \ud83d\udc96 in California\n\n", "frontpage": false}
