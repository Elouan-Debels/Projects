{"aid": "40065328", "title": "The Valley of Code \u2013 Web Development Manual", "url": "https://thevalleyofcode.com/", "domain": "thevalleyofcode.com", "votes": 2, "user": "redbell", "posted_at": "2024-04-17 14:40:42", "comments": 0, "source_title": "The Valley of Code", "source_text": "The Valley of Code\n\n/* your web development manual */\n\n[changelog]\n\n[about]\n\n[valley pro]\n\n1:| Fundamentals  \n---|---  \n2:| HTML and CSS  \n3:| Tools  \n4:| Deployment  \n5:| JavaScript  \n6:| TypeScript  \n7:| More CSS  \n8:| More JavaScript  \n9:| DOM and Events  \n10:| Networking  \n11:| Browser API  \n12:| Server Runtimes  \n13:| HTTP Servers  \n14:| Forms  \n15:| Databases  \n16:| Libraries and frameworks  \n  \nCopyright 2024\n\nThe Valley of Code\n\nFundamentals\n\nWelcome to The Valley of Code. Your journey in Web Development starts here. In\nthe fundamentals section you'll learn the basic building blocks of the\nInternet, the Web and how its fundamental protocol (HTTP) works.\n\nThe Internet\n\nThe basics of computer networks and protocols, introducing URLs, DNS, TCP, and\nUDP\n\n0:| Introduction  \n---|---  \n1:| What is a URL  \n2:| What is a port  \n3:| The DNS protocol  \n4:| The TCP protocol  \n5:| The UDP protocol  \n  \nThe Web\n\nThe key concepts of the web: HTTP, what is a Web browser, and what is a Web\nserver\n\n0:| Introduction  \n---|---  \n1:| The HTTP protocol  \n2:| Hyperlinks  \n3:| What is a Web server  \n4:| What is a Web browser  \n  \nHTML and CSS\n\nThis section introduces the basics of HTML and CSS: how we define content, and\nhow we style it. There's much more about HTML and CSS and we'll learn more\nabout both later. But here's an intro to both.\n\nHTML\n\nLet's learn the basics of HTML\n\n0:| Introduction  \n---|---  \n1:| Your first HTML page  \n2:| Text tags  \n3:| Attributes  \n4:| Links  \n5:| Images  \n6:| Lists  \n7:| Head tags  \n8:| Container tags  \n9:| DEMO Using CodePen  \n10:| DEMO Using VS Code  \n  \nCSS\n\nLet's learn the basics of CSS\n\n0:| Introduction  \n---|---  \n1:| Colors  \n2:| More selectors  \n3:| Cascade  \n4:| Specificity  \n5:| Units  \n6:| Advanced selectors  \n7:| Typography  \n8:| The box model  \n9:| The display property  \n10:| Responsive design  \n11:| DEMO Create a simple design  \n  \nTools\n\nWe could do nothing without good tools. In this section I introduce a few very\npowerful tools you will use every day: VS Code, Git, and GitHub\n\nVS Code\n\nVS Code is a very powerful editor with countless great features and 3rd party\nextensions to do basically anything\n\n0:| Introduction  \n---|---  \n1:| The interface  \n2:| Opening folders  \n3:| Editing  \n4:| Search  \n5:| Source control  \n6:| Extensions  \n7:| Themes  \n8:| Recommended extensions  \n9:| The command palette  \n10:| Shortcuts  \n11:| Customization  \n12:| Terminal  \n  \nGit\n\nWe use Git to save our code in snapshots that we can go back to whenever we\nwant. And it lets people work together on code.\n\n0:| Introduction  \n---|---  \n1:| Installing Git  \n2:| Initialize a repository  \n3:| Commit changes  \n4:| Branches  \n5:| Push and pull  \n6:| Working with a remote  \n7:| Solving conflicts  \n8:| .gitignore  \n  \nGitHub\n\nGitHub is the de-facto centralized store for anything related to code, based\nupon Git. Not just that, it is an essential tool in collaboration, project\nmanagement and deployment workflows.\n\n0:| Introduction  \n---|---  \n1:| GitHub issues  \n2:| Social coding  \n3:| Pull requests  \n4:| Project management  \n5:| Comparing changes  \n6:| Webhooks and integrations  \n7:| What happens after pushing  \n8:| DEMO Create a GitHub account  \n9:| DEMO Using GitHub desktop  \n10:| DEMO Using Git in VS Code  \n  \nDeployment\n\nDeployment is the process of putting your code \"out there\", on the Internet,\nfor everyone else to use. We commonly work on local machines, but when it is\ntime to release, we deploy the code on a service or cloud server.\n\nNetlify\n\nNetlify is a great deployment platform, ideal for simple sites.\n\n0:| Introduction  \n---|---  \n1:| Create a Netlify account  \n2:| DEMO Deploy to Netlify  \n  \nVercel\n\nVercel is a great deployment platform, ideal for more complex sites.\n\n0:| Introduction  \n---|---  \n1:| Create a Vercel account  \n2:| DEMO Deploy to Vercel  \n  \nJavaScript\n\nJavaScript is \"the Web programming language\" because it has one key feature:\nit is the only language that browsers understand. As a Web developer, it is\nessential that you learn this language very well.\n\nBasics\n\nThe fundamentals of JavaScript\n\n0:| Introduction  \n---|---  \n1:| Literals, identifiers and variables  \n2:| Comments  \n3:| The difference between let, const and var  \n4:| Types  \n5:| Operators and expressions  \n6:| Let's start with arithmetic operators  \n7:| The assignment operator  \n8:| Operators precedence  \n9:| Strings  \n10:| Numbers  \n11:| Semicolons, white space and sensitivity  \n  \nArrays\n\nLearn how to use arrays in JavaScript\n\n0:| Introduction  \n---|---  \n1:| Number of items in an array  \n2:| Create a new array from an existing array  \n3:| Adding an item to an existing array  \n4:| Adding at the beginning of an array  \n5:| Adding multiple items to the array  \n6:| Removing an item from an array  \n7:| Modifying an existing array without mutating it  \n8:| Arrays of arrays  \n9:| Filling an array  \n10:| Array destructuring  \n11:| Check if an array contains a specific value  \n  \nConditionals\n\nDecisions, decisions. Conditionals are how we do something, or something else.\n\n0:| Introduction  \n---|---  \n1:| Comparison operators  \n2:| `if` statements  \n3:| How to use `else`  \n4:| `switch`  \n5:| The ternary operator  \n  \nLoops\n\nLoops are one key control flow structure of any programming language.\nJavaScript provides quite a few different ways to loop.\n\n0:| Introduction  \n---|---  \n1:| The `for` loop  \n2:| The `do-while` loop  \n3:| The `while` loop  \n4:| The `for-of` loop  \n5:| The `for-in` loop  \n6:| Other kinds of loops  \n  \nFunctions\n\nWe separate tiny portions of our code into a function so we can call this\nfunction multiple times, move it to a separate file, and much more.\n\n0:| Introduction  \n---|---  \n1:| Function parameters  \n2:| Returning values from a function  \n3:| Arrow functions  \n4:| Nesting functions  \n5:| Immediately-invoked functions  \n6:| Recursive functions  \n  \nObjects\n\nObjects are a super powerful data structure we use all the time in JavaScript.\n\n0:| Introduction  \n---|---  \n1:| How to create an object  \n2:| Object properties  \n3:| Objects are passed by reference  \n4:| Methods  \n5:| Passing objects as function arguments or returning objects from a function  \n6:| Accessing a property of the object inside a method using `this`  \n7:| Object destructuring  \n8:| Cloning objects  \n9:| Sort an array of objects by a property value  \n10:| Merging two objects into one  \n11:| apply, call, bind  \n  \nTypeScript\n\nTypeScript\n\n0:| Introduction  \n---|---  \n1:| Your first TypeScript program  \n2:| Types  \n3:| Typing functions  \n4:| The editor helps you with type errors  \n5:| Running TypeScript code  \n6:| Valid types  \n7:| Type aliases and interfaces  \n8:| Union types  \n9:| Typing arrays with generics  \n10:| The DX of editing TypeScript  \n11:| There's more...  \n12:| tsconfig.json COMING SOON  \n13:| Installing types COMING SOON  \n  \nMore CSS\n\nWe saw the fundamentals of CSS previously. Let's now learn more CSS features.\n\nCSS Grid\n\nCSS Grid is the best way to organize content on a, guess what, grid.\n\n0:| Introduction  \n---|---  \n1:| grid-template-columns and grid-template-rows  \n2:| Setting columns and rows dimensions  \n3:| Gap between the cells  \n4:| Span items on multiple columns and/or rows  \n5:| Minimum row width  \n6:| Layout using grid-template-areas  \n7:| DEMO Example: simple grid layout  \n8:| DEMO Example: grid layout with header, sidebar, content and footer  \n  \nFlexbox\n\nIf you need to organize items in a single row, on a single column, you might\nprefer using Flexbox over Grid.\n\n0:| Introduction  \n---|---  \n1:| Align rows or columns  \n2:| Vertical and horizontal alignment  \n3:| Wrap  \n4:| Moving items before / after another one using order  \n5:| Vertical alignment using align-self  \n6:| Grow or shrink an item if necessary  \n7:| DEMO Create a layout using Flexbox  \n  \nPositioning\n\nWe can use different positioning strategies in CSS. It is important you know\nthem all well.\n\n0:| Introduction  \n---|---  \n1:| Relative positioning  \n2:| Absolute positioning  \n3:| Fixed positioning  \n4:| Sticky positioning  \n  \nTailwind CSS\n\nTailwind CSS is a library that lets you apply CSS to your project by adding a\nclass to an HTML element rather than writing a CSS rule in a CSS file. It is a\nvery popular technology, I love it, lots of people love it, you might love it\ntoo.\n\n0:| Introduction  \n---|---  \n1:| Box model properties  \n2:| Colors  \n3:| Typography  \n4:| Flexbox and Grid in Tailwind  \n5:| Modifiers  \n6:| Responsive design in Tailwind  \n  \nMore JavaScript\n\nWe previously learned the most essential JavaScript basics, including\nfunctions, objects, arrays. Now we will learn some more.\n\nArrays + functions\n\nCombine arrays, a very useful data structure, with the power of functions, to\ndo awesome things.\n\n0:| Introduction  \n---|---  \n1:| map()  \n2:| filter()  \n3:| reduce()  \n4:| sort()  \n5:| find() and findIndex()  \n6:| forEach()  \n  \nOOP in JS\n\nWe learned about objects before. Now let's learn about object-oriented\nprogramming.\n\n0:| Introduction  \n---|---  \n1:| Classes  \n2:| Class methods  \n3:| Private class properties  \n4:| Constructors  \n5:| Inheritance  \n6:| Prototypes  \n  \nAsynchronous\n\nThese days you can rarely write a JavaScript program without thinking about\nasynchronous code. You must understand this deeply.\n\n0:| Introduction  \n---|---  \n1:| Callbacks  \n2:| Timers  \n3:| Promises  \n4:| Async functions  \n5:| Chaining promises  \n6:| Orchestrating promises  \n  \nScope, hoisting, event loop\n\nA bit more advanced concepts, but essentials to know if you want to write\nprograms that run correctly as you want.\n\n0:| Introduction  \n---|---  \n1:| Global scope  \n2:| Function scope  \n3:| Block scope  \n4:| Shadowing  \n5:| Hoisting  \n6:| Closures  \n7:| An issue with `var` variables and loops  \n8:| The event loop  \n  \nES Modules\n\nLearn how to import functions and variables from other files and libraries\n\n0:| Introduction  \n---|---  \n1:| Using import and export  \n2:| .mjs files  \n3:| Default exports  \n4:| Multiple exports  \n5:| Renaming exports  \n6:| Using the `script` tag  \n  \nErrors and exceptions\n\nHandling errors and exceptions is how you write programs that never crash\nbadly but always print nice error messages in case something bad happens.\n\n0:| Introduction  \n---|---  \n1:| Types of errors  \n2:| Creating exceptions  \n3:| Handling exceptions  \n4:| Finally  \n5:| Nested try blocks  \n  \nBuilt-in objects\n\nJavaScript offers a ton of useful function and built-in objects.\n\n0:| Introduction  \n---|---  \n1:| The global object  \n2:| Object properties  \n3:| Number  \n4:| String  \n5:| Math  \n6:| JSON  \n7:| Date  \n8:| Intl  \n9:| Set and Map  \n  \nMore operators\n\nThere is an operator for everything. Almost.\n\n0:| Introduction  \n---|---  \n1:| More assignment operators  \n2:| Logical operators  \n3:| Nullish coalescing  \n4:| Optional chaining  \n5:| Logical nullish assignment  \n  \nDOM and Events\n\nUsing JavaScript we can \"hook\" into a Web page and change everything about it,\nand listen for events when something happens, so we can do whatever we want.\n\nThe DOM\n\nLearn how to use the DOM APIs with JavaScript.\n\n0:| Introduction  \n---|---  \n1:| The `window` object  \n2:| The `document` object  \n3:| Types of nodes  \n4:| Traversing the DOM  \n5:| Editing the DOM  \n  \nBrowser events\n\nWe can listen for any kind of event using JavaScript, including browser-\ninitiated events, or user-initiated events.\n\n0:| Introduction  \n---|---  \n1:| Handling events  \n2:| The `DOMContentLoaded` event  \n3:| The `event` object  \n4:| Mouse events  \n5:| Keyboard events  \n6:| `preventDefault()`  \n7:| Stopping event propagation  \n8:| Bubbling and capturing  \n9:| Form submit event  \n10:| Input fields events  \n11:| Creating custom events  \n  \nNetworking\n\nThe fundamentals of HTTP networking, and how to use fetch(), and Request /\nResponse\n\nHTTP\n\nThe protocol of the Web: Hyper Text Transfer Protocol\n\n0:| Introduction  \n---|---  \n1:| An HTTP request  \n2:| HTTP Methods  \n3:| HTTP Status Codes  \n4:| HTTP Client/Server communication  \n5:| HTTP Request Headers  \n6:| HTTP Response Headers  \n7:| HTTPS  \n8:| HTTP/2  \n9:| HTTP/3  \n  \nFetch\n\nHow to execute network requests using JavaScript. And how to inspect the\nRequest and Response objects.\n\n0:| Introduction  \n---|---  \n1:| How to use Fetch  \n2:| Catching errors in network requests  \n3:| The Response object  \n4:| Getting the body content  \n5:| The Request object  \n6:| Request headers  \n7:| POST requests  \n  \nBrowser API\n\nCookies\n\n0:| Introduction  \n---|---  \n1:| Setting cookies  \n2:| Setting a cookie expiration date  \n3:| Setting a cookie path  \n4:| Setting a cookie domain  \n5:| Cookies security  \n6:| Updating a cookie  \n7:| Deleting a cookie  \n8:| Accessing the value of a cookie  \n9:| Checking if a cookie exists  \n10:| Inspecting cookies  \n  \nStorage\n\n0:| Introduction  \n---|---  \n1:| Session vs local storage  \n2:| Setting an item  \n3:| Getting an item value  \n4:| Removing an item  \n5:| Clearing storage  \n6:| Storage size limits  \n  \nHistory API\n\n0:| Introduction  \n---|---  \n1:| Navigating the history  \n2:| Add an entry to the history  \n3:| Modify history entries  \n4:| Access the current history entry state  \n5:| The `popstate` event  \n6:| The `hashchange` event  \n  \nIndexedDB\n\n0:| Introduction  \n---|---  \n1:| Loading the idb library  \n2:| Creating a database and a store  \n3:| Adding data into a store  \n4:| Retriving data from a store  \n5:| Deleting data  \n6:| Migrations  \n7:| Unique keys  \n  \nGeolocation\n\n0:| Introduction  \n---|---  \n1:| Getting the user's position  \n2:| Watching the position for changes  \n3:| If the user denies the position  \n4:| Adding more options  \n  \nDrag and Drop\n\n0:| Introduction  \n---|---  \n1:| Drop targets  \n2:| Drag events  \n3:| Dragging data  \n4:| Set / get the effect  \n5:| The data being transferred  \n  \nServer Runtimes\n\nServer Runtimes are tools that let us run JavaScript on the server. In this\nsection we'll learn about Node.js and Bun. Deno is another popular server\nruntime, but other more niche ones exist, mostly to power specific deployment\nplatforms. Your takeaway is that there are several ways to run JavaScript on\nthe server. Node.js is the most popular, Bun the most up-and-coming.\n\nNode.js\n\nNode.js is the foundational runtime for server-side JavaScript. It was the one\nthat created everything back in 2009.\n\n0:| Introduction  \n---|---  \n1:| Installing Node.js on your computer  \n2:| How to write your first Node.js program  \n3:| Importing other files  \n4:| Using npm to install packages  \n5:| Using built-in modules  \n  \nBun\n\nBun is a new runtime for server-side JavaScript, optimized for speed and\nperformance, and developer experience.\n\n0:| Introduction  \n---|---  \n1:| Installing Bun  \n2:| Running your first Bun program  \n3:| Working with packages  \n4:| Bun's built-in features  \n  \nHTTP Servers\n\nThere are quite a few lightweight libraries/frameworks that build upon Server\nRuntimes to provide an easy to use set of features to build HTTP servers. We\ncan call them microframeworks too. I picked Hono as the modern, feature-rich\none\n\nExpress\n\nExpress is historically the most popular Node.js framework, and while more\nmodern alternatives exist, it is still a foundational framework you will find\nall the time, so it is worth learning it\n\n0:| Introduction  \n---|---  \n1:| Introduction to Express  \n2:| Request parameters  \n3:| Send a response to the client  \n4:| Send a JSON response  \n5:| Manage cookies  \n6:| Work with HTTP headers  \n7:| Handling redirects  \n8:| Routing  \n9:| Template engines  \n10:| Middleware  \n11:| Serving Static Assets with Express  \n12:| Send files to the client  \n13:| Sessions  \n14:| Validating and sanitizing input  \n15:| Handling form data  \n  \nHono\n\nA server-side lightweight Web Framework similar to Express but with modern\nfeatures\n\n0:| Introduction  \n---|---  \n1:| Your first Hono app  \n2:| The Request object  \n3:| Send a response to the client  \n4:| Manage cookies  \n5:| Work with HTTP headers  \n6:| Handling redirects  \n7:| Routing  \n8:| JSX templates  \n9:| Middleware  \n10:| Hono on Node.js  \n11:| Handling forms COMING SOON  \n  \nForms\n\nOf all the HTML tags, forms need their own section because of how important\nthey are.\n\nForms 101\n\nThe basics of building and submitting forms\n\n0:| Introduction  \n---|---  \n1:| Creating a form  \n2:| Submitting a form  \n3:| Receiving the form data  \n4:| Form validation  \n5:| More tags useful in forms  \n  \nForm fields\n\nHow to use all the built-in form fields you can think of!\n\n0:| Introduction  \n---|---  \n1:| Form submit field  \n2:| Specialized input fields  \n3:| Checkboxes  \n4:| Radio buttons  \n5:| File input fields  \n6:| Textarea  \n7:| Select  \n8:| Autocompleting form fields  \n  \nForms and JavaScript\n\nHow to interact with forms using JavaScript\n\n0:| Introduction  \n---|---  \n1:| Inspect the value of an item  \n2:| Listen to events on input fields  \n3:| Intercepting a form submit event using JavaScript  \n  \nDatabases\n\nWe use databases to store and retrieve data dynamically. In this section we'll\ntalk about relational databases.\n\nSQL\n\nIntroduction to SQL, the language we use to talk to a relational database.\nFocusing on Postgres\n\n0:| Introduction  \n---|---  \n1:| Using TablePlus  \n2:| Create a Postgres database  \n3:| Create a new table  \n4:| Add data to a table  \n5:| Query data with SELECT  \n6:| Delete data from the database  \n7:| Update data with UPDATE  \n8:| Null constraints  \n9:| Unique and primary keys  \n10:| Updating a table structure  \n11:| Joins  \n12:| DEMO Using Vercel Postgres COMING SOON  \n  \nKysely\n\nKysely is an awesome library to use SQL easily using JavaScript\n\n0:| Introduction  \n---|---  \n1:| Installing Kysely  \n2:| Select queries  \n3:| Inserting data  \n4:| Deleting data  \n5:| Updating data  \n6:| Joins  \n  \nLibraries and frameworks\n\nUI libraries are tools that we use to abstract the browser DOM API and event\nhandling, to help us create User Interfaces more easily.\n\nReact\n\nLearn the most popular JavaScript library used to build UIs\n\n0:| Introduction  \n---|---  \n1:| DEMO Setting up a React project with Vite  \n2:| React Components  \n3:| Introduction to JSX  \n4:| Using JSX to compose UI  \n5:| The difference between JSX and HTML  \n6:| Embedding JavaScript in JSX  \n7:| Handling user events  \n8:| Managing state  \n9:| Component props  \n10:| Data flow  \n11:| Lifecycle events  \n12:| Managing forms in React  \n13:| Install the React Developer Tools  \n14:| DEMO Installing Tailwind CSS in a React app  \n15:| DEMO Build a counter in React  \n  \nAlpine.js\n\nAlpine.js is a great library to bring pages to life with client-side\ninteractions, without the need to write a lot of custom JavaScript or use a\nmore heavy UI library.\n\n0:| Introduction  \n---|---  \n1:| Installing Alpine  \n2:| The basics of Alpine  \n3:| Events  \n4:| Defining data  \n5:| Looping  \n6:| Binding user input to variables  \n7:| Watching variables change  \n8:| Stores  \n  \nhtmx\n\nLearn this very interesting library that lets you build dynamic Web\napplications with client/server communication without writing any JavaScript\n\n0:| Introduction  \n---|---  \n1:| Why htmx  \n2:| The core idea of htmx  \n3:| Installing htmx  \n4:| Doing a GET request  \n5:| Swap  \n6:| POST request  \n7:| Targets  \n8:| Loading indicator  \n9:| Confirming actions, and prompts  \n10:| Triggers  \n11:| Request headers  \n12:| Response headers  \n13:| Events  \n  \nAstro\n\nAstro is a great tool, ideal for building websites and in particular content\nsites, but not limiting you to that.\n\n0:| Introduction  \n---|---  \n1:| Your first Astro site  \n2:| The structure of an Astro site  \n3:| Astro components  \n4:| Adding more pages  \n5:| Dynamic routing  \n6:| Markdown in Astro  \n7:| Images  \n8:| Content collections  \n9:| CSS in Astro  \n10:| JavaScript in Astro  \n11:| Client-side routing and view transitions  \n12:| SSR in Astro  \n13:| API endpoints in Astro  \n  \nRemix\n\nRemix is an excellent Web Application Framework I would use when building\ncomplex React-based applications.\n\n0:| Introduction  \n---|---  \n1:| Create your first Remix app  \n2:| The root route  \n3:| File based routing  \n4:| Linking your pages  \n5:| Styling with CSS and Tailwind  \n6:| Create a navigation  \n7:| Dynamic routes and nested routes  \n8:| Connecting a database  \n9:| Data mutations using forms and actions\n\n", "frontpage": false}
