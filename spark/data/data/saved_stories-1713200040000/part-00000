{"aid": "40038841", "title": "Show HN: Podcast Manager for CLI", "url": "https://github.com/TBS1996/TaleCast", "domain": "github.com/tbs1996", "votes": 1, "user": "tbs1996", "posted_at": "2024-04-15 10:52:49", "comments": 0, "source_title": "GitHub - TBS1996/TaleCast: Simple CLI podcatcher", "source_text": "GitHub - TBS1996/TaleCast: Simple CLI podcatcher\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nTBS1996 / TaleCast Public\n\n  * Notifications\n  * Fork 0\n  * Star 8\n\nSimple CLI podcatcher\n\n### License\n\nMIT license\n\n8 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# TBS1996/TaleCast\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n1 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nTBS1996fix jump after done downloadingf09a5b2 \u00b7\n\n## History\n\n68 Commits  \n  \n### src\n\n|\n\n### src\n\n| fix jump after done downloading  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| wip  \n  \n### Cargo.lock\n\n|\n\n### Cargo.lock\n\n| more explicit config  \n  \n### Cargo.toml\n\n|\n\n### Cargo.toml\n\n| fix jump after done downloading  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit  \n  \n### README.md\n\n|\n\n### README.md\n\n| update readme  \n  \n### shell.nix\n\n|\n\n### shell.nix\n\n| trim nix  \n  \n## Repository files navigation\n\n# TaleCast\n\nSimple CLI podcast manager.\n\nCheck this video for a quick tutorial:\n\nIf you want to sync with your phone you could consider using syncthing.\n\n## Main features\n\n  * Easy to configure which episodes to be downloaded\n  * Mp3 tags normalization\n  * Granular configuration control of each podcast\n  * Backlog mode to catch up on old episodes at your own pace\n  * Download hook for post-download processing\n  * OPML export\n  * OPML import\n  * Git-friendly download-tracker (textfile where 1 episode == 1 line)\n  * Advanced pattern-matching for naming your files (and more!)\n  * Set Custom ip3v2 tags\n  * Parallel downloads\n  * Partial download support\n  * Downloaded paths can be printed to stdout for easy piping\n  * Pretty graphics\n  * Filter which episodes to sync or export with regex patterns\n\n## how to install?\n\nYou'll need to have rust installed. Either download from cargo with cargo\ninstall talecast or just clone the repo and do cargo run.\n\nI plan to put it on the nix store soon, not sure if I'm gonna bother with the\nother package managers since I'm less familiar. If someone wants to publish\nthere then that'd be great!\n\n## how to configure it?\n\nthe global config is located in: ~/.config/talecast/config.toml\n\nyou put your podcasts in this file: ~/.config/talecast/podcasts.toml\n\n## how to add podcasts?\n\ntalecast --add $PODCAST_URL $PODCAST_NAME\n\nor modify the podcasts.toml file directly.\n\nCheck out the video for more details. But more documentation to come!\n\n## what are the config options?\n\nThe way configuration works is that you can set a 'global value' that applies\nto all podcasts in the config.toml file, however, you can override them by\nsetting the same setting under a given podcast in the podcasts.toml file. If a\nvalue is not required, you can have it configured globally but disable it on\nspecific podcasts with \"$SETTING = false\".\n\nsetting| description| required| per-podcast| global| default  \n---|---|---|---|---|---  \nurl| the url to the xml file of the podcast| yes| \u2705| \u274c| (no default, must be\nspecified)  \ndownload_path| the path where episodes will be downloaded| yes| \u2705| \u2705|\n{home}/{appname}/{podname}  \nname_pattern| pattern determining name of episode files| yes| \u2705| \u2705|\n{pubdate::%Y-%m-%d} {rss::episode::title}  \nid_pattern| episode ID for determining if an episode has been downloaded| yes|\n\u2705| \u2705| {guid}  \ndownload_hook| path to script that will run after an episode is downloaded|\nno| \u2705| \u2705| None  \nmax_days| episodes older than this won't be downloaded| no| \u2705| \u2705| None  \nmax_episodes| only this amount of episodes from past will be downloaded| no|\n\u2705| \u2705| None  \nearliest_date| episodes published before this won't be downloaded| no| \u2705| \u2705|\nNone  \nid3_tags| custom tags that mp3 files will be annotated with| no| \u2705| \u2705| [ ]  \nbacklog_start| start date of when backlog mode calculates from| no| \u2705| \u274c| None  \nbacklog_interval| how many days pass between each new episode in backlog mode|\nno| \u2705| \u274c| None  \n  \n## what are these weird curly brace patterns?\n\nit's just a way to generate some dynamic texts. theres two types, unit\npatterns that take no input, and data patterns where you give it an input.\nhere's the unit ones:\n\npattern| evalutes to..  \n---|---  \nguid| the guid of an episode  \nurl| the url to the episode's enclosure  \npodname| configured name of the podcast  \nhome| the path to your home directory  \n  \na good example of these is the default value of the download_path setting.\n\nthe following are patterns that take in an argument:\n\npattern| description  \n---|---  \nrss::episode| represents the xml of an individual episode. the data it takes\nin is the name of an xml tag. the output is the contents of that tag  \nrss::channel| represents the xml of a podcast. the data it takes in is the\nname of an xml tag. the output is the contents of that tag  \npubdate| the time the episode was published. Takes in a formatter string  \nid3tag| takes in the name of an id3v2 tag, outputs the contents of the tag.\nValid for mp3 files.  \n  \nlook at the default value of the name_pattern setting for an example of how to\nuse them. note that not all patterns are available for each setting, for\nexample, the download_path can't use information specific to an episode.\n\n## About\n\nSimple CLI podcatcher\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n8 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\n1 tags\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Rust 99.8%\n  * Nix 0.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
