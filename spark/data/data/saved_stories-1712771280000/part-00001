{"aid": "39989608", "title": "Shell History Is Your Best Productivity Tool", "url": "https://martinheinz.dev/blog/110", "domain": "martinheinz.dev", "votes": 6, "user": "nalgeon", "posted_at": "2024-04-10 11:45:59", "comments": 0, "source_title": "Shell History Is Your Best Productivity Tool", "source_text": "Shell History Is Your Best Productivity Tool | Martin Heinz | Personal Website & Blog\n\nHomeContactSubscribeTip Jar\n\nPrevious post\n\nNext post\n\nBack to top\n\n# Shell History Is Your Best Productivity Tool\n\nMartin\n\nApr 8, 2024\n\nDevOps\n\nIf you work in shell/terminal often enough, then over time the history will\nbecome your personal knowledge vault, documentation and command reference.\nBeing able to use this personal documentation efficiently can hugely boost\nyour productivity. So, here are a couple of tips on how to optimize your shell\nhistory configuration and usage to get the most out of it.\n\n## Configuration\n\nI use ZSH and Oh My Zsh, so tips in this article will focus on ZSH, but\nsimilar results can be achieved for Bash or other shells.\n\nIf you're using Bash and would like to switch to ZSH, or try out the examples\nshown below, then check out this article.\n\nWith that out of the way, let's start with configuration options that will\nhelp us get the most out of the saved history:\n\n    \n    \n    # ~/.zshrc # ... HISTFILE=\"$HOME/.zsh_history\" HISTSIZE=10000000 SAVEHIST=10000000 HISTORY_IGNORE=\"(ls|cd|pwd|exit|cd)*\"\n\nWe can't search and use history efficiently, unless we actually save/keep the\ndata. The above config makes it so that we store pretty much infinite amount\nof command history. It also makes it uses HISTORY_IGNORE to list commands like\nls, cd etc. that won't be stored in history, you can adjust this ignore list\nto your liking.\n\nTo further optimize the configuration, we can add following ZSH options:\n\n    \n    \n    # ~/.zshrc # https://zsh.sourceforge.io/Doc/Release/Options.html (16.2.4 History) setopt EXTENDED_HISTORY # Write the history file in the ':start:elapsed;command' format. setopt INC_APPEND_HISTORY # Write to the history file immediately, not when the shell exits. setopt SHARE_HISTORY # Share history between all sessions. setopt HIST_IGNORE_DUPS # Do not record an event that was just recorded again. setopt HIST_IGNORE_ALL_DUPS # Delete an old recorded event if a new event is a duplicate. setopt HIST_IGNORE_SPACE # Do not record an event starting with a space. setopt HIST_SAVE_NO_DUPS # Do not write a duplicate event to the history file. setopt HIST_VERIFY # Do not execute immediately upon history expansion. setopt APPEND_HISTORY # append to history file (Default) setopt HIST_NO_STORE # Don't store history commands setopt HIST_REDUCE_BLANKS # Remove superfluous blanks from each command line being added to the history.\n\nThe above mainly configures ZSH to ignore certain commands to avoid cluttering\nhistory, e.g. duplicates or history commands. It also adds timestamps to each\ncommand which will be handy when searching (see next section).\n\nOne particular option I would highlight here is HIST_IGNORE_SPACE which can be\nuseful if you want to avoid storing secrets in history - simply prefix any\ncommand that includes a secret/password with space, e.g. export\nAWS_ACCESS_KEY_ID=... (notice the space before export) and it won't appear in\nhistory.\n\nThe previous options configured how the history is stored, now let's talk\nabout configuring how the history is searched and presented.\n\nBy default, you can only search by exact match, but ZSH includes a plugin,\nthat makes it possible to search using fuzzy-search. To enable it, we just\nneed to add the plugin:\n\n    \n    \n    # ~/.zshrc # ... plugins=(git fzf)\n\nWith that, when you search history, ZSH will automatically use FZF for fuzzy\nsearch. This however might use find command in the background which isn't very\nfast. So, to improve performance (for very large history files) I recommend\nusing ag:\n\n    \n    \n    sudo apt-get install silversearcher-ag # add to # ~/.zshrc export FZF_DEFAULT_COMMAND='ag --hidden -g \"\"'\n\nAnd last configuration option I want to mention is history timestamp\nformatting - by default when you view history, you will get output like:\n\n    \n    \n    10206 echo hello 10207 head some-file.txt 10208 curl google.com 10209 cat some-file.txt\n\nThat is - line number from history file and the command itself. However, by\nadding HIST_STAMPS=\"yyyy-mm-dd\" to ~/.zshrc, we can get the following:\n\n    \n    \n    10206 2024-03-30 12:29 echo hello 10207 2024-03-30 12:51 head some-file.txt 10208 2024-03-30 13:21 curl google.com 10209 2024-03-30 14:15 cat some-file.txt\n\n## Searching\n\nNow that we've configured everything, let's see how we can efficiently search\nall the history.\n\nThe simplest way - without keybindings - is to use the history command.\nHowever, just using history will dump whole history file which isn't\npractical, instead we can use:\n\n    \n    \n    \\history -E -10 10206 30.3.2024 12:29 echo hello 10207 30.3.2024 12:51 head some-file.txt 10208 30.3.2024 13:21 curl google.com 10209 30.3.2024 14:15 cat some-file.txt ... \\history -i 10206 2024-03-30 12:29 echo hello 10207 2024-03-30 12:51 head some-file.txt 10208 2024-03-30 13:21 curl google.com 10209 2024-03-30 14:15 cat some-file.txt ... fc -E -l -10 10206 30.3.2024 12:29 echo hello 10207 30.3.2024 12:51 head some-file.txt 10208 30.3.2024 13:21 curl google.com 10209 30.3.2024 14:15 cat some-file.txt ...\n\nWe can use the -<N> flag to specify number of lines for both history and fc\ncommand. Additionally, the -E and -i will give different date formats.\n\nfc - without arguments - can be also be used if you want to edit and re-\nexecute the last command - it opens the default editor, where you can edit the\ncommand, and when you close it, the command gets executed.\n\nAnother useful command is r, which re-executes the last command without\nediting (like !!), and r <WORD>, which executes the last command that contains\nthe string WORD.\n\nMost of the time, though, we want to search history with keybind - in ZSH, the\ndefault CTRL+R will give you the context-based history scrolling (the history\nwidget):\n\nAs you can see that also includes the FZF fuzzy search.\n\nIf - for whatever reason - this doesn't work on your machine check the\nkeybindings:\n\n    \n    \n    bindkey | grep fzf-history-widget \"^R\" fzf-history-widget # ^R is CTRL+R\n\nIf you prefer the classic reverse search, instead of context-based history\nscrolling, then you can bind the history-incremental-search-backward and\nhistory-incremental-search-forward events:\n\n    \n    \n    # Add to ~/.zshrc bindkey \"^E\" history-incremental-search-backward # CTRL+E bindkey \"^S\" history-incremental-search-forward # CTRL+S\n\nYou can also simply start typing a command, and press up/down arrow to search\nthrough history, taking into account what's typed on commandline:\n\n    \n    \n    bindkey \"^[[A\" up-line-or-beginning-search # Arrow up bindkey \"^[[B\" down-line-or-beginning-search # Arrow down\n\nThere are also more variations in docs, e.g.:\n\n    \n    \n    history-beginning-search-backward history-beginning-search-backward-end history-search-backward ...\n\nBe aware, that the keycodes may differ based on your OS, e.g. up arrow can be\n\\e[A, ^[OA or ^[[A on different systems.\n\nAs you probably noticed from the above GIF, you can have a syntax highlighting\nfor this classic reverse-search, just install zsh-syntax-highlighting with:\n\n    \n    \n    sudo apt-get install zsh-syntax-highlighting echo \"source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n\n## Synchronization\n\nTo take it to the next level, and to have your shell history always with you\non different workstations, you can additionally use ZSH history-sync plugin,\nwhich uses Git to sync history across workstations - see plugin docs for\nexplanation of how it works and how to set it up.\n\nA more modern alternative to the above sync functionality is atuin.sh, which\nuses SQLite as a storage and supports ZSH - see the website for features and\ndetails.\n\n## Conclusion\n\nAt this point, I'm pretty sure, that if I lost my .zsh_history I probably\nwouldn't be able to do my job anymore. Most of the commands I run are really\njust CTRL+R plus minor edits.\n\nSo, with that said, hopefully, with the above tips and configs your shell\nhistory can become your personal knowledge vault and can help you be a bit\nmore efficient in shell.\n\nNote: My complete ~/.zshrc (stripped of comments) can be found in following\ngist.\n\nPreviousPrev.TopTopSubscribeSubTip JarTips\n\n## Subscribe:\n\nCopyright \u00a9 2023 Martin Heinz\n\n", "frontpage": true}
