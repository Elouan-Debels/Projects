{"aid": "39987312", "title": "Bash's sadly flawed smart (programmable) completion", "url": "https://utcc.utoronto.ca/~cks/space/blog/unix/BashProgrammableCompletionFlaw", "domain": "utcc.utoronto.ca", "votes": 1, "user": "ingve", "posted_at": "2024-04-10 05:40:13", "comments": 0, "source_title": "Chris's Wiki :: blog/unix/BashProgrammableCompletionFlaw", "source_text": "Chris's Wiki :: blog/unix/BashProgrammableCompletionFlaw\n\nChris Siebenmann :: CSpace \u00bb blog \u00bb unix \u00bb BashProgrammableCompletionFlaw\n\nWelcome, guest.\n\n## Bash's sadly flawed smart (programmable) completion\n\nApril 9, 2024\n\nBash has an interesting and broadly useful feature called 'programmable\ncompletion' (this has sort of come up before). Programmable completion makes\nit possible for Bash to auto-complete things like command line options for the\ncurrent program for you. Unfortunately one flaw in Bash's programmable\ncompletion is that it doesn't understand enough Bash command line syntax and\nso can get in your way.\n\nSuppose, not hypothetically, that you are typing the following on the Bash\ncommand line on a Debian-based Linux system, with the bits in bold being what\nyou typed before you hit tab:\n\n> # apt-get install $(grep -v '^#' somefi<TAB>\n\nWhen you hit TAB to complete the file name, nothing will happen. This is\nbecause Bash has been told what the arguments to apt-get are and so 'knows'\nthat they don't include files (this is actually wrong these days, but never\nmind). Bash isn't smart enough to recognize that by typing '$(' you've started\nwriting a command substitution and are now in a completely different\ncompletion context, that of grep, where you definitely should be allowed to\ncomplete file names.\n\nBash could in theory be this smart but there are probably a number of\nobstacles to doing that in practice. For example, we don't have a well-formed\ncommand substitution here, since we haven't typed the closing ')' yet; Bash\nwould effectively have to do something like the sort of on the fly parsing of\nincomplete code that editor autocompletion does. It's possible that Bash could\ndo better with some heuristics, but the current situation is broadly easy to\nexplain and reason about, even if the result is sometimes frustrating.\n\nThere are at least two ways to disable these programmable completions in Bash.\nYou can turn off the feature entirely with 'shopt -u progcomp' or you can\nflush all of the registered programmable completions with 'complete -r'. In\ntheory you can see the list of current completions with 'complete -p' and then\nremove just one of them with 'complete -r <name>', but in practice 'complete\n-p' doesn't always list a program until I've started trying to do completions\nwith it.\n\n(Where the shell snippets that define completions go is system dependent, but\nLinux systems will often put them in '/usr/share/bash-\ncompletion/completions'.)\n\nPeople with better memories than me can also use M-/ instead to force\ncompletion of a filename no matter what Bash's programmable completion thinks\nshould go there. M-! will complete command names, M-$ will complete variable\nnames, and M-~ will complete user names. You can find these in the Bash manual\npage as the various 'complete-*' readline (key binding) command names.\n\n(Another general flaw on programmable completion is that it relies on the\npeople who provide the completion definitions for commands getting it right\nand they don't always do that, as I've seen in the past.)\n\nWritten on 09 April 2024.\n\n| \u00ab| Don't require people to change 'source code' to configure your programs  \n---|---  \n  \nThese are my WanderingThoughts (About the blog)\n\nFull index of entries Recent comments\n\nThis is part of CSpace, and is written by ChrisSiebenmann. Mastodon: @cks\nTwitter @thatcks\n\n* * *\n\nCategories: links, linux, programming, python, snark, solaris, spam, sysadmin,\ntech, unix, web Also: (Sub)topics\n\nThis is a DWiki. GettingAround (Help)\n\nPage tools: View Source, Add Comment.\n\nAtom Syndication: Recent Comments.\n\nLast modified: Tue Apr 9 23:32:37 2024 This dinky wiki is brought to you by\nthe Insane Hackers Guild, Python sub-branch.\n\n", "frontpage": false}
