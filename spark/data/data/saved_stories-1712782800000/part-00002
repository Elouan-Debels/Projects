{"aid": "39991434", "title": "Changing font size in Windows dialog in C++", "url": "https://blog.kowalczyk.info/article/8zr1/changing-font-size-in-windows-dialog-in-c.html", "domain": "kowalczyk.info", "votes": 1, "user": "jandeboevrie", "posted_at": "2024-04-10 14:58:19", "comments": 0, "source_title": "Changing font size in Windows dialog in C++", "source_text": "Changing font size in Windows dialog in C++\n\nHome\n\n\u2022\n\nSoftware\n\n\u2022\n\nWritings\n\nChanging font size in Windows dialog in C++\n\nedit\n\nSumatraPDF c++ win32\n\n##\n\nHow to dynamically change font size in a Windows dialog\n\nWindows\u2019s win32 API is old and crufty. Many things that are trivial to do in\nHTML are difficult in win32.\n\nOne of those things is changing size of font used by your native, desktop app.\n\nI encountered this in SumatraPDF. A user asked for a way to increase the font\nsize.\n\nI introduced UIFontSize option but implementing that was difficult and time\nconsuming.\n\nOne of the issues was changing the font size used in dialogs.\n\nThis article describes how I did it. The method is based on\nhttps://stackoverflow.com/questions/14370238/can-i-dynamically-change-the-\nfont-size-of-a-dialog-window-created-with-c-in-vi\n\n##\n\nHow dialogs work\n\nSumatraPDF defines a bunch of dialogs in SumatraPDF.rc.\n\nHere\u2019s a find dialog:\n\n    \n    \n    IDD_DIALOG_FIND DIALOGEX 0, 0, 247, 52 STYLE DS_SETFONT | DS_MODALFRAME | DS_FIXEDSYS | WS_POPUP | WS_CAPTION | WS_SYSMENU CAPTION \"Find\" FONT 8, \"MS Shell Dlg\", 400, 0, 0x1 BEGIN LTEXT \"&Find what:\",IDC_STATIC,6,8,60,9 EDITTEXT IDC_FIND_EDIT,66,6,120,13,ES_AUTOHSCROLL CONTROL \"&Match case\",IDC_MATCH_CASE,\"Button\",BS_AUTOCHECKBOX | WS_TABSTOP,6,24,180,9 LTEXT \"Hint: Use the F3 key for finding again\",IDC_FIND_NEXT_HINT,6,37,180,9,WS_DISABLED DEFPUSHBUTTON \"Find\",IDOK,191,6,50,14 PUSHBUTTON \"Cancel\",IDCANCEL,191,24,50,14 END\n\n.rc is compiled by a resource compiler rc.exe and embedded in resources\nsection of a PE .exe file.\n\nCompiled version is a binary blob that has a stable format.\n\nAt runtime we can get that binary blob from resources and pass it to\nDialogBoxIndirectParam() function to create a dialog.\n\n##\n\nHow to change font size of a dialog at runtime\n\nDIALOGEX tell us it\u2019s an extended dialog, which has different binary layout\nthan non-extended DIALOG.\n\nAs you can see part of dialog definition is a font definition:\n\n    \n    \n    FONT 8, \"MS Shell Dlg\", 400, 0, 0x1\n\nTo provide a FONT you also need to specify DS_SETFONT or DS_FIXEDSYS flag.\n\nWe\u2019re asking for MS Shell Dlg font with size of 8 points (12 pixels). 400\nspecifies standard weight (800 would be bold font).\n\nUnfortunately the binary blob is generated at compilation time and we want to\nchange font size when application runs.\n\nThe simplest way to achieve that is to patch the binary blob in memory.\n\n##\n\nThe code for changing dialog font size at runtime\n\nYou can find the full code at\nhttps://github.com/sumatrapdfreader/sumatrapdf/blob/b6aed9e7d257510ff82fee915506ce2e75481c64/src/SumatraDialogs.cpp#L20\n\nIt uses small number of SumatraPDF base code so you\u2019ll need to lightly massage\nit to use it in your own code.\n\nThe layout of binary blob is documented at http://msdn.microsoft.com/en-\nus/library/ms645398(v=VS.85).aspx\n\nIn C++ this is represented by the following struct:\n\n    \n    \n    #pragma pack(push, 1) struct DLGTEMPLATEEX { WORD dlgVer; // 0x0001 WORD signature; // 0xFFFF DWORD helpID; DWORD exStyle; DWORD style; WORD cDlgItems; short x, y, cx, cy; /* sz_Or_Ord menu; sz_Or_Ord windowClass; WCHAR title[titleLen]; WORD fontPointSize; WORD fontWWeight; BYTE fontIsItalic; BYTE fontCharset; WCHAR typeface[stringLen]; */ }; #pragma pack(pop)\n\n#pragma pack(push, 1) tells C++ compiler to not do padding between struct\nmembers.\n\nThat part after x, y, cx, cy is commented out because sz_or_Ord and WCHAR []\nare variable length, which can\u2019t be represented in C++ struct.\n\nfontPointSize is the value we need to patch.\n\nBut first we need to get a copy binary blob.\n\n    \n    \n    DLGTEMPLATE* DupTemplate(int dlgId) { HRSRC dialogRC = FindResourceW(nullptr, MAKEINTRESOURCE(dlgId), RT_DIALOG); CrashIf(!dialogRC); HGLOBAL dlgTemplate = LoadResource(nullptr, dialogRC); CrashIf(!dlgTemplate); void* orig = LockResource(dlgTemplate); size_t size = SizeofResource(nullptr, dialogRC); CrashIf(size == 0); DLGTEMPLATE* ret = (DLGTEMPLATE*)memdup(orig, size); UnlockResource(orig); return ret; }\n\ndlgId is from .rc file (e.g. IDD_DIALOG_FIND for our find dialog). Most of it\nis win32 APIs, memdup() makes a copy of memory block.\n\nHere\u2019s the code to patch the font size:\n\n    \n    \n    static void SetDlgTemplateExFont(DLGTEMPLATE* tmp, int fontSize) { CrashIf(!IsDlgTemplateEx(tmp)); DLGTEMPLATEEX* tpl = (DLGTEMPLATEEX*)tmp; CrashIf(!HasDlgTemplateExFont(tpl)); u8* d = (u8*)tpl; d += sizeof(DLGTEMPLATEEX); // sz_Or_Ord menu d = SkipSzOrOrd(d); // sz_Or_Ord windowClass; d = SkipSzOrOrd(d); // WCHAR[] title d = SkipSz(d); // WCHAR pointSize; WORD* wd = (WORD*)d; fontSize = ToFontPointSize(fontSize); *wd = fontSize; }\n\nWe start at the end of fixed-size portion of the blob () d +=\nsizeof(DLGTEMPLATEEX).\n\nWe then skip variable-length fields menu, windowClass and title and patch the\nfont size in points.\n\nSumatraPDF code operates in pixels so has to convert that to Windows points:\n\n    \n    \n    static int ToFontPointSize(int fontSize) { int res = (fontSize * 72) / 96; return res; }\n\nHere\u2019s how we skip past sz_or_Ord fields:\n\n    \n    \n    /* Type: sz_Or_Ord A variable-length array of 16-bit elements that identifies a menu resource for the dialog box. If the first element of this array is 0x0000, the dialog box has no menu and the array has no other elements. If the first element is 0xFFFF, the array has one additional element that specifies the ordinal value of a menu resource in an executable file. If the first element has any other value, the system treats the array as a null-terminated Unicode string that specifies the name of a menu resource in an executable file. */ static u8* SkipSzOrOrd(u8* d) { WORD* pw = (WORD*)d; WORD w = *pw++; if (w == 0x0000) { // no menu } else if (w == 0xffff) { // menu id followed by another WORD item pw++; } else { // anything else: zero-terminated WCHAR* WCHAR* s = (WCHAR*)pw; while (*s) { s++; } s++; pw = (WORD*)s; } return (u8*)pw; }\n\nStrings are zero-terminated utf-16:\n\n    \n    \n    static u8* SkipSz(u8* d) { WCHAR* s = (WCHAR*)d; while (*s) { s++; } s++; // skip terminating zero return (u8*)s; }\n\nTo make the code more robust, we check the dialog is extended and has font\ninformation to patch:\n\n    \n    \n    static bool IsDlgTemplateEx(DLGTEMPLATE* tpl) { return tpl->style == MAKELONG(0x0001, 0xFFFF); } static bool HasDlgTemplateExFont(DLGTEMPLATEEX* tpl) { DWORD style = tpl->style & (DS_SETFONT | DS_FIXEDSYS); return style != 0; }\n\n##\n\nChanging font name\n\nIt\u2019s also possible to change font name but it\u2019s slightly harder (which is why\nI didn\u2019t implement it).\n\nWCHAR typeface[] is inline null-terminated string that is name of the font.\n\nTo change it we would also have to move the data that follows it.\n\n##\n\nThe roads not taken\n\nThere are other ways to achieve that.\n\nDialog is just a HWND. In WM_INITDIALOG message we could iterate over all\ncontrols, change their font with WM_SETFONT message and then resize the\ncontrols and the window.\n\nThat\u2019s much more work than our solution. We just patch the font size and let\nWindows do the font setting and resizing.\n\nAnother option would be to generate binary blog representing dialogs at\nruntime. It would require writing more code but then we could define new\ndialogs in C++ code that wouldn\u2019t be that much different than .rc syntax.\n\nI want to explore that solution because this would also allow adding simple\nlayout system to simplify definition the dialogs.\n\nIn .rc files everything must be absolutely positioned. The visual dialog\neditor helps a bit but is unreliable and I need resizing logic anyway because\nafter translating strings absolute positioning doesn\u2019t work.\n\nWritten on Apr 10 2024. Topics: SumatraPDF, c++, win32.\n\nhome\n\nFound a mistake, have a comment? Let me know.\n\n", "frontpage": false}
