{"aid": "40037324", "title": "Learning about distributed systems: where to start?", "url": "http://muratbuffalo.blogspot.com/2020/06/learning-about-distributed-systems.html", "domain": "muratbuffalo.blogspot.com", "votes": 1, "user": "udev4096", "posted_at": "2024-04-15 05:26:47", "comments": 0, "source_title": "Learning about distributed systems: where to start?", "source_text": "Learning about distributed systems: where to start?\n\nSkip to main content\n\n### Search This Blog\n\n# Metadata\n\nOn distributed systems broadly defined and other curiosities. The opinions on\nthis site are my own.\n\n### Learning about distributed systems: where to start?\n\n  * Get link\n  * Facebook\n  * Twitter\n  * Pinterest\n  * Email\n  * Other Apps\n\n-\n\nJune 10, 2020\n\nThis is definitely not a \"learn distributed systems in 21 days\" post. I\nrecommend a principled, from the foundations-up, studying of distributed\nsystems, which will take a good three months in the first pass, and many more\nmonths to build competence after that.\n\nIf you are practical and coding oriented you may not like my advice much. You\nmay object saying, \"Shouldn't I learn distributed systems with coding and\nhands on? Why can I not get started by deploying a Hadoop cluster, or studying\nthe Raft code.\" I think that is the wrong way to go about learning distributed\nsystems, because seeing similar code and programming language constructs will\nmake you think this is familiar territory, and will give you a false sense of\nsecurity. But, nothing can be further from the truth.\n\n> Distributed systems need radically different software than centralized\n> systems do.\n\n> \\--A. Tannenbaum\n\nThis quotation is literally the first sentence in my distributed systems\nsyllabus. Instead of trying to relate distributed systems constructs to\ncentralized constructs, you should treat distributed systems as a radical\nnovelty. You should first dive into the inherent difficulties (reasoning about\nconcurrency and fault-tolerance) in distributed system, rather than dipping\nyour toe in the accidental difficulties (implementation of a framework).\n\nFor a principled foundations-up studying of distributed systems, this is what\nI recommend.\n\n## Predicate logic, reasoning about safety and progress\n\nTo appreciate the challenges of reasoning with concurrency, it is important to\nstart with a quick crash course on predicate logic, and reasoning about safety\nproperties (next, stable, invariant), and liveness properties (transient,\nensures, leads-to, variant functions).\n\nPaolo Sivilotti, who was a student of one of the creators of the UNITY\npseudocode and reasoning framework, has a nice pedagogical approach to teach\nthese concepts in his book, which is available as a free download. I use this\nbook for the first month of my classes. (Thank you Paul!)\n\nThis may look like grunt work to you, as it does to many of my students. But\nlet me tell you, as I tell them, this is what you need to learn/internalize\nfirst so you can start to do dist-sys kungfu. (To motivate students for this\nlegwork, I show students scenes from Karate Kid.)\n\n## TLA+ to play with algorithms\n\nAfter this background on reasoning about safety and progress, you can start\nusing TLA+/Pluscal framework where you can write distributed algorithms and\nthe model checker can tell you what a fool you are.\n\nYou can find information about how TLA+ can help you when learning about your\ndistributed systems in many posts in my blog.\n\nHillel's TLA+ introduction website is great for getting you started. After\nthat you can read through many books and videos Lamport has made available for\nfree.\n\n## Impossibility results\n\nI then recommend studying the impossibility results in distributed systems.\nThere is nothing better than seeing how you can't do even the most basic\ncoordination tasks under common failure employments to drive the point home\nthat\n\n  1. distributed systems are radically different than centralized systems, and\n  2. fault-tolerance needs to be treated as a first-class citizen in distributed systems.\n\nThere are two big impossibility results, coordinated attack and FLP\nimpossibility results.\n\nThe coordinating attack result says that if the communication channels can\ndrop messages you cannot solve distributed consensus using a deterministic\nprotocol in finite rounds. OK, let's assume reliable, or eventually for a\nsufficient period reliable channels. Pow! In your face. FLP shows that even\nwith reliable channels, under an asynchronous model, you cannot solve\ndistributed consensus using a deterministic protocol in finite rounds, in the\npresence of a single crash failure. CAP theorem considers the coordinating\nattack model for the atomic storage problem, an easier problem than\ndistributed consensus, and shows that with arbitrarily unreliable channels,\nyou cannot solve the atomic storage problem either.\n\nTo provide a smooth introduction to the impossibility results, I use the two-\nphase commit as a working example, and show via TLA+ modeling how these\nimpossibility results play out in the context of the simple two-phase commit\nprotocol.\n\nAfter you learn these impossibility results, you can then start to learn about\nways to circumvent (not to beat) these impossibility results. And that takes\nus to the consensus and fault-tolerance discussion.\n\nI am unable to point to a good textbook for a good coverage of the\nimpossibility results and distributed consensus and atomic storage protocols.\nLet me know if you know a textbook that provides a good coverage of these\ntopics. A supplementary free pdf book is Maarten van Steen Andrew S.\nTanenbaum. Distributed Systems. Freely available from https://www.distributed-\nsystems.net/index.php/books/ds3/\n\nFrom now on, you should try to read the original research papers and competent\nblog posts that explain them. Some sources I can recommend are:\n\n  * My blog http://muratbuffalo.blogspot.com\n  * Paper trail; this post is a great place to start https://www.the-paper-trail.org/post/2014-08-09-distributed-systems-theory-for-the-distributed-systems-engineer/\n  * Hacking Distributed #NoSQL tag\n  * Decentralized Thoughts has video series and posts on consensus and Byzantine faults\n  * Heidi Howard has many talks covering consensus well\n  * Marc Brooker's blog\n\n## Consensus and fault-tolerance\n\nIt is good to follow up the impossibility results with the Paxos protocol and\nvariants to show how they skillfully circumvent these results.\n\nIt takes considerable time to learn Paxos well. But one day you finally\nunderstand Paxos and feel things fall into place, and you will celebrate your\nvictory. But you should know that this is a premature celebration. You will\nneed to be confused and re-learn the algorithm several times before you\nproperly internalize it. (I think I have more than 100 posts related to Paxos\none way or another, including a post about Paxos jokes.)\n\nYou can learn about failure detectors and fault-tolerance in a hands-on manner\nduring learning about Paxos and distributed consensus. They can go hand in\nhand, so your study of failure detectors and fault-tolerance can build on some\nconcrete ground.\n\nAlong with these, you can also study about many Paxos variants, Replicated\nState Machines (RSM), and chain replication type advanced atomic storage\nprotocols.\n\n## Managing time and state in distributed systems\n\nWe delayed studying about time and state, but it is now time to look at this,\notherwise we will be in a regretful state.\n\nThe \"There is no now\" article provides a coverage of difficulties and\npractical implications of dealing with time and state in distributed systems.\n\nLogical clocks, vector clocks, hybrid logical clocks are fun to learn. (Paul's\nbook includes a good explanation of logical and vector clocks and snapshots.)\nThey form the basis on which CRDTs, version vectors in NoSQL databases, and\nsnapshot reads and commits in distributed SQL databases build upon.\n\n## Now what?\n\nNow start reading about and hacking on cloud computing frameworks, NoSQL\ndatabases, and stream processing platforms. Martin Kleppmann's Designing Data\nIntensive Applications book is helpful for some of these topics.\n\nOther than that, you are again on your own for gathering information from good\nblog posts and relevant research papers. Going to the original research paper,\nand learning from first principles are invaluable. This post is about where to\nstart. I hope I can write another post to give a list of important papers for\neach topic I touched on this post.\n\nThese being said, I think we are over due for a book on modern distributed\nsystems, that distills all recent developments and presents them in one place.\nDistributed systems concepts are tricky, and a bit help from an expert teacher\ncan save a lot of frustration and many hours for each concept/topic.\n\npaxos teaching\n\n  * Get link\n  * Facebook\n  * Twitter\n  * Pinterest\n  * Email\n  * Other Apps\n\n### Comments\n\nmfricke1947 said...\n\nThank you for your blog posts on distributed systems (I'm working my way\nthrough some of them).\n\nI'm hesitant to push my own barrow, but https://softoption.us might help with\nthe Predicate Logic. It does not have the meta-theorems, but, in compensation,\nit does include some modal logic and lambda calculus.\n\nAugust 18, 2020 at 4:14 PM\n\nMohan Radhakrishnan said...\n\nWould you recommend any open-source project which one can study somewhat\neasily ?So, for example, Flink's Chandy-Lamport implementation could help.\nOnce we read the paper it is very tricky to write code(simple) directly even\nto check using TLA+. Don't you think so?\n\nDecember 2, 2022 at 12:32 AM\n\nPost a Comment\n\n### Popular posts from this blog\n\n### Hints for Distributed Systems Design\n\n-\n\nOctober 02, 2023\n\nThis is with apologies to Butler Lampson, who published the \" Hints for\ncomputer system design \" paper 40 years ago in SOSP'83. I don't claim to match\nthat work of course. I just thought I could draft this post to organize my\nthinking about designing distributed systems and get feedback from others. I\nstart with the same disclaimer Lampson gave. These hints are not novel, not\nfoolproof recipes, not laws of design, not precisely formulated, and not\nalways appropriate. They are just hints. They are context dependent, and some\nof them may be controversial. That being said, I have seen these hints\nsuccessfully applied in distributed systems design throughout my 25 years in\nthe field, starting from the theory of distributed systems (98-01), immersing\ninto the practice of wireless sensor networks (01-11), and working on cloud\ncomputing systems both in the academia and industry ever since. These\nheuristic principles have been applied knowingly or unknowingly and has proven\n\nRead more >>\n\n### Foundational distributed systems papers\n\n-\n\nFebruary 27, 2021\n\nI talked about the importance of reading foundational papers last week. To\nfollowup, here is my compilation of foundational papers in the distributed\nsystems area. (I focused on the core distributed systems area, and did not\ncover networking, security, distributed ledgers, verification work etc. I even\nleft out distributed transactions, I hope to cover them at a later date.) I\nclassified the papers by subject, and listed them in chronological order. I\nalso listed expository papers and blog posts at the end of each section. Time\nand State in Distributed Systems Time, Clocks, and the Ordering of Events in a\nDistributed System. Leslie Lamport, Commn. of the ACM, 1978. Distributed\nSnapshots: Determining Global States of a Distributed System. K. Mani Chandy\nLeslie Lamport, ACM Transactions on Computer Systems, 1985. Virtual Time and\nGlobal States of Distributed Systems. Mattern, F. 1988. Practical uses of\nsynchronized clocks in distributed systems. B. Liskov, 1991. Expository papers\n\nRead more >>\n\n### Metastable failures in the wild\n\n-\n\nSeptember 12, 2023\n\nThis paper appeared in OSDI'22. There is a great summary of the paper by\nAleksey (one of the authors and my former PhD student, go Aleksey!). There is\nalso a great conference presentation video from Lexiang. Below I will provide\na brief overview of the paper followed by my discussion points. This topic is\nvery interesting and important, so I hope you have fun learning about this.\nMetastability concept and categories Metastable failure is defined as\npermanent overload with low throughput even after the fault-trigger is\nremoved. It is an emergent behavior of a system, and it naturally arises from\nthe optimizations for the common case that lead to sustained work\namplification. In this paper, the authors are able to capture/abstract the\nsystem behavior of interest in terms of two parameters, the load and capacity.\nIf the load is above capacity, you have work piling up, right? Or if the\ncapacity drops under the sustained load level, the same effect, right? Both of\nthese create a tem\n\nRead more >>\n\n### The demise of coding is greatly exaggerated\n\n-\n\nMarch 15, 2024\n\nNVDIA CEO Jensen Huang recently made very contraversial remarks : \"Over the\ncourse of the last 10 years, 15 years, almost everybody who sits on a stage\nlike this would tell you that it is vital that your children learn computer\nscience, and everybody should learn how to program. And in fact, it\u2019s almost\nexactly the opposite. It is our job to create computing technology such that\nnobody has to program and that the programming language is human. Everybody in\nthe world is now a programmer. This is the miracle of artificial\nintelligence.\" I am not going to wise crack and say that this is power\npoisioning and this is what happens when your company valuation more than\ntriples in a year and surpasses Amazon and Google. (Although I don't discount\nthis effect completely.) Jensen is very smart and also has some great wisdom ,\nso I think we should give this the benefit of doubt and try to respond in a\nthoughtful manner. A response is warranted because this statement got a lot of\np\n\nRead more >>\n\n### The end of a myth: Distributed transactions can scale\n\n-\n\nApril 10, 2023\n\nThis paper appeared in VLDB'17. The paper presents NAM-DB, a scalable\ndistributed database system that uses RDMA (mostly 1-way RDMA) and a novel\ntimestamp oracle to support snapshot isolation (SI) transactions. NAM stands\nfor network-attached-memory architecture, which leverages RDMA to enable\ncompute nodes talk directly to a pool of memory nodes. Remote direct memory\naccess (RDMA) allows bypassing the CPU when transferring data from one machine\nto another. This helps relieve a major factor in scalability of distributed\ntransactions: the CPU overhead of the TCP/IP stack. With so many messages to\nprocess, CPU may spend most of the time serializing/deserializing network\nmessages, leaving little room for the actual work. We had seen this phenomena\nfirst hand when we were researching the performance bottlenecks of Paxos\nprotocols. This paper reminds me of the \"Is Scalable OLTP in the Cloud a\nSolved Problem? (CIDR 2023)\" which we reviewed recently. The two papers share\none\n\nRead more >>\n\n### Scalable OLTP in the Cloud: What\u2019s the BIG DEAL?\n\n-\n\nJanuary 17, 2024\n\nThis paper is from Pat Helland, the apostate philosopher of database systems,\noverall a superb person, and a good friend of mine. The paper appeared this\nweek at CIDR'24. (Check out the program for other interesting papers). The\nmotivating question behind this work is: \" What are the asymptotic limits to\nscale for cloud OLTP (OnLine Transaction Processing) systems? \" Pat says that\nthe CIDR 2023 paper \"Is Scalable OLTP in the Cloud a Solved Problem?\" prompted\nthis question. The answer to the question? Pat says that the answer lies in\nthe joint responsibility of database and the application. If you know of Pat's\nwork, which I have summarized several in this blog , you would know that Pat\nhas been advocating along these lines before. But this paper provides a very\ncrisp, specific, concrete answer. Read on for my summary of the paper.\nDisclaimer: This is a wisdom and technical information/detail packed 13-page\npaper, so I will try my best to summarize the sa\n\nRead more >>\n\n### SIGMOD panel: Future of Database System Architectures\n\n-\n\nJuly 05, 2023\n\nI mentioned this panel in my SIGMOD/PODS day 2 writeup. The panel consisted of\n(from right to left) Gustavo Alonso (ETH), Swami Sivasubramanian (AWS),\nAnastasia Ailamaki (EPFL), Raghu Ramakrishnan (Microsoft), and Sam Madden\n(MIT). Sailesh Krishnamurthy from Google was unable to attend, so Anastasia\nwho is on sabbatical at Google, also covered for him. The panel started with 5\nminutes speeches from participants. The panel was lively and playful. The\npanelists tried to make their speeches controversial, and have zingers for\neach other. Sam talked about the demise of DBMS monolith. He said, the Oracle\nof 90s is dead because it was incompatible with modern data ecosystem, and the\nmodern DBMSs are shifting towards disaggregated designs. When Sam was a PhD\nstudent under Eric Brewer, Eric said we should build disaggregated databases,\nand people said that won't happen. But we are there now: Disaggregation has\narrived! While Sam mentioned about the benefits of disaggregation, he also ca\n\nRead more >>\n\n### Why I blog\n\n-\n\nMarch 08, 2024\n\nMy blog has been going for 14 years now, and has just passed 4 million\npageviews. Yay! I remember the 1 million pageviews moment in 2017 ! The main\nreason I was able to persist for so long is because I blog for selfish\nreasons. Let me try to unpack why I blog, and why I keep blogging. I write for\nmyself The audience I have in mind is myself. I blog to clarify my\nunderstanding and thinking about a topic. Reading a research/technical paper\nis already time consuming. I can't do it in less than 4 hours. Period. I love\nlearning. And I am fortunate that I get to read research papers as part of my\nwork. I double-dip on this effort to blog about them, to improve my\nunderstanding of these papers. Writing a blog post is the final step in my\npipeline for reading a paper. I think my blog reviews of papers hits a good\nniche. Research papers are written for the wrong audience (or rather maybe the\nright audience but for the wrong reason): they are written to please 3\nspecific expert reviewers\n\nRead more >>\n\n### There is plenty of room at the bottom\n\n-\n\nAugust 17, 2021\n\nThis is a pun on the saying \"there is always room at the top\". This is also\nthe title of a famous Feynman lecture from 1959 , where he made a case for\nnanotechnology. In this post, I will try to argue that there is plenty of room\nat the bottom for distributed algorithms. Most work on distributed algorithms\nare done at a high-level abstraction plane. These high level solutions do not\ntransfer well to the implementation level, and this opens a lot of space to\nexplore at the implementation level. But this is not just an opportunistic\nargument. It is imperative to target the implementation level with our\ndistributed algorithms work, otherwise they remain as theoretical, unused,\ninapplicable. Let me try to demonstrate using consensus protocols as examples.\nSomeone else can make the same case using another subdomain. Be mindful of\nwhat is swept under the rug What is succinct at the high level could be very\nhard to implement and get right at the low level. Paxos seems simple , bu\n\nRead more >>\n\nPowered by Blogger\n\nTheme images by Michael Elkan\n\nMurat Demirbas\n\nMurat\n\n    \n\nI am a principal research scientist at MongoDB Research. Ex-AWS. On leave as a\ncomputer science and engineering professor at SUNY Buffalo. I work on\ndistributed systems, distributed consensus, and cloud computing. You can\nfollow me on Mastodon or Twitter.\n\nVisit profile\n\n### Pageviews\n\n0| 38  \n---|---  \n1| 46  \n2| 56  \n3| 50  \n4| 45  \n5| 40  \n6| 52  \n7| 65  \n8| 77  \n9| 84  \n10| 96  \n11| 63  \n12| 100  \n13| 57  \n14| 56  \n15| 60  \n16| 66  \n17| 90  \n18| 73  \n19| 77  \n20| 76  \n21| 65  \n22| 88  \n23| 85  \n24| 51  \n25| 49  \n26| 52  \n27| 44  \n28| 39  \n29| 14  \n  \n4085003\n\nDiese Website verwendet Cookies von Google, um Dienste anzubieten und Zugriffe\nzu analysieren. Deine IP-Adresse und dein User-Agent werden zusammen mit\nMesswerten zur Leistung und Sicherheit f\u00fcr Google freigegeben. So k\u00f6nnen\nNutzungsstatistiken generiert, Missbrauchsf\u00e4lle erkannt und behoben und die\nQualit\u00e4t des Dienstes gew\u00e4hrleistet werden.Weitere InformationenOk\n\n", "frontpage": false}
